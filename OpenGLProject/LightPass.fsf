#version 440 core
out vec4 FragColor;
  
in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;
uniform sampler2D gWorldPosition;

#define MAX_NUM_DIR_LIGHTS 4

vec3 FragPos;

struct Material{
	sampler2D texture_diffuse0;
	sampler2D texture_specular0;
	float shiness;
};

uniform sampler2D shadowMap[MAX_NUM_DIR_LIGHTS];
uniform usampler2D smStencil[MAX_NUM_DIR_LIGHTS];

struct DirLight {			// base alignment | ofsset | aligned offset
	vec3 direction;			// 16	|	0	|	0
	float ambientStrength;	// 4	|	12	|	12
	vec3 color;				// 16	|	16	|	16
	float intensity;		// 4	|	28	|	28
	uint smStencilRef;		// 4	|	32	|	32
	uint smIndex;			// 4	|   36	|	36
	mat4 lightSpaceMatrix;	// [0]16|	40	|	48
							// [1]16|	64	|	64
							// [2]16|	80	|	80
							// [3]16|	96	|	96
	vec4 lsPortalEq;		// 16	|	112	|	112
}; // total size - 128 bytes

layout (std140) uniform  DirLights {
	DirLight dirLights[MAX_NUM_DIR_LIGHTS]; // 128	| 0		| 0
	uint numDirLights;						// 4	| 512	| 512
}; // total size - 528(because the uint is padded to 16 bytes when at the end)

struct PointLight{
	vec3 position;
	
	float ambientStrength;
	vec3 color;
	float intensity;

	float constant;
	float linear;
	float quadratic;
};

struct SpotLight{
	vec3 position;

	float ambientStrength;
	vec3 color;
	float intensity;

	vec3 direction;
	float cutoff;
	float outerCutoff;
};

uniform Material material;
uniform PointLight pointLight = { {0.0f, 2.0f, 0.0f}, 0.1f, {1.0f, 1.0f, 1.0f}, 1.0f, 1.0f, 0.09f, 0.032f};
uniform SpotLight spotLight = {{0.0f, 0.0f, 0.0f}, 0.1f, {1.0f, 1.0f, 1.0f}, 1.0f, {0.0f, 0.0f, 1.0f}, 0.15, 0.23f };


vec3 GetBaseColor(){
	return texture(gAlbedoSpec, TexCoords).rgb;
}

vec3 GetSpecularColor(){
	float a = texture(gAlbedoSpec, TexCoords).a;
	return vec3(a, a, a);
}

// TODO: write more flexible functions for calculating shadows and light
// for portals: only the outside light should give ambience, etc

float CalculateDirShadow(DirLight light, vec4 fragPosLightSpace, vec3 normal, vec3 lightDir) {
	
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5f + 0.5f;
	float closestDepth = texture(shadowMap[light.smIndex], projCoords.xy).r;
	float bias = max(0.005 * (1.0 - dot(normal, lightDir)), 0.0005);
	float currentDepth = projCoords.z;
	float shadow = currentDepth > closestDepth + bias  ? 1.0 : 0.0; 
	shadow = (projCoords.z > 1.0f) ? 0.0f : shadow;
	if (projCoords.z > 1.0f)
		shadow = 0.0f;

	uint stencil = texture(smStencil[light.smIndex], projCoords.xy).r;
	vec4 pos = light.lightSpaceMatrix * vec4(-2.79703f, 0.170776f, -0.793854f, 1.0f);
	//shadow = stencil == light.smStencilRef ? 
	//		(dot(light.lsPortalEq, fragPosLightSpace) >= 0.0 ? shadow : 1.0) 
	//		: 1.0;
	// same as the commented out above code but branchless
	float isInShadow = float(stencil == light.smStencilRef  &&  (dot(light.lsPortalEq, fragPosLightSpace)) >= 0.0);
	shadow = shadow * isInShadow + 1.0 - isInShadow;

	return shadow;
}

vec3 CalculateDirLight(DirLight light, vec3 normal, vec3 viewDir, vec4 lightSpacePos){
	vec3 baseColor = GetBaseColor();
	vec3 lightDir = normalize(-light.direction);
	// ambient shading
	vec3 ambient = baseColor * light.ambientStrength;
	// diffuse shading
	vec3 diffuse = max(dot(normal, lightDir), 0.0f) * baseColor;
	// specular shading
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 specular = pow(max(dot(viewDir, reflectDir), 0.0f), material.shiness) * GetSpecularColor();
	// shadows
	float shadow = CalculateDirShadow(light, lightSpacePos, normal, lightDir);
	
	vec3 lightCol = light.color * light.intensity;
	return (ambient + (1.0 - shadow) *(diffuse + specular)) * lightCol;
}

vec3 CalculatePointLight(PointLight light, vec3 normal, vec3 viewDir){
	vec3 baseColor = GetBaseColor();

	// attenuation
	float distance = length(light.position - FragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * distance * distance);
	// ambient shading
	vec3 ambient = baseColor * light.ambientStrength;
	// diffuse shading
	vec3 lightDir = normalize(light.position - FragPos);
	vec3 diffuse = max(dot(normal, lightDir), 0.0f) * baseColor;
	// spucular shading
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 specular = pow(max(dot(viewDir, reflectDir), 0.0f), material.shiness) * GetSpecularColor();
	
	vec3 lightCol = light.color * light.intensity;
	return (ambient + diffuse + specular) * lightCol * attenuation;
}

vec3 CalculateSpotLight(SpotLight light, vec3 normal, vec3 viewDir){
	vec3 baseColor = GetBaseColor();

	vec3 lightDir = normalize(FragPos -light.position);
	vec3 spotDir = normalize(light.direction);
	float theta = dot(spotDir, lightDir);

	float phi = cos(light.cutoff);
	float gamma = cos(light.outerCutoff);
	
	vec3 ambient = vec3(0.0f, 0.0f, 0.0f);
	vec3 diffuse = vec3(0.0f, 0.0f, 0.0f);
	vec3 specular = vec3(0.0f, 0.0f, 0.0f);

	float alpha = clamp((theta - gamma)/(phi - gamma), 0.0f, 1.0f);


	ambient = baseColor * light.ambientStrength;
	diffuse = max(dot(normal, -lightDir), 0.0f) * baseColor;
	vec3 reflectDir = reflect(lightDir, normal);
	specular = pow(max(dot(viewDir, reflectDir), 0.0f), material.shiness) * GetSpecularColor();
	

	vec3 lightColor = light.color * light.intensity;
	return (ambient + diffuse + specular) * lightColor * alpha ;
}

void main()
{             
    // retrieve data from G-buffer
    FragPos = texture(gPosition, TexCoords).rgb;
    vec3 normal = texture(gNormal, TexCoords).rgb;
	vec4 worldPos = vec4(texture(gWorldPosition, TexCoords).rgb, 1.0);
    
    // then calculate lighting as usual
	vec3 viewDir = normalize(-FragPos);
    vec3 res = //CalculateSpotLight(spotLight, normal, viewDir)
			CalculatePointLight(pointLight, normal, viewDir)
			//vec3(0.0, 0.0, 0.0)
			;

	for (int i = 0; i < numDirLights; ++i)
	{
		res += CalculateDirLight(dirLights[i], normal, viewDir, dirLights[i].lightSpaceMatrix * worldPos);
	}	
	
    FragColor = vec4(res, 1.0f);
    //FragColor = vec4(normal * 0.5 + 0.5, 1.0f);

    
}  