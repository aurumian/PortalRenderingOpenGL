#version 440 core
layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec4 gAlbedoSpec;
layout (location = 3) out vec3 gWorldPosition;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 texCoord;
    vec3 worldPos;
} fs_in;

struct Material{
	sampler2D texture_diffuse0;
	sampler2D texture_specular0;
	float shiness;
};

uniform Material material;

void main()
{    
    // store the fragment position vector in the first gbuffer texture
    gPosition = fs_in.FragPos;
    // also store the per-fragment normals into the gbuffer
    gNormal = normalize(fs_in.Normal);
    // and the diffuse per-fragment color
    gAlbedoSpec.rgb = texture(material.texture_diffuse0, fs_in.texCoord).rgb;
    // store specular intensity in gAlbedoSpec's alpha component
    gAlbedoSpec.a = texture(material.texture_specular0, fs_in.texCoord).r;
    //
    gWorldPosition = fs_in.worldPos;
} 