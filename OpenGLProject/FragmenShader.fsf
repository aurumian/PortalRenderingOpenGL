#version 330 core

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shiness;
};

struct DirLight{
	vec3 direction;

	float ambientStrength;
	vec3 color;
	float intensity;
};

struct PointLight{
	vec3 position;
	
	float ambientStrength;
	vec3 color;
	float intensity;

	float constant;
	float linear;
	float quadratic;
};

struct SpotLight{
	vec3 position;

	float ambientStrength;
	vec3 color;
	float intensity;

	vec3 direction;
	float cutoff;
	float outerCutoff;
};

in vec3 Normal;
in vec3 FragPos;
in vec2 texCoord;

uniform Material material;
uniform DirLight dirLight = {{0.0f, -1.0f, 0.0f}, 0.1f, {1.0f, 1.0f, 1.0f}, 1.0f};
uniform PointLight pointLight = { {0.0f, 2.0f, 0.0f}, 0.1f, {1.0f, 1.0f, 1.0f}, 1.0f, 1.0f, 0.09f, 0.032f};
uniform SpotLight spotLight = {{0.0f, 0.0f, 0.0f}, 0.1f, {1.0f, 1.0f, 1.0f}, 1.0f, {0.0f, 0.0f, 1.0f}, 0.15, 0.23f };

out vec4 FragColor;

vec3 CalculateDirLight(DirLight light, vec3 normal, vec3 viewDir){
	vec3 baseColor = texture(material.diffuse, texCoord).xyz;
	vec3 lightDir = normalize(-light.direction);
	// ambient shading
	vec3 ambient = baseColor * light.ambientStrength;
	// diffuse shading
	vec3 diffuse = max(dot(normal, lightDir), 0.0f) * baseColor;
	// specular shading
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 specular = pow(max(dot(viewDir, reflectDir), 0.0f), material.shiness) * texture(material.specular, texCoord).xyz;
	
	vec3 lightColor = light.color * light.intensity;
	return (ambient + diffuse + specular) * lightColor;
}

vec3 CalculatePointLight(PointLight light, vec3 normal, vec3 viewDir){
	vec3 baseColor = texture(material.diffuse, texCoord).xyz;

	// attenuation
	float distance = length(light.position - FragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * distance * distance);
	// ambient shading
	vec3 ambient = baseColor * light.ambientStrength;
	// diffuse shading
	vec3 lightDir = normalize(light.position - FragPos);
	vec3 diffuse = max(dot(normal, lightDir), 0.0f) * baseColor;
	// spucular shading
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 specular = pow(max(dot(viewDir, reflectDir), 0.0f), material.shiness) * texture(material.specular, texCoord).xyz;
	
	vec3 lightColor = light.color * light.intensity;
	return (ambient + diffuse + specular) * lightColor * attenuation;
}

vec3 CalculateSpotLight(SpotLight light, vec3 normal, vec3 viewDir){
	vec3 baseColor = texture(material.diffuse, texCoord).xyz;

	vec3 lightDir = normalize(FragPos -light.position);
	vec3 spotDir = normalize(light.direction);
	float theta = dot(spotDir, lightDir);

	float phi = cos(light.cutoff);
	float gamma = cos(light.outerCutoff);
	
	vec3 ambient = vec3(0.0f, 0.0f, 0.0f);
	vec3 diffuse = vec3(0.0f, 0.0f, 0.0f);
	vec3 specular = vec3(0.0f, 0.0f, 0.0f);

	float alpha = clamp((theta - gamma)/(phi - gamma), 0.0f, 1.0f);


	ambient = baseColor * light.ambientStrength;
	diffuse = max(dot(normal, -lightDir), 0.0f) * baseColor;
	vec3 reflectDir = reflect(lightDir, normal);
	specular = pow(max(dot(viewDir, reflectDir), 0.0f), material.shiness) * texture(material.specular, texCoord).xyz;
	

	vec3 lightColor = light.color * light.intensity;
	return (ambient + diffuse + specular) * lightColor * alpha ;
}

void main() {
	vec3 normal = normalize(Normal);

	vec3 viewDir = normalize(-FragPos);

	vec3 res = CalculateSpotLight(spotLight, normal, viewDir)
			 + CalculatePointLight(pointLight, normal, viewDir)
			 + CalculateDirLight(dirLight, normal, viewDir)
			 ;
	
    FragColor = vec4(res, 1.0f);
}
