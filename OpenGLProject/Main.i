#line 1 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"


#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\string"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\istream"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ios"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\climits"

#pragma once




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

#pragma once




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"

#pragma once










































































































































































































 
  

#line 209 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
   
  #line 211 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 





#line 218 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 219 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xkeycheck.h"

#pragma once






 
















































































#line 91 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xkeycheck.h"

  
























































































#line 262 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xkeycheck.h"
 #line 263 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xkeycheck.h"

#line 265 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xkeycheck.h"

#line 267 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xkeycheck.h"
#line 268 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xkeycheck.h"





#line 221 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"








#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"







#pragma once


















    
#line 29 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"






    
    

#line 39 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
        
            
        

#line 44 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
    #line 45 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 46 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"













#pragma once







































































































































#line 151 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"



#line 155 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"





























#line 185 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"


#line 188 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"

#line 190 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"





#line 196 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"



#line 200 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"






#line 207 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"











#line 219 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"








#line 228 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"
#line 229 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"






























#line 1586 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"
























#line 1611 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"












#line 1624 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"






































#line 1663 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"















































































































#line 1775 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"






































































































#line 1878 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"








































































































































































#line 2047 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"





































































































#line 2149 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"



















































































































































































































#line 2361 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"
extern "C" {




#line 2367 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"



































































































































































































































#line 2595 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"









































































































































































































































#line 2868 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"









#line 2878 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"


    
    
#line 2883 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"






#line 2890 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"
#line 2891 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"






#line 2898 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"
#line 2899 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"











#line 2911 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"

































#line 2945 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"






















}
#line 2969 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\concurrencysal.h"


















#pragma once


extern "C" {
#line 24 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\concurrencysal.h"
















































































































































































































































#line 265 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\concurrencysal.h"



#line 269 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\concurrencysal.h"


















































































#line 352 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\concurrencysal.h"


}
#line 356 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\concurrencysal.h"

#line 358 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\concurrencysal.h"
#line 2971 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sal.h"

#line 48 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)


extern "C" {
#line 20 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"



#line 24 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"


    
    


        typedef unsigned int uintptr_t;
    #line 32 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"
#line 33 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 41 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"
#line 42 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"


    


#line 48 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"





#line 54 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"



#line 58 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"
    
    
#line 61 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"











#line 73 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"

    

    
    
    










































#line 122 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"


} 
#line 126 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"


    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_assert_va_start_is_not_reference
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value,
                "va_start argument must not have reference type and must not be parenthesized");
        };
    } 

    





#line 163 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vadefs.h"

#pragma pack(pop)
#line 49 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"






    



    





















#line 82 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {




    


        
    #line 93 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 94 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
















    

#line 113 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"

#line 115 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
        
    #line 117 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 118 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"


    

#line 123 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
        
    #line 125 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 126 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"





#line 132 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
    
    
#line 135 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"




    
#line 141 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"








    


#line 153 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"



#line 157 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
    
#line 159 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"




    
#line 165 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"


    
        
        
    

#line 173 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 174 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"










    typedef unsigned int     size_t;
    typedef int              ptrdiff_t;
    typedef int              intptr_t;
#line 188 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"


    typedef bool  __vcrt_bool;






#line 198 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"



    
#line 203 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"


    
#line 207 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"


    
#line 211 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"








    
        
    

#line 224 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 225 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"



#line 229 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
    
#line 231 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"


    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }


#line 243 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"






#line 250 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"


    


        




    #line 261 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 262 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"



#line 266 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"


    
        
    


#line 274 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 275 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"


    void __cdecl __security_init_cookie(void);

    
        void __fastcall __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(void);
    


#line 286 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 287 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 295 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"

} __pragma(pack(pop))

#line 299 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime.h"
#line 10 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"







#pragma once



__pragma(pack(push, 8)) extern "C" {









    

#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
        
    

#line 29 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"




    
#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    

#line 41 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
        
    

#line 45 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 46 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 50 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
    
#line 52 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    


#line 58 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"





#line 64 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
    
#line 66 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



    


#line 73 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 77 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
    
#line 79 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"













    


        
    #line 97 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 98 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 102 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
    
#line 104 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 108 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
    
#line 110 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 114 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
    
#line 116 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"









extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}
#line 137 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    typedef bool  __crt_bool;






#line 147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"










    
#line 159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



















    

#line 181 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
        
    #line 183 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 184 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 188 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    
#line 192 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"









    











        
    #line 215 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    
#line 220 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    
        
    

#line 227 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 228 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
















    __declspec(dllimport) void __cdecl _invalid_parameter(
          wchar_t const*,
          wchar_t const*,
          wchar_t const*,
                unsigned int,
                uintptr_t
        );
#line 252 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"

__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
      wchar_t const* _Expression,
      wchar_t const* _FunctionName,
      wchar_t const* _FileName,
            unsigned int _LineNo,
            uintptr_t _Reserved);


    
        

    













#line 283 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 284 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
















#line 301 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    


        


    #line 310 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 311 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"









    






        
    #line 329 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 330 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    


        
    #line 337 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 338 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 342 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"













#line 356 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"















#line 372 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"





    
#line 379 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 383 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    

#line 388 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 389 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    


        


            
        #line 399 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
    #line 400 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 401 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 405 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"





#line 411 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    


        



    #line 421 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 422 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    
        
    



#line 431 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 441 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"

    
        
              
        

#line 448 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
    



#line 453 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"

    
        
    



#line 461 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"

    
        
    



#line 469 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 470 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    
#line 474 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 514 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



#line 518 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 525 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 526 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



    
#line 531 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 535 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"










    

        










        










        










        










        










        










        










        










        










        















        















        
















    














#line 711 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 712 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"












































































    





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1787 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"

        
        
        
        

        

            


            


            


            


            


            


            


            


            



            



            


            


            


            


            


            


            


            


            


            


            



            



            



            


            



            




            

            




            

            




            

            




            

            




            

            




            

            




            

            




            

        











































#line 1977 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
    #line 1978 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"
#line 1979 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt.h"



} __pragma(pack(pop))
#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"









    

#line 23 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
        
    #line 25 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
#line 26 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"



    

#line 32 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
        
    #line 34 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
#line 35 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"



    

#line 41 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
        
    #line 43 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
#line 44 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"


    

#line 49 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
        
            
        

#line 54 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
    #line 55 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
#line 56 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"


    

#line 61 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"

#line 63 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
        
    #line 65 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
#line 66 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\crtdefs.h"
#line 222 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 

#line 227 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
  
 #line 229 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 230 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



#line 234 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



#line 238 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"




 


#line 246 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 
#line 250 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"










 
#line 262 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"





 





  
 #line 275 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 276 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 


  
 #line 283 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 284 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"






 





#line 297 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
  

#line 300 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 

#line 303 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 304 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 
 



#line 312 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 
#line 316 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



#line 320 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"




#line 325 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 327 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"




#line 332 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 334 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 339 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 344 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 349 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 354 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 359 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 364 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"






 
#line 372 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 377 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 


  


 #line 386 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 387 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 392 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 


  


 #line 401 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 402 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 407 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 


  



 #line 417 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 418 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 423 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"









 
#line 434 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"




#line 439 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
 
#line 442 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



 
#line 447 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



#line 451 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 453 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"




 


  
 #line 462 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 463 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"











#line 476 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 478 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"






#line 486 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 488 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"








#line 498 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 500 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"








#line 510 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 512 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"








#line 522 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 524 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"







#line 533 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 535 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"








#line 545 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 547 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"








#line 557 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 559 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"







#line 568 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 570 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"







#line 579 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 581 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"








#line 591 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 593 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"











#line 606 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 608 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"







#line 617 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 619 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"












#line 633 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 635 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"




 








#line 649 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"




 







#line 662 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
  
 #line 664 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 665 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 


  
 #line 672 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 673 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"


 


  
 #line 680 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 681 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"












































































#line 758 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
 
#line 760 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



#line 764 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



#line 768 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"



#line 772 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"














 


  
 #line 791 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 792 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"





		












 

 
 





#line 820 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"

#line 822 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"
#line 823 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals_core.h"





#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"







#pragma once




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new_debug.h"







#pragma once

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new.h"







#pragma once




extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985) 


























#line 46 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new.h"



    namespace std
    {
        struct nothrow_t {

            explicit nothrow_t() = default;
#line 55 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new.h"
        };

        


            extern nothrow_t const nothrow;
        #line 62 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new.h"
    }
#line 64 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new.h"

   
__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new(
    size_t _Size,
    std::nothrow_t const&
    ) noexcept;

   
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void* _Block
    ) noexcept;

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete[](
    void* _Block
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) noexcept;






























































#line 177 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new.h"

#pragma warning(push)
#pragma warning(disable: 4577) 
#pragma warning(disable: 4514) 

    
         
    inline void* __cdecl operator new(size_t _Size,   void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) noexcept
    {
        return;
    }
#line 195 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new.h"


    
         
    inline void* __cdecl operator new[](size_t _Size,
          void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) noexcept
    {
    }
#line 210 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new.h"
#pragma warning(pop)



#pragma warning(pop)
#pragma pack(pop)

} 
#line 219 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new.h"
#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new_debug.h"


extern "C++" {

#pragma pack(push, 8)






         
    __declspec(allocator) void* __cdecl operator new(
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

         
    __declspec(allocator) void* __cdecl operator new[](
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    void __cdecl operator delete(
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

    void __cdecl operator delete[](
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

#line 53 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new_debug.h"



#pragma pack(pop)

} 
#line 60 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_new_debug.h"
#line 14 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"

__pragma(pack(push, 8)) extern "C" {



typedef void* _HFILE; 

























typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*,    int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);























































typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;


























    

        __declspec(dllimport) int*  __cdecl __p__crtDbgFlag(void);
        __declspec(dllimport) long* __cdecl __p__crtBreakAlloc(void);

        
        

        __declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook(void);

        __declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(
              _CRT_ALLOC_HOOK _PfnNewHook
            );

        __declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient(void);

        __declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(
              _CRT_DUMP_CLIENT _PFnNewDump
            );

    #line 171 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"

    __declspec(dllimport) int __cdecl _CrtCheckMemory(void);

    typedef void (__cdecl* _CrtDoForAllClientObjectsCallback)(void*, void*);

    __declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(
          _CrtDoForAllClientObjectsCallback _Callback,
          void*                             _Context
        );

    __declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(void);

    __declspec(dllimport) int __cdecl _CrtIsMemoryBlock(
           void const*  _Block,
               unsigned int _Size,
          long*        _RequestNumber,
          char**       _FileName,
          int*         _LineNumber
        );

     
    __declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(
          void const* _Pointer
        );

     
    __declspec(dllimport) int __cdecl _CrtIsValidPointer(
          void const*  _Pointer,
              unsigned int _Size,
              int          _ReadWrite
        );

    __declspec(dllimport) void __cdecl _CrtMemCheckpoint(
          _CrtMemState* _State
        );

    __declspec(dllimport) int __cdecl _CrtMemDifference(
          _CrtMemState*       _State,
           _CrtMemState const* _OldState,
           _CrtMemState const* _NewState
        );

    __declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(
          _CrtMemState const* _State
        );

    __declspec(dllimport) void __cdecl _CrtMemDumpStatistics(
          _CrtMemState const* _State
        );

     
    __declspec(dllimport) int __cdecl _CrtReportBlockType(
          void const* _Block
        );

    __declspec(dllimport) long __cdecl _CrtSetBreakAlloc(
          long _NewValue
        );

    __declspec(dllimport) int __cdecl _CrtSetDbgFlag(
          int _NewFlag
        );

#line 235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"
















































    












































    __declspec(dllimport) void __cdecl _aligned_free_dbg(
            void* _Block
        );

         
    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_malloc_dbg(
                size_t      _Size,
                size_t      _Alignment,
          char const* _FileName,
                int         _LineNumber
        );

    __declspec(dllimport) size_t __cdecl _aligned_msize_dbg(
          void*  _Block,
                   size_t _Alignment,
                   size_t _Offset
        );

         
    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_malloc_dbg(
                size_t      _Size,
                size_t      _Alignment,
                size_t      _Offset,
          char const* _FileName,
                int         _LineNumber
        );

           
    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_realloc_dbg(
            void*       _Block,
                                    size_t      _Size,
                                    size_t      _Alignment,
                                    size_t      _Offset,
                              char const* _FileName,
                                    int         _LineNumber
        );

           
    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_recalloc_dbg(
            void*       _Block,
                                    size_t      _Count,
                                    size_t      _Size,
                                    size_t      _Alignment,
                                    size_t      _Offset,
                              char const* _FileName,
                                    int         _LineNumber
        );

           
    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_realloc_dbg(
            void*       _Block,
                                    size_t      _Size,
                                    size_t      _Alignment,
                              char const* _FileName,
                                    int         _LineNumber
        );

           
    __declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_recalloc_dbg(
            void*       _Block,
                                    size_t      _Count,
                                    size_t      _Size,
                                    size_t      _Alignment,
                              char const* _FileName,
                                    int         _LineNumber
        );

         
    __declspec(dllimport) __declspec(allocator) void* __cdecl _calloc_dbg(
                size_t      _Count,
                size_t      _Size,
                int         _BlockUse,
          char const* _FileName,
                int         _LineNumber
        );

         
    __declspec(dllimport) __declspec(allocator) void* __cdecl _expand_dbg(
          void*       _Block,
                   size_t      _Size,
                   int         _BlockUse,
             char const* _FileName,
                   int         _LineNumber
        );

    __declspec(dllimport) void __cdecl _free_dbg(
            void* _Block,
                                    int   _BlockUse
        );

         
    __declspec(dllimport) __declspec(allocator) void* __cdecl _malloc_dbg(
                size_t      _Size,
                int         _BlockUse,
          char const* _FileName,
                int         _LineNumber
        );

    __declspec(dllimport) size_t __cdecl _msize_dbg(
          void* _Block,
                   int   _BlockUse
        );

           
    __declspec(dllimport) __declspec(allocator) void* __cdecl _realloc_dbg(
            void*       _Block,
                                    size_t      _Size,
                                    int         _BlockUse,
                              char const* _FileName,
                                    int         _LineNumber
        );

           
    __declspec(dllimport) __declspec(allocator) void* __cdecl _recalloc_dbg(
            void*       _Block,
                                    size_t      _Count,
                                    size_t      _Size,
                                    int         _BlockUse,
                              char const* _FileName,
                                    int         _LineNumber
        );

     
    
    __declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(
          char** _PBuffer,
                               size_t*     _PBufferSizeInBytes,
                                  char const* _VarName,
                                    int          _BlockType,
                              char const* _FileName,
                                    int          _LineNumber
        );

     
       
    __declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath_dbg(
          char*       _FullPath,
                                    char const* _Path,
                                      size_t      _SizeInBytes,
                                      int         _BlockType,
                                char const* _FileName,
                                      int         _LineNumber
        );

     
       
    __declspec(dllimport) __declspec(allocator) char* __cdecl _getcwd_dbg(
          char*       _DstBuf,
                                      int         _SizeInBytes,
                                      int         _BlockType,
                                char const* _FileName,
                                      int         _LineNumber
        );


     
       
    __declspec(dllimport) __declspec(allocator) char* __cdecl _getdcwd_dbg(
                                      int         _Drive,
          char*       _DstBuf,
                                      int         _SizeInBytes,
                                      int         _BlockType,
                                char const* _FileName,
                                      int         _LineNumber
        );

       
    __declspec(dllimport) __declspec(allocator) char* __cdecl _strdup_dbg(
          char const* _String,
                int         _BlockUse,
          char const* _FileName,
                int         _LineNumber
        );

       
    __declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam_dbg(
          char const* _DirName,
          char const* _FilePrefix,
                int         _BlockType,
          char const* _FileName,
                int         _LineNumber
        );

     
       
    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup_dbg(
          wchar_t const* _String,
                int            _BlockUse,
          char const*    _FileName,
                int            _LineNumber
        );

     
    
    __declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(
          wchar_t** _PBuffer,
                                 size_t*         _PBufferSizeInWords,
                                    wchar_t const* _VarName,
                                      int             _BlockType,
                                char const*    _FileName,
                                      int             _LineNumber
        );

     
       
    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath_dbg(
          wchar_t*       _FullPath,
                                    wchar_t const* _Path,
                                      size_t         _SizeInWords,
                                      int            _BlockType,
                                char const*    _FileName,
                                      int            _LineNumber
        );

     
       
    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd_dbg(
          wchar_t*    _DstBuf,
                                      int         _SizeInWords,
                                      int         _BlockType,
                                char const* _FileName,
                                      int         _LineNumber
        );

     
       
    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd_dbg(
                                      int         _Drive,
          wchar_t*    _DstBuf,
                                      int         _SizeInWords,
                                      int         _BlockType,
                                char const* _FileName,
                                      int         _LineNumber
        );

       
    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam_dbg(
          wchar_t const* _DirName,
          wchar_t const* _FilePrefix,
                int            _BlockType,
          char const*    _FileName,
                int            _LineNumber
        );

    
    

    







#line 584 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"

#line 586 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"





















    __declspec(dllimport) int __cdecl _CrtDbgReport(
                int         _ReportType,
          char const* _FileName,
                int         _Linenumber,
          char const* _ModuleName,
          char const* _Format,
        ...);

    __declspec(dllimport) int __cdecl _CrtDbgReportW(
                int            _ReportType,
          wchar_t const* _FileName,
                int            _LineNumber,
          wchar_t const* _ModuleName,
          wchar_t const* _Format,
        ...);


    __declspec(dllimport) int __cdecl _VCrtDbgReportA(
                int         _ReportType,
            void*       _ReturnAddress,
          char const* _FileName,
                int         _LineNumber,
          char const* _ModuleName,
          char const* _Format,
                   va_list     _ArgList
        );

    __declspec(dllimport) int __cdecl _VCrtDbgReportW(
                int            _ReportType,
            void*          _ReturnAddress,
          wchar_t const* _FileName,
                int            _LineNumber,
          wchar_t const* _ModuleName,
          wchar_t const* _Format,
                   va_list        _ArgList
        );

    __declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(
          size_t _NewDebugFillThreshold
        );

    __declspec(dllimport) size_t __cdecl _CrtGetDebugFillThreshold(void);

    __declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(
              int    _ReportType,
          _HFILE _ReportFile
        );

    __declspec(dllimport) int __cdecl _CrtSetReportMode(
          int _ReportType,
          int _ReportMode
        );

    

        extern long _crtAssertBusy;

        __declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(void);

        
        
        
        __declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(
              _CRT_REPORT_HOOK _PFnNewHook
            );

        __declspec(dllimport) int __cdecl _CrtSetReportHook2(
                  int              _Mode,
              _CRT_REPORT_HOOK _PFnNewHook
            );

        __declspec(dllimport) int __cdecl _CrtSetReportHookW2(
                  int               _Mode,
              _CRT_REPORT_HOOKW _PFnNewHook
            );

    #line 684 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"

#line 686 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"







































    

    
    
    
        





    #line 737 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"

    
        
    #line 741 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"

    
        
    #line 745 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"

    



    



    
    

    
    

    
    

    
    

#line 767 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"













    
#line 782 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"



























} __pragma(pack(pop))
#line 811 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\crtdbg.h"
#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )














#line 28 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

#line 30 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

		

	







		
		
			
		

#line 47 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
	#line 48 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
#line 49 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"










































	
	






		
			
		

#line 104 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
	#line 105 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

	
	




		
			
		

#line 117 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
	#line 118 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

	
	
		
	



#line 127 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

#line 129 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"


	
		#pragma detect_mismatch("_MSC_VER", "1900")
	#line 134 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

	
		#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
	#line 138 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

	
		

#line 143 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

#line 145 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

#line 147 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
			#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
		#line 149 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
	#line 150 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
#line 151 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"








	

#line 162 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
		
	#line 164 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
#line 165 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

























 


#line 194 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"




 
#line 200 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\use_ansi.h"













#pragma once








#line 24 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\use_ansi.h"











    
    



#line 41 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\use_ansi.h"


    






#line 51 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\use_ansi.h"



    
#line 56 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\use_ansi.h"

#pragma comment(lib, "msvcprt" "d" "")






#line 65 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\use_ansi.h"

#line 67 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\use_ansi.h"

#line 69 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\use_ansi.h"
#line 202 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"




















#line 223 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

 
  

#line 228 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
   
  #line 230 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
 #line 231 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

 
  

#line 236 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
   
  #line 238 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
 #line 239 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"


 
  





#line 249 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
   
  #line 251 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
 #line 252 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

 
  
 #line 256 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

 
  

#line 261 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
   


     
   #line 266 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
  #line 267 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
 #line 268 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

 








 

#line 281 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
  
   
  

#line 286 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
 #line 287 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
#line 288 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"


 

#line 293 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
  


   
  #line 298 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
 #line 299 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
#line 300 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"


 

#line 305 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
  
 #line 307 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
#line 308 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"


 


  
 #line 315 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
#line 316 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

		





		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		
class __declspec(dllimport) _Lockit
	{	
public:
 
















#line 360 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit() noexcept;	
 #line 364 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

	static  void __cdecl _Lockit_ctor(int);
	static  void __cdecl _Lockit_dtor(int);

private:
	static  void __cdecl _Lockit_ctor(_Lockit *);
	static  void __cdecl _Lockit_ctor(_Lockit *, int);
	static  void __cdecl _Lockit_dtor(_Lockit *);

public:
	 _Lockit(const _Lockit&) = delete;
	_Lockit&  operator=(const _Lockit&) = delete;

private:
	int _Locktype;
	};

 


































































  



  


  



  


  
 #line 464 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

class __declspec(dllimport) _Init_locks
	{	
public:
 










#line 480 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
	__thiscall _Init_locks();
	__thiscall ~_Init_locks() noexcept;
 #line 483 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"

private:
	static  void __cdecl _Init_locks_ctor(_Init_locks *);
	static  void __cdecl _Init_locks_dtor(_Init_locks *);
	};

		

 
 
 
 

 
 

 





#line 506 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
  
 #line 508 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"















#line 524 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
}
 #line 526 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"





 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 536 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"
#line 537 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\yvals.h"





#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\climits"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {









    
    



#line 29 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits.h"









































#line 71 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits.h"


    


        
    #line 78 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits.h"
#line 79 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits.h"


    
        
    #line 84 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits.h"
#line 85 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits.h"



} __pragma(pack(pop))
#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\climits"

#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\climits"
#line 12 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\climits"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cmath"

#pragma once





#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdlib"

#pragma once





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"







#pragma once




#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_malloc.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {





































#line 52 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_malloc.h"

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
__declspec(dllimport)  __declspec(allocator) __declspec(restrict) 
void* __cdecl calloc(
      __declspec(guard(overflow)) size_t _Count,
      __declspec(guard(overflow)) size_t _Size
    );

 
__declspec(dllimport) int __cdecl _callnewh(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator) 
void* __cdecl _expand(
                void*  _Block,
      __declspec(guard(overflow)) size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
        void* _Block
    );

__declspec(dllimport) 
void __cdecl free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator)  __declspec(restrict) 
void* __cdecl malloc(
      __declspec(guard(overflow)) size_t _Size
    );

 
__declspec(dllimport)
size_t __cdecl _msize_base(
      void* _Block
    );

 
__declspec(dllimport) 
size_t __cdecl _msize(
      void* _Block
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict) 
void* __cdecl realloc(
        void*  _Block,
      __declspec(guard(overflow))        size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
        void*  _Block,
                                size_t _Count,
                                size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
      __declspec(guard(overflow))        size_t _Count,
      __declspec(guard(overflow))        size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
      __declspec(guard(overflow)) size_t _Size,
                         size_t _Alignment
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
      __declspec(guard(overflow)) size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 
__declspec(dllimport)
size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
      __declspec(guard(overflow))        size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
      __declspec(guard(overflow))        size_t _Count,
      __declspec(guard(overflow))        size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
      __declspec(guard(overflow))        size_t _Size,
                                size_t _Alignment
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
      __declspec(guard(overflow))        size_t _Count,
      __declspec(guard(overflow))        size_t _Size,
                                size_t _Alignment
    );


















#line 225 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))
#line 14 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_search.h"










#pragma once


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stddef.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;
#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stddef.h"





    __declspec(dllimport) int* __cdecl _errno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

#line 38 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stddef.h"









#line 48 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stddef.h"
    
#line 50 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stddef.h"

__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))
#line 59 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stddef.h"
#line 15 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_search.h"

__pragma(pack(push, 8)) extern "C" {


    typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);




     
    __declspec(dllimport) void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
                            _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                    void*       _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                         void*   _Context
        );

#line 44 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_search.h"



 
__declspec(dllimport) void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

__declspec(dllimport) void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
__declspec(dllimport) void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                       void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
                          _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
__declspec(dllimport) void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
                                   _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                             void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
                                _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );




















































































#line 185 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_search.h"





      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
                              _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
                                   _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

#line 209 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))
#line 15 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {


































     
    
    __declspec(dllimport) errno_t __cdecl _itow_s(
                                  int      _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);
#line 70 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

     
    
    __declspec(dllimport) errno_t __cdecl _ltow_s(
                                  long     _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 86 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);
#line 93 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

    
    __declspec(dllimport) errno_t __cdecl _ultow_s(
                                  unsigned long _Value,
          wchar_t*      _Buffer,
                                  size_t        _BufferCount,
                                  int           _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 108 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);
#line 115 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

     
    __declspec(dllimport) double __cdecl wcstod(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
    __declspec(dllimport) double __cdecl _wcstod_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) long __cdecl wcstol(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) long __cdecl _wcstol_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) long long __cdecl wcstoll(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) long long __cdecl _wcstoll_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) unsigned long __cdecl wcstoul(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) unsigned long long __cdecl wcstoull(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) long double __cdecl wcstold(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
    __declspec(dllimport) long double __cdecl _wcstold_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) float __cdecl wcstof(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
    __declspec(dllimport) float __cdecl _wcstof_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) double __cdecl _wtof(
          wchar_t const* _String
        );

     
    __declspec(dllimport) double __cdecl _wtof_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
    __declspec(dllimport) int __cdecl _wtoi(
          wchar_t const* _String
        );

     
    __declspec(dllimport) int __cdecl _wtoi_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
    __declspec(dllimport) long __cdecl _wtol(
          wchar_t const* _String
        );

     
    __declspec(dllimport) long __cdecl _wtol_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
    __declspec(dllimport) long long __cdecl _wtoll(
          wchar_t const* _String
        );

     
    __declspec(dllimport) long long __cdecl _wtoll_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

    
    __declspec(dllimport) errno_t __cdecl _i64tow_s(
                                  __int64  _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _i64tow(
                            __int64  _Value,
            wchar_t* _Buffer,
                            int      _Radix
        );

    
    __declspec(dllimport) errno_t __cdecl _ui64tow_s(
                                  unsigned __int64 _Value,
          wchar_t*         _Buffer,
                                  size_t           _BufferCount,
                                  int              _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _ui64tow(
                            unsigned __int64 _Value,
            wchar_t*         _Buffer,
                            int              _Radix
        );

     
    __declspec(dllimport) __int64 __cdecl _wtoi64(
          wchar_t const* _String
        );

     
    __declspec(dllimport) __int64 __cdecl _wtoi64_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
    __declspec(dllimport) __int64 __cdecl _wcstoi64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

    
    

     
     
    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
          wchar_t*       _Buffer,
                                    wchar_t const* _Path,
                                      size_t         _BufferCount
        );

    

    
    __declspec(dllimport) errno_t __cdecl _wmakepath_s(
          wchar_t*       _Buffer,
                                  size_t         _BufferCount,
                            wchar_t const* _Drive,
                            wchar_t const* _Dir,
                            wchar_t const* _Filename,
                            wchar_t const* _Ext
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 361 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);
#line 373 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(pop)

    __declspec(dllimport) void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) void __cdecl _wsplitpath(
                            wchar_t const* _FullPath,
            wchar_t*       _Drive,
            wchar_t*       _Dir,
            wchar_t*       _Filename,
            wchar_t*       _Ext
        );

    __declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                      wchar_t const* _FullPath,
             wchar_t*       _Drive,
                                        size_t         _DriveCount,
               wchar_t*       _Dir,
                                        size_t         _DirCount,
          wchar_t*       _Filename,
                                        size_t         _FilenameCount,
               wchar_t*       _Ext,
                                        size_t         _ExtCount
        );

    extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 404 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

        
        

        
        __declspec(dllimport) errno_t __cdecl _wdupenv_s(
                wchar_t**      _Buffer,
                                                                                size_t*        _BufferCount,
                                                                                   wchar_t const* _VarName
            );

        

          __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        __declspec(dllimport) wchar_t* __cdecl _wgetenv(
              wchar_t const* _VarName
            );

         
        
        __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                         size_t*        _RequiredCount,
              wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                                        wchar_t const* _VarName
            );

        extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 438 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

         
        __declspec(dllimport) int __cdecl _wputenv(
              wchar_t const* _EnvString
            );

        
        __declspec(dllimport) errno_t __cdecl _wputenv_s(
              wchar_t const* _Name,
              wchar_t const* _Value
            );

        __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                    wchar_t const* _Filename,
                                    wchar_t const* _VarName,
              wchar_t*       _Buffer,
                                      size_t         _BufferCount
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 463 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

        __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);
#line 470 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"

        __declspec(dllimport) int __cdecl _wsystem(
              wchar_t const* _Command
            );

#line 476 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))
#line 16 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"


__pragma(pack(push, 8)) extern "C" {




    
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"









__declspec(dllimport) void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );













    __declspec(dllimport) __declspec(noreturn) void __cdecl exit(  int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl _exit(  int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(  int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(  int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);
#line 58 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"





__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    

    typedef int (__cdecl* _onexit_t)(void);
    


#line 78 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"


    
    
#line 83 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 143 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );

    
     _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

     _purecall_handler __cdecl _get_purecall_handler(void);

    
    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 186 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"












#line 199 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"









 __declspec(dllimport) int __cdecl _set_error_mode(  int _Mode);




    __declspec(dllimport) int* __cdecl _errno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

    __declspec(dllimport) unsigned long* __cdecl __doserrno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
    __declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);

    
    __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);
    

    __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int * __cdecl __sys_nerr(void);
    

    __declspec(dllimport) void __cdecl perror(  char const* _ErrMsg);
#line 234 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char**    __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int*      __cdecl __p__fmode  (void);








    
    
    
#line 253 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

 
__declspec(dllimport) errno_t __cdecl _get_pgmptr (  char**    _Value);

 
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode  (               int       _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

  __declspec(dllimport) div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
  __declspec(dllimport) ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
  __declspec(dllimport) lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning (push)
#pragma warning (disable:6540)

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning (pop)






__declspec(dllimport) void __cdecl srand(  unsigned int _Seed);

  __declspec(dllimport) int __cdecl rand(void);



#line 353 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 380 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"










    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    











#line 410 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                     __declspec(dllimport) double    __cdecl atof   (  char const* _String);
   __declspec(dllimport) int       __cdecl atoi   (  char const* _String);
                     __declspec(dllimport) long      __cdecl atol   (  char const* _String);
                     __declspec(dllimport) long long __cdecl atoll  (  char const* _String);
                     __declspec(dllimport) __int64   __cdecl _atoi64(  char const* _String);

  __declspec(dllimport) double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
  __declspec(dllimport) int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
  __declspec(dllimport) int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
__declspec(dllimport) int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
__declspec(dllimport) int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
__declspec(dllimport) float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

__declspec(dllimport) errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 636 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);
#line 646 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"
#pragma warning(pop)

 

__declspec(dllimport) errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 663 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);
#line 670 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 686 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);
#line 695 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"
#pragma warning(pop)

 

__declspec(dllimport) errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

__declspec(dllimport) errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 761 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

__declspec(dllimport) errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 790 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
__declspec(dllimport) errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 815 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    

#line 836 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"
        
    #line 838 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

    


        
    #line 844 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);
#line 851 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"



 
__declspec(dllimport) int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen_l(
        char const* _String,
      _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
__declspec(dllimport) int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 926 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);
#line 933 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 952 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 961 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"




__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );

#line 989 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh,
                              _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1014 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);
#line 1021 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1040 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 1049 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"




















 
 
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1097 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);
#line 1109 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"
#pragma warning(pop)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }




 
__declspec(dllimport) errno_t __cdecl getenv_s(
                                 size_t*     _RequiredCount,
      char*       _Buffer,
                                  rsize_t     _BufferCount,
                                char const* _VarName
    );

#line 1147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"




__declspec(dllimport) int*       __cdecl __p___argc (void);
__declspec(dllimport) char***    __cdecl __p___argv (void);
__declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);






    
    
    
#line 1164 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

__declspec(dllimport) char***    __cdecl __p__environ (void);
__declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);


    
#line 1171 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"







    
    
#line 1181 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"









      __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1201 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

    


#line 1206 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

    
    __declspec(dllimport) errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    

#line 1217 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

    __declspec(dllimport) int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning (push)
    #pragma warning (disable:6540)

     
    __declspec(dllimport) int __cdecl _putenv(
          char const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning (pop)

    __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1253 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);
#line 1260 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _sleep(
          unsigned long _Duration
        );

#line 1279 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"









    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
    __declspec(dllimport) void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
    __declspec(dllimport) int __cdecl putenv(
          char const* _EnvString
        );

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);

#line 1363 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))
#line 1368 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdlib.h"
#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdlib"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\math.h"










#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {

#pragma warning(push)
#pragma warning(disable:4738) 
#pragma warning(disable:4820) 




    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        


#line 48 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"
    #line 49 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"
#line 50 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"










#line 61 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"
    typedef float  float_t;
    typedef double double_t;
#line 64 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"















    
        extern double const _HUGE;
    

#line 84 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"
#line 85 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"


    
#line 89 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"


















































































void __cdecl _fperrraise(  int _Except);

  __declspec(dllimport) short __cdecl _dclass(  double _X);
  __declspec(dllimport) short __cdecl _ldclass(  long double _X);
  __declspec(dllimport) short __cdecl _fdclass(  float _X);

  __declspec(dllimport) int __cdecl _dsign(  double _X);
  __declspec(dllimport) int __cdecl _ldsign(  long double _X);
  __declspec(dllimport) int __cdecl _fdsign(  float _X);

  __declspec(dllimport) int __cdecl _dpcomp(  double _X,   double _Y);
  __declspec(dllimport) int __cdecl _ldpcomp(  long double _X,   long double _Y);
  __declspec(dllimport) int __cdecl _fdpcomp(  float _X,   float _Y);

  __declspec(dllimport) short __cdecl _dtest(  double* _Px);
  __declspec(dllimport) short __cdecl _ldtest(  long double* _Px);
  __declspec(dllimport) short __cdecl _fdtest(  float* _Px);

__declspec(dllimport) short __cdecl _d_int(  double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _ld_int(  long double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _fd_int(  float* _Px,   short _Xexp);

__declspec(dllimport) short __cdecl _dscale(  double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _ldscale(  long double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _fdscale(  float* _Px,   long _Lexp);

__declspec(dllimport) short __cdecl _dunscale(  short* _Pex,   double* _Px);
__declspec(dllimport) short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale(  short* _Pex,   float* _Px);

  __declspec(dllimport) short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

  __declspec(dllimport) short __cdecl _dnorm(  unsigned short* _Ps);
  __declspec(dllimport) short __cdecl _fdnorm(  unsigned short* _Ps);

  __declspec(dllimport) double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
  __declspec(dllimport) long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
  __declspec(dllimport) float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

  __declspec(dllimport) double __cdecl _dlog(  double _X,   int _Baseflag);
  __declspec(dllimport) long double __cdecl _ldlog(  long double _X,   int _Baseflag);
  __declspec(dllimport) float __cdecl _fdlog(  float _X,   int _Baseflag);

  __declspec(dllimport) double __cdecl _dsin(  double _X,   unsigned int _Qoff);
  __declspec(dllimport) long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
  __declspec(dllimport) float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  
#line 461 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"





      int       __cdecl abs(  int _X);
      long      __cdecl labs(  long _X);
      long long __cdecl llabs(  long long _X);

      double __cdecl acos(  double _X);
      double __cdecl asin(  double _X);
      double __cdecl atan(  double _X);
      double __cdecl atan2(  double _Y,   double _X);

      double __cdecl cos(  double _X);
      double __cdecl cosh(  double _X);
      double __cdecl exp(  double _X);
       double __cdecl fabs(  double _X);
      double __cdecl fmod(  double _X,   double _Y);
      double __cdecl log(  double _X);
      double __cdecl log10(  double _X);
      double __cdecl pow(  double _X,   double _Y);
      double __cdecl sin(  double _X);
      double __cdecl sinh(  double _X);
       double __cdecl sqrt(  double _X);
      double __cdecl tan(  double _X);
      double __cdecl tanh(  double _X);

      __declspec(dllimport) double    __cdecl acosh(  double _X);
      __declspec(dllimport) double    __cdecl asinh(  double _X);
      __declspec(dllimport) double    __cdecl atanh(  double _X);
      __declspec(dllimport)  double    __cdecl atof(  char const* _String);
      __declspec(dllimport)  double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
      __declspec(dllimport) double    __cdecl _cabs(  struct _complex _Complex_value);
      __declspec(dllimport) double    __cdecl cbrt(  double _X);
      __declspec(dllimport) double    __cdecl ceil(  double _X);
      __declspec(dllimport) double    __cdecl _chgsign(  double _X);
      __declspec(dllimport) double    __cdecl copysign(  double _Number,   double _Sign);
      __declspec(dllimport) double    __cdecl _copysign(  double _Number,   double _Sign);
      __declspec(dllimport) double    __cdecl erf(  double _X);
      __declspec(dllimport) double    __cdecl erfc(  double _X);
      __declspec(dllimport) double    __cdecl exp2(  double _X);
      __declspec(dllimport) double    __cdecl expm1(  double _X);
      __declspec(dllimport) double    __cdecl fdim(  double _X,   double _Y);
      __declspec(dllimport) double    __cdecl floor(  double _X);
      __declspec(dllimport) double    __cdecl fma(  double _X,   double _Y,   double _Z);
      __declspec(dllimport) double    __cdecl fmax(  double _X,   double _Y);
      __declspec(dllimport) double    __cdecl fmin(  double _X,   double _Y);
      __declspec(dllimport) double    __cdecl frexp(  double _X,   int* _Y);
      __declspec(dllimport) double    __cdecl hypot(  double _X,   double _Y);
      __declspec(dllimport) double    __cdecl _hypot(  double _X,   double _Y);
      __declspec(dllimport) int       __cdecl ilogb(  double _X);
      __declspec(dllimport) double    __cdecl ldexp(  double _X,   int _Y);
      __declspec(dllimport) double    __cdecl lgamma(  double _X);
      __declspec(dllimport) long long __cdecl llrint(  double _X);
      __declspec(dllimport) long long __cdecl llround(  double _X);
      __declspec(dllimport) double    __cdecl log1p(  double _X);
      __declspec(dllimport) double    __cdecl log2(  double _X);
      __declspec(dllimport) double    __cdecl logb(  double _X);
      __declspec(dllimport) long      __cdecl lrint(  double _X);
      __declspec(dllimport) long      __cdecl lround(  double _X);

    int __cdecl _matherr(  struct _exception* _Except);

      __declspec(dllimport) double __cdecl modf(  double _X,   double* _Y);
      __declspec(dllimport) double __cdecl nan(  char const* _X);
      __declspec(dllimport) double __cdecl nearbyint(  double _X);
      __declspec(dllimport) double __cdecl nextafter(  double _X,   double _Y);
      __declspec(dllimport) double __cdecl nexttoward(  double _X,   long double _Y);
      __declspec(dllimport) double __cdecl remainder(  double _X,   double _Y);
      __declspec(dllimport) double __cdecl remquo(  double _X,   double _Y,   int* _Z);
      __declspec(dllimport) double __cdecl rint(  double _X);
      __declspec(dllimport) double __cdecl round(  double _X);
      __declspec(dllimport) double __cdecl scalbln(  double _X,   long _Y);
      __declspec(dllimport) double __cdecl scalbn(  double _X,   int _Y);
      __declspec(dllimport) double __cdecl tgamma(  double _X);
      __declspec(dllimport) double __cdecl trunc(  double _X);
      __declspec(dllimport) double __cdecl _j0(  double _X );
      __declspec(dllimport) double __cdecl _j1(  double _X );
      __declspec(dllimport) double __cdecl _jn(int _X,   double _Y);
      __declspec(dllimport) double __cdecl _y0(  double _X);
      __declspec(dllimport) double __cdecl _y1(  double _X);
      __declspec(dllimport) double __cdecl _yn(  int _X,   double _Y);

      __declspec(dllimport) float     __cdecl acoshf(  float _X);
      __declspec(dllimport) float     __cdecl asinhf(  float _X);
      __declspec(dllimport) float     __cdecl atanhf(  float _X);
      __declspec(dllimport) float     __cdecl cbrtf(  float _X);
      __declspec(dllimport) float     __cdecl _chgsignf(  float _X);
      __declspec(dllimport) float     __cdecl copysignf(  float _Number,   float _Sign);
      __declspec(dllimport) float     __cdecl _copysignf(  float _Number,   float _Sign);
      __declspec(dllimport) float     __cdecl erff(  float _X);
      __declspec(dllimport) float     __cdecl erfcf(  float _X);
      __declspec(dllimport) float     __cdecl expm1f(  float _X);
      __declspec(dllimport) float     __cdecl exp2f(  float _X);
      __declspec(dllimport) float     __cdecl fdimf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
      __declspec(dllimport) float     __cdecl fmaxf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl fminf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl _hypotf(  float _X,   float _Y);
      __declspec(dllimport) int       __cdecl ilogbf(  float _X);
      __declspec(dllimport) float     __cdecl lgammaf(  float _X);
      __declspec(dllimport) long long __cdecl llrintf(  float _X);
      __declspec(dllimport) long long __cdecl llroundf(  float _X);
      __declspec(dllimport) float     __cdecl log1pf(  float _X);
      __declspec(dllimport) float     __cdecl log2f(  float _X);
      __declspec(dllimport) float     __cdecl logbf(  float _X);
      __declspec(dllimport) long      __cdecl lrintf(  float _X);
      __declspec(dllimport) long      __cdecl lroundf(  float _X);
      __declspec(dllimport) float     __cdecl nanf(  char const* _X);
      __declspec(dllimport) float     __cdecl nearbyintf(  float _X);
      __declspec(dllimport) float     __cdecl nextafterf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl nexttowardf(  float _X,   long double _Y);
      __declspec(dllimport) float     __cdecl remainderf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
      __declspec(dllimport) float     __cdecl rintf(  float _X);
      __declspec(dllimport) float     __cdecl roundf(  float _X);
      __declspec(dllimport) float     __cdecl scalblnf(  float _X,   long _Y);
      __declspec(dllimport) float     __cdecl scalbnf(  float _X,   int _Y);
      __declspec(dllimport) float     __cdecl tgammaf(  float _X);
      __declspec(dllimport) float     __cdecl truncf(  float _X);

    

          __declspec(dllimport) int  __cdecl _set_SSE2_enable(  int _Flag);

    #line 588 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

    










#line 601 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"




#line 606 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"



    










#line 621 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl acosf(  float _X)
        {
            return (float)acos(_X);
        }

          __inline float __cdecl asinf(  float _X)
        {
            return (float)asin(_X);
        }

          __inline float __cdecl atan2f(  float _Y,   float _X)
        {
            return (float)atan2(_Y, _X);
        }

          __inline float __cdecl atanf(  float _X)
        {
            return (float)atan(_X);
        }

          __inline float __cdecl ceilf(  float _X)
        {
            return (float)ceil(_X);
        }

          __inline float __cdecl cosf(  float _X)
        {
            return (float)cos(_X);
        }

          __inline float __cdecl coshf(  float _X)
        {
            return (float)cosh(_X);
        }

          __inline float __cdecl expf(  float _X)
        {
            return (float)exp(_X);
        }

    #line 663 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

    



#line 669 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl fabsf(  float _X)
        {
            return (float)fabs(_X);
        }

    #line 676 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

    




#line 683 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl floorf(  float _X)
        {
            return (float)floor(_X);
        }

          __inline float __cdecl fmodf(  float _X,   float _Y)
        {
            return (float)fmod(_X, _Y);
        }

    #line 695 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

      __inline float __cdecl frexpf(  float _X,   int *_Y)
    {
        return (float)frexp(_X, _Y);
    }

      __inline float __cdecl hypotf(  float _X,   float _Y)
    {
        return _hypotf(_X, _Y);
    }

      __inline float __cdecl ldexpf(  float _X,   int _Y)
    {
        return (float)ldexp(_X, _Y);
    }

    











#line 724 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl log10f(  float _X)
        {
            return (float)log10(_X);
        }

          __inline float __cdecl logf(  float _X)
        {
            return (float)log(_X);
        }

          __inline float __cdecl modff(  float _X,   float* _Y)
        {
            double _F, _I;
            _F = modf(_X, &_I);
            *_Y = (float)_I;
            return (float)_F;
        }

          __inline float __cdecl powf(  float _X,   float _Y)
        {
            return (float)pow(_X, _Y);
        }

          __inline float __cdecl sinf(  float _X)
        {
            return (float)sin(_X);
        }

          __inline float __cdecl sinhf(  float _X)
        {
            return (float)sinh(_X);
        }

          __inline float __cdecl sqrtf(  float _X)
        {
            return (float)sqrt(_X);
        }

          __inline float __cdecl tanf(  float _X)
        {
            return (float)tan(_X);
        }

          __inline float __cdecl tanhf(  float _X)
        {
            return (float)tanh(_X);
        }

    #line 774 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

      __declspec(dllimport) long double __cdecl acoshl(  long double _X);

      __inline long double __cdecl acosl(  long double _X)
    {
        return acos((double)_X);
    }

      __declspec(dllimport) long double __cdecl asinhl(  long double _X);

      __inline long double __cdecl asinl(  long double _X)
    {
        return asin((double)_X);
    }

      __inline long double __cdecl atan2l(  long double _Y,   long double _X)
    {
        return atan2((double)_Y, (double)_X);
    }

      __declspec(dllimport) long double __cdecl atanhl(  long double _X);

      __inline long double __cdecl atanl(  long double _X)
    {
        return atan((double)_X);
    }

      __declspec(dllimport) long double __cdecl cbrtl(  long double _X);

      __inline long double __cdecl ceill(  long double _X)
    {
        return ceil((double)_X);
    }

      __inline long double __cdecl _chgsignl(  long double _X)
    {
        return _chgsign((double)_X);
    }

      __declspec(dllimport) long double __cdecl copysignl(  long double _Number,   long double _Sign);

      __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
    {
        return _copysign((double)_Number, (double)_Sign);
    }

      __inline long double __cdecl coshl(  long double _X)
    {
        return cosh((double)_X);
    }

      __inline long double __cdecl cosl(  long double _X)
    {
        return cos((double)_X);
    }

      __declspec(dllimport) long double __cdecl erfl(  long double _X);
      __declspec(dllimport) long double __cdecl erfcl(  long double _X);

      __inline long double __cdecl expl(  long double _X)
    {
        return exp((double)_X);
    }

      __declspec(dllimport) long double __cdecl exp2l(  long double _X);
      __declspec(dllimport) long double __cdecl expm1l(  long double _X);

      __inline long double __cdecl fabsl(  long double _X)
    {
        return fabs((double)_X);
    }

      __declspec(dllimport) long double __cdecl fdiml(  long double _X,   long double _Y);

      __inline long double __cdecl floorl(  long double _X)
    {
        return floor((double)_X);
    }

      __declspec(dllimport) long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
      __declspec(dllimport) long double __cdecl fmaxl(  long double _X,   long double _Y);
      __declspec(dllimport) long double __cdecl fminl(  long double _X,   long double _Y);

      __inline long double __cdecl fmodl(  long double _X,   long double _Y)
    {
        return fmod((double)_X, (double)_Y);
    }

      __inline long double __cdecl frexpl(  long double _X,   int *_Y)
    {
        return frexp((double)_X, _Y);
    }

      __declspec(dllimport) int __cdecl ilogbl(  long double _X);

      __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl ldexpl(  long double _X,   int _Y)
    {
        return ldexp((double)_X, _Y);
    }

      __declspec(dllimport) long double __cdecl lgammal(  long double _X);
      __declspec(dllimport) long long __cdecl llrintl(  long double _X);
      __declspec(dllimport) long long __cdecl llroundl(  long double _X);

      __inline long double __cdecl logl(  long double _X)
    {
        return log((double)_X);
    }

      __inline long double __cdecl log10l(  long double _X)
    {
        return log10((double)_X);
    }

      __declspec(dllimport) long double __cdecl log1pl(  long double _X);
      __declspec(dllimport) long double __cdecl log2l(  long double _X);
      __declspec(dllimport) long double __cdecl logbl(  long double _X);
      __declspec(dllimport) long __cdecl lrintl(  long double _X);
      __declspec(dllimport) long __cdecl lroundl(  long double _X);

      __inline long double __cdecl modfl(  long double _X,   long double* _Y)
    {
        double _F, _I;
        _F = modf((double)_X, &_I);
        *_Y = _I;
        return _F;
    }

      __declspec(dllimport) long double __cdecl nanl(  char const* _X);
      __declspec(dllimport) long double __cdecl nearbyintl(  long double _X);
      __declspec(dllimport) long double __cdecl nextafterl(  long double _X,   long double _Y);
      __declspec(dllimport) long double __cdecl nexttowardl(  long double _X,   long double _Y);

      __inline long double __cdecl powl(  long double _X,   long double _Y)
    {
        return pow((double)_X, (double)_Y);
    }

      __declspec(dllimport) long double __cdecl remainderl(  long double _X,   long double _Y);
      __declspec(dllimport) long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
      __declspec(dllimport) long double __cdecl rintl(  long double _X);
      __declspec(dllimport) long double __cdecl roundl(  long double _X);
      __declspec(dllimport) long double __cdecl scalblnl(  long double _X,   long _Y);
      __declspec(dllimport) long double __cdecl scalbnl(  long double _X,   int _Y);

      __inline long double __cdecl sinhl(  long double _X)
    {
        return sinh((double)_X);
    }

      __inline long double __cdecl sinl(  long double _X)
    {
        return sin((double)_X);
    }

      __inline long double __cdecl sqrtl(  long double _X)
    {
        return sqrt((double)_X);
    }

      __inline long double __cdecl tanhl(  long double _X)
    {
        return tanh((double)_X);
    }

      __inline long double __cdecl tanl(  long double _X)
    {
        return tan((double)_X);
    }

      __declspec(dllimport) long double __cdecl tgammal(  long double _X);
      __declspec(dllimport) long double __cdecl truncl(  long double _X);

    



#line 962 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"



    
    
    
    
    
    

    

    
        
            extern double HUGE;
        

#line 980 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details."))   __declspec(dllimport) double __cdecl j0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details."))   __declspec(dllimport) double __cdecl j1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details."))   __declspec(dllimport) double __cdecl jn(  int _X,   double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details."))   __declspec(dllimport) double __cdecl y0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details."))   __declspec(dllimport) double __cdecl y1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details."))   __declspec(dllimport) double __cdecl yn(  int _X,   double _Y);
    #line 988 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"

#line 990 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"


#pragma warning(pop)

} __pragma(pack(pop))
#line 996 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_math.h"
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\math.h"




#line 10 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdlib"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )





  inline double abs(  double _Xx) noexcept
	{
	return (:: fabs(_Xx));
	}

  inline float abs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline long double abs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

 
using :: getenv;
using :: system;
 #line 53 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdlib"

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}



#pragma warning(pop)
#pragma pack(pop)

#line 67 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdlib"
#line 68 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdlib"





#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cmath"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




  inline double pow(  double _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: pow(_Xx, static_cast<double>(_Yx)));
	}

  inline float acos(  float _Xx) noexcept
	{
	return (:: acosf(_Xx));
	}

  inline float acosh(  float _Xx) noexcept
	{
	return (:: acoshf(_Xx));
	}

  inline float asin(  float _Xx) noexcept
	{
	return (:: asinf(_Xx));
	}

  inline float asinh(  float _Xx) noexcept
	{
	return (:: asinhf(_Xx));
	}

  inline float atan(  float _Xx) noexcept
	{
	return (:: atanf(_Xx));
	}

  inline float atanh(  float _Xx) noexcept
	{
	return (:: atanhf(_Xx));
	}

  inline float atan2(  float _Yx,   float _Xx) noexcept
	{
	return (:: atan2f(_Yx, _Xx));
	}

  inline float cbrt(  float _Xx) noexcept
	{
	return (:: cbrtf(_Xx));
	}

  inline float ceil(  float _Xx) noexcept
	{
	return (:: ceilf(_Xx));
	}

  inline float copysign(  float _Number,
	  float _Sign) noexcept
	{
	return (:: copysignf(_Number, _Sign));
	}

  inline float cos(  float _Xx) noexcept
	{
	return (:: cosf(_Xx));
	}

  inline float cosh(  float _Xx) noexcept
	{
	return (:: coshf(_Xx));
	}

  inline float erf(  float _Xx) noexcept
	{
	return (:: erff(_Xx));
	}

  inline float erfc(  float _Xx) noexcept
	{
	return (:: erfcf(_Xx));
	}

  inline float exp(  float _Xx) noexcept
	{
	return (:: expf(_Xx));
	}

  inline float exp2(  float _Xx) noexcept
	{
	return (:: exp2f(_Xx));
	}

  inline float expm1(  float _Xx) noexcept
	{
	return (:: expm1f(_Xx));
	}

  inline float fabs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float fdim(  float _Xx,   float _Yx) noexcept
	{
	return (:: fdimf(_Xx, _Yx));
	}

  inline float floor(  float _Xx) noexcept
	{
	return (:: floorf(_Xx));
	}

  inline float fma(  float _Xx,   float _Yx,
	  float _Zx) noexcept
	{
	return (:: fmaf(_Xx, _Yx, _Zx));
	}

  inline float fmax(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmaxf(_Xx, _Yx));
	}

  inline float fmin(  float _Xx,   float _Yx) noexcept
	{
	return (:: fminf(_Xx, _Yx));
	}

  inline float fmod(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmodf(_Xx, _Yx));
	}

  inline float frexp(  float _Xx,   int* _Yx) noexcept
	{
	return (:: frexpf(_Xx, _Yx));
	}

  inline float hypot(  float _Xx,   float _Yx) noexcept
	{
	return (:: hypotf(_Xx, _Yx));
	}

  inline int ilogb(  float _Xx) noexcept
	{
	return (:: ilogbf(_Xx));
	}

  inline float ldexp(  float _Xx,   int _Yx) noexcept
	{
	return (:: ldexpf(_Xx, _Yx));
	}

  inline float lgamma(  float _Xx) noexcept
	{
	return (:: lgammaf(_Xx));
	}

  inline long long llrint(  float _Xx) noexcept
	{
	return (:: llrintf(_Xx));
	}

  inline long long llround(  float _Xx) noexcept
	{
	return (:: llroundf(_Xx));
	}

  inline float log(  float _Xx) noexcept
	{
	return (:: logf(_Xx));
	}

  inline float log10(  float _Xx) noexcept
	{
	return (:: log10f(_Xx));
	}

  inline float log1p(  float _Xx) noexcept
	{
	return (:: log1pf(_Xx));
	}

  inline float log2(  float _Xx) noexcept
	{
	return (:: log2f(_Xx));
	}

  inline float logb(  float _Xx) noexcept
	{
	return (:: logbf(_Xx));
	}

  inline long lrint(  float _Xx) noexcept
	{
	return (:: lrintf(_Xx));
	}

  inline long lround(  float _Xx) noexcept
	{
	return (:: lroundf(_Xx));
	}

  inline float modf(  float _Xx,   float* _Yx) noexcept
	{
	return (:: modff(_Xx, _Yx));
	}

  inline float nearbyint(  float _Xx) noexcept
	{
	return (:: nearbyintf(_Xx));
	}

  inline float nextafter(  float _Xx,   float _Yx) noexcept
	{
	return (:: nextafterf(_Xx, _Yx));
	}

  inline float nexttoward(  float _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,
	  float _Yx) noexcept
	{
	return (:: powf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powf(_Xx, static_cast<float>(_Yx)));
	}

  inline float remainder(  float _Xx,   float _Yx) noexcept
	{
	return (:: remainderf(_Xx, _Yx));
	}

  inline float remquo(  float _Xx,   float _Yx,
	  int *_Zx) noexcept
	{
	return (:: remquof(_Xx, _Yx, _Zx));
	}

  inline float rint(  float _Xx) noexcept
	{
	return (:: rintf(_Xx));
	}

  inline float round(  float _Xx) noexcept
	{
	return (:: roundf(_Xx));
	}

  inline float scalbln(  float _Xx,   long _Yx) noexcept
	{
	return (:: scalblnf(_Xx, _Yx));
	}

  inline float scalbn(  float _Xx,   int _Yx) noexcept
	{
	return (:: scalbnf(_Xx, _Yx));
	}

  inline float sin(  float _Xx) noexcept
	{
	return (:: sinf(_Xx));
	}

  inline float sinh(  float _Xx) noexcept
	{
	return (:: sinhf(_Xx));
	}

  inline float sqrt(  float _Xx) noexcept
	{
	return (:: sqrtf(_Xx));
	}

  inline float tan(  float _Xx) noexcept
	{
	return (:: tanf(_Xx));
	}

  inline float tanh(  float _Xx) noexcept
	{
	return (:: tanhf(_Xx));
	}

  inline float tgamma(  float _Xx) noexcept
	{
	return (:: tgammaf(_Xx));
	}

  inline float trunc(  float _Xx) noexcept
	{
	return (:: truncf(_Xx));
	}

  inline long double acos(  long double _Xx) noexcept
	{
	return (:: acosl(_Xx));
	}

  inline long double acosh(  long double _Xx) noexcept
	{
	return (:: acoshl(_Xx));
	}

  inline long double asin(  long double _Xx) noexcept
	{
	return (:: asinl(_Xx));
	}

  inline long double asinh(  long double _Xx) noexcept
	{
	return (:: asinhl(_Xx));
	}

  inline long double atan(  long double _Xx) noexcept
	{
	return (:: atanl(_Xx));
	}

  inline long double atanh(  long double _Xx) noexcept
	{
	return (:: atanhl(_Xx));
	}

  inline long double atan2(  long double _Yx,
	  long double _Xx) noexcept
	{
	return (:: atan2l(_Yx, _Xx));
	}

  inline long double cbrt(  long double _Xx) noexcept
	{
	return (:: cbrtl(_Xx));
	}

  inline long double ceil(  long double _Xx) noexcept
	{
	return (:: ceill(_Xx));
	}

  inline long double copysign(  long double _Number,
	  long double _Sign) noexcept
	{
	return (:: copysignl(_Number, _Sign));
	}

  inline long double cos(  long double _Xx) noexcept
	{
	return (:: cosl(_Xx));
	}

  inline long double cosh(  long double _Xx) noexcept
	{
	return (:: coshl(_Xx));
	}

  inline long double erf(  long double _Xx) noexcept
	{
	return (:: erfl(_Xx));
	}

  inline long double erfc(  long double _Xx) noexcept
	{
	return (:: erfcl(_Xx));
	}

  inline long double exp(  long double _Xx) noexcept
	{
	return (:: expl(_Xx));
	}

  inline long double exp2(  long double _Xx) noexcept
	{
	return (:: exp2l(_Xx));
	}

  inline long double expm1(  long double _Xx) noexcept
	{
	return (:: expm1l(_Xx));
	}

  inline long double fabs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double fdim(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fdiml(_Xx, _Yx));
	}

  inline long double floor(  long double _Xx) noexcept
	{
	return (:: floorl(_Xx));
	}

  inline long double fma(  long double _Xx,
	  long double _Yx,   long double _Zx) noexcept
	{
	return (:: fmal(_Xx, _Yx, _Zx));
	}

  inline long double fmax(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmaxl(_Xx, _Yx));
	}

  inline long double fmin(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fminl(_Xx, _Yx));
	}

  inline long double fmod(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmodl(_Xx, _Yx));
	}

  inline long double frexp(  long double _Xx,
	  int* _Yx) noexcept
	{
	return (:: frexpl(_Xx, _Yx));
	}

  inline long double hypot(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: hypotl(_Xx, _Yx));
	}

  inline int ilogb(  long double _Xx) noexcept
	{
	return (:: ilogbl(_Xx));
	}

  inline long double ldexp(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: ldexpl(_Xx, _Yx));
	}

  inline long double lgamma(  long double _Xx) noexcept
	{
	return (:: lgammal(_Xx));
	}

  inline long long llrint(  long double _Xx) noexcept
	{
	return (:: llrintl(_Xx));
	}

  inline long long llround(  long double _Xx) noexcept
	{
	return (:: llroundl(_Xx));
	}

  inline long double log(  long double _Xx) noexcept
	{
	return (:: logl(_Xx));
	}

  inline long double log10(  long double _Xx) noexcept
	{
	return (:: log10l(_Xx));
	}

  inline long double log1p(  long double _Xx) noexcept
	{
	return (:: log1pl(_Xx));
	}

  inline long double log2(  long double _Xx) noexcept
	{
	return (:: log2l(_Xx));
	}

  inline long double logb(  long double _Xx) noexcept
	{
	return (:: logbl(_Xx));
	}

  inline long lrint(  long double _Xx) noexcept
	{
	return (:: lrintl(_Xx));
	}

  inline long lround(  long double _Xx) noexcept
	{
	return (:: lroundl(_Xx));
	}

  inline long double modf(  long double _Xx,
	  long double* _Yx) noexcept
	{
	return (:: modfl(_Xx, _Yx));
	}

  inline long double nearbyint(  long double _Xx) noexcept
	{
	return (:: nearbyintl(_Xx));
	}

  inline long double nextafter(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nextafterl(_Xx, _Yx));
	}

  inline long double nexttoward(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: powl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powl(_Xx, static_cast<long double>(_Yx)));
	}

  inline long double remainder(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: remainderl(_Xx, _Yx));
	}

  inline long double remquo(  long double _Xx,
	  long double _Yx,   int *_Zx) noexcept
	{
	return (:: remquol(_Xx, _Yx, _Zx));
	}

  inline long double rint(  long double _Xx) noexcept
	{
	return (:: rintl(_Xx));
	}

  inline long double round(  long double _Xx) noexcept
	{
	return (:: roundl(_Xx));
	}

  inline long double scalbln(  long double _Xx,
	  long _Yx) noexcept
	{
	return (:: scalblnl(_Xx, _Yx));
	}

  inline long double scalbn(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: scalbnl(_Xx, _Yx));
	}

  inline long double sin(  long double _Xx) noexcept
	{
	return (:: sinl(_Xx));
	}

  inline long double sinh(  long double _Xx) noexcept
	{
	return (:: sinhl(_Xx));
	}

  inline long double sqrt(  long double _Xx) noexcept
	{
	return (:: sqrtl(_Xx));
	}

  inline long double tan(  long double _Xx) noexcept
	{
	return (:: tanl(_Xx));
	}

  inline long double tanh(  long double _Xx) noexcept
	{
	return (:: tanhl(_Xx));
	}

  inline long double tgamma(  long double _Xx) noexcept
	{
	return (:: tgammal(_Xx));
	}

  inline long double trunc(  long double _Xx) noexcept
	{
	return (:: truncl(_Xx));
	}

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"


 
#pragma once




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtr1common"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static constexpr _Ty value = _Val;

	using value_type = _Ty;
	using type = integral_constant;

	constexpr operator value_type() const noexcept
		{	
		return (value);
		}

	 constexpr value_type operator()() const noexcept
		{	
		return (value);
		}
	};

	
template<bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

	
template<bool _Test,
	class _Ty = void>
	struct enable_if
	{	
	};

template<class _Ty>
	struct enable_if<true, _Ty>
	{	
	using type = _Ty;
	};

template<bool _Test,
	class _Ty = void>
	using enable_if_t = typename enable_if<_Test, _Ty>::type;

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	using type = _Ty2;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	using type = _Ty1;
	};

template<bool _Test,
	class _Ty1,
	class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

	
template<class _Ty1,
	class _Ty2>
	struct is_same
		: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
		: true_type
	{	
	};

template<class _Ty,
	class _Uty>
	 constexpr bool is_same_v = is_same<_Ty, _Uty>::value;

	
template<class _Ty>
	struct remove_const
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_const_t = typename remove_const<_Ty>::type;

	
template<class _Ty>
	struct remove_volatile
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_volatile_t = typename remove_volatile<_Ty>::type;

	
template<class _Ty>
	struct remove_cv
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_cv<const _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_cv<volatile _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_cv<const volatile _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 198 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtr1common"

template<>
	struct _Is_integral<char16_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char32_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long long>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_integral
		: _Is_integral<remove_cv_t<_Ty>>::type
	{	
	};

template<class _Ty>
	 constexpr bool is_integral_v = is_integral<_Ty>::value;

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_floating_point
		: _Is_floating_point<remove_cv_t<_Ty>>::type
	{	
	};

template<class _Ty>
	 constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;

	
template<class _Ty>
	struct is_arithmetic
		: bool_constant<is_integral_v<_Ty>
			|| is_floating_point_v<_Ty>>
	{	
	};

template<class _Ty>
	 constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;

	
template<class _Ty>
	struct remove_reference
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_reference<_Ty&>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_reference<_Ty&&>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 343 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtr1common"
#line 344 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtr1common"





#line 10 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"


 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
template<class _Ty1,
	class _Ty2>
	using _Common_float_type_t =
		conditional_t<is_same_v<_Ty1, long double> || is_same_v<_Ty2, long double>, long double,
		conditional_t<is_same_v<_Ty1, float> && is_same_v<_Ty2, float>, float,
		double>>;	
}







































template<class _Ty1,
	class _Ty2,
	class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline
	::std:: _Common_float_type_t<_Ty1, _Ty2> pow(const _Ty1 _Left, const _Ty2 _Right)
	{	
	using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>;
	return (:: pow(static_cast<_Common>(_Left), static_cast<_Common>(_Right)));
	}


extern "C"    double __cdecl acos(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double acos(_Ty _Left) { return (:: acos(static_cast<double>(_Left))); }
extern "C"    double __cdecl asin(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double asin(_Ty _Left) { return (:: asin(static_cast<double>(_Left))); }
extern "C"    double __cdecl atan(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double atan(_Ty _Left) { return (:: atan(static_cast<double>(_Left))); }
extern "C"    double __cdecl atan2(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline ::std:: _Common_float_type_t<_Ty1, _Ty2> atan2(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: atan2(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl ceil(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double ceil(_Ty _Left) { return (:: ceil(static_cast<double>(_Left))); }
extern "C"    double __cdecl cos(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double cos(_Ty _Left) { return (:: cos(static_cast<double>(_Left))); }
extern "C"    double __cdecl cosh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double cosh(_Ty _Left) { return (:: cosh(static_cast<double>(_Left))); }
extern "C"    double __cdecl exp(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double exp(_Ty _Left) { return (:: exp(static_cast<double>(_Left))); }

extern "C"    double __cdecl fabs(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double fabs(_Ty _Left) { return (:: fabs(static_cast<double>(_Left))); }

extern "C"   __declspec(dllimport) double __cdecl floor(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double floor(_Ty _Left) { return (:: floor(static_cast<double>(_Left))); }
extern "C"    double __cdecl fmod(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fmod(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: fmod(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl frexp(  double,   int *); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double frexp(_Ty _Left,   int * _Arg2) { return (:: frexp(static_cast<double>(_Left), _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl ldexp(  double,   int); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double ldexp(_Ty _Left,   int _Arg2) { return (:: ldexp(static_cast<double>(_Left), _Arg2)); }
extern "C"    double __cdecl log(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double log(_Ty _Left) { return (:: log(static_cast<double>(_Left))); }
extern "C"    double __cdecl log10(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double log10(_Ty _Left) { return (:: log10(static_cast<double>(_Left))); }


extern "C"    double __cdecl sin(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double sin(_Ty _Left) { return (:: sin(static_cast<double>(_Left))); }
extern "C"    double __cdecl sinh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double sinh(_Ty _Left) { return (:: sinh(static_cast<double>(_Left))); }
extern "C"    double __cdecl sqrt(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double sqrt(_Ty _Left) { return (:: sqrt(static_cast<double>(_Left))); }
extern "C"    double __cdecl tan(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double tan(_Ty _Left) { return (:: tan(static_cast<double>(_Left))); }
extern "C"    double __cdecl tanh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double tanh(_Ty _Left) { return (:: tanh(static_cast<double>(_Left))); }

		

		

inline float _Fma(float _Left, float _Middle, float _Right)
	{	
	return (:: fmaf(_Left, _Middle, _Right));
	}

inline double _Fma(double _Left, double _Middle, double _Right)
	{	
	return (:: fma(_Left, _Middle, _Right));
	}

inline long double _Fma(long double _Left, long double _Middle,
	long double _Right)
	{	
	return (:: fmal(_Left, _Middle, _Right));
	}
#line 121 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"

template<class _Ty1,
	class _Ty2,
	class _Ty3,
	class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>
		&& ::std:: is_arithmetic_v<_Ty3>>>  inline
	::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>>
	fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
	{	
	using _Common = ::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>>;













#line 145 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"
	return (_Fma(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right)));
#line 147 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"
	}

		

inline float _Remquo(float _Left, float _Right, int *_Pquo)
	{	
	return (:: remquof(_Left, _Right, _Pquo));
	}

inline double _Remquo(double _Left, double _Right, int *_Pquo)
	{	
	return (:: remquo(_Left, _Right, _Pquo));
	}

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
	{	
	return (:: remquol(_Left, _Right, _Pquo));
	}
#line 166 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"

template<class _Ty1,
	class _Ty2,
	class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline
	::std:: _Common_float_type_t<_Ty1, _Ty2>
	remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
	{	
	using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>;













#line 188 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"
	return (_Remquo(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo));
#line 190 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"
	}

extern "C"   __declspec(dllimport) double __cdecl acosh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double acosh(_Ty _Left) { return (:: acosh(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl asinh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double asinh(_Ty _Left) { return (:: asinh(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl atanh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double atanh(_Ty _Left) { return (:: atanh(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl cbrt(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double cbrt(_Ty _Left) { return (:: cbrt(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl copysign(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline ::std:: _Common_float_type_t<_Ty1, _Ty2> copysign(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: copysign(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl erf(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double erf(_Ty _Left) { return (:: erf(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl erfc(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double erfc(_Ty _Left) { return (:: erfc(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl expm1(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double expm1(_Ty _Left) { return (:: expm1(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl exp2(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double exp2(_Ty _Left) { return (:: exp2(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl fdim(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fdim(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: fdim(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }

extern "C"   __declspec(dllimport) double __cdecl fmax(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fmax(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: fmax(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl fmin(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fmin(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: fmin(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl hypot(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline ::std:: _Common_float_type_t<_Ty1, _Ty2> hypot(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: hypot(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) int __cdecl ilogb(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline int ilogb(_Ty _Left) { return (:: ilogb(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl lgamma(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double lgamma(_Ty _Left) { return (:: lgamma(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) long long __cdecl llrint(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline long long llrint(_Ty _Left) { return (:: llrint(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) long long __cdecl llround(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline long long llround(_Ty _Left) { return (:: llround(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl log1p(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double log1p(_Ty _Left) { return (:: log1p(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl log2(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double log2(_Ty _Left) { return (:: log2(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl logb(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double logb(_Ty _Left) { return (:: logb(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) long __cdecl lrint(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline long lrint(_Ty _Left) { return (:: lrint(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) long __cdecl lround(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline long lround(_Ty _Left) { return (:: lround(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl nearbyint(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double nearbyint(_Ty _Left) { return (:: nearbyint(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl nextafter(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline ::std:: _Common_float_type_t<_Ty1, _Ty2> nextafter(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: nextafter(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl nexttoward(  double,   long double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double nexttoward(_Ty _Left,   long double _Arg2) { return (:: nexttoward(static_cast<double>(_Left), _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl remainder(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>>  inline ::std:: _Common_float_type_t<_Ty1, _Ty2> remainder(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: remainder(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }

extern "C"   __declspec(dllimport) double __cdecl rint(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double rint(_Ty _Left) { return (:: rint(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl round(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double round(_Ty _Left) { return (:: round(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl scalbln(  double,   long); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double scalbln(_Ty _Left,   long _Arg2) { return (:: scalbln(static_cast<double>(_Left), _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl scalbn(  double,   int); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double scalbn(_Ty _Left,   int _Arg2) { return (:: scalbn(static_cast<double>(_Left), _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl tgamma(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double tgamma(_Ty _Left) { return (:: tgamma(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl trunc(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>>  inline double trunc(_Ty _Left) { return (:: trunc(static_cast<double>(_Left))); }









 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 240 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"
#line 241 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"
 #line 242 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xtgmath.h"





#line 626 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cmath"

namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}

























































































































































































































































































































































































































































































#line 1180 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cmath"



#pragma warning(pop)
#pragma pack(pop)

#line 1187 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cmath"
#line 1188 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cmath"





#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdio"

#pragma once





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"







#pragma once




#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"









#pragma once


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"







#pragma once



__pragma(pack(push, 8)) extern "C" {



#line 17 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"




#line 22 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"
    
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"


    
        
    



#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"














    








#line 58 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"




#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"

    
        


            #pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
        #line 70 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"
    #line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"
#line 72 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"






#line 79 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"


    
    
       
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }

    
    
       
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }
#line 99 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"



#line 103 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_stdio_config.h"



















} __pragma(pack(pop))
#line 14 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

__pragma(pack(push, 8)) extern "C" {








    
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;
#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned _Ix);










    
    
    
    
    
    
    __declspec(dllimport) wint_t __cdecl fgetwc(
          FILE* _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _fgetwchar(void);

    
    __declspec(dllimport) wint_t __cdecl fputwc(
             wchar_t _Character,
          FILE*   _Stream);

    
    __declspec(dllimport) wint_t __cdecl _fputwchar(
          wchar_t _Character
        );

     
    __declspec(dllimport) wint_t __cdecl getwc(
          FILE* _Stream
        );

     
    __declspec(dllimport) wint_t __cdecl getwchar(void);


    
     
    __declspec(dllimport) wchar_t* __cdecl fgetws(
          wchar_t* _Buffer,
                                  int      _BufferCount,
                               FILE*    _Stream
        );

    
    __declspec(dllimport) int __cdecl fputws(
           wchar_t const* _Buffer,
          FILE*          _Stream
        );

    
     
    __declspec(dllimport) wchar_t* __cdecl _getws_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    extern "C++" { template <size_t _Size> inline   wchar_t* __cdecl _getws_s( wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 100 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __declspec(dllimport) wint_t __cdecl putwc(
             wchar_t _Character,
          FILE*   _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl putwchar(
          wchar_t _Character
        );

    
    __declspec(dllimport) int __cdecl _putws(
          wchar_t const* _Buffer
        );

    
    __declspec(dllimport) wint_t __cdecl ungetwc(
             wint_t _Character,
          FILE*  _Stream
        );

     
    __declspec(dllimport) FILE * __cdecl _wfdopen(
            int            _FileHandle,
          wchar_t const* _Mode
        );

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl _wfopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode
        );

    
    __declspec(dllimport) errno_t __cdecl _wfopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode
        );

     
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl _wfreopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode,
          FILE*          _OldStream
        );

    
    __declspec(dllimport) errno_t __cdecl _wfreopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode,
                            FILE*          _OldStream
        );

     
    __declspec(dllimport) FILE* __cdecl _wfsopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode,
            int            _ShFlag
        );

    __declspec(dllimport) void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    

         
        __declspec(dllimport) FILE* __cdecl _wpopen(
              wchar_t const* _Command,
              wchar_t const* _Mode
            );

    #line 178 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    __declspec(dllimport) int __cdecl _wremove(
          wchar_t const* _FileName
        );

    
    

     
    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
          wchar_t const* _Directory,
          wchar_t const* _FilePrefix
        );

    

     
    
    __declspec(dllimport) errno_t __cdecl _wtmpnam_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wtmpnam_s( wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 206 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wtmpnam(  wchar_t *_Buffer);
#line 212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"



    
    
    
    
    
    
    __declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
          FILE* _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _fputwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _getwc_nolock(
          FILE* _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _putwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
             wint_t _Character,
          FILE*  _Stream
        );

    



#line 253 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"



    
    





    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 305 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 309 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vfwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 319 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 323 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 334 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 338 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vfwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 350 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 354 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 356 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 367 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 371 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 381 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    }
    #line 385 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 395 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 399 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 408 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 412 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 422 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 426 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vwprintf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 437 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }
    #line 441 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 443 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 453 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 457 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 466 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 470 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 480 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 489 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl fwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 498 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 507 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 517 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 526 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl fwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
    

#line 537 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 546 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 548 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 558 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 567 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 576 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 585 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 594 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 603 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl wprintf(
            wchar_t const* const _Format,
        ...)
    

#line 611 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 620 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 629 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 638 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl wprintf_s(
                wchar_t const* const _Format,
            ...)
    

#line 648 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 657 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 659 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 668 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 677 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_p(
            wchar_t const* const _Format,
        ...)
    

#line 685 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 694 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"


    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vfwscanf_l(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 720 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 726 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vfwscanf(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 736 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 740 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwscanf_s_l(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 751 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 757 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vfwscanf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 769 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 773 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 775 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    __inline int __cdecl _vwscanf_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 784 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 788 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vwscanf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 797 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
    #line 801 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwscanf_s_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 811 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 815 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vwscanf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 826 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }
    #line 830 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 832 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fwscanf_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 842 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 851 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fwscanf(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 860 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 869 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwscanf_s_l(
                                           FILE*          const _Stream,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 879 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 888 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl fwscanf_s(
                                     FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
    

#line 899 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 908 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 910 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _wscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 919 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 928 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl wscanf(
            wchar_t const* const _Format,
        ...)
    

#line 936 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 945 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wscanf_s_l(
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 954 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 963 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl wscanf_s(
                wchar_t const* const _Format,
            ...)
    

#line 973 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 982 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 984 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"



    
    
    
    
    
    
        



    

#line 1000 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
    __declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
    __declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
    __declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
                                                     va_list              _ArgList
        )
    

#line 1058 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1066 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(push)
    #pragma warning(disable: 4793)

     
    
    __inline int __cdecl _vsnwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1083 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vsnwprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1091 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vsnwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1104 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
    #line 1108 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _snwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vsnwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);
#line 1117 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
                                                     va_list        _ArgList
        )
    

#line 1131 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        #pragma warning(pop)
    }
    #line 1138 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl _vsnwprintf_s( wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1160 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1168 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1180 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1184 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1197 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)
    }
    #line 1204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl __vswprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1220 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
                                         va_list              _ArgList
        )
    

#line 1231 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    }
    #line 1235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl vswprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1247 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1251 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    

#line 1264 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1272 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

         
        __inline int __cdecl vswprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
            )
    

#line 1285 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }
    #line 1289 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 1291 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl vswprintf_s( wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1299 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    

#line 1312 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1320 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
                                                      va_list              _ArgList
        )
    

#line 1332 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1336 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1347 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1355 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 1365 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vscwprintf_l(_Format, 0, _ArgList);
    }
    #line 1369 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1380 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1388 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 1398 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vscwprintf_p_l(_Format, 0, _ArgList);
    }
    #line 1402 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl __swprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1413 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1422 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1434 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1443 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
        ...)
    

#line 1453 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1462 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl swprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1473 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1482 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(push)
    
    
    #pragma warning(disable:4793 4996)

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __swprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __vswprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);
#line 1496 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _swprintf(   wchar_t *_Buffer,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vswprintf(   wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);
#line 1503 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)

     
    
    __inline int __cdecl _swprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    

#line 1517 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1526 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

         
        __inline int __cdecl swprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
            ...)
    

#line 1538 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1547 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 1549 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl swprintf_s( wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1556 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    

#line 1568 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1577 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
        ...)
    

#line 1588 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1597 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1618 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1629 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1638 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
        ...)
    

#line 1650 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1664 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
        ...)
    

#line 1675 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1689 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1702 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1711 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1723 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1732 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snwprintf_s( wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1740 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    __inline int __cdecl _scwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1749 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1758 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf(
            wchar_t const* const _Format,
        ...)
    

#line 1767 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1776 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1786 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1795 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf_p(
            wchar_t const* const _Format,
        ...)
    

#line 1804 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1813 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"


    
        #pragma warning(push)
        #pragma warning(disable: 4141 4412 4793 4996 6054)

        

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int swprintf(
                           wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
                #pragma warning(suppress: 28719)
                _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int __cdecl vswprintf(
                           wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                              va_list              _ArgList
                ) throw()
            {
                #pragma warning(suppress: 28719)
                return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int _swprintf_l(
                                     wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                                 _locale_t      const _Locale,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
                _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int __cdecl _vswprintf_l(
                                     wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                                 _locale_t      const _Locale,
                                                        va_list              _ArgList
                ) throw()
            {
                return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            }

        #line 1874 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

        #pragma warning(pop)
    #line 1877 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    




#line 1884 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"


    
    
    
    
    
     
    __declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                            unsigned __int64 _Options,
                  wchar_t const*   _Buffer,
                                            size_t           _BufferCount,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     
    
    __inline int __cdecl _vswscanf_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 1912 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1918 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl vswscanf(
                                 wchar_t const* _Buffer,
            wchar_t const* _Format,
                                      va_list        _ArgList
        )
    

#line 1929 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    }
    #line 1933 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswscanf_s_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 1945 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1951 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

         
        
        __inline int __cdecl vswscanf_s(
                                     wchar_t const* const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 1964 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }
    #line 1968 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 1970 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl vswscanf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1978 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )
    

#line 1991 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }
    #line 1997 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vsnwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
                                                 va_list              _ArgList
        )
    

#line 2010 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }
    #line 2016 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _swscanf_l(
                                          wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                        _locale_t            _Locale,
        ...)
    

#line 2027 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2036 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
      __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl swscanf(
                                wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)
    

#line 2046 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2055 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swscanf_s_l(
                                            wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 2066 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2075 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    

         
        
        __inline int __cdecl swscanf_s(
                                      wchar_t const* const _Buffer,
                wchar_t const* const _Format,
            ...)
    

#line 2087 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 2096 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    #line 2098 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 2110 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2124 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf(
            wchar_t const* const _Buffer,
                                      size_t         const _BufferCount,
                wchar_t const* const _Format,
        ...)
    

#line 2135 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 2161 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2170 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwscanf_s(
             wchar_t const* const _Buffer,
                                       size_t         const _BufferCount,
               wchar_t const* const _Format,
        ...)
    

#line 2181 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2190 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"

    


#line 2195 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstdio.h"



} __pragma(pack(pop))
#line 14 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

__pragma(pack(push, 8)) extern "C" {































    
#line 49 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"















    
    
#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"


typedef __int64 fpos_t;





    
    __declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
               FILE*   _Stream,
          char*** _Base,
          char*** _Pointer,
          int**   _Count
        );


    
    
    
    
    
    

        
        __declspec(dllimport) errno_t __cdecl clearerr_s(
              FILE* _Stream
            );

        
        __declspec(dllimport) errno_t __cdecl fopen_s(
              FILE**      _Stream,
                                 char const* _FileName,
                                 char const* _Mode
            );

        
         
        __declspec(dllimport) size_t __cdecl fread_s(
                void*  _Buffer,
                                    size_t _BufferSize,
                                                                            size_t _ElementSize,
                                                                            size_t _ElementCount,
                                                                         FILE*  _Stream
            );

        
        __declspec(dllimport) errno_t __cdecl freopen_s(
              FILE**      _Stream,
                                 char const* _FileName,
                                 char const* _Mode,
                                FILE*       _OldStream
            );

         
        __declspec(dllimport) char* __cdecl gets_s(
              char*   _Buffer,
                               rsize_t _Size
            );

        
        __declspec(dllimport) errno_t __cdecl tmpfile_s(
                FILE** _Stream
            );

         
        
        __declspec(dllimport) errno_t __cdecl tmpnam_s(
              char*   _Buffer,
                               rsize_t _Size
            );

    #line 140 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    __declspec(dllimport) void __cdecl clearerr(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl fclose(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _fcloseall(void);

     
    __declspec(dllimport) FILE* __cdecl _fdopen(
            int         _FileHandle,
          char const* _Mode
        );

     
    __declspec(dllimport) int __cdecl feof(
          FILE* _Stream
        );

     
    __declspec(dllimport) int __cdecl ferror(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl fflush(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl fgetc(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _fgetchar(void);

     
    
    __declspec(dllimport) int __cdecl fgetpos(
          FILE*   _Stream,
            fpos_t* _Position
        );

     
    
    __declspec(dllimport) char* __cdecl fgets(
          char* _Buffer,
                               int   _MaxCount,
                            FILE* _Stream
        );

     
    __declspec(dllimport) int __cdecl _fileno(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _flushall(void);

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl fopen(
          char const* _FileName,
          char const* _Mode
        );


     
    
    __declspec(dllimport) int __cdecl fputc(
             int   _Character,
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _fputchar(
          int _Character
        );

     
    
    __declspec(dllimport) int __cdecl fputs(
           char const* _Buffer,
          FILE*       _Stream
        );

    
    __declspec(dllimport) size_t __cdecl fread(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

     
      __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl freopen(
           char const* _FileName,
           char const* _Mode,
          FILE*       _Stream
        );

     
    __declspec(dllimport) FILE* __cdecl _fsopen(
          char const* _FileName,
          char const* _Mode,
            int         _ShFlag
        );

     
    
    __declspec(dllimport) int __cdecl fsetpos(
          FILE*         _Stream,
             fpos_t const* _Position
        );

     
    
    __declspec(dllimport) int __cdecl fseek(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

     
    
    __declspec(dllimport) int __cdecl _fseeki64(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
     
    __declspec(dllimport) long __cdecl ftell(
          FILE* _Stream
        );

     
     
    __declspec(dllimport) __int64 __cdecl _ftelli64(
          FILE* _Stream
        );

    
    __declspec(dllimport) size_t __cdecl fwrite(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

     
     
    __declspec(dllimport) int __cdecl getc(
          FILE* _Stream
        );

     
    __declspec(dllimport) int __cdecl getchar(void);

     
    __declspec(dllimport) int __cdecl _getmaxstdio(void);

    extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 314 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    __declspec(dllimport) int __cdecl _getw(
          FILE* _Stream
        );

    __declspec(dllimport) void __cdecl perror(
          char const* _ErrorMessage
        );

    

         
        
        __declspec(dllimport) int __cdecl _pclose(
              FILE* _Stream
            );

         
        __declspec(dllimport) FILE* __cdecl _popen(
              char const* _Command,
              char const* _Mode
            );

    #line 339 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __declspec(dllimport) int __cdecl putc(
             int   _Character,
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl putchar(
          int _Character
        );

    
    __declspec(dllimport) int __cdecl puts(
          char const* _Buffer
        );

     
    
    __declspec(dllimport) int __cdecl _putw(
             int   _Word,
          FILE* _Stream
        );

    __declspec(dllimport) int __cdecl remove(
          char const* _FileName
        );

     
    __declspec(dllimport) int __cdecl rename(
          char const* _OldFileName,
          char const* _NewFileName
        );

    __declspec(dllimport) int __cdecl _unlink(
          char const* _FileName
        );

    

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
        __declspec(dllimport) int __cdecl unlink(
              char const* _FileName
            );

    #line 386 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    __declspec(dllimport) void __cdecl rewind(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _rmtmp(void);

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) void __cdecl setbuf(
                                                      FILE* _Stream,
            char* _Buffer
        );

    
    __declspec(dllimport) int __cdecl _setmaxstdio(
          int _Maximum
        );

     
    
    __declspec(dllimport) int __cdecl setvbuf(
                               FILE*  _Stream,
            char*  _Buffer,
                                  int    _Mode,
                                  size_t _Size
        );

    


#line 418 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    __declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
          char const* _DirectoryName,
          char const* _FilePrefix
        );

    

#line 428 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl tmpfile(void);

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl tmpnam_s( char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 437 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  char* __cdecl tmpnam(  char *_Buffer);
#line 445 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
#pragma warning(pop)

     
    
    __declspec(dllimport) int __cdecl ungetc(
             int   _Character,
          FILE* _Stream
        );



    
    
    
    
    
    __declspec(dllimport) void __cdecl _lock_file(
          FILE* _Stream
        );

    __declspec(dllimport) void __cdecl _unlock_file(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl _fclose_nolock(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl _fflush_nolock(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl _fgetc_nolock(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl _fputc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
    __declspec(dllimport) size_t __cdecl _fread_nolock(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

    
     
    __declspec(dllimport) size_t __cdecl _fread_nolock_s(
          void*  _Buffer,
                              size_t _BufferSize,
                                                                      size_t _ElementSize,
                                                                      size_t _ElementCount,
                                                                   FILE*  _Stream
        );

    
    __declspec(dllimport) int __cdecl _fseek_nolock(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

    
    __declspec(dllimport) int __cdecl _fseeki64_nolock(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
    __declspec(dllimport) long __cdecl _ftell_nolock(
          FILE* _Stream
        );

     
    __declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
          FILE* _Stream
        );

    
    __declspec(dllimport) size_t __cdecl _fwrite_nolock(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

    
    __declspec(dllimport) int __cdecl _getc_nolock(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _putc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _ungetc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
    
    
    



    














#line 584 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"



    __declspec(dllimport) int* __cdecl __p__commode(void);

    


        
    #line 594 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"



    
    

#line 601 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    __declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    __declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfprintf_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 642 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 646 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vfprintf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 656 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 660 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_s_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 671 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 675 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vfprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 687 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 691 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 693 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_p_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 704 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 708 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 718 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    }
    #line 722 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 732 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 736 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 745 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 749 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 759 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 763 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vprintf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 774 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }
    #line 778 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 780 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 790 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 794 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 803 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 807 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 817 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 826 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl fprintf(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 835 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 844 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    __declspec(dllimport) int __cdecl _set_printf_count_output(
          int _Value
        );

    __declspec(dllimport) int __cdecl _get_printf_count_output(void);

    
    __inline int __cdecl _fprintf_s_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 860 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 869 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl fprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
            ...)
    

#line 880 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 889 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 891 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_p_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 901 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 910 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 919 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 928 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 937 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 946 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl printf(
            char const* const _Format,
        ...)
    

#line 954 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 963 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 972 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 981 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl printf_s(
                char const* const _Format,
            ...)
    

#line 991 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1000 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 1002 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 1011 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1020 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_p(
            char const* const _Format,
        ...)
    

#line 1028 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1037 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"


    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _Arglist
        );

    
    __inline int __cdecl _vfscanf_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1062 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 1068 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vfscanf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1078 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 1082 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfscanf_s_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1093 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 1099 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"


    

        
        __inline int __cdecl vfscanf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 1112 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 1116 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 1118 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscanf_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1128 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 1132 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vscanf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1141 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
    #line 1145 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscanf_s_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1155 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 1159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vscanf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 1170 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }
    #line 1174 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 1176 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fscanf_l(
                                         FILE*       const _Stream,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 1186 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1195 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fscanf(
                               FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 1204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1213 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fscanf_s_l(
                                           FILE*       const _Stream,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 1223 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1232 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl fscanf_s(
                                     FILE*       const _Stream,
                char const* const _Format,
            ...)
    

#line 1243 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1252 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 1254 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _scanf_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 1263 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1272 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl scanf(
            char const* const _Format,
        ...)
    

#line 1280 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1289 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scanf_s_l(
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 1298 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1307 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl scanf_s(
                char const* const _Format,
            ...)
    

#line 1317 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1326 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 1328 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"



    
    
    
    
    
     
    __declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    __declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    __declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    __declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
                                                     va_list           _ArgList
        )
    

#line 1389 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1397 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf(
            char*       const _Buffer,
                                                 size_t      const _BufferCount,
                          char const* const _Format,
                                                    va_list           _ArgList
        )
    

#line 1409 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        #pragma warning(pop)
    }
    #line 1416 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    








#line 1427 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl vsnprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    

#line 1439 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1447 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsprintf_l(
           char*       const _Buffer,
                                    char const* const _Format,
                                  _locale_t   const _Locale,
                                         va_list           _ArgList
        )
    

#line 1459 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        #pragma warning(pop)
    }
    #line 1466 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl vsprintf(
           char*       const _Buffer,
               char const* const _Format,
                                         va_list           _ArgList
        )
    

#line 1477 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
        #pragma warning(pop)
    }
    #line 1484 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    

#line 1497 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1505 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl vsprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
            )
    

#line 1519 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }
    #line 1523 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

        extern "C++" { template <size_t _Size> inline   int __cdecl vsprintf_s( char (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1531 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 1533 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    

#line 1546 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1554 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
                                                      va_list           _ArgList
        )
    

#line 1566 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1570 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
                                                          va_list          _ArgList
        )
    

#line 1584 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsnprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1592 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    

#line 1605 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
    #line 1609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl _vsnprintf_s( char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1618 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl vsnprintf_s(
               char*       const _Buffer,
                                                           size_t      const _BufferCount,
                                                           size_t      const _MaxCount,
                                    char const* const _Format,
                                                              va_list           _ArgList
            )
    

#line 1633 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        }
    #line 1637 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

        extern "C++" { template <size_t _Size> inline   int __cdecl vsnprintf_s( char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1646 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 1648 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1658 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1666 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _vscprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1675 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vscprintf_l(_Format, 0, _ArgList);
    }
    #line 1679 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1689 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1697 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _vscprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1706 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vscprintf_p_l(_Format, 0, _ArgList);
    }
    #line 1710 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1722 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1730 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
                                       va_list           _ArgList
        )
    

#line 1742 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1746 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sprintf_l(
                  char*       const _Buffer,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 1757 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1771 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl sprintf(
           char*       const _Buffer,
               char const* const _Format,
        ...)
    

#line 1781 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1795 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #pragma warning(push)
    #pragma warning(disable: 4996)
    #pragma warning(disable: 28719) 
    #pragma warning(disable: 28726) 
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl sprintf(  char *_Buffer,  char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl vsprintf(  char *_Buffer,  char const* _Format, va_list _Args);
#line 1806 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    #pragma warning(pop)

     
    
    __inline int __cdecl _sprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    

#line 1819 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1828 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl sprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
            ...)
    

#line 1841 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1850 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 1852 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl sprintf_s( char (&_Buffer)[_Size],     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1859 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _sprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    

#line 1871 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1880 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _sprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
        ...)
    

#line 1891 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1900 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
        ...)
    

#line 1912 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1926 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    








#line 1937 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl snprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
        ...)
    

#line 1948 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    #pragma warning(suppress:28719)    
        _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1958 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                           char const* const _Format,
        ...)
    

#line 1969 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    #pragma warning(suppress:28719)    
        _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1979 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _snprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _vsnprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);
#line 1988 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2000 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2009 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
        ...)
    

#line 2020 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2029 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
        ...)
    

#line 2042 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2051 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
        ...)
    

#line 2063 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2072 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snprintf_s( char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 2080 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2089 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2098 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _scprintf(
            char const* const _Format,
        ...)
    

#line 2106 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2115 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2124 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2133 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _scprintf_p(
            char const* const _Format,
        ...)
    

#line 2141 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vscprintf_p(_Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2150 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                            unsigned __int64 _Options,
                  char const*      _Buffer,
                                            size_t           _BufferCount,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vsscanf_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 2175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 2181 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vsscanf(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 2191 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    }
    #line 2195 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vsscanf_s_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 2206 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 2212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

        #pragma warning(push)
        #pragma warning(disable:6530)

        
        __inline int __cdecl vsscanf_s(
                                     char const* const _Buffer,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 2227 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }
    #line 2231 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

        extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  char const (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2238 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

        #pragma warning(pop)

    #line 2242 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sscanf_l(
                                          char const* const _Buffer,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 2252 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2261 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl sscanf(
                                char const* const _Buffer,
            char const* const _Format,
        ...)
    

#line 2270 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2279 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _sscanf_s_l(
                                            char const* const _Buffer,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 2289 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2298 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl sscanf_s(
                                      char const* const _Buffer,
                char const* const _Format,
            ...)
    

#line 2309 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

            #pragma warning(push)
            #pragma warning(disable: 4996) 
            _Result = vsscanf_s(_Buffer, _Format, _ArgList);
            #pragma warning(pop)

            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 2323 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #line 2325 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #pragma warning(push)
    #pragma warning(disable:6530)

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf_l(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 2339 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2352 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                      char const* const _Format,
        ...)
    

#line 2362 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2375 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"


    
    __inline int __cdecl _snscanf_s_l(
              char const* const _Buffer,
                                              size_t      const _BufferCount,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 2387 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2400 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _snscanf_s(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                    char const* const _Format,
        ...)
    

#line 2410 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2423 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

    #pragma warning(pop)

    

#line 2429 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"



    
    
    
    
    
    

        

        


#line 2445 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
        __declspec(dllimport) char* __cdecl tempnam(
              char const* _Directory,
              char const* _FilePrefix
            );

        

#line 2455 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"

         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int   __cdecl fcloseall(void);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details."))    __declspec(dllimport) FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fgetchar(void);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details."))    __declspec(dllimport) int   __cdecl fileno(  FILE* _Stream);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details."))  __declspec(dllimport) int   __cdecl flushall(void);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fputchar(  int _Ch);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details."))      __declspec(dllimport) int   __cdecl getw(  FILE* _Stream);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details."))      __declspec(dllimport) int   __cdecl putw(  int _Ch,   FILE* _Stream);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details."))     __declspec(dllimport) int   __cdecl rmtmp(void);

    #line 2467 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
#line 2468 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"



} __pragma(pack(pop))
#line 2473 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\stdio.h"
#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdio"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )





 
 
 
 
 
 
 




namespace std {
#pragma warning(push)
#pragma warning(disable: 4995) 

using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;

#pragma warning(pop)
}



#pragma warning(pop)
#pragma pack(pop)

#line 64 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdio"
#line 65 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdio"





#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

#pragma once




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstring"

#pragma once





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"







#pragma once




#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memory.h"










#pragma once


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\errno.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {




    __declspec(dllimport) int* __cdecl _errno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

    __declspec(dllimport) unsigned long* __cdecl __doserrno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
    __declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);
#line 31 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\errno.h"










































    
    
    
    
    
#line 79 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\errno.h"






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 127 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\errno.h"



} __pragma(pack(pop))
#line 132 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\errno.h"
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_string.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



 
 void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

 
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

#line 40 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_string.h"
void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


 void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

#line 60 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_string.h"
void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

 
 char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

 
 char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

   
 char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

 

 wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

 
 wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

   

 wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))

#line 109 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_string.h"
#line 13 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memcpy_s.h"

__pragma(pack(push, 8)) extern "C" {


    
#line 19 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memcpy_s.h"














     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }

#line 85 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memcpy_s.h"



} __pragma(pack(pop))
#line 15 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memory.h"




__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
__declspec(dllimport) int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    












#line 56 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memory.h"

    












#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memory.h"

#line 73 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memory.h"





    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
    __declspec(dllimport) void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );

#line 94 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memory.h"





    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }

#line 111 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 117 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_memory.h"
#line 14 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"








#pragma once






__pragma(pack(push, 8)) extern "C" {










    
    __declspec(dllimport) errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );

    
    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );

     
    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 65 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"











#line 77 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );



#line 86 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 94 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"



#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);
#line 105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 119 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);
#line 128 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)

 
__declspec(dllimport) size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcslen(
      wchar_t const* _String
    );

 

#line 146 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

#line 150 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
#line 162 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"
    
#line 166 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }

#line 175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 182 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 190 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    

#line 237 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"
        



    #line 242 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(push)
    #pragma warning(disable: 4141 4996) 
    #pragma warning(disable: 28719 28726 28727) 
      __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    

#line 258 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    #line 269 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(pop)

#line 273 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"



 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 294 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

 __declspec(dllimport) errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 313 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

  __declspec(dllimport) int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

  __declspec(dllimport) int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

  __declspec(dllimport) int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

  __declspec(dllimport) int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 __declspec(dllimport) errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 351 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);
#line 359 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

__declspec(dllimport) wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

 __declspec(dllimport) errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 375 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);
#line 382 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 392 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);
#line 397 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 410 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
#line 417 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 428 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);
#line 433 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 446 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
#line 453 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

 

__declspec(dllimport) size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
#line 565 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"









    


#line 578 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    

#line 587 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"

    
    

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

#line 644 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 650 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wstring.h"
#line 15 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"




__pragma(pack(push, 8)) extern "C" {







    
    __declspec(dllimport) errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
    __declspec(dllimport) errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
    __declspec(dllimport) errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
    __declspec(dllimport) char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );

#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

__declspec(dllimport) void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 84 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"



#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcat( char *_Destination,  char const* _Source);
#line 95 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"
#pragma warning(pop)

#line 98 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
__declspec(dllimport) int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 129 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcpy( char *_Destination,  char const* _Source);
#line 138 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"
#pragma warning(pop)

 
__declspec(dllimport) size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );




#line 150 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 
__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );



#line 159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 179 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 191 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr( char *_String);
#line 238 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 251 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);
#line 258 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 265 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);
#line 273 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 337 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);
#line 345 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 

#line 351 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

#line 355 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
#line 367 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"
    
#line 371 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }

#line 380 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 395 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);
#line 403 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 
__declspec(dllimport) char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
      char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 426 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl _strset( char *_Destination,  int _Value);
#line 432 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 
__declspec(dllimport) size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 455 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr( char *_String);
#line 460 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 473 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
#line 480 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"

 

__declspec(dllimport) size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
#line 528 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"





    
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strdup(
          char const* _String
        );
    

    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
    __declspec(dllimport) int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strlwr(
          char* _String
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strrev(
          char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
          char* _String,
               int   _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strupr(
          char* _String
        );

#line 589 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"



} __pragma(pack(pop))

#line 595 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"
#line 596 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\string.h"
#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstring"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
#pragma warning(push)
#pragma warning(disable: 4995) 

using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;

#pragma warning(pop)
}



#pragma warning(pop)
#pragma pack(pop)

#line 39 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstring"
#line 40 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstring"





#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"

#pragma once





#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstddef"

#pragma once







#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
using :: ptrdiff_t; using :: size_t;
typedef double max_align_t;	













































































#line 98 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstddef"

}

using ::std:: max_align_t;	



#pragma warning(pop)
#pragma pack(pop)

#line 109 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstddef"
#line 110 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstddef"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\initializer_list"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	constexpr initializer_list() noexcept
		: _First(nullptr), _Last(nullptr)
		{	
		}

	constexpr initializer_list(const _Elem *_First_arg,
		const _Elem *_Last_arg) noexcept
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	 constexpr const _Elem * begin() const noexcept
		{	
		return (_First);
		}

	 constexpr const _Elem * end() const noexcept
		{	
		return (_Last);
		}

	 constexpr size_t size() const noexcept
		{	
		return (static_cast<size_t>(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem>
	 constexpr const _Elem * begin(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem>
	 constexpr const _Elem * end(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.end());
	}
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 79 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\initializer_list"
#line 80 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\initializer_list"





#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"


 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class>
	
	 constexpr bool _Always_false = false;

		
 
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};
 #line 46 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"

		
template<class _Ty = void>
	struct plus
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty = void>
	struct minus
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty = void>
	struct multiplies
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty = void>
	struct equal_to
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty = void>
	struct not_equal_to
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left != _Right);
		}
	};

		
template<class _Ty = void>
	struct greater
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left > _Right);
		}
	};

		
template<class _Ty = void>
	struct less
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<class _Ty = void>
	struct greater_equal
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left >= _Right);
		}
	};

		
template<class _Ty = void>
	struct less_equal
	{	
	 typedef _Ty first_argument_type;
	 typedef _Ty second_argument_type;
	 typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left <= _Right);
		}
	};

		
template<>
	struct plus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct minus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct multiplies<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct not_equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			!= static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			!= static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct greater<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			> static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			> static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct greater_equal<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			>= static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			>= static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less_equal<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			<= static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			<= static_cast<_Ty2&&>(_Right));
		}
	};

		
template<class _Ty>
	 constexpr _Ty * addressof(_Ty& _Val) noexcept
	{	
	return (__builtin_addressof(_Val));
	}

template<class _Ty>
	const _Ty * addressof(const _Ty&&) = delete;

		
template<class _Ptrty> inline
	auto _Unfancy(_Ptrty _Ptr)
	{	
	return (::std:: addressof(*_Ptr));
	}

template<class _Ty> inline
	_Ty * _Unfancy(_Ty * _Ptr)
	{	
	return (_Ptr);
	}
}




 





 #line 360 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"

 



 

#line 368 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"

 





 


#line 379 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"

 



 

#line 388 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"























#line 412 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"
 

#line 415 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"
























#line 440 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"
 

#line 443 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"





































#line 481 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"
 












#line 495 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 501 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"
#line 502 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstddef"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 #pragma warning(disable: 4180)	

namespace std {
	
template<class _Ty,
	_Ty... _Vals>
	struct integer_sequence
	{	
	static_assert(is_integral_v<_Ty>,
		"integer_sequence<T, I...> requires T to be an integral type.");

	using value_type = _Ty;

	 static constexpr size_t size() noexcept
		{	
		return (sizeof...(_Vals));
		}
	};

	
template<class _Ty,
	_Ty _Size>
	using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;

template<size_t... _Vals>
	using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
	using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;

	
template<bool _First_value,
	class _First,
	class... _Rest>
	struct _Conjunction
	{	
	using type = _First;
	};

template<class _True,
	class _Next,
	class... _Rest>
	struct _Conjunction<true, _True, _Next, _Rest...>
	{	
	using type = typename _Conjunction<_Next::value, _Next, _Rest...>::type;
	};

template<class... _Traits>
	struct conjunction
		: true_type
	{	
	};

template<class _First,
	class... _Rest>
	struct conjunction<_First, _Rest...>
		: _Conjunction<_First::value, _First, _Rest...>::type
	{	
		
	};

template<class... _Traits>
	 constexpr bool conjunction_v = conjunction<_Traits...>::value;

	
template<bool _First_value,
	class _First,
	class... _Rest>
	struct _Disjunction
	{	
	using type = _First;
	};

template<class _False,
	class _Next,
	class... _Rest>
	struct _Disjunction<false, _False, _Next, _Rest...>
	{	
	using type = typename _Disjunction<_Next::value, _Next, _Rest...>::type;
	};

template<class... _Traits>
	struct disjunction
		: false_type
	{	
	};

template<class _First,
	class... _Rest>
	struct disjunction<_First, _Rest...>
		: _Disjunction<_First::value, _First, _Rest...>::type
	{	
		
	};

template<class... _Traits>
	 constexpr bool disjunction_v = disjunction<_Traits...>::value;

	
template<class _Trait>
	struct negation
		: bool_constant<!static_cast<bool>(_Trait::value)>
	{	
	};

template<class _Trait>
	 constexpr bool negation_v = negation<_Trait>::value;

	
template<class _Ty,
	class... _Types>
	 constexpr bool _Is_any_of_v = disjunction_v<is_same<_Ty, _Types>...>;

	
template<class... _Types>
	struct _Arg_types
	{	
	};

template<class _Ty1>
	struct _Arg_types<_Ty1>
	{	
	 typedef _Ty1 argument_type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Arg_types<_Ty1, _Ty2>
	{	
	 typedef _Ty1 first_argument_type;
	 typedef _Ty2 second_argument_type;
	};

	
template<class _Ty>
	struct _Is_function
	{	
	using _Bool_type = false_type;
	};











template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)  & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...)  & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...)  & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)  & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)  && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...)  && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...)  && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)  && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };











template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; };


template<class _Ty>
	struct is_function
		: _Is_function<_Ty>::_Bool_type
	{	
	};

template<class _Ty>
	 constexpr bool is_function_v = is_function<_Ty>::value;


template<class _Ty>
	struct _Is_memfunptr
	{	
	using _Bool_type = false_type;
	};














template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)   > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };














template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; };


	
template<class _Ty>
	struct is_void
		: false_type
	{	
	};








template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };


template<class _Ty>
	 constexpr bool is_void_v = is_void<_Ty>::value;

	
template<class... _Types>
	using void_t = void;

	
	
template<class _Ty>
	struct add_const
	{	
	using type = const _Ty;
	};

template<class _Ty>
	using add_const_t = const _Ty;

	
template<class _Ty>
	struct add_volatile
	{	
	using type = volatile _Ty;
	};

template<class _Ty>
	using add_volatile_t = volatile _Ty;

	
template<class _Ty>
	struct add_cv
	{	
	using type = const volatile _Ty;
	};

template<class _Ty>
	using add_cv_t = const volatile _Ty;

	
template<class _Ty,
	class = void>
	struct _Add_reference
	{	
	using _Lvalue = _Ty;
	using _Rvalue = _Ty;
	};

template<class _Ty>
	struct _Add_reference<_Ty, void_t<_Ty&>>
	{	
	using _Lvalue = _Ty&;
	using _Rvalue = _Ty&&;
	};

	
template<class _Ty>
	struct add_lvalue_reference
	{	
	using type = typename _Add_reference<_Ty>::_Lvalue;
	};

template<class _Ty>
	using add_lvalue_reference_t = typename _Add_reference<_Ty>::_Lvalue;

	
template<class _Ty>
	struct add_rvalue_reference
	{	
	using type = typename _Add_reference<_Ty>::_Rvalue;
	};

template<class _Ty>
	using add_rvalue_reference_t = typename _Add_reference<_Ty>::_Rvalue;

	
template<class _Ty>
	add_rvalue_reference_t<_Ty> declval() noexcept;

	
template<class _Ty>
	struct remove_extent
	{	
	using type = _Ty;
	};

template<class _Ty, size_t _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_extent_t = typename remove_extent<_Ty>::type;

	
template<class _Ty>
	struct remove_all_extents
	{	
	using type = _Ty;
	};

template<class _Ty, size_t _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	using type = typename remove_all_extents<_Ty>::type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	using type = typename remove_all_extents<_Ty>::type;
	};

template<class _Ty>
	using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

	
template<class _Ty>
	struct remove_pointer
	{	
	using type = _Ty;
	};








template<class _Ty> struct remove_pointer<_Ty * > { using type = _Ty; }; template<class _Ty> struct remove_pointer<_Ty * const> { using type = _Ty; }; template<class _Ty> struct remove_pointer<_Ty * volatile> { using type = _Ty; }; template<class _Ty> struct remove_pointer<_Ty * const volatile> { using type = _Ty; };


template<class _Ty>
	using remove_pointer_t = typename remove_pointer<_Ty>::type;

	
template<class _Ty,
	class = void>
	struct _Add_pointer
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct _Add_pointer<_Ty, void_t<remove_reference_t<_Ty> *>>
	{	
	using type = remove_reference_t<_Ty> *;
	};

template<class _Ty>
	struct add_pointer
	{	
	using type = typename _Add_pointer<_Ty>::type;
	};

template<class _Ty>
	using add_pointer_t = typename _Add_pointer<_Ty>::type;

	
	
template<class _Ty>
	struct is_array
		: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
		: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
		: true_type
	{	
	};

template<class _Ty>
	 constexpr bool is_array_v = is_array<_Ty>::value;

	
template<class _Ty>
	struct is_lvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
		: true_type
	{	
	};

template<class _Ty>
	 constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;

	
template<class _Ty>
	struct is_rvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
		: true_type
	{	
	};

template<class _Ty>
	 constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;

	
template<class _Ty>
	struct is_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_reference<_Ty&>
		: true_type
	{	
	};

template<class _Ty>
	struct is_reference<_Ty&&>
		: true_type
	{	
	};

template<class _Ty>
	 constexpr bool is_reference_v = is_reference<_Ty>::value;

	
template<class _Ty,
	bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
	struct _Is_member_object_pointer
		: false_type
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
		: true_type
	{	
	using _Class_type = _Ty2;
	};

template<class _Ty>
	struct is_member_object_pointer
		: _Is_member_object_pointer<remove_cv_t<_Ty>>::type
	{	
	};

template<class _Ty>
	 constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;

	
template<class _Ty>
	struct is_member_function_pointer
		: _Is_memfunptr<remove_cv_t<_Ty>>::_Bool_type
	{	
	};

template<class _Ty>
	 constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;

	
template<class _Ty>
	struct is_pointer
		: false_type
	{	
	};

template<class _Ty>
	struct is_pointer<_Ty *>
		: true_type
	{	
	};

template<class _Ty>
	struct is_pointer<_Ty * const>
		: true_type
	{	
	};

template<class _Ty>
	struct is_pointer<_Ty * volatile>
		: true_type
	{	
	};

template<class _Ty>
	struct is_pointer<_Ty * const volatile>
		: true_type
	{	
	};

template<class _Ty>
	 constexpr bool is_pointer_v = is_pointer<_Ty>::value;

	
template<class _Ty>
	struct is_null_pointer
		: bool_constant<is_same_v<remove_cv_t<_Ty>, nullptr_t>>
	{	
	};

template<class _Ty>
	 constexpr bool is_null_pointer_v = is_same_v<remove_cv_t<_Ty>, nullptr_t>;

	
template<class _Ty>
	struct is_union
		: bool_constant<__is_union(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_union_v = __is_union(_Ty);

	
template<class _Ty>
	struct is_class
		: bool_constant<__is_class(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_class_v = __is_class(_Ty);

	
template<class _Ty>
	struct is_fundamental
		: bool_constant<is_arithmetic_v<_Ty>
		|| is_void_v<_Ty>
		|| is_null_pointer_v<_Ty>>
	{	
	};

template<class _Ty>
	 constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;

	
template<class _Ty>
	struct is_object
		: bool_constant<!is_function_v<_Ty>
		&& !is_reference_v<_Ty>
		&& !is_void_v<_Ty>>
	{	
	};

template<class _Ty>
	 constexpr bool is_object_v = is_object<_Ty>::value;

	
template<class _From,
	class _To>
	struct is_convertible
		: bool_constant<__is_convertible_to(_From, _To)>
	{	
	};

template<class _From,
	class _To>
	 constexpr bool is_convertible_v = __is_convertible_to(_From, _To);

	
template<class _Ty>
	struct is_enum
		: bool_constant<__is_enum(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_enum_v = __is_enum(_Ty);

	
template<class _Ty>
	struct is_compound
		: bool_constant<!is_fundamental_v<_Ty>>
	{	
	};

template<class _Ty>
	 constexpr bool is_compound_v = is_compound<_Ty>::value;

	
template<class _Ty>
	struct is_member_pointer
		: bool_constant<is_member_object_pointer_v<_Ty>
		|| is_member_function_pointer_v<_Ty>>
	{	
	};

template<class _Ty>
	 constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;

	
template<class _Ty>
	struct is_scalar
		: bool_constant<is_arithmetic_v<_Ty>
		|| is_enum_v<_Ty>
		|| is_pointer_v<_Ty>
		|| is_member_pointer_v<_Ty>
		|| is_null_pointer_v<_Ty>>
	{	
	};

template<class _Ty>
	 constexpr bool is_scalar_v = is_scalar<_Ty>::value;

	
template<class _Ty>
	struct is_const
		: false_type
	{	
	};

template<class _Ty>
	struct is_const<const _Ty>
		: true_type
	{	
	};

template<class _Ty>
	 constexpr bool is_const_v = is_const<_Ty>::value;

	
template<class _Ty>
	struct is_volatile
		: false_type
	{	
	};

template<class _Ty>
	struct is_volatile<volatile _Ty>
		: true_type
	{	
	};

template<class _Ty>
	 constexpr bool is_volatile_v = is_volatile<_Ty>::value;

	
template<class _Ty>
	struct is_pod
		: bool_constant<__is_pod(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_pod_v = __is_pod(_Ty);

	
template<class _Ty>
	struct is_empty
		: bool_constant<__is_empty(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_empty_v = __is_empty(_Ty);

	
template<class _Ty>
	struct is_polymorphic
		: bool_constant<__is_polymorphic(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_polymorphic_v = __is_polymorphic(_Ty);

	
template<class _Ty>
	struct is_abstract
		: bool_constant<__is_abstract(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_abstract_v = __is_abstract(_Ty);

	
template<class _Ty>
	struct is_final
		: bool_constant<__is_final(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_final_v = __is_final(_Ty);

	
template<class _Ty>
	struct is_standard_layout
		: bool_constant<__is_standard_layout(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_standard_layout_v = __is_standard_layout(_Ty);

	
template<class _Ty>
	struct  is_literal_type
		: bool_constant<__is_literal_type(_Ty)>
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	  constexpr bool is_literal_type_v = __is_literal_type(_Ty);
#pragma warning(pop)

	
template<class _Ty>
	struct is_trivial
		: bool_constant<__is_trivial(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_trivial_v = __is_trivial(_Ty);

	
template<class _Ty>
	struct is_trivially_copyable
		: bool_constant<__is_trivially_copyable(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Ty);

	
template<class _Ty>
	struct has_virtual_destructor
		: bool_constant<__has_virtual_destructor(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool has_virtual_destructor_v = __has_virtual_destructor(_Ty);





















#line 825 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"

		
	
template<class _Ty,
	class... _Args>
	struct is_constructible
		: bool_constant<__is_constructible(_Ty, _Args...)>
	{	
	};

template<class _Ty,
	class... _Args>
	 constexpr bool is_constructible_v = __is_constructible(_Ty, _Args...);

	
template<class _Ty>
	struct is_copy_constructible
		: bool_constant<__is_constructible(_Ty, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	 constexpr bool is_copy_constructible_v = __is_constructible(_Ty, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_default_constructible
		: bool_constant<__is_constructible(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_default_constructible_v = __is_constructible(_Ty);

	
template<class _Ty,
	class = void>
	struct _Is_implicitly_default_constructible
		: false_type
	{	
	};

template<class _Ty>
	void _Implicitly_default_construct(const _Ty&);

template<class _Ty>
	struct _Is_implicitly_default_constructible<_Ty, void_t<decltype(_Implicitly_default_construct<_Ty>({}))>>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_move_constructible
		: bool_constant<__is_constructible(_Ty, _Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_move_constructible_v = __is_constructible(_Ty, _Ty);

	
template<class _To,
	class _From>
	struct is_assignable
		: bool_constant<__is_assignable(_To, _From)>
	{	
	};

template<class _To,
	class _From>
	 constexpr bool is_assignable_v = __is_assignable(_To, _From);

	
template<class _Ty>
	struct is_copy_assignable
		: bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	 constexpr bool is_copy_assignable_v =
		__is_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_move_assignable
		: bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, _Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_move_assignable_v = __is_assignable(add_lvalue_reference_t<_Ty>, _Ty);

	
template<class _Ty>
	struct is_destructible
		: bool_constant<__is_destructible(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_destructible_v = __is_destructible(_Ty);

		
	
template<class _Ty,
	class... _Args>
	struct is_trivially_constructible
		: bool_constant<__is_trivially_constructible(_Ty, _Args...)>
	{	
	};

template<class _Ty,
	class... _Args>
	 constexpr bool is_trivially_constructible_v = __is_trivially_constructible(_Ty, _Args...);

	
template<class _Ty>
	struct is_trivially_copy_constructible
		: bool_constant<__is_trivially_constructible(_Ty, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	 constexpr bool is_trivially_copy_constructible_v =
		__is_trivially_constructible(_Ty, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_trivially_default_constructible
		: bool_constant<__is_trivially_constructible(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_trivially_default_constructible_v = __is_trivially_constructible(_Ty);

	
template<class _Ty>
	struct is_trivially_move_constructible
		: bool_constant<__is_trivially_constructible(_Ty, _Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_trivially_move_constructible_v = __is_trivially_constructible(_Ty, _Ty);

	
template<class _To,
	class _From>
	struct is_trivially_assignable
		: bool_constant<__is_trivially_assignable(_To, _From)>
	{	
	};

template<class _To,
	class _From>
	 constexpr bool is_trivially_assignable_v = __is_trivially_assignable(_To, _From);

	
template<class _Ty>
	struct is_trivially_copy_assignable
		: bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	 constexpr bool is_trivially_copy_assignable_v =
		__is_trivially_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_trivially_move_assignable
		: bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_trivially_move_assignable_v =
		__is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty);

	
template<class _Ty>
	struct is_trivially_destructible
		: bool_constant<__is_trivially_destructible(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_trivially_destructible_v = __is_trivially_destructible(_Ty);

		
	
template<class _Ty,
	class... _Args>
	struct is_nothrow_constructible
		: bool_constant<__is_nothrow_constructible(_Ty, _Args...)>
	{	
	};

template<class _Ty,
	class... _Args>
	 constexpr bool is_nothrow_constructible_v = __is_nothrow_constructible(_Ty, _Args...);

	
template<class _Ty>
	struct is_nothrow_copy_constructible
		: bool_constant<__is_nothrow_constructible(_Ty, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	 constexpr bool is_nothrow_copy_constructible_v =
		__is_nothrow_constructible(_Ty, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_nothrow_default_constructible
		: bool_constant<__is_nothrow_constructible(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_nothrow_default_constructible_v = __is_nothrow_constructible(_Ty);

	
template<class _Ty>
	struct is_nothrow_move_constructible
		: bool_constant<__is_nothrow_constructible(_Ty, _Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_nothrow_move_constructible_v = __is_nothrow_constructible(_Ty, _Ty);

	
template<class _To,
	class _From>
	struct is_nothrow_assignable
		: bool_constant<__is_nothrow_assignable(_To, _From)>
	{	
	};

template<class _To,
	class _From>
	 constexpr bool is_nothrow_assignable_v = __is_nothrow_assignable(_To, _From);

	
template<class _Ty>
	struct is_nothrow_copy_assignable
		: bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	 constexpr bool is_nothrow_copy_assignable_v =
		__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_nothrow_move_assignable
		: bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_nothrow_move_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty);

	
template<class _Ty>
	struct is_nothrow_destructible
		: bool_constant<__is_nothrow_destructible(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr bool is_nothrow_destructible_v = __is_nothrow_destructible(_Ty);

	
#pragma warning(push)
#pragma warning(disable: 4296)	
template<class _Ty,
	bool = is_integral_v<_Ty>>
	struct _Sign_base
	{	
	using _Uty = remove_cv_t<_Ty>;
	using _Signed = bool_constant<_Uty(-1) < _Uty(0)>;
	using _Unsigned = bool_constant<_Uty(0) < _Uty(-1)>;
	};
#pragma warning(pop)

template<class _Ty>
	struct _Sign_base<_Ty, false>
	{	
		
	using _Signed = typename is_floating_point<_Ty>::type;
	using _Unsigned = false_type;
	};

template<class _Ty>
	struct is_signed
		: _Sign_base<_Ty>::_Signed
	{	
	};

template<class _Ty>
	 constexpr bool is_signed_v = is_signed<_Ty>::value;

	
template<class _Ty>
	struct is_unsigned
		: _Sign_base<_Ty>::_Unsigned
	{	
	};

template<class _Ty>
	 constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;

	
template<class _Ty>
	using _Is_nonbool_integral =
		bool_constant<is_integral_v<_Ty>
			&& !is_same_v<remove_cv_t<_Ty>, bool>>;

	
template<class _Ty>
	struct _Change_sign
	{	
	static_assert(_Is_nonbool_integral<_Ty>::value || is_enum_v<_Ty>,
		"make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
		"cv-qualified) integral type or enumeration but not a bool type.");

	using _Signed =
		conditional_t<_Is_any_of_v<_Ty, long, unsigned long>, long,
		conditional_t<sizeof(_Ty) == 1, signed char,
		conditional_t<sizeof(_Ty) == 2, short,
		conditional_t<sizeof(_Ty) == 4, int,
			long long
		>>>>;

	using _Unsigned =
		conditional_t<_Is_any_of_v<_Ty, long, unsigned long>, unsigned long,
		conditional_t<sizeof(_Ty) == 1, unsigned char,
		conditional_t<sizeof(_Ty) == 2, unsigned short,
		conditional_t<sizeof(_Ty) == 4, unsigned int,
			unsigned long long
		>>>>;
	};

template<class _Ty>
	struct _Change_sign<const _Ty>
	{	
	using _Signed = const typename _Change_sign<_Ty>::_Signed;
	using _Unsigned = const typename _Change_sign<_Ty>::_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<volatile _Ty>
	{	
	using _Signed = volatile typename _Change_sign<_Ty>::_Signed;
	using _Unsigned = volatile typename _Change_sign<_Ty>::_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const volatile _Ty>
	{	
	using _Signed = const volatile typename _Change_sign<_Ty>::_Signed;
	using _Unsigned = const volatile typename _Change_sign<_Ty>::_Unsigned;
	};

	
template<class _Ty>
	struct make_signed
	{	
	using type = typename _Change_sign<_Ty>::_Signed;
	};

template<class _Ty>
	using make_signed_t = typename make_signed<_Ty>::type;

	
template<class _Ty>
	struct make_unsigned
	{	
	using type = typename _Change_sign<_Ty>::_Unsigned;
	};

template<class _Ty>
	using make_unsigned_t = typename make_unsigned<_Ty>::type;

	
template<class _Rep>
	constexpr make_unsigned_t<_Rep> _Unsigned_value(_Rep _Val)
	{	
	return (static_cast<make_unsigned_t<_Rep>>(_Val));
	}

	
template<class _Ty>
	struct alignment_of
		: integral_constant<size_t, alignof(_Ty)>
	{	
	};

template<class _Ty>
	 constexpr size_t alignment_of_v = alignof(_Ty);

	




template<class _Ty,
	size_t _Len>
	union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len,
	size_t _Align,
	class _Ty,
	bool _Ok>
	struct _Aligned;

template<size_t _Len,
	size_t _Align,
	class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	using type = _Align_type<_Ty, _Len>;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, double, false>
	{	
 





  
	static_assert(_Always_false<_Aligned>,
		"You've instantiated std::aligned_storage<Len, Align> with an extended alignment (in other "
		"words, Align > alignof(max_align_t)). Before VS 2017 15.8, the member type would "
		"non-conformingly have an alignment of only alignof(max_align_t). VS 2017 15.8 was fixed to "
		"handle this correctly, but the fix inherently changes layout and breaks binary compatibility "
		"(*only* for uses of aligned_storage with extended alignments). "
		"Please define either "
		"(1) _ENABLE_EXTENDED_ALIGNED_STORAGE to acknowledge that you understand this message and "
		"that you actually want a type with an extended alignment, or "
		"(2) _DISABLE_EXTENDED_ALIGNED_STORAGE to silence this message and get the old non-conformant "
		"behavior.");
  #line 1283 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
	using type = _Align_type<max_align_t, _Len>;
 #line 1285 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	using type = typename _Aligned<_Len, _Align, double, _Align <= alignof(double)>::type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	using type = typename _Aligned<_Len, _Align, int, _Align <= alignof(int)>::type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	using type = typename _Aligned<_Len, _Align, short, _Align <= alignof(short)>::type;
	};

template<size_t _Len,
	size_t _Align = alignof(max_align_t)>
	struct aligned_storage
	{	
	using type = typename _Aligned<_Len, _Align, char, _Align <= alignof(char)>::type;
	};




template<size_t _Len,
	size_t _Align = alignof(max_align_t)>
	using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

	
template<size_t... _Vals>
	struct _Maximum;

template<>
	struct _Maximum<>
		: integral_constant<size_t, 0>
	{	
	};

template<size_t _Val>
	struct _Maximum<_Val>
		: integral_constant<size_t, _Val>
	{	
	};

template<size_t _First,
	size_t _Second,
	size_t... _Rest>
	struct _Maximum<_First, _Second, _Rest...>
		: _Maximum<(_First < _Second ? _Second : _First), _Rest...>::type
	{	
	};

template<size_t _Len,
	class... _Types>
	struct aligned_union
	{	
	static constexpr size_t _Max_len = _Maximum<_Len, sizeof(_Types)...>::value;	
	static constexpr size_t alignment_value = _Maximum<alignof(_Types)...>::value;
	using type = aligned_storage_t<_Max_len, alignment_value>;
	};

template<size_t _Len,
	class... _Types>
	using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

	
template<class _Ty>
	struct underlying_type
	{	
	using type = __underlying_type(_Ty);
	};

template<class _Ty>
	using underlying_type_t = typename underlying_type<_Ty>::type;

	
template<class _Ty>
	struct rank
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct rank<_Ty[_Ix]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	 constexpr size_t rank_v = rank<_Ty>::value;

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct _Extent<_Ty[_Ix], 0>
		: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, size_t _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
		: _Extent<_Ty, _Nx>
	{	
	};

template<class _Ty,
	unsigned int _Ix = 0>
	 constexpr size_t extent_v = extent<_Ty, _Ix>::value;

	
template<class _Base,
	class _Derived>
	struct is_base_of
		: bool_constant<__is_base_of(_Base, _Derived)>
	{	
	};

template<class _Base,
	class _Derived>
	 constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);

	
template<class _Ty>
	struct decay
	{	
	using _Ty1 = remove_reference_t<_Ty>;

	using type = conditional_t<is_array_v<_Ty1>,
		add_pointer_t<remove_extent_t<_Ty1>>,
		conditional_t<is_function_v<_Ty1>,
			add_pointer_t<_Ty1>,
			remove_cv_t<_Ty1>>>;
	};

template<class _Ty>
	using decay_t = typename decay<_Ty>::type;

		
template<class _Ty1,
	class _Ty2,
	class = void>
	struct _Decayed_cond_oper
	{
	};

template<class _Ty1,
	class _Ty2>
	struct _Decayed_cond_oper<_Ty1, _Ty2, void_t<decltype(false ? ::std:: declval<_Ty1>() : ::std:: declval<_Ty2>())>>
	{
	using type = decay_t<decltype(false ? ::std:: declval<_Ty1>() : ::std:: declval<_Ty2>())>;
	};

template<class... _Ty>
	struct common_type;

template<class... _Ty>
	using common_type_t = typename common_type<_Ty...>::type;

template<>
	struct common_type<>
	{
	};

template<class _Ty1>
	struct common_type<_Ty1>
		: common_type<_Ty1, _Ty1>
	{
	};

template<class _Ty1,
	class _Ty2,
	class _Decayed1 = decay_t<_Ty1>,
	class _Decayed2 = decay_t<_Ty2>>
	struct _Common_type2
		: common_type<_Decayed1, _Decayed2>
	{
	};

template<class _Ty1,
	class _Ty2>
	struct _Common_type2<_Ty1, _Ty2, _Ty1, _Ty2>
		: _Decayed_cond_oper<_Ty1, _Ty2>
	{
	};

template<class _Ty1,
	class _Ty2>
	struct common_type<_Ty1, _Ty2>
		: _Common_type2<_Ty1, _Ty2>
	{
	};

template<class _Void,
	class _Ty1,
	class _Ty2,
	class... _Rest>
	struct _Common_type3
	{
	};

template<class _Ty1,
	class _Ty2,
	class... _Rest>
	struct _Common_type3<void_t<common_type_t<_Ty1, _Ty2>>, _Ty1, _Ty2, _Rest...>
		: common_type<common_type_t<_Ty1, _Ty2>, _Rest...>
	{
	};

template<class _Ty1,
	class _Ty2,
	class... _Rest>
	struct common_type<_Ty1, _Ty2, _Rest...>
		: _Common_type3<void, _Ty1, _Ty2, _Rest...>
	{
	};


	
template<class _Ty>
	struct [[deprecated("warning STL4003: " "The non-Standard std::identity struct is deprecated and will be REMOVED. You can " "define _SILENCE_IDENTITY_STRUCT_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] identity
	{	
	using type = _Ty;

	const _Ty& operator()(const _Ty& _Left) const
		{	
		return (_Left);
		}
	};
#line 1546 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"

	
template<class _Ty>
	struct _Identity
	{	
	using type = _Ty;
	};
template<class _Ty>
	using _Identity_t = typename _Identity<_Ty>::type;

	
template<class _Type,
	template <class...> class _Template>
	 constexpr bool _Is_specialization_v = false;
template<template <class...> class _Template,
	class... _Types>
	 constexpr bool _Is_specialization_v<_Template<_Types...>, _Template> = true;

template<class _Type,
	template <class...> class _Template>
	struct _Is_specialization
		: bool_constant<_Is_specialization_v<_Type, _Template>>
	{};

	
template<class _Ty>
	 constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept
	{	
	return (static_cast<_Ty&&>(_Arg));
	}

template<class _Ty>
	 constexpr _Ty&& forward(remove_reference_t<_Ty>&& _Arg) noexcept
	{	
	static_assert(!is_lvalue_reference_v<_Ty>, "bad forward call");
	return (static_cast<_Ty&&>(_Arg));
	}

		
template<class _Ty>
	 constexpr remove_reference_t<_Ty>&&
		move(_Ty&& _Arg) noexcept
	{	
	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));
	}

		
template<class _Ty>
	 constexpr conditional_t<!is_nothrow_move_constructible_v<_Ty> && is_copy_constructible_v<_Ty>,
		const _Ty&, _Ty&&>
	move_if_noexcept(_Ty& _Arg) noexcept
	{	
	return (::std:: move(_Arg));
	}

template<class _Ty>
	class reference_wrapper;








































































































































































template<class _Callable,
	class... _Types>
	struct _Invoker;

template<class _Callable,
	class... _Types> inline
	auto invoke(_Callable&& _Obj, _Types&&... _Args)
	noexcept(noexcept(_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)))
#line 1780 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
	-> decltype(_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));

struct _Unforced
	{	
	};

	
template<class _To>
	void _Implicitly_convert_to(_To) noexcept;

template<class _From,
	class _To,
	bool = is_convertible_v<_From, _To>>
	struct _Is_nothrow_convertible
		: bool_constant<noexcept(_Implicitly_convert_to<_To>(::std:: declval<_From>()))>
	{	
	};

template<class _From,
	class _To>
	struct _Is_nothrow_convertible<_From, _To, false>
		: false_type
	{	
	};

template<class _Void,
	class... _Types>
	struct _Invoke_traits
	{	
	using _Is_invocable = false_type;
	using _Is_nothrow_invocable = false_type;
	template<class _Rx>
		using _Is_invocable_r = false_type;
	template<class _Rx>
		using _Is_nothrow_invocable_r = false_type;
	};

template<class... _Types>
	struct _Invoke_traits<void_t<decltype(::std:: invoke(::std:: declval<_Types>()...))>, _Types...>
	{	
	using type = decltype(::std:: invoke(::std:: declval<_Types>()...));
	using _Is_invocable = true_type;
	using _Is_nothrow_invocable = bool_constant<noexcept(::std:: invoke(::std:: declval<_Types>()...))>;
	template<class _Rx>
		using _Is_invocable_r = bool_constant<disjunction_v<is_void<_Rx>, is_convertible<type, _Rx>>>;
	template<class _Rx>
		using _Is_nothrow_invocable_r = bool_constant<conjunction_v<
			_Is_nothrow_invocable,
			disjunction<is_void<_Rx>, _Is_nothrow_convertible<type, _Rx>>>>;
	};

	
template<class _Fty>
	struct  result_of
	{	
	static_assert(_Always_false<_Fty>,
		"result_of<CallableType> is invalid; use "
		"result_of<CallableType(zero or more argument types)> instead.");
	};









template<class _Callable, class... _Args> struct  result_of<_Callable __cdecl (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { };  template<class _Callable, class... _Args> struct  result_of<_Callable __fastcall (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { }; template<class _Callable, class... _Args> struct  result_of<_Callable __stdcall (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { }; template<class _Callable, class... _Args> struct  result_of<_Callable __vectorcall (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { };


#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	using result_of_t  = typename result_of<_Ty>::type;
#pragma warning(pop)

template<class _Callable,
	class... _Args>
	using _Invoke_result_t = typename _Invoke_traits<void, _Callable, _Args...>::type;

template<class _Rx,
	class _Callable,
	class... _Args>
	using _Is_invocable_r_ = typename _Invoke_traits<void, _Callable, _Args...>::template _Is_invocable_r<_Rx>;

template<class _Rx,
	class _Callable,
	class... _Args>
	struct _Is_invocable_r
		: _Is_invocable_r_<_Rx, _Callable, _Args...>
	{	
	};



































































#line 1942 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"


	
template<class _Ty,
	class = void>
	struct _Weak_result_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Weak_result_type<_Ty, void_t<
		typename _Ty::result_type>>
	{	
	 typedef typename _Ty::result_type result_type;
	};
#pragma warning(pop)

template<class _Ty,
	class = void>
	struct _Weak_argument_type
		: _Weak_result_type<_Ty>
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Weak_argument_type<_Ty, void_t<
		typename _Ty::argument_type>>
		: _Weak_result_type<_Ty>
	{	
	 typedef typename _Ty::argument_type argument_type;
	};
#pragma warning(pop)

template<class _Ty,
	class = void>
	struct _Weak_binary_args
		: _Weak_argument_type<_Ty>
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Weak_binary_args<_Ty, void_t<
		typename _Ty::first_argument_type,
		typename _Ty::second_argument_type>>
		: _Weak_argument_type<_Ty>
	{	
	 typedef typename _Ty::first_argument_type first_argument_type;
	 typedef typename _Ty::second_argument_type second_argument_type;
	};
#pragma warning(pop)

template<class _Ty>
	struct _Weak_types
	{	
	using _Is_f_or_pf = _Is_function<remove_pointer_t<_Ty>>;
	using _Is_pmf = _Is_memfunptr<remove_cv_t<_Ty>>;
	using type = conditional_t<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
		conditional_t<_Is_pmf::_Bool_type::value, _Is_pmf,
		_Weak_binary_args<_Ty>>>;
	};

	
template<class _Ty>
	void _Refwrap_ctor_fun(_Identity_t<_Ty&>) noexcept;
template<class _Ty>
	void _Refwrap_ctor_fun(_Identity_t<_Ty&&>) = delete;

struct _Unique_tag_refwrap_has_ctor_from
	{	
	};

template<class _Ty,
	class _Uty,
	class = void>
	struct _Refwrap_has_ctor_from
		: false_type
	{
	};

template<class _Ty,
	class _Uty>
	struct _Refwrap_has_ctor_from<_Ty, _Uty, void_t<
		_Unique_tag_refwrap_has_ctor_from,	
		decltype(_Refwrap_ctor_fun<_Ty>(::std:: declval<_Uty>()))>>
		: true_type
	{
	};

template<class _Ty>
	class reference_wrapper
		: public _Weak_types<_Ty>::type
	{	
public:
	static_assert(is_object_v<_Ty> || is_function_v<_Ty>,
		"reference_wrapper<T> requires T to be an object type or a function type.");

	using type = _Ty;

	template<class _Uty,
		enable_if_t<conjunction_v<
			negation<is_same<remove_cv_t<remove_reference_t<_Uty>>, reference_wrapper>>,
			_Refwrap_has_ctor_from<_Ty, _Uty>>, int> = 0>
		reference_wrapper(_Uty&& _Val)
			noexcept(noexcept(_Refwrap_ctor_fun<_Ty>(::std:: declval<_Uty>())))
			{	
			_Ty& _Ref = ::std:: forward<_Uty>(_Val);
			_Ptr = ::std:: addressof(_Ref);
			}

	operator _Ty&() const noexcept
		{	
		return (*_Ptr);
		}

	 _Ty& get() const noexcept
		{	
		return (*_Ptr);
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const
		-> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
		}

private:
	_Ty * _Ptr;
	};





#line 2083 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"

	
template<class _Ty>
	 inline reference_wrapper<_Ty> ref(_Ty& _Val) noexcept
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&&) = delete;

template<class _Ty>
	 inline reference_wrapper<_Ty> ref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: ref(_Val.get()));
	}

template<class _Ty>
	 inline reference_wrapper<const _Ty> cref(const _Ty& _Val) noexcept
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}

template<class _Ty>
	void cref(const _Ty&&) = delete;

template<class _Ty>
	 inline reference_wrapper<const _Ty> cref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: cref(_Val.get()));
	}

		
template<class _Ty>
	struct _Is_swappable;

		
template<class _Ty>
	struct _Is_nothrow_swappable;

		




#line 2129 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
template<class _Ty,
	class = void> inline
#line 2132 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
	void swap(_Ty&, _Ty&)
		noexcept(is_nothrow_move_constructible_v<_Ty> && is_nothrow_move_assignable_v<_Ty>);
#line 2135 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"

template<class _Ty,
	size_t _Size,
	class = enable_if_t<_Is_swappable<_Ty>::value>> inline
	void swap(_Ty (&)[_Size], _Ty (&)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value);

		
template<class _Ty1,
	class _Ty2,
	class = void>
	struct _Swappable_with_helper
		: false_type
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct _Swappable_with_helper<_Ty1, _Ty2, void_t<decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
		: true_type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_swappable_with
		: bool_constant<conjunction_v<
			_Swappable_with_helper<_Ty1, _Ty2>,
			_Swappable_with_helper<_Ty2, _Ty1>>>
	{	
		
	};

		
template<class _Ty>
	struct _Is_swappable
		: _Is_swappable_with<
			add_lvalue_reference_t<_Ty>,
			add_lvalue_reference_t<_Ty>>::type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Swap_cannot_throw
		: bool_constant<noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
					&& noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()))>
	{	
		
		
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_nothrow_swappable_with
		: bool_constant<conjunction_v<
			_Is_swappable_with<_Ty1, _Ty2>,
			_Swap_cannot_throw<_Ty1, _Ty2>>>
	{	
		
	};

		
template<class _Ty>
	struct _Is_nothrow_swappable
		: _Is_nothrow_swappable_with<
			add_lvalue_reference_t<_Ty>,
			add_lvalue_reference_t<_Ty>>::type
	{	
	};















































#line 2256 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"

	
namespace _Has_ADL_swap_detail {
	void swap(); 

	template<class,
		class = void>
		struct _Has_ADL_swap
			: false_type
		{};
	template<class _Ty>
		struct _Has_ADL_swap<_Ty, void_t<decltype(swap(::std:: declval<_Ty&>(), ::std:: declval<_Ty&>()))>>
			: true_type
		{};
} 
using _Has_ADL_swap_detail::_Has_ADL_swap;

template<class _Ty>
	struct _Is_trivially_swappable
		: bool_constant<conjunction_v<
			is_trivially_destructible<_Ty>,
			is_trivially_move_constructible<_Ty>,
			is_trivially_move_assignable<_Ty>,
			negation<_Has_ADL_swap<_Ty>>>>
	{	
		
	};

template<class _Ty>
	 constexpr bool _Is_trivially_swappable_v = _Is_trivially_swappable<_Ty>::value;

		
 


















































	
	
	



#line 2346 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
 constexpr size_t _FNV_offset_basis = 2166136261U;
 constexpr size_t _FNV_prime = 16777619U;
#line 2349 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"

 inline size_t _Fnv1a_append_bytes(size_t _Val,
	const unsigned char * const _First, const size_t _Count) noexcept
	{	
	for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
		{
		_Val ^= static_cast<size_t>(_First[_Idx]);
		_Val *= _FNV_prime;
		}

	return (_Val);
	}

template<class _Ty>
	 inline size_t _Fnv1a_append_range(const size_t _Val,
		const _Ty * const _First, const _Ty * const _Last) noexcept
	{	
	static_assert(is_trivial_v<_Ty>, "Only trivial types can be directly hashed.");
	const auto _Firstb = reinterpret_cast<const unsigned char *>(_First);
	const auto _Lastb = reinterpret_cast<const unsigned char *>(_Last);
	return (_Fnv1a_append_bytes(_Val, _Firstb, static_cast<size_t>(_Lastb - _Firstb)));
	}

template<class _Kty>
	 inline size_t _Fnv1a_append_value(const size_t _Val, const _Kty& _Keyval) noexcept
	{	
	static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
	return (_Fnv1a_append_bytes(_Val,
		&reinterpret_cast<const unsigned char&>(_Keyval), sizeof(_Kty)));
	}

	
template<class _Kty>
	 inline size_t _Hash_representation(const _Kty& _Keyval) noexcept
	{	
	return (_Fnv1a_append_value(_FNV_offset_basis, _Keyval));
	}

	
template<class _Kty>
	 inline size_t _Hash_array_representation(
		const _Kty * const _First, const size_t _Count) noexcept
	{	
	static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
	return (_Fnv1a_append_bytes(_FNV_offset_basis,
		reinterpret_cast<const unsigned char *>(_First), _Count * sizeof(_Kty)));
	}

	
template<class _Kty>
	struct hash;

template<class _Kty,
	bool _Enabled>
	struct _Conditionally_enabled_hash
	{	
	 typedef _Kty argument_type;
	 typedef size_t result_type;

	 size_t operator()(const _Kty& _Keyval) const
		noexcept(noexcept(hash<_Kty>::_Do_hash(_Keyval)))
		{	
		return (hash<_Kty>::_Do_hash(_Keyval));
		}
	};

template<class _Kty>
	struct _Conditionally_enabled_hash<_Kty, false>
	{	
	_Conditionally_enabled_hash() = delete;
	_Conditionally_enabled_hash(const _Conditionally_enabled_hash&) = delete;
	_Conditionally_enabled_hash(_Conditionally_enabled_hash&&) = delete;
	_Conditionally_enabled_hash& operator=(const _Conditionally_enabled_hash&) = delete;
	_Conditionally_enabled_hash& operator=(_Conditionally_enabled_hash&&) = delete;
	};

	
template<class _Kty>
	struct hash
		: _Conditionally_enabled_hash<_Kty, !is_const_v<_Kty> && !is_volatile_v<_Kty>
			&& (is_enum_v<_Kty> || is_integral_v<_Kty> || is_pointer_v<_Kty>)>
	{	
	static size_t _Do_hash(const _Kty& _Keyval) noexcept
		{	
		return (_Hash_representation(_Keyval));
		}
	};

template<>
	struct hash<float>
	{	
	 typedef float argument_type;
	 typedef size_t result_type;
	 size_t operator()(const float _Keyval) const noexcept
		{	
		return (_Hash_representation(_Keyval == 0.0F ? 0.0F : _Keyval));	
		}
	};

template<>
	struct hash<double>
	{	
	 typedef double argument_type;
	 typedef size_t result_type;
	 size_t operator()(const double _Keyval) const noexcept
		{	
		return (_Hash_representation(_Keyval == 0.0 ? 0.0 : _Keyval));	
		}
	};

template<>
	struct hash<long double>
	{	
	 typedef long double argument_type;
	 typedef size_t result_type;
	 size_t operator()(const long double _Keyval) const noexcept
		{	
		return (_Hash_representation(_Keyval == 0.0L ? 0.0L : _Keyval));	
		}
	};

template<>
	struct hash<nullptr_t>
	{	
	 typedef nullptr_t argument_type;
	 typedef size_t result_type;
	 size_t operator()(nullptr_t) const noexcept
		{	
		void * _Null{};
		return (_Hash_representation(_Null));
		}
	};

		
template<class _Kty,
	class = void>
	struct _Is_nothrow_hashable
		: false_type
	{	
	};

template<class _Kty>
	struct _Is_nothrow_hashable<_Kty, void_t<decltype(hash<_Kty>{}(::std:: declval<const _Kty&>()))>>
		: bool_constant<noexcept(hash<_Kty>{}(::std:: declval<const _Kty&>()))>
	{	
	};


#pragma warning(push)
#pragma warning(disable: 4996)	
namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
using ::std:: hash;
}
#pragma warning(pop)
#line 2561 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"








 #line 16707565 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 16707566 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
struct _Invoker_pmf_object { template<class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _Invoker_pmf_refwrap { template<class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return ((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _Invoker_pmf_pointer { template<class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _Invoker_pmd_object { template<class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std:: forward<_Ty1>(_Arg1).*_Pmd)) -> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd) { return (::std:: forward<_Ty1>(_Arg1).*_Pmd); } }; struct _Invoker_pmd_refwrap { template<class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std:: forward<_Ty1>(_Arg1).get().*_Pmd)) -> decltype(::std:: forward<_Ty1>(_Arg1).get().*_Pmd) { return (::std:: forward<_Ty1>(_Arg1).get().*_Pmd); } }; struct _Invoker_pmd_pointer { template<class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)) -> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd) { return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd); } }; struct _Invoker_functor { template<class _Callable, class... _Types> static inline auto _Call(_Callable&& _Obj, _Types&&... _Args) noexcept(noexcept(::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...))) -> decltype(::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...)) { return (::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...)); } }; template<class _Callable, class _Ty1, class _Removed_cvref = remove_cv_t<remove_reference_t<_Callable>>, bool _Is_pmf = is_member_function_pointer_v<_Removed_cvref>, bool _Is_pmd = is_member_object_pointer_v<_Removed_cvref>> struct _Invoker1; template<class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1<_Callable, _Ty1, _Removed_cvref, true, false> : conditional_t<is_base_of_v< typename _Is_memfunptr<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>, _Invoker_pmf_object, conditional_t<_Is_specialization_v<remove_cv_t<remove_reference_t<_Ty1>>, reference_wrapper>, _Invoker_pmf_refwrap, _Invoker_pmf_pointer >> { }; template<class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, true> : conditional_t<is_base_of_v< typename _Is_member_object_pointer<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>, _Invoker_pmd_object, conditional_t<_Is_specialization_v<remove_cv_t<remove_reference_t<_Ty1>>, reference_wrapper>, _Invoker_pmd_refwrap, _Invoker_pmd_pointer >> { }; template<class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, false> : _Invoker_functor { }; template<class _Callable, class... _Types> struct _Invoker; template<class _Callable> struct _Invoker<_Callable> : _Invoker_functor { }; template<class _Callable, class _Ty1, class... _Types2> struct _Invoker<_Callable, _Ty1, _Types2...> : _Invoker1<_Callable, _Ty1> { }; template<class _Callable, class... _Types> inline auto invoke(_Callable&& _Obj, _Types&&... _Args) noexcept(noexcept(_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))) -> decltype(_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)) { return (_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)); }







#line 16707575 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"



template<class _Rx,
	bool = is_void_v<_Rx>>
	struct _Invoker_ret
	{	
	};

template<class _Cv_void>
	struct _Invoker_ret<_Cv_void, true>
	{	
	template<class... _Valtys>
		static void _Call(_Valtys&&... _Vals)

#line 15732479 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 15732480 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
		{	

#line 16707565 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 16707566 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
		::std:: invoke(::std:: forward<_Valtys>(_Vals)...);

#line 15732479 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 15732480 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
		}
	};

template<class _Rx>
	struct _Invoker_ret<_Rx, false>
	{	
	template<class... _Valtys>
		static _Rx _Call(_Valtys&&... _Vals)

#line 15732479 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 15732480 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
		{	

#line 16707565 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 16707566 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
		return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));

#line 15732479 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 15732480 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
		}
	};

template<>
	struct _Invoker_ret<_Unforced, false>
	{	
	template<class... _Valtys>
		static auto _Call(_Valtys&&... _Vals)
		-> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))

#line 15732479 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 15732480 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
		{	

#line 16707565 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 16707566 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
		return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));

#line 15732479 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 15732480 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
		}
	};

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 15732490 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"
#line 15732491 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\type_traits"





#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {

  bool __cdecl uncaught_exception() noexcept;
 int __cdecl uncaught_exceptions() noexcept;

}

 

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"







#pragma once






__pragma(pack(push, 8)) extern "C" {







    
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"















typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;








   
void* __cdecl _alloca(  size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);

     
    __declspec(dllimport) int __cdecl _heapmin(void);

    
        __declspec(dllimport) int __cdecl _heapwalk(  _HEAPINFO* _EntryInfo);
    #line 69 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"

    
          __declspec(dllimport) int __cdecl _heapchk(void);
    #line 73 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"

    __declspec(dllimport) int __cdecl _resetstkoflw(void);

    
    
    

    


        
    #line 85 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"

    typedef char __static_assert_t[(sizeof(unsigned int) <= 8) != 0];


    #pragma warning(push)
    #pragma warning(disable:6540)

    __inline void* _MarkAllocaS(   void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 8;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 8;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

    #pragma warning(pop)

#line 111 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"





    
        
        




    #line 124 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"












#line 137 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"




#line 142 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"
#line 143 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"

    

    #pragma warning(push)
    #pragma warning(disable: 6014)
    __inline void __cdecl _freea(    void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 8;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }
            
            else if (_Marker != 0xCCCC)
            {
                (void)( (!!((("Corrupted pointer passed to _freea" && 0)))) || (1 != _CrtDbgReportW(2, L"c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h", 162, 0, L"%ls", L"(\"Corrupted pointer passed to _freea\" && 0)")) || (__debugbreak(), 0) );
            }
            #line 165 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"
        }
    }
    #pragma warning(pop)

#line 170 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"




    
#line 176 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"



} __pragma(pack(pop))
#line 181 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\malloc.h"
#line 27 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_exception.h"







#pragma once

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\eh.h"







#pragma once


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_terminate.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();








    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();

    

        __declspec(dllimport) terminate_handler __cdecl set_terminate(
              terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();

    #line 40 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_terminate.h"

#line 42 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_terminate.h"

} __pragma(pack(pop))

#line 46 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_terminate.h"
#line 12 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\eh.h"



__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;



     __declspec(noreturn) void __cdecl unexpected() noexcept(false);

    

         unexpected_handler __cdecl set_unexpected(
              unexpected_handler _NewUnexpectedHandler
            ) noexcept;

         unexpected_handler __cdecl _get_unexpected() noexcept;

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

         _se_translator_function __cdecl _set_se_translator(
              _se_translator_function _NewSETranslator
            );

    #line 48 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\eh.h"

    class type_info;

     int __cdecl _is_exception_typeof(
          type_info const&     _Type,
          _EXCEPTION_POINTERS* _ExceptionPtr
        );

     bool __cdecl __uncaught_exception();
     int  __cdecl __uncaught_exceptions();

#line 60 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\eh.h"

} __pragma(pack(pop))

#line 64 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\eh.h"
#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_exception.h"





#pragma pack(push, 8)


__pragma(pack(push, 8)) extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool        _DoFree;
};

 void __cdecl __std_exception_copy(
       __std_exception_data const* _From,
      __std_exception_data*       _To
    );

 void __cdecl __std_exception_destroy(
      __std_exception_data* _Data
    );

} __pragma(pack(pop))



namespace std {

#pragma warning(push)
#pragma warning(disable: 4577) 
class exception
{
public:

    exception() noexcept
        : _Data()
    {
    }

    explicit exception(char const* const _Message) noexcept
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) noexcept
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) noexcept
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) noexcept
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() noexcept
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() noexcept
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() noexcept
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) noexcept
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() noexcept
        : bad_alloc("bad array new length")
    {
    }
};

#pragma warning(pop)

} 

#line 146 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_exception.h"
#pragma pack(pop)





#line 28 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"

namespace std {

using ::terminate;


using ::set_terminate;
using ::terminate_handler;

 inline terminate_handler __cdecl get_terminate() noexcept
	{	
	return (_get_terminate());
	}
#line 42 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"


using ::unexpected;

 
using ::set_unexpected;
using ::unexpected_handler;

 inline unexpected_handler __cdecl get_unexpected() noexcept
	{	
	return (_get_unexpected());
	}
 #line 55 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"
#line 56 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"

}

 



































































































































































#line 224 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"

 void __cdecl __ExceptionPtrCreate(  void*);
 void __cdecl __ExceptionPtrDestroy(  void*);
 void __cdecl __ExceptionPtrCopy(  void*,   const void*);
 void __cdecl __ExceptionPtrAssign(  void*,   const void*);
 bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);
 bool __cdecl __ExceptionPtrToBool(  const void*);
 void __cdecl __ExceptionPtrSwap(  void*,   void*);
 void __cdecl __ExceptionPtrCurrentException(  void*);
[[noreturn]]  void __cdecl __ExceptionPtrRethrow(  const void*);
 void __cdecl __ExceptionPtrCopyException(
	  void*,   const void*,   const void*);

namespace std {

class exception_ptr
	{
public:
	exception_ptr() noexcept
		{
		__ExceptionPtrCreate(this);
		}

	exception_ptr(nullptr_t) noexcept
		{
		__ExceptionPtrCreate(this);
		}

	~exception_ptr() noexcept
		{
		__ExceptionPtrDestroy(this);
		}

	exception_ptr(const exception_ptr& _Rhs) noexcept
		{
		__ExceptionPtrCopy(this, &_Rhs);
		}

	exception_ptr& operator=(const exception_ptr& _Rhs) noexcept
		{
		__ExceptionPtrAssign(this, &_Rhs);
		return *this;
		}

	exception_ptr& operator=(nullptr_t) noexcept
		{
		exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	explicit operator bool() const noexcept
		{
		return __ExceptionPtrToBool(this);
		}

	[[noreturn]] void _RethrowException() const
		{
		__ExceptionPtrRethrow(this);
		}

	static exception_ptr _Current_exception() noexcept
		{
		exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}

	static exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		exception_ptr _Retval;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}

private:




	void* _Data1;
	void* _Data2;



	};

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) noexcept
	{
	__ExceptionPtrSwap(&_Lhs, &_Rhs);
	}

 inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept
	{
	return __ExceptionPtrCompare(&_Lhs, &_Rhs);
	}

 inline bool operator==(nullptr_t, const exception_ptr& _Rhs) noexcept
	{
	return !_Rhs;
	}

 inline bool operator==(const exception_ptr& _Lhs, nullptr_t) noexcept
	{
	return !_Lhs;
	}

 inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept
	{
	return !(_Lhs == _Rhs);
	}

 inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) noexcept
	{
	return !(_Lhs == _Rhs);
	}

 inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) noexcept
	{
	return !(_Lhs == _Rhs);
	}

 inline exception_ptr current_exception() noexcept
	{
	return exception_ptr::_Current_exception();
	}

[[noreturn]] inline void rethrow_exception(  exception_ptr _Ptr)
	{
	_Ptr._RethrowException();
	}

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex>  exception_ptr make_exception_ptr(_Ex _Except) noexcept
	{
	return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
	}

	
class nested_exception
	{	
public:
	nested_exception() noexcept
		: _Exc(::std:: current_exception())
		{	
		}

	nested_exception(const nested_exception&) noexcept = default;
	nested_exception& operator=(const nested_exception&) noexcept = default;
	virtual ~nested_exception() noexcept
		{
		}

	[[noreturn]] void rethrow_nested() const
		{	
		if (_Exc)
			::std:: rethrow_exception(_Exc);
		else
			::std:: terminate();
		}

	 exception_ptr nested_ptr() const noexcept
		{	
		return (_Exc);
		}

private:
	exception_ptr _Exc;
	};

	
template<class _Ty,
	class _Uty>
	struct _With_nested
		: _Uty, nested_exception
	{	
	explicit _With_nested(_Ty&& _Arg)
		: _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
		{	
		}
	};

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
	{	
	using _Uty = decay_t<_Ty>;
	using _Glued = _With_nested<_Ty, _Uty>;

	throw _Glued(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
	{	
	throw ::std:: forward<_Ty>(_Arg);
	}

template<class _Ty>
	[[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
	{	
	typedef decay_t<_Ty> _Uty;

	bool_constant<
		is_class_v<_Uty>
		&& !is_base_of_v<nested_exception, _Uty>
		&& !is_final_v<_Uty>> _Tag;

	_Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
	}


	
template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
	{	
	const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

	if (_Nested)
		_Nested->rethrow_nested();
	}

template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *, false_type)
	{	
	}

template<class _Ty> inline
	void rethrow_if_nested(const _Ty& _Arg)
	{	
	bool_constant<is_polymorphic_v<_Ty> && (!is_base_of_v<nested_exception, _Ty>
		|| is_convertible_v<_Ty *, nested_exception *>)> _Tag;

	_Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
	}



#line 468 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)

#line 477 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"
#line 478 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\exception"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdint"

#pragma once





#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdint.h"







#pragma once








typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long          intmax_t;
typedef unsigned long long uintmax_t;














































    
    
    
#line 96 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdint.h"




































#line 133 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdint.h"





#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdint"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;


namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
}
#line 57 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdint"
}



#pragma warning(pop)
#pragma pack(pop)

#line 65 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdint"
#line 66 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cstdint"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ymath.h"

#pragma once




 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 
 
extern "C" {
 #line 18 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ymath.h"
 #line 19 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ymath.h"

		





		






void __cdecl _Feraise(int);

typedef union
	{	
	unsigned short _Word[8];
	float _Float;
	double _Double;
	long double _Long_double;
	} _Dconst;

		
 double __cdecl _Cosh(double, double);
 short __cdecl _Dtest(double *);
 double __cdecl _Sinh(double, double);

 short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport)  _Dconst _Denorm, _Hugeval, _Inf,
	_Nan, _Snan;

		
 float __cdecl _FCosh(float, float);
 short __cdecl _FDtest(float *);
 float __cdecl _FSinh(float, float);

 short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport)  _Dconst _FDenorm, _FInf, _FNan, _FSnan;

		
 long double __cdecl _LCosh(long double, long double);
 short __cdecl _LDtest(long double *);
 long double __cdecl _LSinh(long double, long double);

 short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport)  _Dconst _LDenorm, _LInf, _LNan, _LSnan;

 
 
}
 #line 72 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ymath.h"
 #line 73 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ymath.h"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 79 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ymath.h"
#line 80 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ymath.h"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cfloat"

#pragma once




#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"








#pragma once





__pragma(pack(push, 8)) extern "C" {




    


        


            
        #line 28 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"
    #line 29 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"
#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"



















    
        
            
        

#line 55 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"
    

#line 58 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"
#line 59 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"






















































































































































    





#line 216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"











__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) unsigned int __cdecl _controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
      unsigned int* _CurrentState,
           unsigned int  _NewValue,
           unsigned int  _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);



    
    __declspec(dllimport) void __cdecl _statusfp2(
          unsigned int* _X86Status,
          unsigned int* _SSE2Status
        );

#line 268 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"





__declspec(dllimport) unsigned int __cdecl _control87(
      unsigned int _NewValue,
      unsigned int _Mask
    );


    
    __declspec(dllimport) int __cdecl __control87_2(
               unsigned int  _NewValue,
               unsigned int  _Mask,
          unsigned int* _X86ControlWord,
          unsigned int* _Sse2ControlWord
        );
#line 287 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"


 
__declspec(dllimport) int* __cdecl __fpecode(void);



 
__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);












  __declspec(dllimport) double __cdecl _copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double __cdecl _chgsign(  double _X);
  __declspec(dllimport) double __cdecl _scalb(  double _X,   long _Y);
  __declspec(dllimport) double __cdecl _logb(  double _X);
  __declspec(dllimport) double __cdecl _nextafter(  double _X,   double _Y);
  __declspec(dllimport) int    __cdecl _finite(  double _X);
  __declspec(dllimport) int    __cdecl _isnan(  double _X);
  __declspec(dllimport) int    __cdecl _fpclass(  double _X);














    
    
    

    
    __declspec(dllimport) void __cdecl fpreset(void);

    
    

    
    

    
    
    

    
    
    
    
    
    
    

    
    
    

    
    
    
    
    

    
    
    
    

    

    
    
    
    
    
    

    
    
    
    

    
    
    
    
    
    

    
    
    
    

    

#line 399 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"



} __pragma(pack(pop))
#line 404 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\float.h"
#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cfloat"
#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cfloat"





#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits"


#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cwchar"

#pragma once





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"









#pragma once





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"








#pragma once




__pragma(pack(push, 8)) extern "C" {









    
     
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
          wchar_t* _Buffer,
                                               size_t   _BufferCount,
                                              size_t*  _SizeRead
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _cgetws_s(  wchar_t (&_Buffer)[_Size],   size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
#line 38 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __declspec(dllimport) int __cdecl _cputws(
          wchar_t const* _Buffer
        );

          __declspec(dllimport) wint_t __cdecl _getwch  (void);
          __declspec(dllimport) wint_t __cdecl _getwche (void);
     __declspec(dllimport) wint_t __cdecl _putwch  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch(  wint_t  _Character);

          __declspec(dllimport) wint_t __cdecl _getwch_nolock  (void);
          __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
     __declspec(dllimport) wint_t __cdecl _putwch_nolock  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch_nolock(  wint_t  _Character);



    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vcwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 94 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 98 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }
#line 111 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 121 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 134 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }
#line 138 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 148 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 152 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_p(
            const wchar_t* const _Format,
                                      va_list              _ArgList
        )


#line 161 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }
#line 165 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 174 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 183 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf(
            wchar_t const* const _Format,
        ...)


#line 191 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 200 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 209 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 218 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_s(
            wchar_t const* const _Format,
        ...)


#line 226 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 244 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 253 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_p(
            wchar_t const* const _Format,
        ...)


#line 261 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 270 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"



    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                            unsigned __int64 _Options,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )


#line 295 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }
#line 301 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )


#line 310 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)
    }
#line 317 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )


#line 327 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }
#line 333 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwscanf_s(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )


#line 342 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }
#line 346 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)


#line 355 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 369 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf(
            wchar_t const* const _Format,
        ...)


#line 377 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 391 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)


#line 400 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 409 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwscanf_s(
            wchar_t const* const _Format,
        ...)


#line 417 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 426 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"

#line 428 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wconio.h"



} __pragma(pack(pop))
#line 17 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wctype.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {











    

#line 28 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wctype.h"
        
    #line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wctype.h"

    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t*       __cdecl __pwctype_func(void);

    



        
        
    #line 41 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wctype.h"
#line 42 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wctype.h"





















  __declspec(dllimport) int __cdecl iswalnum  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswalpha  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswascii  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswblank  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswcntrl  (  wint_t _C);


  __declspec(dllimport) int __cdecl iswdigit  (  wint_t _C);

  __declspec(dllimport) int __cdecl iswgraph  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswlower  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswprint  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswpunct  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswspace  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswupper  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswxdigit (  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsymf(  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsym (  wint_t _C);

  __declspec(dllimport) int __cdecl _iswalnum_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswalpha_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswblank_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcntrl_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswdigit_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswgraph_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswlower_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswprint_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswpunct_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswspace_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswupper_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsymf_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsym_l  (  wint_t _C,   _locale_t _Locale);


  __declspec(dllimport) wint_t __cdecl towupper(  wint_t _C);
  __declspec(dllimport) wint_t __cdecl towlower(  wint_t _C);
  __declspec(dllimport) int    __cdecl iswctype(  wint_t _C,   wctype_t _Type);

  __declspec(dllimport) wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int    __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);



      __declspec(dllimport) int __cdecl isleadbyte(  int _C);
      __declspec(dllimport) int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);
#line 113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wctype.h"


















































































#line 196 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wctype.h"



} __pragma(pack(pop))
#line 18 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wdirect.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {






 
   
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );

 
   
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                  int      _Drive,
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );






 
__declspec(dllimport) int __cdecl _wchdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wmkdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wrmdir(
      wchar_t const* _Path
    );



} __pragma(pack(pop))
#line 19 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wio.h"








#pragma once


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_share.h"








#pragma once












    
    
    
    
#line 27 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_share.h"
#line 13 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wio.h"

__pragma(pack(push, 8)) extern "C" {


#pragma warning(push)
#pragma warning(disable:4820) 











    
    
#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wio.h"

typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata32i64_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    __int64    size;
    wchar_t    name[260];
};

struct _wfinddata64i32_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata64_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    __int64    size;
    wchar_t    name[260];
};














    
    
    
    
#line 94 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wio.h"

 
__declspec(dllimport) int __cdecl _waccess(
      wchar_t const* _FileName,
        int            _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
      wchar_t const* _FileName,
        int            _AccessMode
    );

 
__declspec(dllimport) int __cdecl _wchmod(
      wchar_t const* _FileName,
        int            _Mode
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wcreat(
      wchar_t const* _FileName,
        int            _PermissionMode
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
      wchar_t const*         _FileName,
       struct _wfinddata32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32(
       intptr_t               _FindHandle,
      struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
      wchar_t const* _FileName
    );

 
__declspec(dllimport) int __cdecl _wrename(
      wchar_t const* _OldFileName,
      wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
      wchar_t* _TemplateName,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
#line 152 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wio.h"

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);
#line 158 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wio.h"

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
      wchar_t const*            _FileName,
       struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
      wchar_t const*            _FileName,
       struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
      wchar_t const*         _FileName,
       struct _wfinddata64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32i64(
       intptr_t                  _FindHandle,
      struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64i32(
       intptr_t                  _FindHandle,
      struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64(
       intptr_t               _FindHandle,
      struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
       int*           _FileHandle,
      wchar_t const* _FileName,
        int            _OpenFlag,
        int            _ShareFlag,
        int            _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
      wchar_t const* _FileName,
        int            _OFlag,
        int            _ShFlag,
        int            _PMode,
       int*           _PFileHandle,
        int            _BSecure
    );





    
    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wsopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _ShFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

















#line 268 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wio.h"


#pragma warning(pop)


} __pragma(pack(pop))
#line 20 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wprocess.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {




    

        __declspec(dllimport) intptr_t __cdecl _wexecl(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexecle(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexeclp(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexeclpe(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexecv(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wexecve(
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wexecvp(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wexecvpe(
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnl(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnle(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnlp(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnv(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnve(
                    int                   _Mode,
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnvp(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                    int                   _Mode,
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

        __declspec(dllimport) int __cdecl _wsystem(
              wchar_t const* _Command
            );

    #line 117 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wprocess.h"
#line 118 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wprocess.h"



} __pragma(pack(pop))
#line 21 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"



#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 
 
__declspec(dllimport) wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

__declspec(dllimport) errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 62 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"

 

__declspec(dllimport) size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 100 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 119 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrdate_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 130 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 135 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrtime_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 146 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 151 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"









    #pragma warning(push)
    #pragma warning(disable: 4996)

    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 202 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"

    #pragma warning(pop)
#line 205 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\corecrt_wtime.h"



} __pragma(pack(pop))
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\stat.h"







#pragma once


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\types.h"







#pragma once




    

    typedef unsigned short _ino_t; 

    
        typedef _ino_t ino_t;
    #line 20 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\types.h"
#line 21 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\types.h"




    

    typedef unsigned int _dev_t; 

    
        typedef _dev_t dev_t;
    #line 32 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\types.h"
#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\types.h"




    

    typedef long _off_t; 

    
        typedef _off_t off_t;
    #line 44 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\types.h"
#line 45 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\types.h"
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\stat.h"

__pragma(pack(push, 8)) extern "C" {


#pragma warning(push)
#pragma warning(disable: 4820) 







struct _stat32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat32i64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat64i32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};

struct _stat64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};




    struct stat
    {
        _dev_t         st_dev;
        _ino_t         st_ino;
        unsigned short st_mode;
        short          st_nlink;
        short          st_uid;
        short          st_gid;
        _dev_t         st_rdev;
        _off_t         st_size;
        time_t         st_atime;
        time_t         st_mtime;
        time_t         st_ctime;
    };
#line 103 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\stat.h"


















    
    
    
    
    
    
    
#line 129 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\stat.h"
















    
    
    
    
    
    
#line 152 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\stat.h"



__declspec(dllimport) int __cdecl _fstat32(
       int             _FileHandle,
      struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
       int                _FileHandle,
      struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
       int                _FileHandle,
      struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
       int             _FileHandle,
      struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
      char const*     _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
      char const*        _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
      char const*        _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
      char const*     _FileName,
       struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
      wchar_t const*  _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
      wchar_t const*     _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
      wchar_t const*     _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
      wchar_t const*  _FileName,
       struct _stat64* _Stat
    );




    















        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }

    #line 246 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\stat.h"
#line 247 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\sys\\stat.h"


#pragma warning(pop)


} __pragma(pack(pop))
#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"



__pragma(pack(push, 8)) extern "C" {








typedef wchar_t _Wint_t;





        
    __declspec(dllimport) wchar_t* __cdecl _wsetlocale(
                int            _Category,
          wchar_t const* _Locale
        );

    
    __declspec(dllimport) _locale_t __cdecl _wcreate_locale(
            int            _Category,
          wchar_t const* _Locale
        );



    __declspec(dllimport) wint_t __cdecl btowc(
          int _Ch
        );

    __declspec(dllimport) size_t __cdecl mbrlen(
            char const* _Ch,
                                                    size_t      _SizeInBytes,
                                                 mbstate_t*  _State
        );

    __declspec(dllimport) size_t __cdecl mbrtowc(
                                  wchar_t*    _DstCh,
            char const* _SrcCh,
                                                    size_t      _SizeInBytes,
                                                 mbstate_t*  _State
        );

     
    __declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                                  size_t*      _Retval,
                  wchar_t*     _Dst,
                                       size_t       _Size,
                          char const** _PSrc,
                                       size_t       _N,
                                    mbstate_t*   _State
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl mbsrtowcs_s(  size_t* _Retval,   wchar_t (&_Dest)[_Size],     char const** _PSource,   size_t _Count,   mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
#line 94 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest,  char const** _PSrc,  size_t _Count,  mbstate_t* _State);
#line 102 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"

     
    __declspec(dllimport) errno_t __cdecl wcrtomb_s(
                                 size_t*    _Retval,
          char*      _Dst,
                                      size_t     _SizeInBytes,
                                      wchar_t    _Ch,
                               mbstate_t* _State
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcrtomb_s(  size_t* _Retval,   char (&_Dest)[_Size],   wchar_t _Source,   mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
#line 120 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb(  char *_Dest,  wchar_t _Source,  mbstate_t* _State);
#line 127 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"

     
    __declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                                  size_t*         _Retval,
          char*           _Dst,
                                                       size_t          _SizeInBytes,
                                    wchar_t const** _Src,
                                                       size_t          _Size,
                                                mbstate_t*      _State
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcsrtombs_s(  size_t* _Retval,   char (&_Dest)[_Size],     wchar_t const** _PSrc,   size_t _Count,   mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
#line 147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs(  char *_Dest,  wchar_t const** _PSource,  size_t _Count,  mbstate_t* _State);
#line 155 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"

    __declspec(dllimport) int __cdecl wctob(
          wint_t _WCh
        );

    

         
        errno_t __cdecl wmemcpy_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

         
        errno_t __cdecl wmemmove_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

    #line 179 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"

    __inline int __cdecl fwide(
          FILE* _F,
              int   _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
          mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
          wchar_t const* _S,
                    wchar_t        _C,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
          wchar_t const* _S1,
          wchar_t const* _S2,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }

     
    
    __inline 
    wchar_t* __cdecl wmemcpy(
          wchar_t*       _S1,
                wchar_t const* _S2,
                          size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4995 4996 6386)
        return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

    __inline 
    wchar_t* __cdecl wmemmove(
          wchar_t*       _S1,
                wchar_t const* _S2,
                              size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4996 6386)
        return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

     
    
    __inline wchar_t* __cdecl wmemset(
          wchar_t* _S,
                          wchar_t  _C,
                          size_t   _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }

    

        extern "C++" inline wchar_t* __cdecl wmemchr(
              wchar_t* _S,
                        wchar_t  _C,
                        size_t   _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }

    #line 279 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"

#line 281 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"



} __pragma(pack(pop))
#line 286 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\wchar.h"
#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cwchar"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




typedef mbstate_t _Mbstatet;

namespace std {
#pragma warning(push)
#pragma warning(disable: 4995) 

using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;

#pragma warning(pop)
}



#pragma warning(pop)
#pragma pack(pop)

#line 58 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cwchar"
#line 59 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cwchar"





#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits"


 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
enum float_denorm_style
	{	
	denorm_indeterminate = -1,
	denorm_absent = 0,
	denorm_present = 1
	};

		
enum float_round_style
	{	
	round_indeterminate = -1,
	round_toward_zero = 0,
	round_to_nearest = 1,
	round_toward_infinity = 2,
	round_toward_neg_infinity = 3
	};

		
struct _Num_base
	{	
	static constexpr float_denorm_style has_denorm = denorm_absent;
	static constexpr bool has_denorm_loss = false;
	static constexpr bool has_infinity = false;
	static constexpr bool has_quiet_NaN = false;
	static constexpr bool has_signaling_NaN = false;
	static constexpr bool is_bounded = false;
	static constexpr bool is_exact = false;
	static constexpr bool is_iec559 = false;
	static constexpr bool is_integer = false;
	static constexpr bool is_modulo = false;
	static constexpr bool is_signed = false;
	static constexpr bool is_specialized = false;
	static constexpr bool tinyness_before = false;
	static constexpr bool traps = false;
	static constexpr float_round_style round_style = round_toward_zero;
	static constexpr int digits = 0;
	static constexpr int digits10 = 0;
	static constexpr int max_digits10 = 0;
	static constexpr int max_exponent = 0;
	static constexpr int max_exponent10 = 0;
	static constexpr int min_exponent = 0;
	static constexpr int min_exponent10 = 0;
	static constexpr int radix = 0;
	};

		
template<class _Ty>
	class numeric_limits
		: public _Num_base
	{	
public:
	 static constexpr _Ty (min)() noexcept
		{	
		return (_Ty());
		}

	 static constexpr _Ty (max)() noexcept
		{	
		return (_Ty());
		}

	 static constexpr _Ty lowest() noexcept
		{	
		return (_Ty());
		}

	 static constexpr _Ty epsilon() noexcept
		{	
		return (_Ty());
		}

	 static constexpr _Ty round_error() noexcept
		{	
		return (_Ty());
		}

	 static constexpr _Ty denorm_min() noexcept
		{	
		return (_Ty());
		}

	 static constexpr _Ty infinity() noexcept
		{	
		return (_Ty());
		}

	 static constexpr _Ty quiet_NaN() noexcept
		{	
		return (_Ty());
		}

	 static constexpr _Ty signaling_NaN() noexcept
		{	
		return (_Ty());
		}
	};

template<class _Ty>
	class numeric_limits<const _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<const volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

		
struct _Num_int_base
	: _Num_base
	{	
	static constexpr bool is_bounded = true;
	static constexpr bool is_exact = true;
	static constexpr bool is_integer = true;
	static constexpr bool is_specialized = true;
	static constexpr int radix = 2;
	};

		
struct _Num_float_base
	: _Num_base
	{	
	static constexpr float_denorm_style has_denorm = denorm_present;
	static constexpr bool has_infinity = true;
	static constexpr bool has_quiet_NaN = true;
	static constexpr bool has_signaling_NaN = true;
	static constexpr bool is_bounded = true;
	static constexpr bool is_iec559 = true;
	static constexpr bool is_signed = true;
	static constexpr bool is_specialized = true;
	static constexpr float_round_style round_style = round_to_nearest;
	static constexpr int radix = 2;
	};

		
template<> class numeric_limits<char>
	: public _Num_int_base
	{	
public:
	 static constexpr char (min)() noexcept
		{	
		return ((-128));
		}

	 static constexpr char (max)() noexcept
		{	
		return (127);
		}

	 static constexpr char lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr char epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr char round_error() noexcept
		{	
		return (0);
		}

	 static constexpr char denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr char infinity() noexcept
		{	
		return (0);
		}

	 static constexpr char quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr char signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (-128) != 0;
	static constexpr bool is_modulo = (-128) == 0;
	static constexpr int digits = 8 - ((-128) != 0);
	static constexpr int digits10 = 2;
	};

		
template<> class numeric_limits<wchar_t>
	: public _Num_int_base
	{	
public:
	 static constexpr wchar_t (min)() noexcept
		{	
		return (0x0000);
		}

	 static constexpr wchar_t (max)() noexcept
		{	
		return (0xffff);
		}

	 static constexpr wchar_t lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr wchar_t epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr wchar_t round_error() noexcept
		{	
		return (0);
		}

	 static constexpr wchar_t denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr wchar_t infinity() noexcept
		{	
		return (0);
		}

	 static constexpr wchar_t quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr wchar_t signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 16;
	static constexpr int digits10 = 4;
	};

		
template<> class numeric_limits<bool>
	: public _Num_int_base
	{	
public:
	 static constexpr bool (min)() noexcept
		{	
		return (false);
		}

	 static constexpr bool (max)() noexcept
		{	
		return (true);
		}

	 static constexpr bool lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr bool epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr bool round_error() noexcept
		{	
		return (0);
		}

	 static constexpr bool denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr bool infinity() noexcept
		{	
		return (0);
		}

	 static constexpr bool quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr bool signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr int digits = 1;
	};

		
template<> class numeric_limits<signed char>
	: public _Num_int_base
	{	
public:
	 static constexpr signed char (min)() noexcept
		{	
		return ((-128));
		}

	 static constexpr signed char (max)() noexcept
		{	
		return (127);
		}

	 static constexpr signed char lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr signed char epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr signed char round_error() noexcept
		{	
		return (0);
		}

	 static constexpr signed char denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr signed char infinity() noexcept
		{	
		return (0);
		}

	 static constexpr signed char quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr signed char signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = true;
	static constexpr int digits = 7;
	static constexpr int digits10 = 2;
	};

		
template<> class numeric_limits<unsigned char>
	: public _Num_int_base
	{	
public:
	 static constexpr unsigned char (min)() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned char (max)() noexcept
		{	
		return (0xff);
		}

	 static constexpr unsigned char lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr unsigned char epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned char round_error() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned char denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned char infinity() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned char quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned char signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 8;
	static constexpr int digits10 = 2;
	};

		
template<> class numeric_limits<short>
	: public _Num_int_base
	{	
public:
	 static constexpr short (min)() noexcept
		{	
		return ((-32768));
		}

	 static constexpr short (max)() noexcept
		{	
		return (32767);
		}

	 static constexpr short lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr short epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr short round_error() noexcept
		{	
		return (0);
		}

	 static constexpr short denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr short infinity() noexcept
		{	
		return (0);
		}

	 static constexpr short quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr short signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = true;
	static constexpr int digits = 15;
	static constexpr int digits10 = 4;
	};

 
		
template<> class numeric_limits<unsigned short>
	: public _Num_int_base
	{	
public:
	 static constexpr unsigned short (min)() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned short (max)() noexcept
		{	
		return (0xffff);
		}

	 static constexpr unsigned short lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr unsigned short epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned short round_error() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned short denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned short infinity() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned short quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned short signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 16;
	static constexpr int digits10 = 4;
	};
 #line 549 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits"

		
template<> class numeric_limits<char16_t>
	: public _Num_int_base
	{	
public:
	 static constexpr char16_t (min)() noexcept
		{	
		return (0);
		}

	 static constexpr char16_t (max)() noexcept
		{	
		return (0xffff);
		}

	 static constexpr char16_t lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr char16_t epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr char16_t round_error() noexcept
		{	
		return (0);
		}

	 static constexpr char16_t denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr char16_t infinity() noexcept
		{	
		return (0);
		}

	 static constexpr char16_t quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr char16_t signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 16;
	static constexpr int digits10 = 4;
	};

		
template<> class numeric_limits<int>
	: public _Num_int_base
	{	
public:
	 static constexpr int (min)() noexcept
		{	
		return ((-2147483647 - 1));
		}

	 static constexpr int (max)() noexcept
		{	
		return (2147483647);
		}

	 static constexpr int lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr int epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr int round_error() noexcept
		{	
		return (0);
		}

	 static constexpr int denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr int infinity() noexcept
		{	
		return (0);
		}

	 static constexpr int quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr int signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = true;
	static constexpr int digits = 31;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<unsigned int>
	: public _Num_int_base
	{	
public:
	 static constexpr unsigned int (min)() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned int (max)() noexcept
		{	
		return (0xffffffff);
		}

	 static constexpr unsigned int lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr unsigned int epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned int round_error() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned int denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned int infinity() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned int quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned int signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 32;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<long>
	: public _Num_int_base
	{	
public:
	 static constexpr long (min)() noexcept
		{	
		return ((-2147483647L - 1));
		}

	 static constexpr long (max)() noexcept
		{	
		return (2147483647L);
		}

	 static constexpr long lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr long epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr long round_error() noexcept
		{	
		return (0);
		}

	 static constexpr long denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr long infinity() noexcept
		{	
		return (0);
		}

	 static constexpr long quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr long signaling_NaN() noexcept
		{	
		return (0);
		}

	static_assert(sizeof(int) == sizeof(long), "LLP64 assumption");
	static constexpr bool is_signed = true;
	static constexpr int digits = 31;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<unsigned long>
	: public _Num_int_base
	{	
public:
	 static constexpr unsigned long (min)() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long (max)() noexcept
		{	
		return (0xffffffffUL);
		}

	 static constexpr unsigned long lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr unsigned long epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long round_error() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long infinity() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long signaling_NaN() noexcept
		{	
		return (0);
		}

	static_assert(sizeof(unsigned int) == sizeof(unsigned long), "LLP64 assumption");
	static constexpr bool is_modulo = true;
	static constexpr int digits = 32;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<char32_t>
	: public _Num_int_base
	{	
public:
	 static constexpr char32_t (min)() noexcept
		{	
		return (0);
		}

	 static constexpr char32_t (max)() noexcept
		{	
		return (0xffffffff);
		}

	 static constexpr char32_t lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr char32_t epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr char32_t round_error() noexcept
		{	
		return (0);
		}

	 static constexpr char32_t denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr char32_t infinity() noexcept
		{	
		return (0);
		}

	 static constexpr char32_t quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr char32_t signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 32;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<long long>
	: public _Num_int_base
	{	
public:
	 static constexpr long long (min)() noexcept
		{	
		return ((-9223372036854775807i64 - 1));
		}

	 static constexpr long long (max)() noexcept
		{	
		return (9223372036854775807i64);
		}

	 static constexpr long long lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr long long epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr long long round_error() noexcept
		{	
		return (0);
		}

	 static constexpr long long denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr long long infinity() noexcept
		{	
		return (0);
		}

	 static constexpr long long quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr long long signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = true;
	static constexpr int digits = 63;
	static constexpr int digits10 = 18;
	};

		
template<> class numeric_limits<unsigned long long>
	: public _Num_int_base
	{	
public:
	 static constexpr unsigned long long (min)() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long long (max)() noexcept
		{	
		return (0xffffffffffffffffui64);
		}

	 static constexpr unsigned long long lowest() noexcept
		{	
		return ((min)());
		}

	 static constexpr unsigned long long epsilon() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long long round_error() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long long denorm_min() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long long infinity() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long long quiet_NaN() noexcept
		{	
		return (0);
		}

	 static constexpr unsigned long long signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 64;
	static constexpr int digits10 = 19;
	};

		
template<> class numeric_limits<float>
	: public _Num_float_base
	{	
public:
	 static constexpr float (min)() noexcept
		{	
		return (1.175494351e-38F);
		}

	 static constexpr float (max)() noexcept
		{	
		return (3.402823466e+38F);
		}

	 static constexpr float lowest() noexcept
		{	
		return (-(max)());
		}

	 static constexpr float epsilon() noexcept
		{	
		return (1.192092896e-07F);
		}

	 static constexpr float round_error() noexcept
		{	
		return (0.5F);
		}

	 static constexpr float denorm_min() noexcept
		{	
		return (1.401298464e-45F);
		}

	 static constexpr float infinity() noexcept
		{	
		return (__builtin_huge_valf());
		}

	 static constexpr float quiet_NaN() noexcept
		{	
		return (__builtin_nanf("0"));
		}

	 static constexpr float signaling_NaN() noexcept
		{	
		return (__builtin_nansf("1"));
		}

	static constexpr int digits = 24;
	static constexpr int digits10 = 6;
	static constexpr int max_digits10 = 9;
	static constexpr int max_exponent = 128;
	static constexpr int max_exponent10 = 38;
	static constexpr int min_exponent = (-125);
	static constexpr int min_exponent10 = (-37);
	};

		
template<> class numeric_limits<double>
	: public _Num_float_base
	{	
public:
	 static constexpr double (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	 static constexpr double (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	 static constexpr double lowest() noexcept
		{	
		return (-(max)());
		}

	 static constexpr double epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	 static constexpr double round_error() noexcept
		{	
		return (0.5);
		}

	 static constexpr double denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	 static constexpr double infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	 static constexpr double quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	 static constexpr double signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = 53;
	static constexpr int digits10 = 15;
	static constexpr int max_digits10 = 17;
	static constexpr int max_exponent = 1024;
	static constexpr int max_exponent10 = 308;
	static constexpr int min_exponent = (-1021);
	static constexpr int min_exponent10 = (-307);
	};

		
template<> class numeric_limits<long double>
	: public _Num_float_base
	{	
public:
	 static constexpr long double (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	 static constexpr long double (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	 static constexpr long double lowest() noexcept
		{	
		return (-(max)());
		}

	 static constexpr long double epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	 static constexpr long double round_error() noexcept
		{	
		return (0.5L);
		}

	 static constexpr long double denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	 static constexpr long double infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	 static constexpr long double quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	 static constexpr long double signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = 53;
	static constexpr int digits10 = 15;
	static constexpr int max_digits10 = 17;
	static constexpr int max_exponent = 1024;
	static constexpr int max_exponent10 = 308;
	static constexpr int min_exponent = (-1021);
	static constexpr int min_exponent10 = (-307);
	};
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1174 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits"
#line 1175 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\limits"





#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\new"

#pragma once






#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {





















#line 39 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\new"

		


typedef void (__cdecl * new_handler) ();
#line 45 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\new"

		
 new_handler __cdecl set_new_handler(  new_handler) noexcept;
  new_handler __cdecl get_new_handler() noexcept;
}



#pragma warning(pop)
#pragma pack(pop)

#line 57 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\new"
#line 58 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\new"





#line 10 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

#pragma once





#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"

#pragma once




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"

#pragma once











 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
using streamoff = long long;
using streamsize = long long;

		
template<class _Statetype>
	class fpos
	{	
public:
	 fpos(streamoff _Off = 0)
		: _Myoff(_Off), _Fpos(0), _Mystate()
		{	
		}

	fpos(_Statetype _State, fpos_t _Fileposition)
		: _Myoff(_Fileposition), _Fpos(0), _Mystate(_State)
		{	
		}

	 _Statetype state() const
		{	
		return (_Mystate);
		}

	void state(_Statetype _State)
		{	
		_Mystate = _State;
		}

	operator streamoff() const
		{	
			
			
		return (_Myoff + _Fpos);
		}


	[[deprecated("warning STL4019: " "The member std::fpos::seekpos() is non-Standard, and is preserved only for compatibility with " "workarounds for old versions of Visual C++. It will be removed in a future release, and in this " "release always returns 0. Please use standards-conforming mechanisms to manipulate fpos, such as " "conversions to and from streamoff, or an integral type, instead. If you are receiving this message " "while compiling Boost.IOStreams, a fix has been submitted upstream to make Boost use " "standards-conforming mechanisms, as it does for other compilers. You can define " "_SILENCE_FPOS_SEEKPOS_DEPRECATION_WARNING to acknowledge that you have received this warning, " "or define _REMOVE_FPOS_SEEKPOS to remove std::fpos::seekpos entirely.")]] fpos_t seekpos() const noexcept
		{
		return {};
		}
#line 64 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"

	 streamoff operator-(const fpos& _Right) const
		{	
		return (static_cast<streamoff>(*this) - static_cast<streamoff>(_Right));
		}

	fpos& operator+=(streamoff _Off)
		{	
		_Myoff += _Off;
		return (*this);
		}

	fpos& operator-=(streamoff _Off)
		{	
		_Myoff -= _Off;
		return (*this);
		}

	 fpos operator+(streamoff _Off) const
		{	
		fpos _Tmp = *this;
		_Tmp += _Off;
		return (_Tmp);
		}

	 fpos operator-(streamoff _Off) const
		{	
		fpos _Tmp = *this;
		_Tmp -= _Off;
		return (_Tmp);
		}

	 bool operator==(const fpos& _Right) const
		{
		return (static_cast<streamoff>(*this) == static_cast<streamoff>(_Right));
		}

	template<class _Int,
		enable_if_t<is_integral_v<_Int>, int> = 0>
		 friend bool operator==(const fpos& _Left, const _Int _Right)
		{
		return (static_cast<streamoff>(_Left) == _Right);
		}

	template<class _Int,
		enable_if_t<is_integral_v<_Int>, int> = 0>
		 friend bool operator==(const _Int _Left, const fpos& _Right)
		{
		return (_Left == static_cast<streamoff>(_Right));
		}

	 bool operator!=(const fpos& _Right) const
		{
		return (static_cast<streamoff>(*this) != static_cast<streamoff>(_Right));
		}

	template<class _Int,
		enable_if_t<is_integral_v<_Int>, int> = 0>
		 friend bool operator!=(const fpos& _Left, const _Int _Right)
		{
		return (static_cast<streamoff>(_Left) != _Right);
		}

	template<class _Int,
		enable_if_t<is_integral_v<_Int>, int> = 0>
		 friend bool operator!=(const _Int _Left, const fpos& _Right)
		{
		return (_Left != static_cast<streamoff>(_Right));
		}

private:
	streamoff _Myoff;	
	fpos_t _Fpos;	
	_Statetype _Mystate;	
	};

using streampos = fpos<_Mbstatet>;
using wstreampos = streampos;

		
template<class _Elem,
	class _Int_type>
	struct _Char_traits
	{	
	using char_type = _Elem;
	using int_type = _Int_type;
	using pos_type = streampos;
	using off_type = streamoff;
	using state_type = _Mbstatet;

	 static inline int compare(  const _Elem * _First1,
		  const _Elem * _First2, size_t _Count) noexcept 
		{	
		for (; 0 < _Count; --_Count, ++_First1, ++_First2)
			{
			if (*_First1 != *_First2)
				{
				return (*_First1 < *_First2 ? -1 : +1);
				}
			}

		return (0);
		}

	 static inline size_t length(  const _Elem * _First) noexcept 
		{	
		size_t _Count = 0;
		while (*_First != _Elem())
			{
			++_Count;
			++_First;
			}

		return (_Count);
		}

	static _Elem * copy(  _Elem * const _First1,
		  const _Elem * _First2, size_t _Count) noexcept 
		{	
		return (static_cast<_Elem *>(:: memcpy(_First1, _First2, _Count * sizeof(_Elem))));
		}

	  static _Elem * _Copy_s(
		  _Elem * const _First1, const size_t _Dest_size,
		  const _Elem * const _First2, const size_t _Count) noexcept
		{	
		do { if (_Count <= _Dest_size) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd", 190, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd", 190, 0); } while (false); } ; } while (false);
		return (copy(_First1, _First2, _Count));
		}

	 static inline const _Elem * find(  const _Elem * _First,
		size_t _Count, const _Elem& _Ch) noexcept 
		{	
		for (; 0 < _Count; --_Count, ++_First)
			{
			if (*_First == _Ch)
				{
				return (_First);
				}
			}

		return (nullptr);
		}

	static _Elem * move(  _Elem * const _First1,
		  const _Elem * _First2, size_t _Count) noexcept 
		{	
		return (static_cast<_Elem *>(:: memmove(_First1, _First2, _Count * sizeof(_Elem))));
		}

	static _Elem * assign(  _Elem * const _First,
		size_t _Count, const _Elem _Ch) noexcept 
		{	
		_Elem * _Next = _First;
		for (; 0 < _Count; --_Count, ++_Next)
			{
			*_Next = _Ch;
			}

		return (_First);
		}

	static inline void assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	 static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	 static constexpr bool lt(const _Elem& _Left, const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	 static constexpr _Elem to_char_type(const int_type& _Meta) noexcept
		{	
		return (static_cast<_Elem>(_Meta));
		}

	 static constexpr int_type to_int_type(const _Elem& _Ch) noexcept
		{	
		return (static_cast<int_type>(_Ch));
		}

	 static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	 static constexpr int_type not_eof(const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	 static constexpr int_type eof() noexcept
		{	
		return (static_cast<int_type>((-1)));
		}
	};

		
template<class _Elem>
	struct _WChar_traits
	{	
	using char_type = _Elem;
	using int_type = unsigned short;
	using pos_type = streampos;
	using off_type = streamoff;
	using state_type = _Mbstatet;

	 static inline int compare(  const _Elem * const _First1,
			  const _Elem * const _First2, const size_t _Count) noexcept 
		{	









#line 290 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		return (:: wmemcmp(reinterpret_cast<const wchar_t *>(_First1),
			reinterpret_cast<const wchar_t *>(_First2), _Count));
#line 293 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		}

	 static inline size_t length(  const _Elem * _First) noexcept 
		{	









#line 307 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		return (:: wcslen(reinterpret_cast<const wchar_t *>(_First)));
#line 309 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		}

	static _Elem * copy(  _Elem * const _First1,
			  const _Elem * const _First2, const size_t _Count) noexcept 
		{	
		return (reinterpret_cast<_Elem *>(:: wmemcpy(reinterpret_cast<wchar_t *>(_First1),
			reinterpret_cast<const wchar_t *>(_First2), _Count)));
		}

	  static _Elem * _Copy_s(
			  _Elem * const _First1, const size_t _Size_in_words,
			  const _Elem * const _First2, const size_t _Count) noexcept
		{	
		do { if (_Count <= _Size_in_words) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd", 322, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd", 322, 0); } while (false); } ; } while (false);
		return (copy(_First1, _First2, _Count));
		}

	 static inline const _Elem * find(  const _Elem * _First,
			const size_t _Count, const _Elem& _Ch) noexcept 
		{	









#line 339 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		return (reinterpret_cast<const _Elem *>(:: wmemchr(
			reinterpret_cast<const wchar_t *>(_First), _Ch, _Count)));
#line 342 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		}

	static _Elem * move(  _Elem * const _First1,
			  const _Elem * const _First2, const size_t _Count) noexcept 
		{	
		return (reinterpret_cast<_Elem *>(:: wmemmove(reinterpret_cast<wchar_t *>(_First1),
			reinterpret_cast<const wchar_t *>(_First2), _Count)));
		}

	static _Elem * assign(  _Elem * const _First, size_t _Count, _Elem _Ch)
			noexcept 
		{	
		return (reinterpret_cast<_Elem *>(:: wmemset(reinterpret_cast<wchar_t *>(_First), _Ch, _Count)));
		}

	static inline void assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	 static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	 static constexpr bool lt(const _Elem& _Left, const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	 static constexpr _Elem to_char_type(const int_type& _Meta) noexcept
		{	
		return (_Meta);
		}

	 static constexpr int_type to_int_type(const _Elem& _Ch) noexcept
		{	
		return (_Ch);
		}

	 static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	 static constexpr int_type not_eof(const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : static_cast<int_type>(!eof()));
		}

	 static constexpr int_type eof() noexcept
		{	
		return (((wint_t)(0xFFFF)));
		}
	};

		
template<class _Elem>
	struct char_traits
		: _Char_traits<_Elem, long>
	{	
	};

		
template<>
	struct char_traits<char16_t>
		: _WChar_traits<char16_t>
	{	
	};

using u16streampos = streampos;

		
template<>
	struct char_traits<char32_t>
		: _Char_traits<char32_t, unsigned int>
	{	
	};

using u32streampos = streampos;

		
template<>
	struct char_traits<wchar_t>
		: _WChar_traits<wchar_t>
	{	
	};

 
		
template<>
	struct char_traits<unsigned short>
		: _WChar_traits<unsigned short>
	{	
	};
 #line 438 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"

		
template<>
	struct char_traits<char>
	{	
	using char_type = char;
	using int_type = int;
	using pos_type = streampos;
	using off_type = streamoff;
	using state_type = _Mbstatet;

	 static inline int compare(  const char * const _First1,
		  const char * const _First2, const size_t _Count) noexcept 
		{	


#line 455 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		return (:: memcmp(_First1, _First2, _Count));
#line 457 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		}

	 static inline size_t length(  const char * const _First) noexcept 
		{	


#line 464 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		return (:: strlen(_First));
#line 466 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		}

	static char * copy(  char * const _First1,
		  const char * const _First2, const size_t _Count) noexcept 
		{	
		return (static_cast<char *>(:: memcpy(_First1, _First2, _Count)));
		}

	  static char * _Copy_s(
		  char * const _First1, const size_t _Size_in_bytes,
		  const char * const _First2, const size_t _Count) noexcept
		{	
		do { if (_Count <= _Size_in_bytes) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd", 478, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd", 478, 0); } while (false); } ; } while (false);
		return (copy(_First1, _First2, _Count));
		}

	 static inline const char * find(  const char * const _First,
		const size_t _Count, const char& _Ch) noexcept 
		{	


#line 488 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		return (static_cast<const char *>(:: memchr(_First, _Ch, _Count)));
#line 490 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
		}

	static char * move(  char * const _First1,
		  const char * const _First2, const size_t _Count) noexcept 
		{	
		return (static_cast<char *>(:: memmove(_First1, _First2, _Count)));
		}

	static char * assign(  char * const _First,
		const size_t _Count, const char _Ch) noexcept 
		{	
		return (static_cast<char *>(:: memset(_First, _Ch, _Count)));
		}

	static inline void assign(char& _Left, const char& _Right) noexcept
		{	
		_Left = _Right;
		}

	 static constexpr bool eq(const char& _Left, const char& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	 static constexpr bool lt(const char& _Left, const char& _Right) noexcept
		{	
		return (static_cast<unsigned char>(_Left) < static_cast<unsigned char>(_Right));
		}

	 static constexpr char to_char_type(const int_type& _Meta) noexcept
		{	
		return (static_cast<char>(_Meta));
		}

	 static constexpr int_type to_int_type(const char& _Ch) noexcept
		{	
		return (static_cast<unsigned char>(_Ch));
		}

	 static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	 static constexpr int_type not_eof(const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	 static constexpr int_type eof() noexcept
		{	
		return ((-1));
		}
	};

		
template<class _Ty>
	class allocator;
class ios_base;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_ios;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class istreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class ostreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_streambuf;

#pragma vtordisp(push, 2)	
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_istream;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_ostream;
#pragma vtordisp(pop)	

template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_iostream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_stringbuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_istringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_ostringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_stringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_filebuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_ifstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_ofstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_fstream;

 
template<class _Elem,
	class _InIt >
	class num_get;
template<class _Elem,
	class _OutIt >
	class num_put;
template<class _Elem>
	class collate;
 #line 613 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"

		
using ios = basic_ios<char, char_traits<char>>;
using streambuf = basic_streambuf<char, char_traits<char>>;
using istream = basic_istream<char, char_traits<char>>;
using ostream = basic_ostream<char, char_traits<char>>;
using iostream = basic_iostream<char, char_traits<char>>;
using stringbuf = basic_stringbuf<char, char_traits<char>, allocator<char>>;
using istringstream = basic_istringstream<char, char_traits<char>, allocator<char>>;
using ostringstream = basic_ostringstream<char, char_traits<char>, allocator<char>>;
using stringstream = basic_stringstream<char, char_traits<char>, allocator<char>>;
using filebuf = basic_filebuf<char, char_traits<char>>;
using ifstream = basic_ifstream<char, char_traits<char>>;
using ofstream = basic_ofstream<char, char_traits<char>>;
using fstream = basic_fstream<char, char_traits<char>>;

		
using wios = basic_ios<wchar_t, char_traits<wchar_t>>;
using wstreambuf = basic_streambuf<wchar_t, char_traits<wchar_t>>;
using wistream = basic_istream<wchar_t, char_traits<wchar_t>>;
using wostream = basic_ostream<wchar_t, char_traits<wchar_t>>;
using wiostream = basic_iostream<wchar_t, char_traits<wchar_t>>;
using wstringbuf = basic_stringbuf<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wistringstream = basic_istringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wostringstream = basic_ostringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wstringstream = basic_stringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wfilebuf = basic_filebuf<wchar_t, char_traits<wchar_t>>;
using wifstream = basic_ifstream<wchar_t, char_traits<wchar_t>>;
using wofstream = basic_ofstream<wchar_t, char_traits<wchar_t>>;
using wfstream = basic_fstream<wchar_t, char_traits<wchar_t>>;

 




#line 650 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 657 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"
#line 658 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iosfwd"





#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"


 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Ty>
	 
	constexpr const _Ty& _Min_value(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Right < _Left))
	{	
	return (_Right < _Left ? _Right : _Left);
	}

		
template<class _Ty>
	 
	constexpr const _Ty& _Max_value(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Left < _Right))
	{	
	return (_Left < _Right ? _Right : _Left);
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
	{	
	swap(*_Left, *_Right);
	}

		
template<class _Ty,
	size_t _Size,
	class> inline
	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	if (&_Left != &_Right)
		{	
		_Ty *_First1 = _Left;
		_Ty *_Last1 = _First1 + _Size;
		_Ty *_First2 = _Right;
		for (; _First1 != _Last1; ++_First1, ++_First2)
			::std:: iter_swap(_First1, _First2);
		}
	}

template<class _Ty,
	class> inline
	void swap(_Ty& _Left, _Ty& _Right)
		noexcept(is_nothrow_move_constructible_v<_Ty> && is_nothrow_move_assignable_v<_Ty>)
#line 66 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
	{	
	_Ty _Tmp = ::std:: move(_Left);
	_Left = ::std:: move(_Right);
	_Right = ::std:: move(_Tmp);
	}

		
template<class _Ty> inline
	void _Swap_adl(_Ty& _Left, _Ty& _Right)
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	swap(_Left, _Right);
	}

		
struct piecewise_construct_t
	{	
	explicit piecewise_construct_t() = default;
	};

 constexpr piecewise_construct_t piecewise_construct{};

		
template<class...>
	class tuple;

template<class _Ty1,
	class _Ty2>
	struct pair
	{	
	using first_type = _Ty1;
	using second_type = _Ty2;

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		enable_if_t<conjunction_v<
			is_default_constructible<_Uty1>,
			is_default_constructible<_Uty2>,
			_Is_implicitly_default_constructible<_Uty1>,
			_Is_implicitly_default_constructible<_Uty2>
		>, int> = 0>
		constexpr pair()
			noexcept(is_nothrow_default_constructible_v<_Uty1> && is_nothrow_default_constructible_v<_Uty2>)	
#line 110 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(), second()
		{
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		enable_if_t<conjunction_v<
			is_default_constructible<_Uty1>,
			is_default_constructible<_Uty2>,
			negation<conjunction<
				_Is_implicitly_default_constructible<_Uty1>,
				_Is_implicitly_default_constructible<_Uty2>>>
		>, int> = 0>
		constexpr explicit pair()
			noexcept(is_nothrow_default_constructible_v<_Uty1> && is_nothrow_default_constructible_v<_Uty2>)	
#line 126 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(), second()
		{
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		enable_if_t<conjunction_v<
			is_copy_constructible<_Uty1>,
			is_copy_constructible<_Uty2>,
			is_convertible<const _Uty1&, _Uty1>,
			is_convertible<const _Uty2&, _Uty2>
		>, int> = 0>
		constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
			noexcept(is_nothrow_copy_constructible_v<_Uty1> && is_nothrow_copy_constructible_v<_Uty2>)	
#line 141 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(_Val1), second(_Val2)
		{
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		enable_if_t<conjunction_v<
			is_copy_constructible<_Uty1>,
			is_copy_constructible<_Uty2>,
			negation<conjunction<
				is_convertible<const _Uty1&, _Uty1>,
				is_convertible<const _Uty2&, _Uty2>>>
		>, int> = 0>
		constexpr explicit pair(const _Ty1& _Val1, const _Ty2& _Val2)
			noexcept(is_nothrow_copy_constructible_v<_Uty1> && is_nothrow_copy_constructible_v<_Uty2>)	
#line 157 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(_Val1), second(_Val2)
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, _Other1>,
			is_constructible<_Ty2, _Other2>,
			is_convertible<_Other1, _Ty1>,
			is_convertible<_Other2, _Ty2>
		>, int> = 0>
		constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)	
#line 172 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, _Other1>,
			is_constructible<_Ty2, _Other2>,
			negation<conjunction<
				is_convertible<_Other1, _Ty1>,
				is_convertible<_Other2, _Ty2>>>
		>, int> = 0>
		constexpr explicit pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)	
#line 189 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{
		}

	pair(const pair&) = default;
	pair(pair&&) = default;

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, const _Other1&>,
			is_constructible<_Ty2, const _Other2&>,
			is_convertible<const _Other1&, _Ty1>,
			is_convertible<const _Other2&, _Ty2>
		>, int> = 0>
		constexpr pair(const pair<_Other1, _Other2>& _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, const _Other1&> && is_nothrow_constructible_v<_Ty2, const _Other2&>)	
#line 208 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(_Right.first), second(_Right.second)
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, const _Other1&>,
			is_constructible<_Ty2, const _Other2&>,
			negation<conjunction<
				is_convertible<const _Other1&, _Ty1>,
				is_convertible<const _Other2&, _Ty2>>>
		>, int> = 0>
		constexpr explicit pair(const pair<_Other1, _Other2>& _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, const _Other1&> && is_nothrow_constructible_v<_Ty2, const _Other2&>)	
#line 224 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(_Right.first), second(_Right.second)
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, _Other1>,
			is_constructible<_Ty2, _Other2>,
			is_convertible<_Other1, _Ty1>,
			is_convertible<_Other2, _Ty2>
		>, int> = 0>
		constexpr pair(pair<_Other1, _Other2>&& _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)	
#line 239 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, _Other1>,
			is_constructible<_Ty2, _Other2>,
			negation<conjunction<
				is_convertible<_Other1, _Ty1>,
				is_convertible<_Other2, _Ty2>>>
		>, int> = 0>
		constexpr explicit pair(pair<_Other1, _Other2>&& _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)	
#line 256 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{
		}

	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			index_sequence<_Indexes1...>,
			index_sequence<_Indexes2...>);

	template<class... _Types1,
		class... _Types2> inline
		pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2);

	pair& operator=(const volatile pair&) = delete;

	template<class _Other1 = _Ty1,
		class _Other2 = _Ty2,
		enable_if_t<conjunction_v<
			is_assignable<_Ty1&, const _Other1&>,
			is_assignable<_Ty2&, const _Other2&>
		>, int> = 0>
		pair& operator=(const pair<_Other1, _Other2>& _Right)
			noexcept(is_nothrow_assignable_v<_Ty1&, const _Other1&> && is_nothrow_assignable_v<_Ty2&, const _Other2&>)	
#line 287 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		{
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}

	template<class _Other1 = _Ty1,
		class _Other2 = _Ty2,
		enable_if_t<conjunction_v<
			is_assignable<_Ty1&, _Other1>,
			is_assignable<_Ty2&, _Other2>
		>, int> = 0>
		pair& operator=(pair<_Other1, _Other2>&& _Right)
			noexcept(is_nothrow_assignable_v<_Ty1&, _Other1> && is_nothrow_assignable_v<_Ty2&, _Other2>)	
#line 302 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		{
		first = ::std:: forward<_Other1>(_Right.first);
		second = ::std:: forward<_Other2>(_Right.second);
		return (*this);
		}

	void swap(pair& _Right)
		noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value)
#line 311 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
		{
		if (this != ::std:: addressof(_Right))
			{	
			_Swap_adl(first, _Right.first);
			_Swap_adl(second, _Right.second);
			}
		}

	_Ty1 first;		
	_Ty2 second;	
	};





#line 328 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"

template<class _Ty1,
	class _Ty2,
	class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2>
	 constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first == _Right.first && _Left.second == _Right.second);
	}

template<class _Ty1,
	class _Ty2>
	 constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2>
	 constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first < _Right.first ||
		(!(_Right.first < _Left.first) && _Left.second < _Right.second));
	}

template<class _Ty1,
	class _Ty2>
	 constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2>
	 constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty1,
	class _Ty2>
	 constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	
template<class _Ty>
	struct _Unrefwrap_helper
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct _Unrefwrap_helper<reference_wrapper<_Ty>>
	{	
	using type = _Ty&;
	};

	
template<class _Ty>
	using _Unrefwrap_t = typename _Unrefwrap_helper<decay_t<_Ty>>::type;

	
template<class _Ty1,
	class _Ty2>
	 constexpr pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>
		make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
	{	
	using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
	return (_Mypair(::std:: forward<_Ty1>(_Val1), ::std:: forward<_Ty2>(_Val2)));
	}

	namespace rel_ops
		{	
template<class _Ty>
	 inline bool operator!=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty>
	 inline bool operator>(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty>
	 inline bool operator<=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty>
	 inline bool operator>=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left < _Right));
	}
		}
}

namespace std {
	
template<class _Tuple>
	struct tuple_size;

template<class _Tuple,
	class = void>
	struct _Tuple_size_sfinae
	{	
	};

template<class _Tuple>
	struct _Tuple_size_sfinae<_Tuple, void_t<decltype(tuple_size<_Tuple>::value)>>
		: integral_constant<size_t, tuple_size<_Tuple>::value>
	{	
	};

template<class _Tuple>
	struct tuple_size<const _Tuple>
	: _Tuple_size_sfinae<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<volatile _Tuple>
	: _Tuple_size_sfinae<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<const volatile _Tuple>
	: _Tuple_size_sfinae<_Tuple>
	{	
	};

template<class _Ty>
	 constexpr size_t tuple_size_v = tuple_size<_Ty>::value;

template<size_t _Index,
	class _Tuple>
	struct tuple_element;

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	using _Mybase = tuple_element<_Index, _Tuple>;
	using type = add_const_t<typename _Mybase::type>;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	using _Mybase = tuple_element<_Index, _Tuple>;
	using type = add_volatile_t<typename _Mybase::type>;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	using _Mybase = tuple_element<_Index, _Tuple>;
	using type = add_cv_t<typename _Mybase::type>;
	};

template<size_t _Index,
	class _Tuple>
	using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;

	
template<class _Ty,
	size_t _Size>
	class array;

template<class _Ty,
	size_t _Size>
	struct tuple_size<array<_Ty, _Size> >
		: integral_constant<size_t, _Size>
	{	
	};

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	struct tuple_element<_Idx, array<_Ty, _Size>>
	{	
	static_assert(_Idx < _Size, "array index out of bounds");

	using type = _Ty;
	};


	
template<class... _Types>
	struct tuple_size<tuple<_Types...>>
	: integral_constant<size_t, sizeof...(_Types)>
	{	
	};

template<size_t _Index>
	struct tuple_element<_Index, tuple<>>
	{	
	static_assert(_Always_false<integral_constant<size_t, _Index>>,
		"tuple index out of bounds");
	};

template<class _This,
	class... _Rest>
	struct tuple_element<0, tuple<_This, _Rest...>>
	{	
	using type = _This;
	using _Ttype = tuple<_This, _Rest...>;
	};

template<size_t _Index,
	class _This,
	class... _Rest>
	struct tuple_element<_Index, tuple<_This, _Rest...>>
		: public tuple_element<_Index - 1, tuple<_Rest...>>
	{	
	};

	
template<class _Ty1,
	class _Ty2>
	struct tuple_size<pair<_Ty1, _Ty2>>
	: integral_constant<size_t, 2>
	{	
	};

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	struct tuple_element<_Idx, pair<_Ty1, _Ty2>>
	{	
	static_assert(_Idx < 2, "pair index out of bounds");

	using type = conditional_t<_Idx == 0, _Ty1, _Ty2>;
	};

template<class _Ret,
	class _Pair>
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 0>) noexcept
	{	
	return (_Pr.first);
	}

template<class _Ret,
	class _Pair>
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 1>) noexcept
	{	
	return (_Pr.second);
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	 constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&
		get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	using _Rtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&;
	return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2>
	 constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1>
	 constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	 constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&
		get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	using _Ctype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&;
	return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2>
	 constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1>
	 constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	 constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&
		get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	using _RRtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&;
	return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
	}

template<class _Ty1,
	class _Ty2>
	 constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<0>(::std:: move(_Pr)));
	}

template<class _Ty2,
	class _Ty1>
	 constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<1>(::std:: move(_Pr)));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	 constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&
		get(const pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	using _RRtype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&;
	return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
	}

template<class _Ty1,
	class _Ty2>
	 constexpr const _Ty1&& get(const pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<0>(::std:: move(_Pr)));
	}

template<class _Ty2,
	class _Ty1>
	 constexpr const _Ty2&& get(const pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<1>(::std:: move(_Pr)));
	}

	
template<class _Ty,
	class _Other = _Ty> inline
	_Ty exchange(_Ty& _Val, _Other&& _New_val)
	{	
	_Ty _Old_val = ::std:: move(_Val);
	_Val = ::std:: forward<_Other>(_New_val);
	return (_Old_val);
	}

	
template<class _Ty>
	 constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept
	{	
	return (_Val);
	}

template<class _Ty>
	void as_const(const _Ty&&) = delete;
























#line 736 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"


namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}
#line 744 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 752 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"
#line 753 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\utility"





#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 


extern "C" {







__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_1(void * _First, void * _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_2(void * _First, void * _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_4(void * _First, void * _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_8(void * _First, void * _Last) noexcept;
}
#line 32 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

namespace std {
		
struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
	{	
	void _Orphan_all() noexcept
		{	
		}

	void _Swap_all(_Container_base0&) noexcept
		{	
		}
	};

struct _Iterator_base0
	{	
	void _Adopt(const void *) noexcept
		{	
		}

	const _Container_base0 *_Getcont() const noexcept
		{	
		return (nullptr);
		}

	static constexpr bool _Unwrap_when_unverified = true;
	};

		
struct _Container_proxy
	{	
	_Container_proxy() noexcept
		: _Mycont(nullptr), _Myfirstiter(nullptr)
		{	
		}

	const _Container_base12 *_Mycont;
	_Iterator_base12 *_Myfirstiter;
	};

struct _Container_base12
	{	
public:
	_Container_base12()
		: _Myproxy(nullptr)
		{	
		}

	_Container_base12(const _Container_base12&) noexcept
		: _Myproxy(nullptr)
		{	
		}

	_Container_base12& operator=(const _Container_base12&) noexcept
		{	
		return (*this);
		}

	_Iterator_base12 **_Getpfirst() const noexcept
		{	
		return (_Myproxy == nullptr ? nullptr : &_Myproxy->_Myfirstiter);
		}

	void _Orphan_all() noexcept;	
	void _Swap_all(_Container_base12&) noexcept;	

	_Container_proxy *_Myproxy;
	};

struct _Iterator_base12
	{	
	_Iterator_base12() noexcept
		: _Myproxy(nullptr), _Mynextiter(nullptr)
		{	
		}

	_Iterator_base12(const _Iterator_base12& _Right) noexcept
		: _Myproxy(nullptr), _Mynextiter(nullptr)
		{	
		*this = _Right;
		}

	_Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept
		{	
		if (_Myproxy != _Right._Myproxy)
			{
			if (_Right._Myproxy == nullptr)
				{	
 
				_Lockit _Lock(3);
				_Orphan_me();
 #line 128 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
				}
			else
				{
				_Adopt(_Right._Myproxy->_Mycont);
				}
			}

		return (*this);
		}

	~_Iterator_base12() noexcept
		{	
 
		_Lockit _Lock(3);
		_Orphan_me();
 #line 144 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
		}

	void _Adopt(const _Container_base12 *_Parent) noexcept
		{	
		if (_Parent == nullptr)
			{	
 
			_Lockit _Lock(3);
			_Orphan_me();
 #line 154 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
			}
		else
			{	
			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

 
			if (_Myproxy != _Parent_proxy)
				{	
				_Lockit _Lock(3);
				_Orphan_me();
				_Mynextiter = _Parent_proxy->_Myfirstiter;
				_Parent_proxy->_Myfirstiter = this;
				_Myproxy = _Parent_proxy;
				}

 

#line 172 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
			}
		}

	void _Clrcont() noexcept
		{	
		_Myproxy = nullptr;
		}

	const _Container_base12 *_Getcont() const noexcept
		{	
		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);
		}

	_Iterator_base12 **_Getpnext() noexcept
		{	
		return (&_Mynextiter);
		}

	void _Orphan_me() noexcept
		{	
 
		if (_Myproxy != nullptr)
			{	
			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
			while (*_Pnext != nullptr && *_Pnext != this)
				_Pnext = &(*_Pnext)->_Mynextiter;

			do { if (*_Pnext) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 199, 0, "%s", "ITERATOR LIST CORRUPTED!")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"ITERATOR LIST CORRUPTED!\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 199, 0); } while (false); } ; } while (false);
			*_Pnext = _Mynextiter;
			_Myproxy = nullptr;
			}
 #line 204 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
		}

	static constexpr bool _Unwrap_when_unverified = 2 == 0;

	_Container_proxy *_Myproxy;
	_Iterator_base12 *_Mynextiter;
	};

		
inline void _Container_base12::_Orphan_all() noexcept
	{	
 
	if (_Myproxy != nullptr)
		{	
		_Lockit _Lock(3);

		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
			*_Pnext != nullptr; *_Pnext = (*_Pnext)->_Mynextiter)
			(*_Pnext)->_Myproxy = nullptr;
		_Myproxy->_Myfirstiter = nullptr;
		}
 #line 226 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
	}

inline void _Container_base12::_Swap_all(_Container_base12& _Right) noexcept
	{	
 
	_Lockit _Lock(3);
 #line 233 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

	_Container_proxy *_Temp = _Myproxy;
	_Myproxy = _Right._Myproxy;
	_Right._Myproxy = _Temp;

	if (_Myproxy != nullptr)
		_Myproxy->_Mycont = (_Container_base12 *)this;
	if (_Right._Myproxy != nullptr)
		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
	}

 



#line 249 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
using _Container_base = _Container_base12;
using _Iterator_base = _Iterator_base12;
 #line 252 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

	
struct _Zero_then_variadic_args_t
	{	
	};	

struct _One_then_variadic_args_t
	{	
	};	

template<class _Ty1,
	class _Ty2,
	bool = is_empty_v<_Ty1> && !is_final_v<_Ty1>>
	class _Compressed_pair final
		: private _Ty1
	{	
private:
	_Ty2 _Myval2;

	using _Mybase = _Ty1;	

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Ty1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	_Ty1& _Get_first() noexcept
		{	
		return (*this);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (*this);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}
	};

template<class _Ty1,
	class _Ty2>
	class _Compressed_pair<_Ty1, _Ty2, false> final
	{	
private:
	_Ty1 _Myval1;
	_Ty2 _Myval2;

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Myval1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	_Ty1& _Get_first() noexcept
		{	
		return (_Myval1);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (_Myval1);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}
	};

		
		
template<class _Fx>
	struct _Ref_fn
	{	
	template<class... _Args>
		constexpr decltype(auto) operator()(_Args&&... _Vals)
		{	
		return (_Fn(::std:: forward<_Args>(_Vals)...));
		}

	_Fx& _Fn;
	};

template<class _Fn>
	 constexpr bool _Pass_functor_by_value_v = sizeof(_Fn) <= sizeof(void *)
		&& conjunction_v<
			is_trivially_copy_constructible<_Fn>,
			is_trivially_destructible<_Fn>>;

template<class _Fn,
	enable_if_t<_Pass_functor_by_value_v<_Fn>, int> = 0>
	constexpr _Fn _Pass_fn(_Fn _Val)
	{	
	return (_Val);
	}

template<class _Fn,
	enable_if_t<!_Pass_functor_by_value_v<_Fn>, int> = 0>
	constexpr _Ref_fn<_Fn> _Pass_fn(_Fn& _Val)
	{	
	return {_Val};
	}

		
		
struct input_iterator_tag
	{	
	};

struct output_iterator_tag
	{	
	};

struct forward_iterator_tag
	: input_iterator_tag
	{	
	};

struct bidirectional_iterator_tag
	: forward_iterator_tag
	{	
	};

struct random_access_iterator_tag
	: bidirectional_iterator_tag
	{	
	};

		
struct _General_ptr_iterator_tag
	{	
	};

struct _Trivially_copyable_ptr_iterator_tag
	: _General_ptr_iterator_tag
	{	
	};

struct _Really_trivial_ptr_iterator_tag
	: _Trivially_copyable_ptr_iterator_tag
	{	
	};

		
struct _Unused_parameter
	{	
	constexpr _Unused_parameter() noexcept = default;
	template<class _Ty>
		constexpr _Unused_parameter(_Ty&&) noexcept {}
	};

		
using _Any_tag = _Unused_parameter; 

		
template<class _Ty>
	using _Algorithm_int_t = conditional_t<is_integral_v<_Ty>, _Ty, ptrdiff_t>;

		
template<class,
	class = void>
	struct _Iterator_traits_base
	{	
	};

template<class _Iter>
	struct _Iterator_traits_base<_Iter, void_t<
		typename _Iter::iterator_category,
		typename _Iter::value_type,
		typename _Iter::difference_type,
		typename _Iter::pointer,
		typename _Iter::reference
		>>
	{	
	using iterator_category = typename _Iter::iterator_category;
	using value_type = typename _Iter::value_type;
	using difference_type = typename _Iter::difference_type;

	using pointer = typename _Iter::pointer;
	using reference = typename _Iter::reference;
	};

template<class _Ty,
	bool = is_object_v<_Ty>>
	struct _Iterator_traits_pointer_base
	{	
	using iterator_category = random_access_iterator_tag;
	using value_type = remove_cv_t<_Ty>;
	using difference_type = ptrdiff_t;

	using pointer = _Ty *;
	using reference = _Ty&;
	};

template<class _Ty>
	struct _Iterator_traits_pointer_base<_Ty, false>
	{	
		
	};

template<class _Iter>
	struct iterator_traits
		: _Iterator_traits_base<_Iter>
	{	
	};

template<class _Ty>
	struct iterator_traits<_Ty *>
		: _Iterator_traits_pointer_base<_Ty>
	{	
	};

		
template<class _Iter>
	using _Iter_value_t = typename iterator_traits<_Iter>::value_type;

		
template<class _Iter>
	using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;

		
template<class... _Iters>
	using _Common_diff_t = common_type_t<_Iter_diff_t<_Iters>...>;

		
template<class _Iter>
	using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;

		
template<class _Ty,
	class = void>
	 constexpr bool _Is_iterator_v = false;

template<class _Ty>
	 constexpr bool _Is_iterator_v<_Ty, void_t<_Iter_cat_t<_Ty>>> = true;

		
template<class _Ty>
	struct _Is_iterator
		: bool_constant<_Is_iterator_v<_Ty>>
	{
	};

		
template<class _Iter>
	 constexpr bool _Is_input_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, input_iterator_tag>;

		
template<class _Iter>
	 constexpr bool _Is_fwd_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, forward_iterator_tag>;

		
template<class _Iter>
	 constexpr bool _Is_bidi_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, bidirectional_iterator_tag>;

		
template<class _Iter>
	 constexpr bool _Is_random_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, random_access_iterator_tag>;

		
template<class,
	class = void>
	struct _Is_checked_helper
	{	
	};

		

template<class _Ty>
	constexpr void _Verify_range(const _Ty * const _First, const _Ty * const _Last) noexcept
	{	
	do { if (_First <= _Last) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 559, 0, "%s", "transposed pointer range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"transposed pointer range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 559, 0); } while (false); } ; } while (false);
	}
#line 562 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _Iter,
	class _Sentinel = _Iter,
	class = void>
	struct _Range_verifiable
		: false_type
	{
	};

template<class _Iter,
	class _Sentinel>
	struct _Range_verifiable<_Iter, _Sentinel, void_t<
		decltype(_Verify_range(::std:: declval<const _Iter&>(), ::std:: declval<const _Sentinel&>()))>>
		: true_type
	{
	};

template<class _Iter,
	class _Sentinel = _Iter>
	 constexpr bool _Range_verifiable_v = _Range_verifiable<_Iter, _Sentinel>::value;
















#line 599 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
template<class _Iter,
	class _Sentinel>
	constexpr void _Adl_verify_range1(const _Iter& _First, const _Sentinel& _Last, true_type)
	{	
	_Verify_range(_First, _Last);
	}

template<class _Iter,
	class _Sentinel>
	constexpr void _Adl_verify_range1(const _Iter&, const _Sentinel&, false_type)
	{	
	}

template<class _Iter,
	class _Sentinel>
	constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last)
	{	
	_Adl_verify_range1(_First, _Last, bool_constant<_Range_verifiable_v<_Iter, _Sentinel>>{});
	}
#line 619 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"


		
template<class _Iter,
	class = void>
	struct _Unwrappable
		: false_type
	{
	};

template<class _Iter>
	struct _Unwrappable<_Iter, void_t<
		decltype(::std:: declval<_Iter&>()._Seek_to(::std:: declval<const _Iter&>()._Unwrapped()))>>
		: true_type
	{
	};

template<class _Iter>
	 constexpr bool _Unwrappable_v = _Unwrappable<_Iter>::value;

template<class _Iter,
	enable_if_t<_Unwrappable_v<_Iter>, int> = 0>
	 constexpr auto _Get_unwrapped(const _Iter& _It)
	{	
	return (_It._Unwrapped());
	}

template<class _Iter,
	enable_if_t<!_Unwrappable_v<_Iter>, int> = 0>
	 constexpr const _Iter& _Get_unwrapped(const _Iter& _It)
	{	
	return (_It);
	}

template<class _Iter,
	enable_if_t<!_Unwrappable_v<_Iter>, int> = 0>
	 constexpr const _Iter&& _Get_unwrapped(const _Iter&& _It)
	{	
	return (static_cast<const _Iter&&>(_It));
	}

template<class _Ty>
	 constexpr _Ty * _Get_unwrapped(_Ty * const _Ptr)
	{	
	return (_Ptr);
	}

template<class _Iter>
	using _Unwrapped_t = remove_cv_t<remove_reference_t<decltype(_Get_unwrapped(::std:: declval<const _Iter&>()))>>;

		
template<class _Iter,
	class = bool>
	struct _Do_unwrap_when_unverified
		: false_type
	{
	};

template<class _Iter>
	struct _Do_unwrap_when_unverified<_Iter, decltype(static_cast<bool>(_Iter::_Unwrap_when_unverified))>
		: bool_constant<static_cast<bool>(_Iter::_Unwrap_when_unverified)>
	{
	};

template<class _Iter>
	 constexpr bool _Do_unwrap_when_unverified_v = _Do_unwrap_when_unverified<_Iter>::value;

template<class _Iter>
	 constexpr bool _Unwrappable_for_unverified_v = _Unwrappable_v<_Iter>
		&& _Do_unwrap_when_unverified_v<_Iter>;

template<class _Iter,
	enable_if_t<_Unwrappable_for_unverified_v<_Iter>, int> = 0>
	 constexpr auto _Get_unwrapped_unverified(const _Iter& _It)
	{	
	return (_It._Unwrapped());
	}

template<class _Iter,
	enable_if_t<!_Unwrappable_for_unverified_v<_Iter>, int> = 0>
	 constexpr const _Iter& _Get_unwrapped_unverified(const _Iter& _It)
	{	
	return (_It);
	}

template<class _Iter,
	enable_if_t<!_Unwrappable_for_unverified_v<_Iter>, int> = 0>
	 constexpr const _Iter&& _Get_unwrapped_unverified(const _Iter&& _It)
	{	
	return (static_cast<const _Iter&&>(_It));
	}

template<class _Ty>
	 constexpr _Ty * _Get_unwrapped_unverified(_Ty * const _Ptr)
	{	
	return (_Ptr);
	}

template<class _Iter>
	using _Unwrapped_unverified_t = remove_cv_t<remove_reference_t<
		decltype(_Get_unwrapped_unverified(::std:: declval<const _Iter&>()))>>;

		
struct _Distance_unknown
	{
	constexpr _Distance_unknown operator-() const noexcept
		{
		return {};
		}
	};

template<class _Diff>
	 constexpr _Diff _Max_possible_v = static_cast<_Diff>(static_cast<make_unsigned_t<_Diff>>(-1) >> 1);

template<class _Diff>
	 constexpr _Diff _Min_possible_v = -_Max_possible_v<_Diff> - 1;

template<class _Iter,
	class = void>
	struct _Offset_verifiable
		: false_type
	{
	};

template<class _Iter>
	struct _Offset_verifiable<_Iter, void_t<decltype(
		::std:: declval<const _Iter&>()._Verify_offset(_Iter_diff_t<_Iter>{}))>>
		: true_type
	{
	};

template<class _Iter>
	 constexpr bool _Offset_verifiable_v = _Offset_verifiable<_Iter>::value;

template<class _Iter>
	 constexpr bool _Unwrappable_for_offset_v = _Unwrappable_v<_Iter> && _Offset_verifiable_v<_Iter>;

template<class _Iter,
	class _Diff,
	enable_if_t<_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>, int> = 0>
	 constexpr auto _Get_unwrapped_n(const _Iter& _It, const _Diff _Off)
	{	
	using _IDiff = _Iter_diff_t<_Iter>;
	using _CDiff = common_type_t<_Diff, _IDiff>;
	const auto _COff = static_cast<_CDiff>(_Off);

	do { if (_COff <= static_cast<_CDiff>(_Max_possible_v<_IDiff>) && (is_unsigned_v<_Diff> || static_cast<_CDiff>(_Min_possible_v<_IDiff>) <= _COff)) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 767, 0, "%s", "integer overflow")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"integer overflow\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 767, 0); } while (false); } ; } while (false);
#line 768 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
	(void) _COff;

	_It._Verify_offset(static_cast<_IDiff>(_Off));
	return (_It._Unwrapped());
	}

template<class _Iter,
	class _Diff,
	enable_if_t<_Unwrappable_for_unverified_v<_Iter>
		&& ((!_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>)
			|| is_same_v<_Diff, _Distance_unknown>), int> = 0>
	 constexpr auto _Get_unwrapped_n(const _Iter& _It, _Diff)
	{	
	return (_It._Unwrapped());
	}

template<class _Iter,
	class _Diff,
	enable_if_t<!_Unwrappable_for_unverified_v<_Iter>
		&& ((!_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>)
			|| is_same_v<_Diff, _Distance_unknown>), int> = 0>
	 constexpr const _Iter& _Get_unwrapped_n(const _Iter& _It, _Diff)
	{	
	return (_It);
	}

template<class _Iter,
	class _Diff,
	enable_if_t<!_Unwrappable_for_unverified_v<_Iter>
		&& ((!_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>)
			|| is_same_v<_Diff, _Distance_unknown>), int> = 0>
	 constexpr const _Iter&& _Get_unwrapped_n(const _Iter&& _It, _Diff)
	{	
	return (static_cast<const _Iter&&>(_It));
	}

template<class _Ty,
	class _Diff,
	enable_if_t<is_same_v<_Diff, _Distance_unknown> || is_integral_v<_Diff>, int> = 0>
	 constexpr _Ty * _Get_unwrapped_n(_Ty * const _Src, _Diff)
	{
	return (_Src);
	}

template<class _Iter>
	using _Unwrapped_n_t = remove_cv_t<remove_reference_t<
		decltype(_Get_unwrapped_n(::std:: declval<const _Iter&>(), _Iter_diff_t<_Iter>{}))>>;

		
template<class _Iter,
	class _UIter,
	class = void>
	struct _Wrapped_seekable
		: false_type
	{
	};

template<class _Iter,
	class _UIter>
	struct _Wrapped_seekable<_Iter, _UIter, void_t<
		decltype(::std:: declval<_Iter&>()._Seek_to(::std:: declval<const _UIter&>()))>>
		: true_type
	{
	};

template<class _Iter,
	class _UIter>
	 constexpr bool _Wrapped_seekable_v = _Wrapped_seekable<_Iter, _UIter>::value;















#line 852 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
template<class _Iter,
	class _UIter,
	enable_if_t<_Wrapped_seekable_v<_Iter, _UIter>, int> = 0>
	constexpr void _Seek_wrapped(_Iter& _It, const _UIter& _UIt)
	{
	_It._Seek_to(_UIt);
	}

template<class _Iter,
	class _UIter,
	enable_if_t<!_Wrapped_seekable_v<_Iter, _UIter>, int> = 0>
	constexpr void _Seek_wrapped(_Iter& _It, const _UIter& _UIt)
	{
	_It = _UIt;
	}
#line 868 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _Ty>
	constexpr void _Seek_wrapped(_Ty *& _It, _Ty * const _UIt)
	{
	_It = _UIt;
	}





























#line 904 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<size_t _Value>
	struct _Priority_tag
		: _Priority_tag<_Value - 1>
	{	
	};

template<>
	struct _Priority_tag<0>
	{	
	};





















#line 938 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
















#line 957 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
template<class _Checked,
	class _Iter> inline
	_Distance_unknown _Idl_distance1(const _Iter&, const _Iter&, input_iterator_tag)
	{	
	return {};
	}

template<class _Checked,
	class _Iter> inline
	_Iter_diff_t<_Checked> _Idl_distance1(const _Iter& _First, const _Iter& _Last, random_access_iterator_tag)
	{	
	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));
	}

template<class _Checked,
	class _Iter> inline
	auto _Idl_distance(const _Iter& _First, const _Iter& _Last)
	{	
	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));
	}
#line 978 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _Ty1,
	class _Ty2>
	struct _Is_same_size
		: bool_constant<sizeof(_Ty1) == sizeof(_Ty2)>
	{	
	};

		
template<class _Elem,
	bool _Is_enum = is_enum_v<_Elem>>
	struct _Unwrap_enum
	{	
	using type = underlying_type_t<_Elem>;
	};

template<class _Elem>
	struct _Unwrap_enum<_Elem, false>
	{	
	using type = _Elem;
	};

template<class _Elem>
	using _Unwrap_enum_t = typename _Unwrap_enum<_Elem>::type;

		
template<class _Ty1,
	class _Ty2>
	struct _Both_or_neither_bool
		: bool_constant<is_same_v<bool, _Ty1> == is_same_v<bool, _Ty2>>
	{	
	};

		
template<class _Source,
	class _Dest>
	struct _Ptr_cat_helper
	{	
	using _USource = _Unwrap_enum_t<_Source>;
	using _UDest = _Unwrap_enum_t<_Dest>;
	using type = conditional_t<conjunction_v<
			_Is_same_size<_USource, _UDest>,
			is_integral<_USource>,
			is_integral<_UDest>,
			_Both_or_neither_bool<_USource, _UDest>
		>, _Really_trivial_ptr_iterator_tag, _General_ptr_iterator_tag>;
	};

template<class _Elem>
	struct _Ptr_cat_helper<_Elem, _Elem>
	{	
	using type = conditional_t<
		is_trivially_copyable_v<_Elem>,
		conditional_t<is_trivial_v<_Elem>,
			_Really_trivial_ptr_iterator_tag,
			_Trivially_copyable_ptr_iterator_tag>,
		_General_ptr_iterator_tag>;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const _Anything *>
	{	
	using type = _Really_trivial_ptr_iterator_tag;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, volatile _Anything *>
	{	
	using type = _Really_trivial_ptr_iterator_tag;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const volatile _Anything *>
	{	
	using type = _Really_trivial_ptr_iterator_tag;
	};

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_copy_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable_v<_Dest&, _Source&>,
		typename _Ptr_cat_helper<remove_cv_t<_Source>, remove_cv_t<_Dest>>::type,
		_General_ptr_iterator_tag>
		_Ptr_copy_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_move_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable_v<_Dest&, _Source>,
		typename _Ptr_cat_helper<remove_cv_t<_Source>, remove_cv_t<_Dest>>::type,
		_General_ptr_iterator_tag>
		_Ptr_move_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

		

 




#line 1098 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
  
  
  


		
template<class _Pr,
	class _Ty1,
	class _Ty2>
	constexpr bool _Debug_lt_pred(_Pr&& _Pred, _Ty1&& _Left, _Ty2&& _Right)
		noexcept(noexcept(_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left)))
	{	
	const auto _Result = static_cast<bool>(_Pred(_Left, _Right));
	if (_Result)
		{
		do { if (!_Pred(_Right, _Left)) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1113, 0, "%s", "invalid comparator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid comparator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1113, 0); } while (false); } ; } while (false);
		}

	return (_Result);
	}

		
template<class _InIt,
	class _Sentinel,
	class _Pr> inline
	void _Debug_order_unchecked2(_InIt, _Sentinel, _Pr&, input_iterator_tag)
	{	
	}

template<class _FwdIt,
	class _Sentinel,
	class _Pr> inline
	void _Debug_order_unchecked2(_FwdIt _First, _Sentinel _Last, _Pr& _Pred, forward_iterator_tag)
	{	
	if (_First != _Last)
		{
		for (_FwdIt _Next = _First; ++_Next != _Last; _First = _Next)
			{
			do { if (!_Debug_lt_pred(_Pred, *_Next, *_First)) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1136, 0, "%s", "sequence not ordered")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"sequence not ordered\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1136, 0); } while (false); } ; } while (false);
			}
		}
	}

template<class _InIt,
	class _Sentinel,
	class _Pr> inline
	void _Debug_order_unchecked(_InIt _First, _Sentinel _Last, _Pr&& _Pred)
	{	
	_Debug_order_unchecked2(_First, _Last, _Pred, _Iter_cat_t<_InIt>());
	}

		
template<class _InIt,
	class _Pr> inline
	void _Debug_order_set_unchecked2(_InIt, _InIt, _Pr&, input_iterator_tag, _Priority_tag<0>)
	{	
	}

template<class _FwdIt,
	class _Pr> inline
	void _Debug_order_set_unchecked2(_FwdIt _First, _FwdIt _Last, _Pr& _Pred, forward_iterator_tag, _Priority_tag<1>)
	{	
	_Debug_order_unchecked2(_First, _Last, _Pred, forward_iterator_tag{});
	}

template<class _OtherIt,
	class _InIt,
	class _Pr> inline
	void _Debug_order_set_unchecked(_InIt _First, _InIt _Last, _Pr&& _Pred)
	{	
	_Debug_order_set_unchecked2(_First, _Last, _Pred, _Iter_cat_t<_InIt>(),
		_Priority_tag<is_same<_Iter_value_t<_OtherIt>, _Iter_value_t<_InIt>>::value>());
	}
 #line 1172 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
		
template<class _InIt,
	class _Diff>
	inline void _Advance1(_InIt& _Where, _Diff _Off, input_iterator_tag)
	{	
	do { if (_Off >= 0) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1179, 0, "%s", "negative advance of non-bidirectional iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"negative advance of non-bidirectional iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1179, 0); } while (false); } ; } while (false);
	for (; 0 < _Off; --_Off)
		{
		++_Where;
		}
	}

template<class _BidIt,
	class _Diff>
	inline void _Advance1(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		{
		++_Where;
		}

	
#pragma warning(suppress: 6294)	
								
	for (; _Off < 0; ++_Off)
		{
		--_Where;
		}
	}

template<class _RanIt,
	class _Diff>
	inline void _Advance1(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
	{	
	_Where += _Off;
	}

template<class _InIt,
	class _Diff>
	inline void advance(_InIt& _Where, _Diff _Off)
	{	
		
	_Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());
	}

		
template<class _InIt>
	inline _Iter_diff_t<_InIt> _Distance1(_InIt _First, _InIt _Last, input_iterator_tag)
	{	
	_Iter_diff_t<_InIt> _Off = 0;
	for (; _First != _Last; ++_First)
		{
		++_Off;
		}

	return (_Off);
	}

template<class _RanIt>
	inline _Iter_diff_t<_RanIt> _Distance1(_RanIt _First, _RanIt _Last, random_access_iterator_tag)
	{	
	return (_Last - _First);
	}

template<class _InIt>
	 inline _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last)
	{	
	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));
	}

		
template<class _InIt>
	constexpr _InIt _Next_iter(_InIt _First)
	{	
	return (++_First);
	}

		
template<class _InIt>
	 inline _InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1)
	{	
	static_assert(_Is_input_iter_v<_InIt>, "next requires input iterator");

	::std:: advance(_First, _Off);
	return (_First);
	}

		
template<class _BidIt>
	constexpr _BidIt _Prev_iter(_BidIt _First)
	{	
	return (--_First);
	}

		
template<class _BidIt>
	 inline _BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1)
	{	
	static_assert(_Is_bidi_iter_v<_BidIt>, "prev requires bidirectional iterator");

	::std:: advance(_First, -_Off);
	return (_First);
	}

		
template<class _Ty>
	struct pointer_traits;

template<class _Iterator>
	constexpr _Iterator _Operator_arrow(_Iterator _Target, true_type)
	{	
	return (_Target);
	}

template<class _Iterator>
	constexpr decltype(auto) _Operator_arrow(_Iterator&& _Target, false_type)
	{	
	return (::std:: forward<_Iterator>(_Target).operator->());
	}

template<class _BidIt>
	class reverse_iterator
	{	
public:
	using iterator_category = typename iterator_traits<_BidIt>::iterator_category;
	using value_type = typename iterator_traits<_BidIt>::value_type;
	using difference_type = typename iterator_traits<_BidIt>::difference_type;
	using pointer = typename iterator_traits<_BidIt>::pointer;
	using reference = typename iterator_traits<_BidIt>::reference;

	using iterator_type = _BidIt;

	inline reverse_iterator()
		: current()
		{	
		}

	inline explicit reverse_iterator(_BidIt _Right)
		: current(_Right)
		{	
		}

	template<class _Other>
		inline reverse_iterator(const reverse_iterator<_Other>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _Other>
		inline reverse_iterator& operator=(const reverse_iterator<_Other>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	 inline _BidIt base() const
		{	
		return (current);
		}

	 inline reference operator*() const
		{	
		_BidIt _Tmp = current;
		return (*--_Tmp);
		}

	 inline pointer operator->() const
		{	
		_BidIt _Tmp = current;
		--_Tmp;
		return (_Operator_arrow(_Tmp, is_pointer<_BidIt>()));
		}

	inline reverse_iterator& operator++()
		{	
		--current;
		return (*this);
		}

	inline reverse_iterator operator++(int)
		{	
		reverse_iterator _Tmp = *this;
		--current;
		return (_Tmp);
		}

	inline reverse_iterator& operator--()
		{	
		++current;
		return (*this);
		}

	inline reverse_iterator operator--(int)
		{	
		reverse_iterator _Tmp = *this;
		++current;
		return (_Tmp);
		}



	inline reverse_iterator& operator+=(const difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	 inline reverse_iterator operator+(const difference_type _Off) const
		{	
		return (reverse_iterator(current - _Off));
		}

	inline reverse_iterator& operator-=(const difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	 inline reverse_iterator operator-(const difference_type _Off) const
		{	
		return (reverse_iterator(current + _Off));
		}

	 inline reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	template<class _BidIt2 = _BidIt,
		enable_if_t<_Offset_verifiable_v<_BidIt2>, int> = 0>
		constexpr void _Verify_offset(const difference_type _Off) const
		{
		do { if (_Off != _Min_possible_v<difference_type>) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1406, 0, "%s", "integer overflow")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"integer overflow\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1406, 0); } while (false); } ; } while (false);
		current._Verify_offset(-_Off);
		}

	template<class _BidIt2 = _BidIt,
		enable_if_t<_Unwrappable_v<_BidIt2>, int> = 0>
		 constexpr reverse_iterator<_Unwrapped_t<_BidIt2>> _Unwrapped() const
		{
		return (static_cast<reverse_iterator<_Unwrapped_t<_BidIt2>>>(current._Unwrapped()));
		}

	static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v<_BidIt>;

	template<class _Src,
		enable_if_t<_Wrapped_seekable_v<_BidIt, _Src>, int> = 0>
		constexpr void _Seek_to(const reverse_iterator<_Src>& _It)
		{
		current._Seek_to(_It.base());
		}
protected:
	_BidIt current;	
	};

template<class _BidIt,
	class _BidIt2,
	enable_if_t<_Range_verifiable_v<_BidIt, _BidIt2>, int> = 0>
	constexpr void _Verify_range(const reverse_iterator<_BidIt>& _First, const reverse_iterator<_BidIt2>& _Last)
	{
	
	_Verify_range(_Last.base(), _First.base()); 
	}

template<class _BidIt>
	 inline reverse_iterator<_BidIt> operator+(
		typename reverse_iterator<_BidIt>::difference_type _Off,
		const reverse_iterator<_BidIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _BidIt1,
	class _BidIt2>
	 inline auto operator-(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
			-> decltype(_Right.base() - _Left.base())
	{	
	return (_Right.base() - _Left.base());
	}

template<class _BidIt1,
	class _BidIt2>
	 inline bool operator==(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (_Left.base() == _Right.base());
	}

template<class _BidIt1,
	class _BidIt2>
	 inline bool operator!=(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _BidIt1,
	class _BidIt2>
	 inline bool operator<(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (_Right.base() < _Left.base());
	}

template<class _BidIt1,
	class _BidIt2>
	 inline bool operator>(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _BidIt1,
	class _BidIt2>
	 inline bool operator<=(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _BidIt1,
	class _BidIt2>
	 inline bool operator>=(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _BidIt>
	 inline reverse_iterator<_BidIt> make_reverse_iterator(_BidIt _Iter)
	{	
	return (reverse_iterator<_BidIt>(_Iter));
	}

		
template<class _Container>
	 inline auto begin(_Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	 inline auto begin(const _Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	 inline auto end(_Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Container>
	 inline auto end(const _Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Ty,
	size_t _Size>
	 constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Ty,
	size_t _Size>
	 constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array + _Size);
	}

		
template<class _Container>
	 constexpr auto cbegin(const _Container& _Cont)
		noexcept(noexcept(::std:: begin(_Cont)))
		-> decltype(::std:: begin(_Cont))
	{	
	return (::std:: begin(_Cont));
	}

template<class _Container>
	 constexpr auto cend(const _Container& _Cont)
		noexcept(noexcept(::std:: end(_Cont)))
		-> decltype(::std:: end(_Cont))
	{	
	return (::std:: end(_Cont));
	}

		
template<class _Container>
	 inline auto rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	 inline auto rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	 inline auto rend(_Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Container>
	 inline auto rend(const _Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Ty,
	size_t _Size>
	 inline reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array + _Size));
	}

template<class _Ty,
	size_t _Size>
	 inline reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array));
	}

template<class _Elem>
	 inline reverse_iterator<const _Elem *>
		rbegin(initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.end()));
	}

template<class _Elem>
	 inline reverse_iterator<const _Elem *>
		rend(initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.begin()));
	}

		
template<class _Container>
	 inline auto crbegin(const _Container& _Cont)
		-> decltype(::std:: rbegin(_Cont))
	{	
	return (::std:: rbegin(_Cont));
	}

template<class _Container>
	 inline auto crend(const _Container& _Cont)
		-> decltype(::std:: rend(_Cont))
	{	
	return (::std:: rend(_Cont));
	}


template<class _Container>
	 constexpr auto size(const _Container& _Cont)
		-> decltype(_Cont.size())
	{	
	return (_Cont.size());
	}

template<class _Ty,
	size_t _Size>
	 constexpr size_t size(const _Ty(&)[_Size]) noexcept
	{	
	return (_Size);
	}

template<class _Container>
	 constexpr auto empty(const _Container& _Cont)
		-> decltype(_Cont.empty())
	{	
	return (_Cont.empty());
	}

template<class _Ty,
	size_t _Size>
	 constexpr bool empty(const _Ty(&)[_Size]) noexcept
	{	
	return (false);
	}

template<class _Elem>
	 constexpr bool empty(
		initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.size() == 0);
	}

template<class _Container>
	 constexpr auto data(_Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Container>
	 constexpr auto data(const _Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Ty,
	size_t _Size>
	 constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Elem>
	 constexpr const _Elem *data(
		initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		




		

struct _Iterator_base12_compatible
	{	
	_Container_proxy * _Myproxy{};
	_Iterator_base12 * _Mynextiter{};
	};
#line 1711 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _Ty,
	size_t _Size>
	class _Array_const_iterator

		: private _Iterator_base12_compatible
#line 1718 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
	{	
public:
	using iterator_category = random_access_iterator_tag;

	using value_type = _Ty;
	using difference_type = ptrdiff_t;
	using pointer = const _Ty *;
	using reference = const _Ty&;
	enum {_EEN_SIZE = _Size};	
 




























































































































#line 1853 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
	inline _Array_const_iterator()
		: _Ptr(),
		_Idx(0)
		{	
		}

	inline explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
		: _Ptr(_Parg),
		_Idx(_Off)
		{	
		}

	 inline reference operator*() const
		{	
		return (*operator->());
		}

	 inline pointer operator->() const
		{	
		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1872, 0, "%s", "cannot dereference value-initialized array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference value-initialized array iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1872, 0); } while (false); } ; } while (false);
		do { if (_Idx < _Size) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1873, 0, "%s", "cannot dereference out of range array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference out of range array iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1873, 0); } while (false); } ; } while (false);
		return (_Ptr + _Idx);
		}

	inline _Array_const_iterator& operator++()
		{	
		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1879, 0, "%s", "cannot increment value-initialized array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment value-initialized array iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1879, 0); } while (false); } ; } while (false);
		do { if (_Idx < _Size) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1880, 0, "%s", "cannot increment array iterator past end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment array iterator past end\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1880, 0); } while (false); } ; } while (false);
		++_Idx;
		return (*this);
		}

	inline _Array_const_iterator operator++(int)
		{	
		_Array_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	inline _Array_const_iterator& operator--()
		{	
		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1894, 0, "%s", "cannot decrement value-initialized array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement value-initialized array iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1894, 0); } while (false); } ; } while (false);
		do { if (_Idx != 0) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1895, 0, "%s", "cannot decrement array iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement array iterator before begin\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1895, 0); } while (false); } ; } while (false);
		--_Idx;
		return (*this);
		}

	inline _Array_const_iterator operator--(int)
		{	
		_Array_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	constexpr void _Verify_offset(const ptrdiff_t _Off) const noexcept
		{
		if (_Off != 0)
			{
			do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1911, 0, "%s", "cannot seek value-initialized array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek value-initialized array iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1911, 0); } while (false); } ; } while (false);
			}

		if (_Off < 0)
			{
#pragma warning(suppress: 4146)	
			do { if (_Idx >= -static_cast<size_t>(_Off)) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1918, 0, "%s", "cannot seek array iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek array iterator before begin\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1918, 0); } while (false); } ; } while (false);
#line 1919 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
			}

		if (_Off > 0)
			{
			do { if (_Size - _Idx >= static_cast<size_t>(_Off)) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1924, 0, "%s", "cannot seek array iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek array iterator after end\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1924, 0); } while (false); } ; } while (false);
#line 1925 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
			}
		}

	inline _Array_const_iterator& operator+=(const ptrdiff_t _Off)
		{	
		_Verify_offset(_Off);
		_Idx += _Off;
		return (*this);
		}

	 inline _Array_const_iterator operator+(const ptrdiff_t _Off) const
		{	
		_Array_const_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	inline _Array_const_iterator& operator-=(const ptrdiff_t _Off)
		{	
		return (*this += -_Off);
		}

	 inline _Array_const_iterator operator-(const ptrdiff_t _Off) const
		{	
		_Array_const_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	 inline ptrdiff_t operator-(const _Array_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (static_cast<ptrdiff_t>(_Idx - _Right._Idx));
		}

	 inline reference operator[](const ptrdiff_t _Off) const
		{	
		return (*(*this + _Off));
		}

	 inline bool operator==(const _Array_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Idx == _Right._Idx);
		}

	 inline bool operator!=(const _Array_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	 inline bool operator<(const _Array_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Idx < _Right._Idx);
		}

	 inline bool operator>(const _Array_const_iterator& _Right) const
		{	
		return (_Right < *this);
		}

	 inline bool operator<=(const _Array_const_iterator& _Right) const
		{	
		return (!(_Right < *this));
		}

	 inline bool operator>=(const _Array_const_iterator& _Right) const
		{	
		return (!(*this < _Right));
		}

	inline void _Compat(const _Array_const_iterator& _Right) const
		{	
		do { if (_Ptr == _Right._Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1997, 0, "%s", "array iterators incompatible")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array iterators incompatible\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 1997, 0); } while (false); } ; } while (false);
		}

	 constexpr pointer _Unwrapped() const
		{
		return (_Ptr + _Idx);
		}

	constexpr void _Verify_with(const _Array_const_iterator& _Last) const noexcept
		{
		
		do { if (*this <= _Last) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2008, 0, "%s", "array iterator range transposed")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array iterator range transposed\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2008, 0); } while (false); } ; } while (false);
		}

	constexpr void _Seek_to(pointer _It)
		{
		_Idx = static_cast<size_t>(_It - _Ptr);
		}

private:
	pointer _Ptr;	
	size_t _Idx;	
 #line 2020 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
	};

 
template<class _Ty,
	size_t _Size>
	constexpr void _Verify_range(const _Array_const_iterator<_Ty, _Size>& _First,
		const _Array_const_iterator<_Ty, _Size>& _Last) noexcept
	{
	
	_First._Verify_with(_Last);
	}
 #line 2032 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _Ty,
	size_t _Size>
	 inline _Array_const_iterator<_Ty, _Size> operator+(
		ptrdiff_t _Off,
		_Array_const_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_iterator
		: public _Array_const_iterator<_Ty, _Size>
	{	
public:
	using _Mybase = _Array_const_iterator<_Ty, _Size>;
	using iterator_category = random_access_iterator_tag;

	using value_type = _Ty;
	using difference_type = ptrdiff_t;
	using pointer = _Ty *;
	using reference = _Ty&;

	inline _Array_iterator()
		{	
		}

	inline explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
		: _Mybase(_Parg, _Off)
		{	
		}

	enum {_EEN_SIZE = _Size};	

	 inline reference operator*() const
		{	
		return (const_cast<reference>(_Mybase::operator*()));
		}

	 inline pointer operator->() const
		{	
		return (const_cast<pointer>(_Mybase::operator->()));
		}

	inline _Array_iterator& operator++()
		{	
		++*static_cast<_Mybase *>(this);
		return (*this);
		}

	inline _Array_iterator operator++(int)
		{	
		_Array_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	inline _Array_iterator& operator--()
		{	
		--*static_cast<_Mybase *>(this);
		return (*this);
		}

	inline _Array_iterator operator--(int)
		{	
		_Array_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	inline _Array_iterator& operator+=(const ptrdiff_t _Off)
		{	
		*static_cast<_Mybase *>(this) += _Off;
		return (*this);
		}

	 inline _Array_iterator operator+(const ptrdiff_t _Off) const
		{	
		_Array_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	inline _Array_iterator& operator-=(const ptrdiff_t _Off)
		{	
		return (*this += -_Off);
		}

	 inline _Array_iterator operator-(const ptrdiff_t _Off) const
		{	
		_Array_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	 inline ptrdiff_t operator-(const _Mybase& _Right) const
		{	
		return (*static_cast<const _Mybase *>(this) - _Right);
		}

	 inline reference operator[](const ptrdiff_t _Off) const
		{	
		return (*(*this + _Off));
		}

	 constexpr pointer _Unwrapped() const
		{
		return (const_cast<pointer>(_Mybase::_Unwrapped()));
		}
	};

template<class _Ty,
	size_t _Size>
	 inline _Array_iterator<_Ty, _Size> operator+(
		ptrdiff_t _Off,
		_Array_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Iter>
	class move_iterator
	{	
public:
	using iterator_category = typename iterator_traits<_Iter>::iterator_category;
	using value_type = typename iterator_traits<_Iter>::value_type;
	using difference_type = typename iterator_traits<_Iter>::difference_type;
	using pointer = _Iter;
	using _Ref0 = typename iterator_traits<_Iter>::reference;
	using reference = conditional_t<is_reference_v<_Ref0>, remove_reference_t<_Ref0>&&, _Ref0>;
	using iterator_type = _Iter;

	inline move_iterator()
		: current()
		{	
		}

	inline explicit move_iterator(iterator_type _Right)
		: current(_Right)
		{	
		}

	template<class _Iter2>
		inline move_iterator(const move_iterator<_Iter2>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _Iter2>
		inline move_iterator& operator=(const move_iterator<_Iter2>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	 inline _Iter base() const
		{	
		return (current);
		}

	 inline reference operator*() const
		{	
		return (static_cast<reference>(*current));
		}

	 inline pointer operator->() const
		{	
		return (current);
		}

	inline move_iterator& operator++()
		{	
		++current;
		return (*this);
		}

	inline move_iterator operator++(int)
		{	
		move_iterator _Tmp = *this;
		++current;
		return (_Tmp);
		}

	inline move_iterator& operator--()
		{	
		--current;
		return (*this);
		}

	inline move_iterator operator--(int)
		{	
		move_iterator _Tmp = *this;
		--current;
		return (_Tmp);
		}



	inline move_iterator& operator+=(const difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	 inline move_iterator operator+(const difference_type _Off) const
		{	
		return (move_iterator(current + _Off));
		}

	inline move_iterator& operator-=(const difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	 inline move_iterator operator-(const difference_type _Off) const
		{	
		return (move_iterator(current - _Off));
		}

	 inline reference operator[](const difference_type _Off) const
		{	
		return (::std:: move(current[_Off]));
		}

	template<class _Iter2,
		enable_if_t<_Range_verifiable_v<_Iter, _Iter2>, int> = 0>
		friend constexpr void _Verify_range(const move_iterator& _First, const move_iterator<_Iter2>& _Last)
		{
		_Verify_range(_First.base(), _Last.base());
		}

	template<class _Iter2 = iterator_type,
		enable_if_t<_Offset_verifiable_v<_Iter2>, int> = 0>
		constexpr void _Verify_offset(const difference_type _Off) const
		{
		current._Verify_offset(_Off);
		}

	template<class _Iter2 = iterator_type,
		enable_if_t<_Unwrappable_v<_Iter2>, int> = 0>
		 constexpr move_iterator<_Unwrapped_t<_Iter2>> _Unwrapped() const
		{
		return (static_cast<move_iterator<_Unwrapped_t<_Iter2>>>(current._Unwrapped()));
		}

	static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v<iterator_type>;

	template<class _Src,
		enable_if_t<_Wrapped_seekable_v<iterator_type, _Src>, int> = 0>
		constexpr void _Seek_to(const move_iterator<_Src>& _It)
		{
		current._Seek_to(_It.base());
		}
protected:
	iterator_type current;	
	};

template<class _Iter>
	 inline move_iterator<_Iter> operator+(
		typename move_iterator<_Iter>::difference_type _Off,
		const move_iterator<_Iter>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _Iter1,
	class _Iter2>
	 inline auto operator-(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
			-> decltype(_Left.base() - _Right.base())
	{	
	return (_Left.base() - _Right.base());
	}

template<class _Iter1,
	class _Iter2>
	 inline bool operator==(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (_Left.base() == _Right.base());
	}

template<class _Iter1,
	class _Iter2>
	 inline bool operator!=(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Iter1,
	class _Iter2>
	 inline bool operator<(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (_Left.base() < _Right.base());
	}

template<class _Iter1,
	class _Iter2>
	 inline bool operator>(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Iter1,
	class _Iter2>
	 inline bool operator<=(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Iter1,
	class _Iter2>
	 inline bool operator>=(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _Iter>
	 inline move_iterator<_Iter> make_move_iterator(_Iter _It)
	{	
	return (move_iterator<_Iter>(_It));
	}

		
template<class _Traits>
	struct _Char_traits_eq
	{
	using _Elem = typename _Traits::char_type;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::eq(_Left, _Right));
		}
	};

		
template<class _Traits>
	struct _Char_traits_lt
	{
	using _Elem = typename _Traits::char_type;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::lt(_Left, _Right));
		}
	};

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	
	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
	:: memmove(_Dest_ch, _First_ch, _Count);
	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		{
		*_Dest = *_First;
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
		
	return (_Copy_unchecked1(_First, _Last, _Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt copy(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _ULast, _UDest));
	return (_Dest);
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy *copy(_InIt _First, _InIt _Last, _DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest))._Unwrapped());
	}
 #line 2458 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"



























#line 2486 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked4(_InIt _First, _Diff _Count,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
		
	for (;;)
		{
		*_Dest = *_First;
		++_Dest;
		--_Count;
		if (_Count == 0)
			{	
				
			return (_Dest);
			}

		++_First;
		}
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked4(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
		
	return (_Copy_memmove(_First, _First + _Count, _Dest));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked3(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
		
	return (_Copy_n_unchecked4(_First, _Count,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt copy_n(_InIt _First, _Diff _Count_raw, _OutIt _Dest)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		_Seek_wrapped(_Dest,
			_Copy_n_unchecked3(_Get_unwrapped_n(_First, _Count), _Count, _Get_unwrapped_n(_Dest, _Count)));
		}

	return (_Dest);
	}

 
template<class _SourceTy,
	size_t _SourceSize,
	class _Diff,
	class _OutIt> inline
	_OutIt copy_n(_SourceTy (&_First)[_SourceSize], _Diff _Count_raw, _OutIt _Dest)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		do { if ((::std:: size(_First) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2557, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2557, 0); } while (false); } ; } while (false);
		_Seek_wrapped(_Dest, _Copy_n_unchecked3(_First, _Count, _Get_unwrapped_n(_Dest, _Count)));
		}

	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy *copy_n(_InIt _First, _Diff _Count_raw, _DestTy (&_Dest)[_DestSize])
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		do { if ((::std:: size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2573, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2573, 0); } while (false); } ; } while (false);
		return (_Copy_n_unchecked3(_Get_unwrapped_n(_First, _Count), _Count, _Dest));
		}

	return (_Dest);
	}

template<class _SourceTy,
	size_t _SourceSize,
	class _Diff,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy *copy_n(_SourceTy (&_First)[_SourceSize], _Diff _Count_raw, _DestTy (&_Dest)[_DestSize])
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		do { if ((::std:: size(_First) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2590, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2590, 0); } while (false); } ; } while (false);
		do { if ((::std:: size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2591, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 2591, 0); } while (false); } ; } while (false);
		return (_Copy_n_unchecked3(_First, _Count, _Dest));
		}

	return (_Dest);
	}
 #line 2598 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"























































#line 2654 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
	{	
	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
	return (static_cast<_BidIt2>(
		:: memmove(_Dest_ch - _Count, _First_ch, _Count)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = *--_Last;
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, -_Idl_distance<_BidIt1>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Copy_backward_unchecked(_UFirst, _ULast, _UDest, _Ptr_copy_cat(_UFirst, _UDest)));
	return (_Dest);
	}











#line 2710 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		*_Dest = ::std:: move(*_First);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
		
	return (_Move_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Move_unchecked(_UFirst, _ULast, _UDest));
	return (_Dest);
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy *move(_InIt _First, _InIt _Last, _DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: move(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest))._Unwrapped());
	}
 #line 2763 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"



























#line 2791 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = ::std:: move(*--_Last);
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
	{	
		
	return (_Move_backward_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, -_Idl_distance<_BidIt1>(_UFirst, _ULast));
	_Seek_wrapped(_Dest, _Move_backward_unchecked(_UFirst, _ULast, _UDest));
	return (_Dest);
	}











#line 2843 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _Ty>
	struct _Is_character
		: false_type
		{	
		};

template<>
	struct _Is_character<char>
		: true_type
		{	
		};

template<>
	struct _Is_character<signed char>
		: true_type
		{	
		};

template<>
	struct _Is_character<unsigned char>
		: true_type
		{	
		};

template<class _FwdIt,
	class _Ty>
	struct _Fill_memset_is_safe_helper
	{	
	using _Value_type = _Iter_value_t<_FwdIt>;

	using _Raw_ty = _Unwrap_enum_t<_Ty>;
	using _Raw_value_type = _Unwrap_enum_t<_Value_type>;

	using type = bool_constant<conjunction_v<
		is_pointer<_FwdIt>,
		disjunction<
			conjunction<
				_Is_character<_Raw_ty>,
				_Is_character<_Raw_value_type>>,
			conjunction<
				is_same<bool, _Raw_ty>,
				is_same<bool, _Raw_value_type>>>,
		is_convertible<_Ty, _Value_type>>>;
	};

template<class _FwdIt,
	class _Ty> inline
	typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
	_Fill_memset_is_safe(const _FwdIt&, const _Ty&)
	{	
	return {};
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Val;
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, true_type)
	{	
	:: memset(_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First));
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
	}

template<class _FwdIt,
	class _Ty> inline
	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	_Fill_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val);
	}

 










#line 2940 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked2(_OutIt _Dest, _Diff _Count, const _Ty& _Val, false_type)
	{	
	for (; 0 < _Count; --_Count, (void)++_Dest)
		*_Dest = _Val;
	return (_Dest);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked2(_OutIt _Dest, _Diff _Count, const _Ty& _Val, true_type)
	{	
	:: memset(_Dest, static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));
	return (_Dest + _Count);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt fill_n(_OutIt _Dest, _Diff _Count_raw, const _Ty& _Val)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _UDest = _Get_unwrapped_n(_Dest, _Count);
		_Seek_wrapped(_Dest,
			_Fill_n_unchecked2(_UDest, _Count, _Val, _Fill_memset_is_safe(_UDest, _Val)));
		}

	return (_Dest);
	}

 











#line 2991 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _Elem1,
	class _Elem2>
	struct _Value_equality_is_bitwise_equality
		: bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)>
	{	
		
		
		
	};

template<class _Elem1,
	class _Elem2,
	class _Pr>
	struct _Equal_memcmp_is_safe_helper
		: false_type
	{	
		
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
		: bool_constant<conjunction_v<
			_Is_same_size<_Elem1, _Elem2>,
			_Is_nonbool_integral<_Elem1>,
			_Is_nonbool_integral<_Elem2>,
			negation<is_volatile<_Elem1>>,
			negation<is_volatile<_Elem2>>,
			
			
			_Value_equality_is_bitwise_equality<_Elem1, _Elem2>
		>>
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1 *, _Elem2 *, equal_to<>>
		: is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type
	{	
	};







#line 3042 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
	};

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
		
	};

template<class _Iter1,
	class _Iter2,
	class _Pr> inline
	false_type _Equal_memcmp_is_safe(const _Iter1&, const _Iter2&, const _Pr&)
	{	
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _Pr> inline
	typename _Equal_memcmp_is_safe_helper<
		remove_const_t<_Obj1>,
		remove_const_t<_Obj2>,
		_Pr>::type
		_Equal_memcmp_is_safe(_Obj1 * const&, _Obj2 * const&, const _Pr&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(_InIt1 _First1, const _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred, false_type)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		{
		if (!_Pred(*_First1, *_First2))
			{
			return (false);
			}
		}

	return (true);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, _Pr, true_type)
	{	
	const auto _First1_ch = reinterpret_cast<const char *>(_First1);
	const auto _First2_ch = reinterpret_cast<const char *>(_First2);
	const auto _Count = static_cast<size_t>(reinterpret_cast<const char *>(_Last1) - _First1_ch);
	return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, _Pr _Pred)
	{	
	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	 inline bool equal(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
	return (_Equal_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred)));
	}

 
template<class _InIt1,
	class _RightTy,
	size_t _RightSize,
	class _Pr,
	enable_if_t<!is_same_v<_RightTy *, _Pr>, int> = 0>
	 inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, _RightTy (&_First2)[_RightSize], _Pr _Pred)
	{	
	return (::std:: equal(_First1, _Last1,
		_Array_iterator<_RightTy, _RightSize>(_First2), _Pass_fn(_Pred)));
	}
 #line 3140 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"




















#line 3161 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _InIt1,
	class _InIt2>
	 inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2)
	{	
	return (::std:: equal(_First1, _Last1, _First2, equal_to<>()));
	}

 
template<class _InIt1,
	class _RightTy,
	size_t _RightSize>
	 inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, _RightTy (&_First2)[_RightSize])
	{	
	return (::std:: equal(_First1, _Last1, _First2, equal_to<>()));
	}
 #line 3178 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
























#line 3203 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, const _InIt1 _Last1,
		_InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
		input_iterator_tag, input_iterator_tag)
	{	
		
	for (;;)
		{
		if (_First1 == _Last1)
			{
			return (_First2 == _Last2);
			}

		if (_First2 == _Last2)
			{
			return (false);
			}

		if (!_Pred(*_First1, *_First2))
			{
			return (false);
			}

		++_First1;
		++_First2;
		}
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		{
		return (false);
		}

	return (_Equal_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	 inline bool equal(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	return (_Equal_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
		_Get_unwrapped(_First2), _Get_unwrapped(_Last2), _Pass_fn(_Pred),
			_Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
	}









#line 3272 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _InIt1,
	class _InIt2>
	 inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2)
	{	
	return (::std:: equal(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}











#line 3291 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _Elem1,
	class _Elem2,
	class _FTy>
	struct _Lex_compare_check_element_types_helper
		: bool_constant<conjunction_v<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			_Is_character<_FTy>,
			is_unsigned<_FTy>
		>>
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
		: bool_constant<conjunction_v<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			is_unsigned<_Elem1>,
			is_unsigned<_Elem2>
		>>
	{	
	};













#line 3331 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _Memcmp_pr>
	struct _Lex_compare_optimize
	{	
	};

template<class _Memcmp_pr,
	class _Obj1,
	class _Obj2,
	class _FTy>
	using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
		_Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
		_Memcmp_pr, void>>;	

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	_Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&)
	{	
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _FTy> inline
	_Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy>
		_Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const less<_FTy>&)
	{	
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _FTy> inline
	_Lex_compare_check_element_types<greater<int>, _Obj1, _Obj2, _FTy>
		_Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const greater<_FTy>&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred, _Lex_compare_optimize<void>)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		{	
		if (_Debug_lt_pred(_Pred, *_First1, *_First2))
			return (true);
		else if (_Pred(*_First2, *_First1))
			return (false);
		}

	return (_First1 == _Last1 && _First2 != _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr,
	class _Memcmp_pr> inline
	bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr, _Lex_compare_optimize<_Memcmp_pr>)
	{	
	const auto _Num1 = static_cast<size_t>(_Last1 - _First1);
	const auto _Num2 = static_cast<size_t>(_Last2 - _First2);
	const int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
	return (_Memcmp_pr{}(_Ans, 0) || (_Ans == 0 && _Num1 < _Num2));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	 inline bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	return (_Lex_compare_unchecked(_UFirst1, _ULast1, _UFirst2, _ULast2, _Pass_fn(_Pred),
		_Lex_compare_memcmp_classify(_UFirst1, _UFirst2, _Pred)));
	}

template<class _InIt1,
	class _InIt2>
	 inline bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: lexicographical_compare(_First1, _Last1,
		_First2, _Last2, less<>()));
	}




























#line 3454 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag)
	{	
	return ((-128) <= _Val && _Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
	{	
	return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
	{	
	return (_Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag)
	{	
	return (0 <= _Val && _Val <= 0xff);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag)
	{	
	return (_Val <= 0xff);
	}

template<class _InIt,
	class _Ty> inline
	bool _Within_limits(_InIt, const _Ty& _Val)
	{	
	using _Elem = remove_pointer_t<_InIt>;
	return (_Within_limits(_Val, is_signed<_Elem>{}, is_signed<_Ty>{},
		bool_constant<-1 == static_cast<_Ty>(-1)>{}));
	}

template<class _InIt> inline
	bool _Within_limits(_InIt, const bool&)
	{	
	return (true);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, const _InIt _Last, const _Ty& _Val, true_type)
	{	
	if (!_Within_limits(_First, _Val))
		{
		return (_Last);
		}

	_First = static_cast<_InIt>(:: memchr(
		_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
	return (_First ? _First : _Last);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, const _InIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			break;
	return (_First);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked(const _InIt _First, const _InIt _Last, const _Ty& _Val)
	{	
	
	using _Memchr_opt = bool_constant<is_integral_v<_Ty> && _Is_any_of_v<_InIt,
		char *, signed char *, unsigned char *, const char *, const signed char *, const unsigned char *>>;

	return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt{}));
	}

template<class _InIt,
	class _Ty>
	 inline _InIt find(_InIt _First, const _InIt _Last, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Find_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val));
	return (_First);
	}







#line 3553 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		{
		if (_Pred(*_First, _Val))
			{
			break;
			}
		}

	return (_First);
	}

		
template<class _InIt,
	class _Ty>
	 inline _Iter_diff_t<_InIt> count(const _InIt _First, const _InIt _Last, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (*_UFirst == _Val)
			{
			++_Count;
			}
		}

	return (_Count);
	}








#line 3600 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_Iter_diff_t<_InIt> _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _First != _Last; ++_First)
		{
		if (_Pred(*_First, _Val))
			{
			++_Count;
			}
		}

	return (_Count);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr,
		forward_iterator_tag, forward_iterator_tag)
	{	
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr _Pred,
		bidirectional_iterator_tag, bidirectional_iterator_tag)
	{	
	
	do
		{	
		--_Last1;
		--_Last2;
		}
	while (_Pred(*_Last1, *_Last2));
	++_Last1;
	++_Last2;
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	_Trim_matching_suffixes(_Last1, _Last2, _Pred,
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
	for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
		{
		if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
			{	
			_Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
			if (_Count2 == 0)
				{
				return (false);	
				}

			_FwdIt1 _Skip1 = _Next_iter(_Next1);
			_Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
			if (_Count2 != _Count1)
				{
				return (false);	
				}
			}
		}

	return (true);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _Pr _Pred)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		{
		if (!_Pred(*_First1, *_First2))
			{	
				
				
			auto _Last2 = ::std:: next(_First2, static_cast<_Iter_diff_t<_FwdIt2>>(::std:: distance(_First1, _Last1)));
			return (_Check_match_counts(_First1, _Last1, _First2, _Last2, _Pred));
			}
		}

	return (true);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr>
	 inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_FwdIt1>(_UFirst1, _ULast1));
	return (_Is_permutation_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred)));
	}

 
template<class _FwdIt1,
	class _RightTy,
	size_t _RightSize,
	class _Pr,
	class = enable_if_t<!is_same_v<_RightTy *, _Pr>>>
	 inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_RightTy (&_First2)[_RightSize], _Pr _Pred)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_Array_iterator<_RightTy, _RightSize>(_First2), _Pass_fn(_Pred)));
	}
 #line 3723 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _FwdIt1,
	class _FwdIt2> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_First2, equal_to<>()));
	}


 
template<class _FwdIt1,
	class _RightTy,
	size_t _RightSize>
	 inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1, _RightTy (&_First2)[_RightSize])
	{	
	return (::std:: is_permutation(_First1, _Last1, _First2, equal_to<>()));
	}
 #line 3743 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
		
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		{
		if (!_Pred(*_First1, *_First2))
			{	
			if (::std:: distance(_First1, _Last1) == ::std:: distance(_First2, _Last2))
				{
				return (_Check_match_counts(_First1, _Last1, _First2, _Last2, _Pred));
				}
			else
				{
				return (false);	
				}
			}
		}

	return (_First1 == _Last1 && _First2 == _Last2);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		{
		return (false);
		}

	return (_Is_permutation_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr>
	 inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
		
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	return (_Is_permutation_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
		_Get_unwrapped(_First2), _Get_unwrapped(_Last2), _Pass_fn(_Pred),
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2>
	 inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: is_permutation(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}

		
template<class _BidIt> inline
	void _Reverse_unchecked1(_BidIt _First, _BidIt _Last, integral_constant<size_t, 0>)
	{	
	for (; _First != _Last && _First != --_Last; ++_First)
		{
		::std:: iter_swap(_First, _Last);
		}
	}


template<class _BidIt> inline
	void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 1>)
	{	
	__std_reverse_trivially_swappable_1(_First, _Last);
	}

template<class _BidIt> inline
	void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 2>)
	{	
	__std_reverse_trivially_swappable_2(_First, _Last);
	}

template<class _BidIt> inline
	void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 4>)
	{	
	__std_reverse_trivially_swappable_4(_First, _Last);
	}

template<class _BidIt> inline
	void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 8>)
	{	
	__std_reverse_trivially_swappable_8(_First, _Last);
	}
#line 3844 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

template<class _BidIt> inline
	void _Reverse_unchecked(const _BidIt _First, const _BidIt _Last)
	{	

	using _Elem = remove_pointer_t<_BidIt>;
	constexpr size_t _Opt = is_pointer_v<_BidIt>
		&& _Is_trivially_swappable_v<_Elem>
		&& !is_volatile_v<_Elem>
		&& (sizeof(_Elem) == 1
			|| sizeof(_Elem) == 2
			|| sizeof(_Elem) == 4
			|| sizeof(_Elem) == 8) ? sizeof(_Elem) : 0;


#line 3860 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
	_Reverse_unchecked1(_First, _Last, integral_constant<size_t, _Opt>{});
	}

template<class _BidIt> inline
	void reverse(const _BidIt _First, const _BidIt _Last)
	{	
	_Adl_verify_range(_First, _Last);
	_Reverse_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last));
	}

 








#line 3880 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		forward_iterator_tag)
	{	
	for (_FwdIt _Next = _Mid, _Res = _Last; ; )
		{	
		::std:: iter_swap(_First, _Next);
		if (++_First == _Mid)
			{	
			if (++_Next == _Last)
				return (_Res == _Last ? _Mid : _Res);
			else
				_Mid = _Next;	
			}
		else if (++_Next == _Last)
			{	
			if (_Res == _Last)
				_Res = _First;
			_Next = _Mid;
			}
		}
	}

template<class _BidIt> inline
	pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(
		_BidIt _First, _BidIt _Sentinel, _BidIt _Last)
	{	
	while (_First != _Sentinel && _Last != _Sentinel)
		{
		::std:: iter_swap(_First, --_Last);
		++_First;
		}

	return (::std:: make_pair(_First, _Last));
	}

template<class _BidIt> inline
	_BidIt _Rotate_unchecked1(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		bidirectional_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel_unchecked(_First, _Mid, _Last);
	_Reverse_unchecked(_Tmp.first, _Tmp.second);
	return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
	}

template<class _RanIt> inline
	_RanIt _Rotate_unchecked1(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		random_access_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	_Reverse_unchecked(_First, _Last);
	return (_First + (_Last - _Mid));
	}

template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	if (_First == _Mid)
		return (_Last);
	if (_Mid == _Last)
		return (_First);
	return (_Rotate_unchecked1(_First, _Mid, _Last, _Iter_cat_t<_FwdIt>()));
	}

template<class _FwdIt> inline
	_FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
		
		
	_Adl_verify_range(_First, _Mid);
	_Adl_verify_range(_Mid, _Last);
	_Seek_wrapped(_First,
		_Rotate_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Mid),
		_Get_unwrapped(_Last)));
	return (_First);
	}










#line 3972 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	 inline _FwdIt lower_bound(_FwdIt _First, const _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	_Iter_diff_t<_FwdIt> _Count = ::std:: distance(_UFirst, _Get_unwrapped(_Last));

	while (0 < _Count)
		{	
		const _Iter_diff_t<_FwdIt> _Count2 = _Count >> 1; 
		const auto _UMid = ::std:: next(_UFirst, _Count2);
		if (_Pred(*_UMid, _Val))
			{	
			_UFirst = _Next_iter(_UMid);
			_Count -= _Count2 + 1;
			}
		else
			{
			_Count = _Count2;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}

	
template<class _Diff,
	class _Urng>
	class _Rng_from_urng
	{	
public:
	using _Ty0 = make_unsigned_t<_Diff>;
	using _Ty1 = typename _Urng::result_type;

	using _Udiff = conditional_t<sizeof (_Ty1) < sizeof (_Ty0), _Ty0, _Ty1>;

	explicit _Rng_from_urng(_Urng& _Func)
		: _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
		{	
		for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
			--_Bits;
		}

	_Diff operator()(_Diff _Index)
		{	
		for (;;)
			{	
			_Udiff _Ret = 0;	
			_Udiff _Mask = 0;	

			while (_Mask < _Udiff(_Index - 1))
				{	
				_Ret <<= _Bits - 1;	
				_Ret <<= 1;
				_Ret |= _Get_bits();
				_Mask <<= _Bits - 1;	
				_Mask <<= 1;
				_Mask |= _Bmask;
				}

			
			if (_Ret / _Index < _Mask / _Index
				|| _Mask % _Index == _Udiff(_Index - 1))
				return (static_cast<_Diff>(_Ret % _Index));
			}
		}

	_Udiff _Get_all_bits()
		{	
		_Udiff _Ret = 0;

		for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
			_Num += _Bits)
			{	
			_Ret <<= _Bits - 1;	
			_Ret <<= 1;
			_Ret |= _Get_bits();
			}

		return (_Ret);
		}

	_Rng_from_urng(const _Rng_from_urng&) = delete;
	_Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
	_Udiff _Get_bits()
		{	
		for (;;)
			{	
			_Udiff _Val = _Ref() - (_Urng::min)();

			if (_Val <= _Bmask)
				return (_Val);
			}
		}

	_Urng& _Ref;	
	size_t _Bits;	
	_Udiff _Bmask;	
	};

		
template<class _Elem>
	class __declspec(dllimport) _Yarn
	{	
public:
	 _Yarn()
		: _Myptr(nullptr), _Nul(0)
		{	
		}

	 _Yarn(const _Yarn& _Right)
		: _Myptr(nullptr), _Nul(0)
		{	
		*this = _Right;
		}

	 _Yarn(const _Elem * _Right)
		: _Myptr(nullptr), _Nul(0)
		{	
		*this = _Right;
		}

	_Yarn&  operator=(const _Yarn& _Right)
		{	
		return (*this = _Right._Myptr);
		}

	_Yarn&  operator=(const _Elem * _Right)
		{	
		if (_Myptr != _Right)
			{	
			_Tidy();

			if (_Right != nullptr)
				{	
				const _Elem *_Ptr = _Right;
				while (*_Ptr != (_Elem)0)
					{
					++_Ptr;
					}

				const auto _Count = (++_Ptr - _Right) * sizeof(_Elem);

 
				_Myptr = (_Elem *)_malloc_dbg(_Count, 2,
					"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility", 4125);

 

#line 4130 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

				if (_Myptr != nullptr)
					{
					:: memcpy(_Myptr, _Right, _Count);
					}
				}
			}

		return (*this);
		}

	 ~_Yarn() noexcept
		{	
		_Tidy();
		}

	bool  empty() const
		{	
		return (_Myptr == nullptr);
		}

	  const _Elem * c_str() const
		{	
		return (_Myptr != nullptr ? _Myptr : &_Nul);
		}

	bool  _Empty() const
		{	
		return (_Myptr == nullptr);
		}

	  const _Elem * _C_str() const
		{	
		return (_Myptr != nullptr ? _Myptr : &_Nul);
		}

private:
	void  _Tidy()
		{	
		if (_Myptr != nullptr)

 
			_free_dbg(_Myptr, 2);

 

#line 4177 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"

		_Myptr = nullptr;
		}

	_Elem * _Myptr;	
	_Elem _Nul;		
	};


		
template<class _Container>
	class back_insert_iterator
	{	
public:
	using iterator_category = output_iterator_tag;
	using value_type = void;
	using difference_type = void;
	using pointer = void;
	using reference = void;

	using container_type = _Container;

	explicit back_insert_iterator(_Container& _Cont)
		: container(::std:: addressof(_Cont))
		{	
		}

	back_insert_iterator& operator=(const typename _Container::value_type& _Val)
		{	
		container->push_back(_Val);
		return (*this);
		}

	back_insert_iterator& operator=(typename _Container::value_type&& _Val)
		{	
		container->push_back(::std:: move(_Val));
		return (*this);
		}

	 back_insert_iterator& operator*()
		{	
		return (*this);
		}

	back_insert_iterator& operator++()
		{	
		return (*this);
		}

	back_insert_iterator operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

		
template<class _Container>
	 inline back_insert_iterator<_Container> back_inserter(_Container& _Cont)
	{	
	return (back_insert_iterator<_Container>(_Cont));
	}


	
template<class _Ty,
	class _Alloc,
	class = void>
	struct _Has_allocator_type
		: false_type
	{	
	};

template<class _Ty,
	class _Alloc>
	struct _Has_allocator_type<_Ty, _Alloc, void_t<typename _Ty::allocator_type>>
		: is_convertible<_Alloc, typename _Ty::allocator_type>::type
	{	
	};

		
struct allocator_arg_t
	{	
	explicit allocator_arg_t() = default;
	};

 constexpr allocator_arg_t allocator_arg{};

[[noreturn]]  void __cdecl _Xbad_alloc();
[[noreturn]]  void __cdecl _Xinvalid_argument(  const char *);
[[noreturn]]  void __cdecl _Xlength_error(  const char *);
[[noreturn]]  void __cdecl _Xout_of_range(  const char *);
[[noreturn]]  void __cdecl _Xoverflow_error(  const char *);
[[noreturn]]  void __cdecl _Xruntime_error(  const char *);

		
template<class _Ty,
	class _Alloc>
	struct uses_allocator
		: _Has_allocator_type<_Ty, _Alloc>::type
	{	
	};

template<class _Ty,
	class _Alloc>
	 constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;

		
template<class _Category,
	class _Ty,
	class _Diff = ptrdiff_t,
	class _Pointer = _Ty *,
	class _Reference = _Ty&>
	struct  iterator
	{	
	using iterator_category = _Category;
	using value_type = _Ty;
	using difference_type = _Diff;
	using pointer = _Pointer;
	using reference = _Reference;
	};
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 4306 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"
#line 4307 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xutility"





#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<size_t _Ty_size> inline
	size_t _Get_size_of_n(const size_t _Count)
	{	
	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
	size_t _Result = _Count * _Ty_size;
	if (_Max_possible < _Count)
		{	
			
		_Result = static_cast<size_t>(-1);
		}

	return (_Result);
	}

template<> inline
	size_t _Get_size_of_n<1>(const size_t _Count)
	{	
	return (_Count);
	}

		
template<class _Ty>
	 constexpr size_t _New_alignof = _Max_value(alignof(_Ty),
		static_cast<size_t>(8u) 
		);

		
struct _Default_allocate_traits
	{
	__declspec(allocator) static void * _Allocate(const size_t _Bytes)
		{
		return (::operator new(_Bytes));
		}

 




#line 61 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"
	};

constexpr bool _Is_pow_2(const size_t _Value) noexcept
	{
	return (_Value != 0 && (_Value & (_Value - 1)) == 0);
	}

 
constexpr size_t _Big_allocation_threshold = 4096;
constexpr size_t _Big_allocation_alignment = 32;

static_assert(2 * sizeof(void *) <= _Big_allocation_alignment,
	"Big allocation alignment should at least match vector register alignment");
static_assert(_Is_pow_2(_Big_allocation_alignment),
	"Big allocation alignment must be a power of two");

  
constexpr size_t _Non_user_size = 2 * sizeof(void *) + _Big_allocation_alignment - 1;
  

#line 82 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

  


constexpr size_t _Big_allocation_sentinel = 0xFAFAFAFAUL;
  #line 88 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

		
template<class _Traits> inline
	__declspec(allocator) void * _Allocate_manually_vector_aligned(const size_t _Bytes)
	{	
	size_t _Block_size = _Non_user_size + _Bytes;
	if (_Block_size <= _Bytes)
		{	
			
		_Block_size = static_cast<size_t>(-1);
		}

	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
	do { if (_Ptr_container != 0) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0", 101, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0", 101, 0); } while (false); } ; } while (false);	
	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
		& ~(_Big_allocation_alignment - 1));
	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  
	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;
  #line 109 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"
	return (_Ptr);
	}

		
inline void _Adjust_manually_vector_aligned(void *& _Ptr, size_t& _Bytes)
	{	
	_Bytes += _Non_user_size;

	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
	const uintptr_t _Ptr_container = _Ptr_user[-1];

	
	
	do { if (_Ptr_user[-2] == _Big_allocation_sentinel) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0", 122, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0", 122, 0); } while (false); } ; } while (false);

	
	
  
	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
  

#line 131 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"
	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
	do { if (_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0", 132, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0", 132, 0); } while (false); } ; } while (false);
	_Ptr = reinterpret_cast<void *>(_Ptr_container);
	}
 #line 136 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

		
 



































#line 175 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

template<size_t _Align,
	class _Traits = _Default_allocate_traits,
	enable_if_t<(!0 || _Align <= 8u), int> = 0> inline
	__declspec(allocator) void *_Allocate(const size_t _Bytes)
	{	
 
	if (_Bytes >= _Big_allocation_threshold)
		{	
		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));
		}
 #line 187 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

	if (_Bytes != 0)
		{
		return (_Traits::_Allocate(_Bytes));
		}

	return (nullptr);
	}

template<size_t _Align,
	enable_if_t<(!0 || _Align <= 8u), int> = 0> inline
	void _Deallocate(void * _Ptr, size_t _Bytes)
	{	
 
	if (_Bytes >= _Big_allocation_threshold)
		{	
		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
		}
 #line 206 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

	::operator delete(_Ptr, _Bytes);
	}

		
template<class _Ty,
	class... _Types> inline
	void _Construct_in_place(_Ty& _Obj, _Types&&... _Args)
		noexcept(is_nothrow_constructible_v<_Ty, _Types...>)
	{	
	::new (const_cast<void *>(static_cast<const volatile void *>(::std:: addressof(_Obj))))
		_Ty(::std:: forward<_Types>(_Args)...);
	}

		
template<class _Ty,
	class... _Types> inline
	_Ty * _Global_new(_Types&&... _Args)
	{	
	void * const _Result = _Allocate<_New_alignof<_Ty>>(sizeof(_Ty));
	try {
	::new (_Result) _Ty(::std:: forward<_Types>(_Args)...);
	} catch (...) {
	_Deallocate<_New_alignof<_Ty>>(_Result, sizeof(_Ty));
	throw;
	}
	return (static_cast<_Ty *>(_Result));
	}

		
template<class _Ty>
	struct _Get_first_parameter;

template<template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Get_first_parameter<_Ty<_First, _Rest...>>
	{	
	using type = _First;
	};

		
template<class _Newfirst,
	class _Ty>
	struct _Replace_first_parameter;

template<class _Newfirst,
	template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...>>
	{	
	using type = _Ty<_Newfirst, _Rest...>;
	};

		
template<class _Ty,
	class = void>
	struct _Get_element_type
	{	
	using type = typename _Get_first_parameter<_Ty>::type;
	};

template<class _Ty>
	struct _Get_element_type<_Ty, void_t<typename _Ty::element_type>>
	{	
	using type = typename _Ty::element_type;
	};

		
template<class _Ty,
	class = void>
	struct _Get_ptr_difference_type
	{	
	using type = ptrdiff_t;
	};

template<class _Ty>
	struct _Get_ptr_difference_type<_Ty, void_t<typename _Ty::difference_type>>
	{	
	using type = typename _Ty::difference_type;
	};

		
template<class _Ty,
	class _Other,
	class = void>
	struct _Get_rebind_alias
	{	
	using type = typename _Replace_first_parameter<_Other, _Ty>::type;
	};

template<class _Ty,
	class _Other>
	struct _Get_rebind_alias<_Ty, _Other, void_t<typename _Ty::template rebind<_Other>>>
	{	
	using type = typename _Ty::template rebind<_Other>;
	};

		
template<class _Ty>
	struct pointer_traits
	{	
	using element_type = typename _Get_element_type<_Ty>::type;
	using pointer = _Ty;
	using difference_type = typename _Get_ptr_difference_type<_Ty>::type;

	template<class _Other>
		using rebind = typename _Get_rebind_alias<_Ty, _Other>::type;

	using _Reftype = conditional_t<is_void_v<element_type>,
		char&,
		add_lvalue_reference_t<element_type>>;

	 static pointer pointer_to(_Reftype _Val)
		{	
		return (_Ty::pointer_to(_Val));
		}
	};

template<class _Ty>
	struct pointer_traits<_Ty *>
	{	
	using element_type = _Ty;
	using pointer = _Ty *;
	using difference_type = ptrdiff_t;

	template<class _Other>
		using rebind = _Other *;

	using _Reftype = conditional_t<is_void_v<_Ty>,
		char&,
		add_lvalue_reference_t<_Ty>>;

	 static pointer pointer_to(_Reftype _Val)
		{	
		return (::std:: addressof(_Val));
		}
	};

		
template<class _Ptr,
	class _Ty>
	using _Rebind_pointer_t = typename pointer_traits<_Ptr>::template rebind<_Ty>;

		
template<class _Pointer,
	enable_if_t<!is_pointer_v<_Pointer>, int> = 0> inline
	_Pointer _Refancy(typename pointer_traits<_Pointer>::element_type * _Ptr)
	{	
	return (pointer_traits<_Pointer>::pointer_to(*_Ptr));
	}

template<class _Pointer,
	enable_if_t<is_pointer_v<_Pointer>, int> = 0> inline
	_Pointer _Refancy(_Pointer _Ptr)
	{	
	return (_Ptr);
	}

		
template<class _Ty> inline
	void _Destroy_in_place(_Ty& _Obj) noexcept
	{	
	_Obj.~_Ty();
	}

		
template<class _Ptrty> inline
	auto _Const_cast(_Ptrty _Ptr)
	{	
	using _Elem = typename pointer_traits<_Ptrty>::element_type;
	using _Modifiable = remove_const_t<_Elem>;
	using _Dest = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

	return (pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr)));
	}

template<class _Ty> inline
	auto _Const_cast(_Ty * _Ptr)
	{	
	return (const_cast<remove_const_t<_Ty> *>(_Ptr));
	}

		
template<class _Ty,
	class = void>
	struct _Get_pointer_type
	{	
	using type = typename _Ty::value_type *;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Get_pointer_type<_Ty, void_t<typename _Ty::pointer>>
	{	
	using type = typename _Ty::pointer;
	};
#pragma warning(pop)

		
template<class _Ty,
	class = void>
	struct _Get_const_pointer_type
	{	
	using _Ptrty = typename _Get_pointer_type<_Ty>::type;
	using _Valty = typename _Ty::value_type;
	using type = typename pointer_traits<_Ptrty>::template rebind<const _Valty>;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Get_const_pointer_type<_Ty, void_t<typename _Ty::const_pointer>>
	{	
	using type = typename _Ty::const_pointer;
	};
#pragma warning(pop)

		
template<class _Ty,
	class = void>
	struct _Get_void_pointer_type
	{	
	using _Ptrty = typename _Get_pointer_type<_Ty>::type;
	using type = typename pointer_traits<_Ptrty>::template rebind<void>;
	};

template<class _Ty>
	struct _Get_void_pointer_type<_Ty, void_t<typename _Ty::void_pointer>>
	{	
	using type = typename _Ty::void_pointer;
	};

		
template<class _Ty,
	class = void>
	struct _Get_const_void_pointer_type
	{	
	using _Ptrty = typename _Get_pointer_type<_Ty>::type;
	using type = typename pointer_traits<_Ptrty>::template rebind<const void>;
	};

template<class _Ty>
	struct _Get_const_void_pointer_type<_Ty, void_t<typename _Ty::const_void_pointer>>
	{	
	using type = typename _Ty::const_void_pointer;
	};

		
template<class _Ty,
	class = void>
	struct _Get_difference_type
	{	
	using _Ptrty = typename _Get_pointer_type<_Ty>::type;
	using type = typename pointer_traits<_Ptrty>::difference_type;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Get_difference_type<_Ty, void_t<typename _Ty::difference_type>>
	{	
	using type = typename _Ty::difference_type;
	};
#pragma warning(pop)

		
template<class _Ty,
	class = void>
	struct _Get_size_type
	{	
	using type = make_unsigned_t<typename _Get_difference_type<_Ty>::type>;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Get_size_type<_Ty, void_t<typename _Ty::size_type>>
	{	
	using type = typename _Ty::size_type;
	};
#pragma warning(pop)

		
template<class _Ty,
	class = void>
	struct _Get_propagate_on_container_copy
	{	
	using type = false_type;
	};

template<class _Ty>
	struct _Get_propagate_on_container_copy<_Ty, void_t<typename _Ty::propagate_on_container_copy_assignment>>
	{	
	using type = typename _Ty::propagate_on_container_copy_assignment;
	};

		
template<class _Ty,
	class = void>
	struct _Get_propagate_on_container_move
	{	
	using type = false_type;
	};

template<class _Ty>
	struct _Get_propagate_on_container_move<_Ty, void_t<typename _Ty::propagate_on_container_move_assignment>>
	{	
	using type = typename _Ty::propagate_on_container_move_assignment;
	};

		
template<class _Ty,
	class = void>
	struct _Get_propagate_on_container_swap
	{	
	using type = false_type;
	};

template<class _Ty>
	struct _Get_propagate_on_container_swap<_Ty, void_t<typename _Ty::propagate_on_container_swap>>
	{	
	using type = typename _Ty::propagate_on_container_swap;
	};

		
template<class _Ty,
	class = void>
	struct _Get_is_always_equal
	{	
	using type = typename is_empty<_Ty>::type;
	};

template<class _Ty>
	struct _Get_is_always_equal<_Ty, void_t<typename _Ty::is_always_equal>>
	{	
	using type = typename _Ty::is_always_equal;
	};

		
template<class _Ty,
	class _Other,
	class = void>
	struct _Get_rebind_type
	{	
	using type = typename _Replace_first_parameter<_Other, _Ty>::type;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty,
	class _Other>
	struct _Get_rebind_type<_Ty, _Other, void_t<typename _Ty::template rebind<_Other>::other>>
	{	
	using type = typename _Ty::template rebind<_Other>::other;
	};
#pragma warning(pop)

		
template<class _Ty>
	class allocator;

template<class _Alloc,
	class = void>
	struct _Is_default_allocator
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized>
		: true_type
	{	
	};

		
template<class _Void,
	class... _Types>
	struct _Has_no_alloc_construct
		: true_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc,
	class _Ptr,
	class... _Args>
	struct _Has_no_alloc_construct<void_t<
		decltype(::std:: declval<_Alloc&>().construct(::std:: declval<_Ptr>(), ::std:: declval<_Args>()...))>,
		_Alloc, _Ptr, _Args...>
		: false_type
	{	
	};
#pragma warning(pop)

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_construct<void, _Alloc, _Ptr, _Args...>>;

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct_t = typename _Uses_default_construct<_Alloc, _Ptr, _Args...>::type;


		
template<class _Alloc,
	class _Ptr,
	class = void>
	struct _Has_no_alloc_destroy
		: true_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc,
	class _Ptr>
	struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<decltype(::std:: declval<_Alloc&>().destroy(::std:: declval<_Ptr>()))>>
		: false_type
	{	
	};
#pragma warning(pop)

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_destroy<_Alloc, _Ptr>>;

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;


		
template<class _Alloc,
	class _Size_type,
	class _Const_void_pointer,
	class = void>
	struct _Has_allocate_hint
		: false_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc,
	class _Size_type,
	class _Const_void_pointer>
	struct _Has_allocate_hint<_Alloc, _Size_type, _Const_void_pointer, void_t<
		decltype(::std:: declval<_Alloc&>().allocate(
			::std:: declval<const _Size_type&>(), ::std:: declval<const _Const_void_pointer&>()))>>
		: true_type
	{	
	};
#pragma warning(pop)

		
template<class _Alloc,
	class = void>
	struct _Has_max_size
		: false_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc>
	struct _Has_max_size<_Alloc, void_t<decltype(::std:: declval<const _Alloc&>().max_size())>>
		: true_type
	{	
	};
#pragma warning(pop)

		
template<class _Alloc,
	class = void>
	struct _Has_select_on_container_copy_construction
		: false_type
	{	
	};

template<class _Alloc>
	struct _Has_select_on_container_copy_construction<_Alloc, void_t<
		decltype(::std:: declval<const _Alloc&>().select_on_container_copy_construction())>>
		: true_type
	{	
	};


		
template<class _Alloc>
	struct allocator_traits;

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc>
	struct _Normal_allocator_traits
	{	
	using allocator_type = _Alloc;
	using value_type = typename _Alloc::value_type;

	using pointer = typename _Get_pointer_type<_Alloc>::type;
	using const_pointer = typename _Get_const_pointer_type<_Alloc>::type;
	using void_pointer = typename _Get_void_pointer_type<_Alloc>::type;
	using const_void_pointer = typename _Get_const_void_pointer_type<_Alloc>::type;

	using size_type = typename _Get_size_type<_Alloc>::type;
	using difference_type = typename _Get_difference_type<_Alloc>::type;

	using propagate_on_container_copy_assignment = typename _Get_propagate_on_container_copy<_Alloc>::type;
	using propagate_on_container_move_assignment = typename _Get_propagate_on_container_move<_Alloc>::type;
	using propagate_on_container_swap = typename _Get_propagate_on_container_swap<_Alloc>::type;
	using is_always_equal = typename _Get_is_always_equal<_Alloc>::type;

	template<class _Other>
		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

	template<class _Other>
		using rebind_traits = allocator_traits<rebind_alloc<_Other>>;

	 static __declspec(allocator) pointer allocate(_Alloc& _Al, __declspec(guard(overflow)) const size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static __declspec(allocator) pointer _Allocate1(_Alloc& _Al, __declspec(guard(overflow)) const size_type _Count,
		const const_void_pointer _Hint, true_type)
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	static __declspec(allocator) pointer _Allocate1(_Alloc& _Al, __declspec(guard(overflow)) const size_type _Count,
		const_void_pointer, false_type)
		{	
		return (_Al.allocate(_Count));
		}

	 static __declspec(allocator) pointer allocate(_Alloc& _Al, __declspec(guard(overflow)) const size_type _Count,
		const const_void_pointer _Hint)
		{	
		return (_Allocate1(_Al, _Count, _Hint, _Has_allocate_hint<_Alloc, size_type, const_void_pointer>{}));
		}

	static void deallocate(_Alloc& _Al, pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(true_type, _Alloc&, _Ty *_Ptr, _Types&&... _Args)
		{	
		::new (static_cast<void *>(_Ptr)) _Ty(::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(false_type, _Alloc& _Al, _Ty *_Ptr, _Types&&... _Args)
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void construct(_Alloc& _Al, _Ty *_Ptr, _Types&&... _Args)
		{	
		_Construct1(_Uses_default_construct_t<_Alloc, _Ty *, _Types...>(),
			_Al, _Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty>
		static void _Destroy1(_Alloc&, _Ty *_Ptr, true_type)
		{	
		_Ptr->~_Ty();
		}

	template<class _Ty>
		static void _Destroy1(_Alloc& _Al, _Ty *_Ptr, false_type)
		{	
		_Al.destroy(_Ptr);
		}

	template<class _Ty>
		static void destroy(_Alloc& _Al, _Ty *_Ptr)
		{	
		_Destroy1(_Al, _Ptr, _Uses_default_destroy_t<_Alloc, _Ty *>());
		}

	static size_type _Max_size1(const _Alloc& _Al, true_type) noexcept
		{	
		return (_Al.max_size());
		}

	static size_type _Max_size1(const _Alloc&, false_type) noexcept
		{	
		return ((numeric_limits<size_type>::max)() / sizeof(value_type));
		}

	 static size_type max_size(const _Alloc& _Al) noexcept
		{	
		return (_Max_size1(_Al, _Has_max_size<_Alloc>{}));
		}

	static _Alloc _Select_on_container_copy_construction1(const _Alloc& _Al, true_type)
		{	
		return (_Al.select_on_container_copy_construction());
		}

	static _Alloc _Select_on_container_copy_construction1(const _Alloc& _Al, false_type)
		{	
		return (_Al);
		}

	 static _Alloc select_on_container_copy_construction(const _Alloc& _Al)
		{	
		return (_Select_on_container_copy_construction1(_Al, _Has_select_on_container_copy_construction<_Alloc>{}));
		}
	};
#pragma warning(pop)

template<class _Alloc>
	struct _Default_allocator_traits
	{	
	using allocator_type = _Alloc;
	using value_type = typename _Alloc::value_type;

	using pointer = value_type *;
	using const_pointer = const value_type *;
	using void_pointer = void *;
	using const_void_pointer = const void *;

	using size_type = size_t;
	using difference_type = ptrdiff_t;

	using propagate_on_container_copy_assignment = false_type;
	using propagate_on_container_move_assignment = true_type;
	using propagate_on_container_swap = false_type;
	using is_always_equal = true_type;

	template<class _Other>
		using rebind_alloc = allocator<_Other>;

	template<class _Other>
		using rebind_traits = allocator_traits<allocator<_Other>>;

	 static __declspec(allocator) pointer allocate(_Alloc&, __declspec(guard(overflow)) const size_type _Count)
		{	
		return (static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count))));
		}

	 static __declspec(allocator) pointer allocate(_Alloc&, __declspec(guard(overflow)) const size_type _Count,
		const_void_pointer)
		{	
		return (static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count))));
		}

	static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count)
		{	
		
		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
		}

	template<class _Objty,
		class... _Types>
		static void construct(_Alloc&, _Objty * const _Ptr, _Types&&... _Args)
		{	
		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
			_Objty(::std:: forward<_Types>(_Args)...);
		}

	template<class _Uty>
		static void destroy(_Alloc&, _Uty * const _Ptr)
		{	
		_Ptr->~_Uty();
		}

	 static size_type max_size(const _Alloc&) noexcept
		{	
		return (static_cast<size_t>(-1) / sizeof(value_type));
		}

	 static _Alloc select_on_container_copy_construction(const _Alloc& _Al)
		{	
		return (_Al);
		}
	};

template<class _Alloc>
	struct allocator_traits
		: conditional_t<_Is_default_allocator<_Alloc>::value,
			_Default_allocator_traits<_Alloc>, _Normal_allocator_traits<_Alloc>>
	{	
	};

		
template<class _Alloc>
	 constexpr bool _Always_equal_after_move = allocator_traits<_Alloc>::is_always_equal::value
		|| allocator_traits<_Alloc>::propagate_on_container_move_assignment::value;

		
template<class _Alloc,
	class _Value_type>
	using _Rebind_alloc_t = typename allocator_traits<_Alloc>::template rebind_alloc<_Value_type>;

		
template<class _Alloc>	
	 constexpr bool _Is_simple_alloc_v =
		is_same_v<typename allocator_traits<_Alloc>::size_type, size_t>
		&& is_same_v<typename allocator_traits<_Alloc>::difference_type, ptrdiff_t>
		&& is_same_v<typename allocator_traits<_Alloc>::pointer, typename _Alloc::value_type *>
		&& is_same_v<typename allocator_traits<_Alloc>::const_pointer, const typename _Alloc::value_type *>;

		
template<class _Value_type>
	struct _Simple_types
	{	
		
	using value_type = _Value_type;
	using size_type = size_t;
	using difference_type = ptrdiff_t;
	using pointer = value_type *;
	using const_pointer = const value_type *;
	};

		
template<class _Ty>
	class allocator
	{	
public:
	static_assert(!is_const_v<_Ty>,
		"The C++ Standard forbids containers of const elements "
		"because allocator<const T> is ill-formed.");

	using _Not_user_specialized = void;

	using value_type = _Ty;

	 typedef _Ty * pointer;
	 typedef const _Ty * const_pointer;

	 typedef _Ty& reference;
	 typedef const _Ty& const_reference;

	 typedef size_t size_type;
	 typedef ptrdiff_t difference_type;

	using propagate_on_container_move_assignment = true_type;
	using is_always_equal = true_type;

	template<class _Other>
		struct  rebind
		{	
		using other = allocator<_Other>;
		};

	  _Ty * address(_Ty& _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	  const _Ty * address(const _Ty& _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	constexpr allocator() noexcept
		{	
		}

	constexpr allocator(const allocator&) noexcept = default;
	template<class _Other>
		constexpr allocator(const allocator<_Other>&) noexcept
		{	
		}

	void deallocate(_Ty * const _Ptr, const size_t _Count)
		{	
		
		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);
		}

	 __declspec(allocator) _Ty * allocate(__declspec(guard(overflow)) const size_t _Count)
		{	
		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
		}

	  __declspec(allocator) _Ty * allocate(
		__declspec(guard(overflow)) const size_t _Count, const void *)
		{	
		return (allocate(_Count));
		}

	template<class _Objty,
		class... _Types>
		 void construct(_Objty * const _Ptr, _Types&&... _Args)
		{	
		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
			_Objty(::std:: forward<_Types>(_Args)...);
		}

	template<class _Uty>
		 void destroy(_Uty * const _Ptr)
		{	
		_Ptr->~_Uty();
		}

	  size_t max_size() const noexcept
		{	
		return (static_cast<size_t>(-1) / sizeof(_Ty));
		}
	};

		
template<>
	class  allocator<void>
	{	
public:
	using value_type = void;
	using pointer = void *;
	using const_pointer = const void *;

	template<class _Other>
		struct rebind
		{	
		using other = allocator<_Other>;
		};
	};

template<class _Ty,
	class _Other>
	 inline bool operator==(const allocator<_Ty>&,
		const allocator<_Other>&) noexcept
	{	
	return (true);
	}

template<class _Ty,
	class _Other>
	 inline bool operator!=(const allocator<_Ty>&,
		const allocator<_Other>&) noexcept
	{	
	return (false);
	}







#line 1065 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

		
template<class _Alloc> inline
	void _Pocca(_Alloc& _Left, const _Alloc& _Right, true_type) noexcept
	{	
	_Left = _Right;
	}

template<class _Alloc> inline
	void _Pocca(_Alloc&, const _Alloc&, false_type) noexcept
	{	
	}

template<class _Alloc> inline
	void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept
	{	
	typename allocator_traits<_Alloc>::propagate_on_container_copy_assignment _Tag;
	_Pocca(_Left, _Right, _Tag);
	}

		
template<class _Alloc> inline
	void _Pocma(_Alloc& _Left, _Alloc& _Right, true_type) noexcept
	{	
	_Left = ::std:: move(_Right);
	}

template<class _Alloc> inline
	void _Pocma(_Alloc&, _Alloc&, false_type) noexcept
	{	
	}

template<class _Alloc> inline
	void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept
	{	
	typename allocator_traits<_Alloc>::propagate_on_container_move_assignment _Tag;
	_Pocma(_Left, _Right, _Tag);
	}

		
template<class _Alloc> inline
	void _Pocs(_Alloc& _Left, _Alloc& _Right, true_type) noexcept
	{	
	_Swap_adl(_Left, _Right);
	}

template<class _Alloc> inline
	void _Pocs(_Alloc& _Left, _Alloc& _Right, false_type) noexcept
	{	
	do { if (_Left == _Right) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0", 1114, 0, "%s", "containers incompatible for swap")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"containers incompatible for swap\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0", 1114, 0); } while (false); } ; } while (false);
	(void)_Left;
	(void)_Right;
	}

template<class _Alloc> inline
	void _Pocs(_Alloc& _Left, _Alloc& _Right) noexcept
	{	
	typename allocator_traits<_Alloc>::propagate_on_container_swap _Tag;
	_Pocs(_Left, _Right, _Tag);
	}


		
template<class _Alloc> inline
	void _Destroy_range1(
		typename allocator_traits<_Alloc>::pointer _First,
		typename allocator_traits<_Alloc>::pointer _Last,
		_Alloc& _Al, false_type)
	{	
	for (; _First != _Last; ++_First)
		{
		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
		}
	}

template<class _Alloc> inline
	void _Destroy_range1(
		typename allocator_traits<_Alloc>::pointer,
		typename allocator_traits<_Alloc>::pointer,
		_Alloc&, true_type)
	{	
		
	}

template<class _Alloc> inline
	void _Destroy_range(
		typename allocator_traits<_Alloc>::pointer _First,
		typename allocator_traits<_Alloc>::pointer _Last,
		_Alloc& _Al)
	{	
		
		
	using _Val = typename _Alloc::value_type;
	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
		is_trivially_destructible<_Val>,
		_Uses_default_destroy<_Alloc, _Val *>>>{});
	}


		
template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt _First, _FwdIt _Last, false_type)
	{	
	for (; _First != _Last; ++_First)
		{
		_Destroy_in_place(*_First);
		}
	}

template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt, _FwdIt, true_type)
	{	
		
	}

template<class _FwdIt> inline
	void _Destroy_range(_FwdIt _First, _FwdIt _Last)
	{	
		
		
	_Destroy_range1(_First, _Last, is_trivially_destructible<_Iter_value_t<_FwdIt>>());
	}


		
template<class _Size_type> inline
	_Size_type _Convert_size(const size_t _Len)
	{	
	if (_Len > (numeric_limits<_Size_type>::max)())
		{
		_Xlength_error("size_t too long for _Size_type");
		}

	return (static_cast<_Size_type>(_Len));
	}

template<> inline
	size_t _Convert_size<size_t>(const size_t _Len)
	{	
	return (_Len);
	}

		
template<class _Alloc,
	enable_if_t<is_same_v<typename allocator_traits<_Alloc>::pointer,
		typename _Alloc::value_type *>, int> = 0> inline
	void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type * const _Ptr)
	{	
	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);
	}

template<class _Alloc,
	enable_if_t<!is_same_v<typename allocator_traits<_Alloc>::pointer,
		typename _Alloc::value_type *>, int> = 0> inline
	void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type * const _Ptr)
	{	
	using _Alloc_traits = allocator_traits<_Alloc>;
	using _Ptr_traits = pointer_traits<typename _Alloc_traits::pointer>;
	_Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
	}
}

		
  #line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xatomic0.h"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
typedef enum memory_order {
	memory_order_relaxed,
	memory_order_consume,
	memory_order_acquire,
	memory_order_release,
	memory_order_acq_rel,
	memory_order_seq_cst
	} memory_order;

typedef unsigned long _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;

	
	




  
  
  
  
  

  

#line 44 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xatomic0.h"
   
  #line 46 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xatomic0.h"

		
typedef _Atomic_integral_t _Atomic_counter_t;

inline _Atomic_integral_t
	_Get_atomic_count(const _Atomic_counter_t& _Counter)
	{	
	return (_Counter);
	}

 
  
   
  

#line 62 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xatomic0.h"
 #line 63 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xatomic0.h"

}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 70 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xatomic0.h"
#line 71 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xatomic0.h"





#line 1229 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

  
   #line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"












#pragma once





extern "C" {
#line 21 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"






























#line 52 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"


#line 55 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"






#line 62 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"




#line 67 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"




#line 72 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"




#line 77 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"




#line 82 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"

#line 84 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"




#line 89 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"




#line 94 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"




#line 99 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"




#line 104 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"




#line 109 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"









unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);


unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);


unsigned char _bittest(long const *, long);
long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);







char _InterlockedAnd8(char volatile * _Value, char _Mask);






long __cdecl _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);

short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);



__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);



char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);






long __cdecl _InterlockedDecrement(long volatile * _Addend);

long __cdecl _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);







char _InterlockedExchange8(char volatile * _Target, char _Value);



long __cdecl _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);







char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);









long __cdecl _InterlockedIncrement(long volatile * _Addend);

long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);







char _InterlockedOr8(char volatile * _Value, char _Mask);






long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);







char _InterlockedXor8(char volatile * _Value, char _Mask);






void _ReadWriteBarrier(void);










unsigned char _interlockedbittestandset(long volatile *, long);













}
#line 254 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"
#line 255 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"
#line 256 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin0.h"
#line 1232 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

   

   


  






#line 1246 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1252 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"
#line 1253 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory0"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
template<class _Traits>
	using _Traits_ch_t = typename _Traits::char_type;

template<class _Traits>
	using _Traits_ptr_t = const typename _Traits::char_type *;

template<class _Traits>
	constexpr bool _Traits_equal(  const _Traits_ptr_t<_Traits> _Left, const size_t _Left_size,
		  const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept
	{	
	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);
	}

template<class _Traits>
	constexpr int _Traits_compare(  const _Traits_ptr_t<_Traits> _Left, const size_t _Left_size,
		  const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept
	{	
	const int _Ans = _Traits::compare(_Left, _Right, _Min_value(_Left_size, _Right_size));

	if (_Ans != 0)
		{
		return (_Ans);
		}

	if (_Left_size < _Right_size)
		{
		return (-1);
		}

	if (_Left_size > _Right_size)
		{
		return (1);
		}

	return (0);
	}

template<class _Traits>
	constexpr size_t _Traits_find(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
	{	
	if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size)
		{	
			
			
			
			
			
			
			
		return (static_cast<size_t>(-1));
		}

	if (_Needle_size == 0)
		{	
		return (_Start_at);
		}

	const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;
	for (auto _Match_try = _Haystack + _Start_at; ; ++_Match_try)
		{
		_Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);
		if (!_Match_try)
			{	
			return (static_cast<size_t>(-1));
			}

		if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0)
			{	
			return (static_cast<size_t>(_Match_try - _Haystack));
			}
		}
	}

template<class _Traits>
	constexpr size_t _Traits_find_ch(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		const _Traits_ch_t<_Traits> _Ch) noexcept
	{	
	if (_Start_at < _Hay_size)
		{
		const auto _Found_at = _Traits::find(_Haystack + _Start_at, _Hay_size - _Start_at, _Ch);
		if (_Found_at)
			{
			return (static_cast<size_t>(_Found_at - _Haystack));
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_rfind(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
	{	
	if (_Needle_size == 0)
		{
		return (_Min_value(_Start_at, _Hay_size));	
		}

	if (_Needle_size <= _Hay_size)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - _Needle_size); ; --_Match_try)
			{
			if (_Traits::eq(*_Match_try, *_Needle)
				&& _Traits::compare(_Match_try, _Needle, _Needle_size) == 0)
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_rfind_ch(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		const _Traits_ch_t<_Traits> _Ch) noexcept
	{	
	if (_Hay_size != 0)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (_Traits::eq(*_Match_try, _Ch))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Elem,
	bool = _Is_character<_Elem>::value>
	class _String_bitmap
	{	
public:
	constexpr bool _Mark(const _Elem * _First, const _Elem * const _Last)
		{	
			
		for (; _First != _Last; ++_First)
			{
			_Matches[static_cast<unsigned char>(*_First)] = true;
			}

		return (true);
		}

	constexpr bool _Match(const _Elem _Ch) const
		{	
		return (_Matches[static_cast<unsigned char>(_Ch)]);
		}

private:
	bool _Matches[256] = {};
	};

template<class _Elem>
	class _String_bitmap<_Elem, false>
	{	
public:
	static_assert(is_unsigned_v<_Elem>,
		"Standard char_traits is only provided for char, wchar_t, char16_t, and char32_t. See N5687 [char.traits]. "
		"Visual C++ accepts other unsigned integral types as an extension.");

	constexpr bool _Mark(const _Elem * _First, const _Elem * const _Last)
		{	
			
		for (; _First != _Last; ++_First)
			{
			const auto _Ch = *_First;
			if (_Ch >= 256U)
				{
				return (false);
				}

			_Matches[static_cast<unsigned char>(_Ch)] = true;
			}

		return (true);
		}

	constexpr bool _Match(const _Elem _Ch) const
		{	
		return (_Ch < 256U && _Matches[_Ch]);
		}

private:
	bool _Matches[256] = {};
	};

template<class _Traits>
	constexpr size_t _Traits_find_first_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, false_type) noexcept
	{	
		
	if (_Needle_size != 0 && _Start_at < _Hay_size)
		{	
		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (_Traits::find(_Needle, _Needle_size, *_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_first_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, true_type) noexcept
	{	
		
	if (_Needle_size != 0 && _Start_at < _Hay_size)
		{	
		_String_bitmap<typename _Traits::char_type> _Matches;
		if (!_Matches._Mark(_Needle, _Needle + _Needle_size))
			{	
			return (_Traits_find_first_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
				false_type{}));
			}

		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (_Matches._Match(*_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_last_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, false_type) noexcept
	{	
		
	if (_Needle_size != 0 && _Hay_size != 0)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (_Traits::find(_Needle, _Needle_size, *_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_last_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, true_type) noexcept
	{	
		
	if (_Needle_size != 0 && _Hay_size != 0)
		{	
		_String_bitmap<typename _Traits::char_type> _Matches;
		if (!_Matches._Mark(_Needle, _Needle + _Needle_size))
			{	
			return (_Traits_find_last_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
				false_type{}));
			}

		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (_Matches._Match(*_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_first_not_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, false_type) noexcept
	{	
		
	if (_Start_at < _Hay_size)
		{	
		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (!_Traits::find(_Needle, _Needle_size, *_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_first_not_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, true_type) noexcept
	{	
		
	if (_Start_at < _Hay_size)
		{	
		_String_bitmap<typename _Traits::char_type> _Matches;
		if (!_Matches._Mark(_Needle, _Needle + _Needle_size))
			{	
			return (_Traits_find_first_not_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
				false_type{}));
			}

		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (!_Matches._Match(*_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_not_ch(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		const _Traits_ch_t<_Traits> _Ch) noexcept
	{	
	if (_Start_at < _Hay_size)
		{	
		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (!_Traits::eq(*_Match_try, _Ch))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_last_not_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, false_type) noexcept
	{	
		
	if (_Hay_size != 0)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (!_Traits::find(_Needle, _Needle_size, *_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_last_not_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, true_type) noexcept
	{	
		
	if (_Hay_size != 0)
		{	
		_String_bitmap<typename _Traits::char_type> _Matches;
		if (!_Matches._Mark(_Needle, _Needle + _Needle_size))
			{	
			return (_Traits_find_last_not_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
				false_type{}));
			}

		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (!_Matches._Match(*_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_rfind_not_ch(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		const _Traits_ch_t<_Traits> _Ch) noexcept
	{	
	if (_Hay_size != 0)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (!_Traits::eq(*_Match_try, _Ch))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}























































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1396 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

		
template<class _Mystr>
	class _String_const_iterator
		: public _Iterator_base
	{	
public:
	using iterator_category = random_access_iterator_tag;

	using value_type = typename _Mystr::value_type;
	using difference_type = typename _Mystr::difference_type;
	using pointer = typename _Mystr::const_pointer;
	using reference = const value_type&;

	_String_const_iterator()
		: _Ptr()
		{	
		}

	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Ptr(_Parg)
		{	
		this->_Adopt(_Pstring);
		}

	 reference operator*() const
		{	

		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1424, 0, "%s", "cannot dereference value-initialized string iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference value-initialized string iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1424, 0); } while (false); } ; } while (false);
		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
		do { if (_Mycont) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1427, 0, "%s", "cannot dereference string iterator because the iterator was" " invalidated (e.g. reallocation occurred, or the string was destroyed)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference string iterator because the iterator was\" \" invalidated (e.g. reallocation occurred, or the string was destroyed)\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1427, 0); } while (false); } ; } while (false);
#line 1428 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		const auto _Contptr = _Mycont->_Myptr();
		const auto _Rawptr = _Unfancy(_Ptr);
		do { if (_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1431, 0, "%s", "cannot dereference string iterator because it is out of range (e.g. an end iterator)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference string iterator because it is out of range (e.g. an end iterator)\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1431, 0); } while (false); } ; } while (false);
#line 1432 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
#line 1433 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

		;
		return (*_Ptr);
		}

	 pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_String_const_iterator& operator++()
		{	

		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1446, 0, "%s", "cannot increment value-initialized string iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment value-initialized string iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1446, 0); } while (false); } ; } while (false);
		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
		do { if (_Mycont) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1449, 0, "%s", "cannot increment string iterator because the iterator was" " invalidated (e.g. reallocation occurred, or the string was destroyed)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment string iterator because the iterator was\" \" invalidated (e.g. reallocation occurred, or the string was destroyed)\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1449, 0); } while (false); } ; } while (false);
#line 1450 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		do { if (_Unfancy(_Ptr) < _Mycont->_Myptr() + _Mycont->_Mysize) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1451, 0, "%s", "cannot increment string iterator past end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment string iterator past end\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1451, 0); } while (false); } ; } while (false);
#line 1452 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
#line 1453 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

		++_Ptr;
		return (*this);
		}

	_String_const_iterator operator++(int)
		{	
		_String_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_String_const_iterator& operator--()
		{	

		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1468, 0, "%s", "cannot decrement value-initialized string iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement value-initialized string iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1468, 0); } while (false); } ; } while (false);
		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
		do { if (_Mycont) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1471, 0, "%s", "cannot decrement string iterator because the iterator was" " invalidated (e.g. reallocation occurred, or the string was destroyed)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement string iterator because the iterator was\" \" invalidated (e.g. reallocation occurred, or the string was destroyed)\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1471, 0); } while (false); } ; } while (false);
#line 1472 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		do { if (_Mycont->_Myptr() < _Unfancy(_Ptr)) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1472, 0, "%s", "cannot decrement string iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement string iterator before begin\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1472, 0); } while (false); } ; } while (false);
#line 1474 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

		--_Ptr;
		return (*this);
		}

	_String_const_iterator operator--(int)
		{	
		_String_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	void _Verify_offset(const difference_type _Off) const noexcept
		{

		if (_Off == 0)
			{
			return;
			}

		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1494, 0, "%s", "cannot seek value-initialized string iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek value-initialized string iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1494, 0); } while (false); } ; } while (false);
		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
		do { if (_Mycont) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1497, 0, "%s", "cannot seek string iterator because the iterator was" " invalidated (e.g. reallocation occurred, or the string was destroyed)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek string iterator because the iterator was\" \" invalidated (e.g. reallocation occurred, or the string was destroyed)\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1497, 0); } while (false); } ; } while (false);
#line 1498 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		const auto _Contptr = _Mycont->_Myptr();
		const auto _Rawptr = _Unfancy(_Ptr);

		if (_Off < 0)
			{
#pragma warning(suppress: 4146)	
			do { if (_Contptr - _Rawptr <= _Off) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1504, 0, "%s", "cannot seek string iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek string iterator before begin\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1504, 0); } while (false); } ; } while (false);
			}

		if (_Off > 0)
			{
			using _Size_type = typename _Mystr::size_type;
			const auto _Left = _Mycont->_Mysize - static_cast<_Size_type>(_Rawptr - _Contptr);
			do { if (static_cast<_Size_type>(_Off) <= _Left) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1511, 0, "%s", "cannot seek string iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek string iterator after end\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1511, 0); } while (false); } ; } while (false);
			}


#line 1516 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		}

	_String_const_iterator& operator+=(const difference_type _Off)
		{	

		_Verify_offset(_Off);
#line 1523 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		_Ptr += _Off;
		return (*this);
		}

	 _String_const_iterator operator+(const difference_type _Off) const
		{	
		_String_const_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_String_const_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	 _String_const_iterator operator-(const difference_type _Off) const
		{	
		_String_const_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	 difference_type operator-(const _String_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr - _Right._Ptr);
		}

	 reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	 bool operator==(const _String_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr == _Right._Ptr);
		}

	 bool operator!=(const _String_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	 bool operator<(const _String_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr < _Right._Ptr);
		}

	 bool operator>(const _String_const_iterator& _Right) const
		{	
		return (_Right < *this);
		}

	 bool operator<=(const _String_const_iterator& _Right) const
		{	
		return (!(_Right < *this));
		}

	 bool operator>=(const _String_const_iterator& _Right) const
		{	
		return (!(*this < _Right));
		}

	void _Compat(const _String_const_iterator& _Right) const
		{	

		do { if (this->_Getcont() == _Right._Getcont()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1591, 0, "%s", "string iterators incompatible (e.g." " point to different string instances)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string iterators incompatible (e.g.\" \" point to different string instances)\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1591, 0); } while (false); } ; } while (false);
#line 1592 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"


#line 1595 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		}


	friend void _Verify_range(const _String_const_iterator& _First, const _String_const_iterator& _Last)
		{
		do { if (_First._Getcont() == _Last._Getcont()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1601, 0, "%s", "string iterators in range are from different containers")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string iterators in range are from different containers\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1601, 0); } while (false); } ; } while (false);
#line 1602 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		do { if (_First._Ptr <= _Last._Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1602, 0, "%s", "string iterator range transposed")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string iterator range transposed\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 1602, 0); } while (false); } ; } while (false);
		}
#line 1605 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 pointer _Unwrapped() const
		{
		return (_Ptr);
		}

	void _Seek_to(pointer _It)
		{
		_Ptr = _It;
		}

	pointer _Ptr;	
	};

template<class _Mystr>
	 inline _String_const_iterator<_Mystr> operator+(
		typename _String_const_iterator<_Mystr>::difference_type _Off,
		_String_const_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Mystr>
	class _String_iterator
		: public _String_const_iterator<_Mystr>
	{	
public:
	using _Mybase = _String_const_iterator<_Mystr>;
	using iterator_category = random_access_iterator_tag;

	using value_type = typename _Mystr::value_type;
	using difference_type = typename _Mystr::difference_type;
	using pointer = typename _Mystr::pointer;
	using reference = value_type&;

	_String_iterator()
		{	
		}

	_String_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Mybase(_Parg, _Pstring)
		{	
		}

	 reference operator*() const
		{	
		return (const_cast<reference>(_Mybase::operator*()));
		}

	 pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_String_iterator& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_String_iterator operator++(int)
		{	
		_String_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_String_iterator& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_String_iterator operator--(int)
		{	
		_String_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_String_iterator& operator+=(const difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	 _String_iterator operator+(const difference_type _Off) const
		{	
		_String_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_String_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	 _String_iterator operator-(const difference_type _Off) const
		{	
		_String_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	 difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	 reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	 pointer _Unwrapped() const
		{
		return (_Const_cast(this->_Ptr));
		}
	};

template<class _Mystr>
	 inline _String_iterator<_Mystr> operator+(
		typename _String_iterator<_Mystr>::difference_type _Off,
		_String_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference>
	struct _String_iter_types
	{	
	using value_type = _Value_type;
	using size_type = _Size_type;
	using difference_type = _Difference_type;
	using pointer = _Pointer;
	using const_pointer = _Const_pointer;
	};

template<class _Ty,
	class _Alloc>
	struct _String_base_types
	{	
	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
	using _Alty_traits = allocator_traits<_Alty>;

	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alty>,
		_Simple_types<_Ty>,
		_String_iter_types<_Ty,
			typename _Alty_traits::size_type,
			typename _Alty_traits::difference_type,
			typename _Alty_traits::pointer,
			typename _Alty_traits::const_pointer,
			_Ty&,
			const _Ty&>>;
	};

		
template<class _Val_types>
	class _String_val
		: public _Container_base
	{	
public:
	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	_String_val()
		: _Bx(),
		_Mysize(0),
		_Myres(0)
		{	
		}

	enum
		{	
		_BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
			: 16 / sizeof (value_type)};
	enum
		{	
		_ALLOC_MASK = sizeof (value_type) <= 1 ? 15
			: sizeof (value_type) <= 2 ? 7
			: sizeof (value_type) <= 4 ? 3
			: sizeof (value_type) <= 8 ? 1 : 0
		};

	value_type *_Myptr()
		{	
		value_type * _Result = _Bx._Buf;
		if (_Large_string_engaged())
			{
			_Result = _Unfancy(_Bx._Ptr);
			}

		return (_Result);
		}

	const value_type *_Myptr() const
		{	
		const value_type * _Result = _Bx._Buf;
		if (_Large_string_engaged())
			{
			_Result = _Unfancy(_Bx._Ptr);
			}

		return (_Result);
		}

	bool _Large_string_engaged() const
		{	
		return (_BUF_SIZE <= _Myres);
		}

	void _Check_offset(const size_type _Off) const
		{	
		if (_Mysize < _Off)
			{
			_Xran();
			}
		}

	void _Check_offset_exclusive(const size_type _Off) const
		{	
		if (_Mysize <= _Off)
			{
			_Xran();
			}
		}

	[[noreturn]] static void _Xran()
		{	
		_Xout_of_range("invalid string position");
		}

	size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept
		{	
		return (_Min_value(_Size, _Mysize - _Off));
		}

	union _Bxty
		{	
		_Bxty()
			{	
			}

		~_Bxty() noexcept
			{	
			}

		value_type _Buf[_BUF_SIZE];
		pointer _Ptr;
		char _Alias[_BUF_SIZE];	
		} _Bx;

	size_type _Mysize;	
	size_type _Myres;	
	};

		
template<class _Alloc_types>
	class _String_alloc
	{	
public:
	using _Alty = typename _Alloc_types::_Alty;
	using _Alty_traits = typename _Alloc_types::_Alty_traits;
	using _Alproxy = _Rebind_alloc_t<_Alty, _Container_proxy>;
	using _Alproxy_traits = allocator_traits<_Alproxy>;
	using _Val_types = typename _Alloc_types::_Val_types;
	using _Mydata_t = _String_val<_Val_types>;
	using _Bxty = typename _Mydata_t::_Bxty;

	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using iterator = _String_iterator<_Mydata_t>;
	using const_iterator = _String_const_iterator<_Mydata_t>;

	enum
		{	
		_BUF_SIZE = _Mydata_t::_BUF_SIZE
		};

	enum
		{	
		_ALLOC_MASK = _Mydata_t::_ALLOC_MASK
		};

























#line 1932 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
	_String_alloc()
		: _Mypair(_Zero_then_variadic_args_t())
		{	
		_Alloc_proxy();
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Any_alloc>>, _String_alloc>>>
		_String_alloc(_Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		_Alloc_proxy();
		}

	~_String_alloc() noexcept
		{	
		_Free_proxy();
		}

	void _Copy_alloc(const _Alty& _Al)
		{	
		const bool _Reload = _Alty_traits::propagate_on_container_copy_assignment::value
			&& _Getal() != _Al;

		if (_Reload)
			{
			_Free_proxy();
			}

		_Pocca(_Getal(), _Al);

		if (_Reload)
			{
			_Alloc_proxy();
			}
		}

	void _Move_alloc(_Alty& _Al)
		{	
		const bool _Reload = _Alty_traits::propagate_on_container_move_assignment::value
			&& _Getal() != _Al;

		if (_Reload)
			{
			_Free_proxy();
			}

		_Pocma(_Getal(), _Al);

		if (_Reload)
			{
			_Alloc_proxy();
			}
		}

	void _Alloc_proxy()
		{	
		_Alproxy _Proxy_allocator(_Getal());
		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));
		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());
		_Myproxy()->_Mycont = ::std:: addressof(_Get_data());
		}

	void _Free_proxy()
		{	
		_Alproxy _Proxy_allocator(_Getal());
		_Orphan_all();
		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());
		_Deallocate_plain(_Proxy_allocator, _Myproxy());
		_Myproxy() = nullptr;
		}

	_Iterator_base12 **_Getpfirst() const
		{	
		return (_Get_data()._Getpfirst());
		}

	_Container_proxy * & _Myproxy() noexcept
		{	
		return (_Get_data()._Myproxy);
		}

	_Container_proxy * const & _Myproxy() const noexcept
		{	
		return (_Get_data()._Myproxy);
		}
#line 2020 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_String_alloc& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Alty& _Getal() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Alty& _Getal() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_Mydata_t& _Get_data() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const _Mydata_t& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second());
		}

private:
	_Compressed_pair<_Alty, _Mydata_t> _Mypair;
	};


		
template<class _Ty>
	constexpr size_t _Size_after_ebco_v
		= is_empty_v<_Ty> ? 0 : sizeof(_Ty);	

template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_string
		: public _String_alloc<_String_base_types<_Elem, _Alloc>>
	{	
public:
	static_assert(!0 || is_same_v<_Elem, typename _Alloc::value_type>,
		"basic_string<T, Traits, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	static_assert(is_same_v<_Elem, typename _Traits::char_type>,
		"N4659 24.3.2.1 [string.require]/3 requires that the supplied "
		"char_traits character type match the string's character type.");

	using _Mybase = _String_alloc<_String_base_types<_Elem, _Alloc>>;
	using traits_type = _Traits;
	using allocator_type = _Alloc;

	using _Alty = typename _Mybase::_Alty;
	using _Alty_traits = typename _Mybase::_Alty_traits;
	using _Mydata_t = typename _Mybase::_Mydata_t;

	using value_type = typename _Mybase::value_type;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using iterator = typename _Mybase::iterator;
	using const_iterator = typename _Mybase::const_iterator;

	using reverse_iterator = ::std:: reverse_iterator<iterator>;
	using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

	
	
	
	
	
	
	
	
	
	
	using _Use_memcpy_move = bool_constant<
		_Is_specialization_v<_Traits, char_traits> && is_trivial_v<pointer>>;
	
	static constexpr size_t _Memcpy_move_offset = _Size_after_ebco_v<_Container_base>;
	static constexpr size_t _Memcpy_move_size = sizeof(_Mydata_t) - _Memcpy_move_offset;

	template<class _Iter>
		using _Is_elem_cptr = bool_constant<_Is_any_of_v<_Iter,
			const _Elem * const,
			_Elem * const,
			const _Elem *,
			_Elem *>>;






#line 2126 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"


	basic_string(const basic_string& _Right)
		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))
		{	
		_Construct_lv_contents(_Right);
		}

	basic_string(const basic_string& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct_lv_contents(_Right);
		}

	basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>)
		: _Mybase()
		{	
		_Tidy_init();
		}

	explicit basic_string(const _Alloc& _Al) noexcept
		: _Mybase(_Al)
		{	
		_Tidy_init();
		}

	basic_string(const basic_string& _Right, const size_type _Roff, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Right, _Roff, npos);
		}

	basic_string(const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Right, _Roff, _Count);
		}

	basic_string(  const _Elem * const _Ptr, __declspec(guard(overflow)) const size_type _Count)
		: _Mybase()
		{	
		_Tidy_init();
		assign(_Ptr, _Count);
		}

	basic_string(  const _Elem * const _Ptr, __declspec(guard(overflow)) const size_type _Count,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Ptr, _Count);
		}

	basic_string(  const _Elem * const _Ptr)
		: _Mybase()
		{	
		_Tidy_init();
		assign(_Ptr);
		}




#line 2192 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
	basic_string(  const _Elem * const _Ptr, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Ptr);
		}

	basic_string(__declspec(guard(overflow)) const size_type _Count, const _Elem _Ch)
		: _Mybase()
		{	
		_Tidy_init();
		assign(_Count, _Ch);
		}




#line 2210 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
	basic_string(__declspec(guard(overflow)) const size_type _Count, const _Elem _Ch, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Count, _Ch);
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		_Adl_verify_range(_First, _Last);
		_Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());
		}

	template<class _Iter>
		void _Construct(_Iter _First, const _Iter _Last, input_iterator_tag)
		{	
		try {
		for (; _First != _Last; ++_First)
			{
			push_back(static_cast<_Elem>(*_First));
			}

		} catch (...) {
		_Tidy_deallocate();
		throw;
		}
		}

	template<class _Iter>
		void _Construct(const _Iter _First, const _Iter _Last, forward_iterator_tag)
		{	
		const size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));
		reserve(_Count);
		_Construct(_First, _Last, input_iterator_tag());
		}

	void _Construct(_Elem * const _First, _Elem * const _Last, random_access_iterator_tag)
		{	
		if (_First != _Last)
			{
			assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
			}
		}

	void _Construct(const _Elem * const _First, const _Elem * const _Last, random_access_iterator_tag)
		{	
		if (_First != _Last)
			{
			assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
			}
		}

	basic_string(basic_string&& _Right) noexcept
		: _Mybase(::std:: move(_Right._Getal()))
		{	
		_Assign_rv_contents_with_alloc_always_equal(::std:: move(_Right), _Use_memcpy_move{});
		}

	basic_string(basic_string&& _Right, const _Alloc& _Al)
		noexcept(_Alty_traits::is_always_equal::value) 
		: _Mybase(_Al)
		{	
		_Assign_rv_contents(::std:: move(_Right), typename _Alty_traits::is_always_equal{});
		}




















#line 2299 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	basic_string& operator=(basic_string&& _Right) noexcept(_Always_equal_after_move<_Alty>)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Tidy_deallocate();
			this->_Move_alloc(_Right._Getal());
			
			
			_Assign_rv_contents(::std:: move(_Right), bool_constant<_Always_equal_after_move<_Alty>>{});
			}

		return (*this);
		}

	basic_string& assign(basic_string&& _Right) noexcept(_Always_equal_after_move<_Alty>)
		{	
		*this = ::std:: move(_Right);
		return (*this);
		}

	void _Assign_rv_contents(basic_string&& _Right, true_type) noexcept
		{	
			
			
			
		_Assign_rv_contents_with_alloc_always_equal(::std:: move(_Right), _Use_memcpy_move{});
		}

	void _Assign_rv_contents(basic_string&& _Right, false_type)
		{	
			
			
			
		if (this->_Getal() == _Right._Getal())
			{
			_Assign_rv_contents_with_alloc_always_equal(::std:: move(_Right), _Use_memcpy_move{});
			}
		else
			{
			_Construct_lv_contents(_Right);
			}
		}

	void _Assign_rv_contents_with_alloc_always_equal(basic_string&& _Right, true_type) noexcept
		{	
			
			
			
		auto& _Right_data = _Right._Get_data();


		if (_Right_data._Large_string_engaged())
			{	
			this->_Swap_all(_Right);
			}
		else
			{
			_Right._Orphan_all();
			}
#line 2360 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

		const auto _My_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(this->_Get_data()))
			+ _Memcpy_move_offset;
		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(_Right_data))
			+ _Memcpy_move_offset;
		:: memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);
		_Right._Tidy_init();
		}

	void _Assign_rv_contents_with_alloc_always_equal(basic_string&& _Right, false_type) noexcept
		{	
			
			
			
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		if (_Right_data._Large_string_engaged())
			{	
			_Alty_traits::construct(this->_Getal(), ::std:: addressof(_My_data._Bx._Ptr), _Right_data._Bx._Ptr);
			_Right_data._Bx._Ptr = pointer();
			this->_Swap_all(_Right);
			}
		else
			{	
			_Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);
			_Right._Orphan_all();
			}

		_My_data._Mysize = _Right_data._Mysize;
		_My_data._Myres = _Right_data._Myres;
		_Right._Tidy_init();
		}

	void _Construct_lv_contents(const basic_string& _Right)
		{	
			
			
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		const size_type _Right_size = _Right_data._Mysize;
		const _Elem * const _Right_ptr = _Right_data._Myptr();
		if (_Right_size < this->_BUF_SIZE)
			{	
			_Traits::copy(_My_data._Bx._Buf, _Right_ptr, this->_BUF_SIZE);
			_My_data._Mysize = _Right_size;
			_My_data._Myres = this->_BUF_SIZE - 1;
			return;
			}

		auto& _Al = this->_Getal();
		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());
		const pointer _New_array = _Al.allocate(_New_capacity + 1); 
		_Alty_traits::construct(_Al, ::std:: addressof(_My_data._Bx._Ptr), _New_array);
		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);
		_My_data._Mysize = _Right_size;
		_My_data._Myres = _New_capacity;
		}

	basic_string(initializer_list<_Elem> _Ilist, const _Alloc& _Al = allocator_type())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
		}

	basic_string& operator=(initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	basic_string& operator+=(initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	basic_string& assign(initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	basic_string& append(initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	iterator insert(const const_iterator _Where, const initializer_list<_Elem> _Ilist)
		{	
		const difference_type _Off = _Where - begin();
		insert(static_cast<size_type>(_Off), _Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
		return (begin() + _Off);
		}

	basic_string& replace(const const_iterator _First, const const_iterator _Last, const initializer_list<_Elem> _Ilist)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First),
			_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	~basic_string() noexcept
		{	
		_Tidy_deallocate();
		}

	static constexpr auto npos{static_cast<size_type>(-1)};

	basic_string& operator=(const basic_string& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
#pragma warning(push)
#pragma warning(disable: 4127)	
			if (_Alty_traits::propagate_on_container_copy_assignment::value
				&& this->_Getal() != _Right._Getal())
				{	
				_Tidy_deallocate();
				}
#pragma warning(pop)

			this->_Copy_alloc(_Right._Getal());

			auto& _Right_data = _Right._Get_data();
			assign(_Right_data._Myptr(), _Right_data._Mysize);
			}

		return (*this);
		}








#line 2495 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	basic_string& operator=(  const _Elem * const _Ptr)
		{	
		return (assign(_Ptr));
		}

	basic_string& operator=(const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Mysize = 1;
		_Elem * const _Ptr = _My_data._Myptr();
		_Traits::assign(_Ptr[0], _Ch);
		_Traits::assign(_Ptr[1], _Elem());
		return (*this);
		}

	basic_string& operator+=(const basic_string& _Right)
		{	
		return (append(_Right));
		}








#line 2524 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	basic_string& operator+=(  const _Elem * const _Ptr)
		{	
		return (append(_Ptr));
		}

	basic_string& operator+=(_Elem _Ch)
		{	
		push_back(_Ch);
		return (*this);
		}

	basic_string& append(const basic_string& _Right)
		{	
		auto& _Right_data = _Right._Get_data();
		return (append(_Right_data._Myptr(), _Right_data._Mysize));
		}

	basic_string& append(const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
		{	
		auto& _Right_data = _Right._Get_data();
		_Right_data._Check_offset(_Roff);
		_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
		return (append(_Right_data._Myptr() + _Roff, _Count));
		}

















#line 2567 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	basic_string& append(  const _Elem * const _Ptr, __declspec(guard(overflow)) const size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;
		if (_Count <= _My_data._Myres - _Old_size)
			{
			_My_data._Mysize = _Old_size + _Count;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);
			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());
			return (*this);
			}

		return (_Reallocate_grow_by(_Count,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const _Elem * const _Ptr, const size_type _Count) {
			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
			}, _Ptr, _Count));
		}

	basic_string& append(  const _Elem * const _Ptr)
		{	
		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
		}

	basic_string& append(__declspec(guard(overflow)) const size_type _Count, const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;
		if (_Count <= _My_data._Myres - _Old_size)
			{
			_My_data._Mysize = _Old_size + _Count;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);
			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());
			return (*this);
			}

		return (_Reallocate_grow_by(_Count,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Count, const _Elem _Ch) {
			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
			}, _Count, _Ch));
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string& append(const _Iter _First, const _Iter _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	basic_string& assign(const basic_string& _Right)
		{	
		*this = _Right;
		return (*this);
		}

	basic_string& assign(const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
		{	
		auto& _Right_data = _Right._Get_data();
		_Right_data._Check_offset(_Roff);
		_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
		return (assign(_Right_data._Myptr() + _Roff, _Count));
		}

















#line 2655 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	basic_string& assign(  const _Elem * const _Ptr, __declspec(guard(overflow)) const size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		if (_Count <= _My_data._Myres)
			{
			_Elem * const _Old_ptr = _My_data._Myptr();
			_My_data._Mysize = _Count;
			_Traits::move(_Old_ptr, _Ptr, _Count);
			_Traits::assign(_Old_ptr[_Count], _Elem());
			return (*this);
			}

		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {
			_Traits::copy(_New_ptr, _Ptr, _Count);
			_Traits::assign(_New_ptr[_Count], _Elem());
			}, _Ptr));
		}

	basic_string& assign(  const _Elem * const _Ptr)
		{	
		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
		}

	basic_string& assign(__declspec(guard(overflow)) const size_type _Count, const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		if (_Count <= _My_data._Myres)
			{
			_Elem * const _Old_ptr = _My_data._Myptr();
			_My_data._Mysize = _Count;
			_Traits::assign(_Old_ptr, _Count, _Ch);
			_Traits::assign(_Old_ptr[_Count], _Elem());
			return (*this);
			}

		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {
			_Traits::assign(_New_ptr, _Count, _Ch);
			_Traits::assign(_New_ptr[_Count], _Elem());
			}, _Ch));
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string& assign(const _Iter _First, const _Iter _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	basic_string& insert(const size_type _Off, const basic_string& _Right)
		{	
		auto& _Right_data = _Right._Get_data();
		return (insert(_Off, _Right_data._Myptr(), _Right_data._Mysize));
		}

	basic_string& insert(const size_type _Off, const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
		{	
		auto& _Right_data = _Right._Get_data();
		_Right_data._Check_offset(_Roff);
		_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
		return (insert(_Off, _Right_data._Myptr() + _Roff, _Count));
		}


















#line 2736 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	basic_string& insert(const size_type _Off,   const _Elem * const _Ptr,
		__declspec(guard(overflow)) const size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		const size_type _Old_size = _My_data._Mysize;
		if (_Count <= _My_data._Myres - _Old_size)
			{
			_My_data._Mysize = _Old_size + _Count;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			
			
			size_type _Ptr_shifted_after;
			if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size)
				{	
				_Ptr_shifted_after = _Count; 
				}
			else if (_Insert_at <= _Ptr)
				{	
				_Ptr_shifted_after = 0;
				}
			else
				{	
				_Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);
				}

			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); 
			_Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);
			_Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after,
				_Count - _Ptr_shifted_after);
			return (*this);
			}

		return (_Reallocate_grow_by(_Count,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Off, const _Elem * const _Ptr, const size_type _Count) {
			_Traits::copy(_New_ptr, _Old_ptr, _Off);
			_Traits::copy(_New_ptr + _Off, _Ptr, _Count);
			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
			}, _Off, _Ptr, _Count));
		}

	basic_string& insert(const size_type _Off,   const _Elem * const _Ptr)
		{	
		return (insert(_Off, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
		}

	basic_string& insert(const size_type _Off, __declspec(guard(overflow)) const size_type _Count, const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		const size_type _Old_size = _My_data._Mysize;
		if (_Count <= _My_data._Myres - _Old_size)
			{
			_My_data._Mysize = _Old_size + _Count;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); 
			_Traits::assign(_Insert_at, _Count, _Ch); 
			return (*this);
			}

		return (_Reallocate_grow_by(_Count,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Off, const size_type _Count, const _Elem _Ch) {
			_Traits::copy(_New_ptr, _Old_ptr, _Off);
			_Traits::assign(_New_ptr + _Off, _Count, _Ch);
			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
			}, _Off, _Count, _Ch));
		}

	iterator insert(const const_iterator _Where, const _Elem _Ch)
		{	
		const difference_type _Off = _Where - begin();
		insert(static_cast<size_type>(_Off), 1, _Ch);
		return (begin() + _Off);
		}

	iterator insert(const const_iterator _Where, __declspec(guard(overflow)) const size_type _Count, const _Elem _Ch)
		{	
		const difference_type _Off = _Where - begin();
		insert(static_cast<size_type>(_Off), _Count, _Ch);
		return (begin() + _Off);
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const const_iterator _Where, const _Iter _First, const _Iter _Last)
		{	
		const difference_type _Off = _Where - begin();
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	basic_string& erase(const size_type _Off = 0)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_Eos(_Off);
		return (*this);
		}

	basic_string& erase(const size_type _Off, size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_Count = _My_data._Clamp_suffix_size(_Off, _Count);
		const size_type _Old_size = _My_data._Mysize;
		_Elem * const _My_ptr = _My_data._Myptr();
		_Elem * const _Erase_at = _My_ptr + _Off;
		const size_type _New_size = _Old_size - _Count;
		_My_data._Mysize = _New_size;
		_Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); 
		return (*this);
		}

	iterator erase(const const_iterator _Where)
		{	
		const difference_type _Off = _Where - begin();
		erase(static_cast<size_type>(_Off), 1);
		return (begin() + _Off);
		}

	iterator erase(const const_iterator _First, const const_iterator _Last)
		{	
		_Adl_verify_range(_First, _Last);
		const difference_type _Off = _First - begin();
		erase(static_cast<size_type>(_Off), static_cast<size_type>(_Last - _First));
		return (begin() + _Off);
		}

	void clear() noexcept
		{	
		_Eos(0);
		}

	basic_string& replace(const size_type _Off, const size_type _N0, const basic_string& _Right)
		{	
		auto& _Right_data = _Right._Get_data();
		return (replace(_Off, _N0, _Right_data._Myptr(), _Right_data._Mysize));
		}

	basic_string& replace(const size_type _Off, size_type _N0,
		const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
		{	
		auto& _Right_data = _Right._Get_data();
		_Right_data._Check_offset(_Roff);
		_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
		return (replace(_Off, _N0, _Right_data._Myptr() + _Roff, _Count));
		}


















#line 2907 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	basic_string& replace(const size_type _Off, size_type _N0,
		  const _Elem * const _Ptr, const size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_N0 = _My_data._Clamp_suffix_size(_Off, _N0);
		if (_N0 == _Count)
			{	
			_Traits::move(_My_data._Myptr() + _Off, _Ptr, _Count);
			return (*this);
			}

		const size_type _Old_size = _My_data._Mysize;
		const size_type _Suffix_size = _Old_size - _N0 - _Off + 1;
		if (_Count < _N0)
			{	
			_My_data._Mysize = _Old_size - (_N0 - _Count);
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			_Traits::move(_Insert_at, _Ptr, _Count);
			_Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Suffix_size);
			return (*this);
			}

		const size_type _Growth = static_cast<size_type>(_Count - _N0);
		if (_Growth <= _My_data._Myres - _Old_size)
			{	
			_My_data._Mysize = _Old_size + _Growth;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			_Elem * const _Suffix_at = _Insert_at + _N0;

			size_type _Ptr_shifted_after; 
			if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size)
				{
				_Ptr_shifted_after = _Count;
				}
			else if (_Suffix_at <= _Ptr)
				{
				_Ptr_shifted_after = 0;
				}
			else
				{
				_Ptr_shifted_after = static_cast<size_type>(_Suffix_at - _Ptr);
				}

			_Traits::move(_Suffix_at + _Growth, _Suffix_at, _Suffix_size);
			
			
			
			_Traits::move(_Insert_at, _Ptr, _Ptr_shifted_after);
			
			
			_Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after,
				_Count - _Ptr_shifted_after);
			return (*this);
			}

		return (_Reallocate_grow_by(_Growth,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Off, const size_type _N0, const _Elem * const _Ptr, const size_type _Count) {
			_Traits::copy(_New_ptr, _Old_ptr, _Off);
			_Traits::copy(_New_ptr + _Off, _Ptr, _Count);
			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
			}, _Off, _N0, _Ptr, _Count));
		}

	basic_string& replace(const size_type _Off, const size_type _N0,   const _Elem * const _Ptr)
		{	
		return (replace(_Off, _N0, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
		}

	basic_string& replace(const size_type _Off, size_type _N0, const size_type _Count, const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_N0 = _My_data._Clamp_suffix_size(_Off, _N0);
		if (_Count == _N0)
			{
			_Traits::assign(_My_data._Myptr() + _Off, _Count, _Ch);
			return (*this);
			}

		const size_type _Old_size = _My_data._Mysize;
		if (_Count < _N0 || _Count - _N0 <= _My_data._Myres - _Old_size)
			{	
			_My_data._Mysize = _Old_size + _Count - _N0; 
				
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			_Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Old_size - _N0 - _Off + 1);
			_Traits::assign(_Insert_at, _Count, _Ch);
			return (*this);
			}

		return (_Reallocate_grow_by(_Count - _N0,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Off, const size_type _N0, const size_type _Count, const _Elem _Ch) {
			_Traits::copy(_New_ptr, _Old_ptr, _Off);
			_Traits::assign(_New_ptr + _Off, _Count, _Ch);
			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
			}, _Off, _N0, _Count, _Ch));
		}

	basic_string& replace(const const_iterator _First, const const_iterator _Last, const basic_string& _Right)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Right));
		}








#line 3025 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	basic_string& replace(const const_iterator _First, const const_iterator _Last,
		  const _Elem * const _Ptr, const size_type _Count)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Ptr, _Count));
		}

	basic_string& replace(const const_iterator _First, const const_iterator _Last,   const _Elem * const _Ptr)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Ptr));
		}

	basic_string& replace(const const_iterator _First, const const_iterator _Last,
		const size_type _Count, const _Elem _Ch)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Count, _Ch));
		}

	template<class _Iter>
		basic_string& _Replace_range(const const_iterator _First, const const_iterator _Last,
		const _Iter _First2, const _Iter _Last2, false_type)
		{	
		const basic_string _Right(_First2, _Last2, get_allocator());
		replace(_First, _Last, _Right);
		return (*this);
		}

	template<class _Ptr>
		basic_string& _Replace_range(const const_iterator _First, const const_iterator _Last,
		const _Ptr _First2, const _Ptr _Last2, true_type)
		{	
		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),
			_First2, static_cast<size_type>(_Last2 - _First2)));
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string& replace(const const_iterator _First, const const_iterator _Last,
			const _Iter _First2, const _Iter _Last2)
		{	
		_Adl_verify_range(_First2, _Last2);
		const auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		return (_Replace_range(_First, _Last, _UFirst2, _ULast2, _Is_elem_cptr<decltype(_UFirst2)>()));
		}

	 iterator begin() noexcept
		{	
		auto _My_data = ::std:: addressof(this->_Get_data());
		return (iterator(_Refancy<pointer>(_My_data->_Myptr()), _My_data));
		}

	 const_iterator begin() const noexcept
		{	
		auto _My_data = ::std:: addressof(this->_Get_data());
		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data));
		}

	 iterator end() noexcept
		{	
		auto _My_data = ::std:: addressof(this->_Get_data());
		return (iterator(_Refancy<pointer>(_My_data->_Myptr())
			+ static_cast<difference_type>(_My_data->_Mysize), _My_data));
		}

	 const_iterator end() const noexcept
		{	
		auto _My_data = ::std:: addressof(this->_Get_data());
		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr())
			+ static_cast<difference_type>(_My_data->_Mysize), _My_data));
		}

	_Elem * _Unchecked_begin() noexcept
		{	
		return (this->_Get_data()._Myptr());
		}

	const _Elem * _Unchecked_begin() const noexcept
		{	
		return (this->_Get_data()._Myptr());
		}

	_Elem * _Unchecked_end() noexcept
		{	
		auto& _My_data = this->_Get_data();
		return (_My_data._Myptr() + _My_data._Mysize);
		}

	const _Elem * _Unchecked_end() const noexcept
		{	
		const auto& _My_data = this->_Get_data();
		return (_My_data._Myptr() + _My_data._Mysize);
		}

	 reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	 const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	 reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	 const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	 const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	 const_iterator cend() const noexcept
		{	
		return (end());
		}

	 const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	 const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	void shrink_to_fit()
		{	
		auto& _My_data = this->_Get_data();
		if (!_My_data._Large_string_engaged())
			{	
			return;
			}

		if (_My_data._Mysize < this->_BUF_SIZE)
			{
			_Become_small();
			return;
			}

		const size_type _Target_capacity = _Min_value(_My_data._Mysize | this->_ALLOC_MASK, max_size());
		if (_Target_capacity < _My_data._Myres)
			{	
			auto& _Al = this->_Getal();
			const pointer _New_ptr = _Al.allocate(_Target_capacity + 1); 
			this->_Orphan_all();
			_Traits::copy(_Unfancy(_New_ptr), _Unfancy(_My_data._Bx._Ptr), _My_data._Mysize + 1);
			_Al.deallocate(_My_data._Bx._Ptr, _My_data._Myres + 1);
			_My_data._Bx._Ptr = _New_ptr;
			_My_data._Myres = _Target_capacity;
			}
		}

	 reference at(const size_type _Off)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset_exclusive(_Off);
		return (_My_data._Myptr()[_Off]);
		}

	 const_reference at(const size_type _Off) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset_exclusive(_Off);
		return (_My_data._Myptr()[_Off]);
		}

	 reference operator[](const size_type _Off)
		{	
		auto& _My_data = this->_Get_data();

		do { if (_Off <= _My_data._Mysize) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 3204, 0, "%s", "string subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string subscript out of range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 3204, 0); } while (false); } ; } while (false);
#line 3206 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		return (_My_data._Myptr()[_Off]);
		}

	 const_reference operator[](const size_type _Off) const
		{	
		auto& _My_data = this->_Get_data();

		do { if (_Off <= _My_data._Mysize) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 3213, 0, "%s", "string subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string subscript out of range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 3213, 0); } while (false); } ; } while (false);
#line 3215 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		return (_My_data._Myptr()[_Off]);
		}







#line 3225 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	void push_back(const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;
		if (_Old_size < _My_data._Myres)
			{
			_My_data._Mysize = _Old_size + 1;
			_Elem * const _Ptr = _My_data._Myptr();
			_Traits::assign(_Ptr[_Old_size], _Ch);
			_Traits::assign(_Ptr[_Old_size + 1], _Elem());
			return;
			}

		_Reallocate_grow_by(1,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const _Elem _Ch) {
			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
			_Traits::assign(_New_ptr[_Old_size], _Ch);
			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());
			}, _Ch);
		}

	void pop_back()
		{	
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;

		do { if (_Old_size != 0) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 3253, 0, "%s", "invalid to pop_back empty string")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid to pop_back empty string\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring", 3253, 0); } while (false); } ; } while (false);
#line 3255 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
		_Eos(_Old_size - 1);
		}

	 reference front()
		{	
		return (*begin());
		}

	 const_reference front() const
		{	
		return (*begin());
		}

	 reference back()
		{	
		return (*(end() - 1));
		}

	 const_reference back() const
		{	
		return (*(end() - 1));
		}

	   const _Elem * c_str() const noexcept
		{	
		return (this->_Get_data()._Myptr());
		}

	   const _Elem * data() const noexcept
		{	
		return (this->_Get_data()._Myptr());
		}






#line 3294 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 size_type length() const noexcept
		{	
		return (this->_Get_data()._Mysize);
		}

	 size_type size() const noexcept
		{	
		return (this->_Get_data()._Mysize);
		}

	 size_type max_size() const noexcept
		{	
		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());
		const size_type _Storage_max = 
			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));
		return (_Min_value(
			static_cast<size_type>((numeric_limits<difference_type>::max)()),
			_Storage_max - 1 
			));

		}

	void resize(__declspec(guard(overflow)) const size_type _Newsize, const _Elem _Ch = _Elem())
		{	
		const size_type _Old_size = size();
		if (_Newsize <= _Old_size)
			{
			_Eos(_Newsize);
			}
		else
			{
			append(_Newsize - _Old_size, _Ch);
			}
		}

	 size_type capacity() const noexcept
		{	
		return (this->_Get_data()._Myres);
		}

	void reserve(__declspec(guard(overflow)) const size_type _Newcap = 0)
		{	
		auto& _My_data = this->_Get_data();
		if (_My_data._Mysize > _Newcap)
			{	
			return;	
			}

		if (_My_data._Myres == _Newcap)
			{	
			return;	
			}

		if (_My_data._Myres < _Newcap)
			{	
			const size_type _Old_size = _My_data._Mysize;
			_Reallocate_grow_by(_Newcap - _Old_size,
				[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size) {
				_Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);
				});

			_My_data._Mysize = _Old_size;
			return;
			}

		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())
			{	
			_Become_small();
			return;
			}

		
		}

	 bool empty() const noexcept
		{	
		return (size() == 0);
		}

	size_type copy(  _Elem * const _Ptr,
		size_type _Count, const size_type _Off = 0) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_Count = _My_data._Clamp_suffix_size(_Off, _Count);
		_Traits::copy(_Ptr, _My_data._Myptr() + _Off, _Count);
		return (_Count);
		}

	  size_type _Copy_s(
		  _Elem * const _Dest, const size_type _Dest_size,
		size_type _Count, const size_type _Off = 0) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_Count = _My_data._Clamp_suffix_size(_Off, _Count);
		_Traits::_Copy_s(_Dest, _Dest_size, _My_data._Myptr() + _Off, _Count);
		return (_Count);
		}

	void _Swap_data(basic_string& _Right, true_type)
		{	
		const auto _My_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(this->_Get_data()))
			+ _Memcpy_move_offset;
		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(_Right._Get_data()))
			+ _Memcpy_move_offset;
		unsigned char _Temp_mem[_Memcpy_move_size];
		:: memcpy(_Temp_mem, _My_data_mem, _Memcpy_move_size);
		:: memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);
		:: memcpy(_Right_data_mem, _Temp_mem, _Memcpy_move_size);
		}

	void _Swap_bx_large_with_small(_Mydata_t& _Starts_large, _Mydata_t& _Starts_small)
		{	
		const pointer _Ptr = _Starts_large._Bx._Ptr;
		auto& _Al = this->_Getal();
		_Alty_traits::destroy(_Al, ::std:: addressof(_Starts_large._Bx._Ptr));
		_Traits::copy(_Starts_large._Bx._Buf, _Starts_small._Bx._Buf, this->_BUF_SIZE);
		_Alty_traits::construct(_Al, ::std:: addressof(_Starts_small._Bx._Ptr), _Ptr);
		}

	void _Swap_data(basic_string& _Right, false_type)
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		const bool _My_large = _My_data._Large_string_engaged();
		const bool _Right_large = _Right_data._Large_string_engaged();
		if (_My_large)
			{
			if (_Right_large)
				{	
				_Swap_adl(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);
				}
			else
				{	
				_Swap_bx_large_with_small(_My_data, _Right_data);
				}
			}
		else
			{
			if (_Right_large)
				{	
				_Swap_bx_large_with_small(_Right_data, _My_data);
				}
			else
				{
				_Elem _Temp_buf[this->_BUF_SIZE];
				_Traits::copy(_Temp_buf, _My_data._Bx._Buf, this->_BUF_SIZE);
				_Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, this->_BUF_SIZE);
				_Traits::copy(_Right_data._Bx._Buf, _Temp_buf, this->_BUF_SIZE);
				}
			}

		::std:: swap(_My_data._Mysize, _Right_data._Mysize);
		::std:: swap(_My_data._Myres, _Right_data._Myres);
		}

	void swap(basic_string& _Right) noexcept 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Pocs(this->_Getal(), _Right._Getal());


			auto& _My_data = this->_Get_data();
			auto& _Right_data = _Right._Get_data();
			const bool _My_large = _My_data._Large_string_engaged();
			const bool _Right_large = _Right_data._Large_string_engaged();
			if (!_My_large)
				{
				_My_data._Orphan_all();
				}

			if (!_Right_large)
				{
				_Right_data._Orphan_all();
				}

			if (_My_large || _Right_large)
				{
				_My_data._Swap_all(_Right_data);
				}
#line 3478 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
			}

		_Swap_data(_Right, _Use_memcpy_move{});
		}











#line 3494 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 size_type find(const basic_string& _Right, const size_type _Off = 0) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(
			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
				_Right_data._Myptr(), _Right_data._Mysize)));
		}

	 size_type find(  const _Elem * const _Ptr, const size_type _Off, const size_type _Count)
		const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
		}

	 size_type find(  const _Elem * const _Ptr, const size_type _Off = 0) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
		}

	 size_type find(const _Elem _Ch, const size_type _Off = 0) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}











#line 3537 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 size_type rfind(const basic_string& _Right, const size_type _Off = npos) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(
			_Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
				_Right_data._Myptr(), _Right_data._Mysize)));
		}

	 size_type rfind(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
		}

	 size_type rfind(  const _Elem * const _Ptr, const size_type _Off = npos)
		const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
		}

	 size_type rfind(const _Elem _Ch, const size_type _Off = npos) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_rfind_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}











#line 3581 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 size_type find_first_of(const basic_string& _Right, const size_type _Off = 0) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_first_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count,
				_Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_first_of(  const _Elem * const _Ptr, const size_type _Off = 0)
		const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr),
				_Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_first_of(const _Elem _Ch, const size_type _Off = 0) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}











#line 3626 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 size_type find_last_of(const basic_string& _Right, size_type _Off = npos) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_last_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count,
				_Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_last_of(  const _Elem * const _Ptr, const size_type _Off = npos)
		const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr),
				_Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_last_of(const _Elem _Ch, const size_type _Off = npos) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_rfind_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}











#line 3670 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 size_type find_first_not_of(const basic_string& _Right, const size_type _Off = 0) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_first_not_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count,
				_Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_first_not_of(  const _Elem * const _Ptr, size_type _Off = 0) const
		noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr,
				_Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_first_not_of(const _Elem _Ch, const size_type _Off = 0) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_find_not_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}











#line 3714 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 size_type find_last_not_of(const basic_string& _Right, const size_type _Off = npos) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_last_not_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count,
				_Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_last_not_of(  const _Elem * const _Ptr, const size_type _Off = npos) const
		noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{})));
		}

	 size_type find_last_not_of(const _Elem _Ch, const size_type _Off = npos) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_rfind_not_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}






#line 3753 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 basic_string substr(const size_type _Off = 0, const size_type _Count = npos) const
		{	
		return (basic_string(*this, _Off, _Count, get_allocator()));
		}

	bool _Equal(const basic_string& _Right) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Right_data._Myptr(), _Right_data._Mysize));
		}

	bool _Equal(  const _Elem * const _Ptr) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));
		}



































#line 3807 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

	 int compare(const basic_string& _Right) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (_Traits_compare<_Traits>(_My_data._Myptr(), _My_data._Mysize,
			_Right_data._Myptr(), _Right_data._Mysize));
		}

	 int compare(size_type _Off, size_type _N0, const basic_string& _Right) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		auto& _Right_data = _Right._Get_data();
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_Right_data._Myptr(), _Right_data._Mysize));
		}

	 int compare(const size_type _Off, const size_type _N0, const basic_string& _Right,
		const size_type _Roff, const size_type _Count = npos) const
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		_My_data._Check_offset(_Off);
		_Right_data._Check_offset(_Roff);
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_Right_data._Myptr() + _Roff, _Right_data._Clamp_suffix_size(_Roff, _Count)));
		}

	 int compare(  const _Elem * const _Ptr) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (_Traits_compare<_Traits>(_My_data._Myptr(), _My_data._Mysize,
			_Ptr, _Traits::length(_Ptr)));
		}

	 int compare(const size_type _Off, const size_type _N0,   const _Elem * const _Ptr) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_Ptr, _Traits::length(_Ptr)));
		}

	 int compare(const size_type _Off, const size_type _N0,   const _Elem * const _Ptr,
		const size_type _Count) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_Ptr, _Count));
		}

	 allocator_type get_allocator() const noexcept
		{	
		return (static_cast<allocator_type>(this->_Getal()));
		}

	size_type _Calculate_growth(const size_type _Requested) const
		{	
		const size_type _Max = max_size();
		auto& _My_data = this->_Get_data();
		const size_type _Masked = _Requested | this->_ALLOC_MASK;
		if (_Masked > _Max)
			{	
			return (_Max);
			}

		const size_type _Old = _My_data._Myres;
		if (_Old > _Max - _Old / 2)
			{	
			return (_Max);
			}

		return (_Max_value(_Masked, _Old + _Old / 2));
		}

	template<class _Fty,
		class... _ArgTys>
		basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args)
		{	
			
		if (_New_size > max_size())
			{
			_Xlen();	
			}

		auto& _My_data = this->_Get_data();
		const size_type _Old_capacity = _My_data._Myres;
		const size_type _New_capacity = _Calculate_growth(_New_size);
		auto& _Al = this->_Getal();
		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); 
		_My_data._Orphan_all();
		_My_data._Mysize = _New_size;
		_My_data._Myres = _New_capacity;
		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);
		if (this->_BUF_SIZE <= _Old_capacity)
			{
			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);
			_My_data._Bx._Ptr = _New_ptr;
			}
		else
			{
			_Alty_traits::construct(_Al, ::std:: addressof(_My_data._Bx._Ptr), _New_ptr);
			}

		return (*this);
		}

	template<class _Fty,
		class... _ArgTys>
		basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args)
		{	
			
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;
		if (max_size() - _Old_size < _Size_increase)
			{
			_Xlen();	
			}

		const size_type _New_size = _Old_size + _Size_increase;
		const size_type _Old_capacity = _My_data._Myres;
		const size_type _New_capacity = _Calculate_growth(_New_size);
		auto& _Al = this->_Getal();
		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); 
		_My_data._Orphan_all();
		_My_data._Mysize = _New_size;
		_My_data._Myres = _New_capacity;
		_Elem * const _Raw_new = _Unfancy(_New_ptr);
		if (this->_BUF_SIZE <= _Old_capacity)
			{
			const pointer _Old_ptr = _My_data._Bx._Ptr;
			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
			_Al.deallocate(_Old_ptr, _Old_capacity + 1);
			_My_data._Bx._Ptr = _New_ptr;
			}
		else
			{
			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);
			_Alty_traits::construct(_Al, ::std:: addressof(_My_data._Bx._Ptr), _New_ptr);
			}

		return (*this);
		}

	void _Become_small()
		{	
			
			
		auto& _My_data = this->_Get_data();
		_My_data._Orphan_all();
		const pointer _Ptr = _My_data._Bx._Ptr;
		auto& _Al = this->_Getal();
		_Alty_traits::destroy(_Al, ::std:: addressof(_My_data._Bx._Ptr));
		_Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);
		_Al.deallocate(_Ptr, _My_data._Myres + 1);
		_My_data._Myres = this->_BUF_SIZE - 1;
		}

	void _Eos(const size_type _Newsize)
		{	
		auto& _My_data = this->_Get_data();
		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());
		}

	void _Tidy_init()
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Mysize = 0;
		_My_data._Myres = this->_BUF_SIZE - 1;
		
		
		_Traits::assign(_My_data._Bx._Buf[0], _Elem());
		}

	void _Tidy_deallocate()
		{	
		this->_Orphan_all();
		auto& _My_data = this->_Get_data();
		if (_My_data._Large_string_engaged())
			{
			const pointer _Ptr = _My_data._Bx._Ptr;
			auto& _Al = this->_Getal();
			_Alty_traits::destroy(_Al, ::std:: addressof(_My_data._Bx._Ptr));
			_Al.deallocate(_Ptr, _My_data._Myres + 1);
			}

		_My_data._Mysize = 0;
		_My_data._Myres = this->_BUF_SIZE - 1;
		
		
		_Traits::assign(_My_data._Bx._Buf[0], _Elem());
		}

	[[noreturn]] static void _Xlen()
		{	
		_Xlength_error("string too long");
		}
	};

























#line 4033 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept 
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	using _String_type = basic_string<_Elem, _Traits, _Alloc>;
	using _Size_type = typename _String_type::size_type;
	_String_type _Ans;
	_Ans.reserve(_Convert_size<_Size_type>(_Traits::length(_Left) + _Right.size()));
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(1 + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	using _String_type = basic_string<_Elem, _Traits, _Alloc>;
	using _Size_type = typename _String_type::size_type;
	_String_type _Ans;
	_Ans.reserve(_Convert_size<_Size_type>(_Left.size() + _Traits::length(_Right)));
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + 1);
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	if (_Right.size() <= _Left.capacity() - _Left.size()
		|| _Right.capacity() - _Right.size() < _Left.size())
		return (::std:: move(_Left.append(_Right)));
	else
		return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		  const _Elem * const _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	using size_type = typename allocator_traits<_Alloc>::size_type;
	return (::std:: move(_Right.insert(static_cast<size_type>(0), static_cast<size_type>(1), _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		  const _Elem * const _Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem _Right)
	{	
	_Left.push_back(_Right);
	return (::std:: move(_Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Left._Equal(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator==(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right._Equal(_Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator!=(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator<(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) > 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator>(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator<=(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator>=(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	 inline bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (!(_Left < _Right));
	}

using string = basic_string<char, char_traits<char>, allocator<char>>;
using wstring = basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using u16string = basic_string<char16_t, char_traits<char16_t>, allocator<char16_t>>;
using u32string = basic_string<char32_t, char_traits<char32_t>, allocator<char32_t>>;

	
template<class _Elem,
	class _Traits,
	class _Alloc>
	struct hash<basic_string<_Elem, _Traits, _Alloc>>
	{	
	 typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
	 typedef size_t result_type;

	 size_t operator()(const basic_string<_Elem, _Traits, _Alloc>& _Keyval) const noexcept
		{	
		return (_Hash_array_representation(_Keyval.c_str(), _Keyval.size()));
		}
	};
}



#pragma warning(pop)
#pragma pack(pop)
#line 4399 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"
#line 4400 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring"





#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 
namespace std {
		
class logic_error
	: public exception
	{	
public:
	typedef exception _Mybase;

	explicit logic_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit logic_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 42 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
	};

		
class domain_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit domain_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit domain_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 70 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
	};

		
class invalid_argument
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit invalid_argument(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit invalid_argument(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 98 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
	};

		
class length_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit length_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit length_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 126 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
	};

		
class out_of_range
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit out_of_range(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit out_of_range(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 154 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
	};

		
class runtime_error
	: public exception
	{	
public:
	typedef exception _Mybase;

	explicit runtime_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit runtime_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 182 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
	};

		
class overflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit overflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit overflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 210 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
	};

		
class underflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit underflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit underflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 238 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
	};

		
class range_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit range_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit range_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 266 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
	};
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 273 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"
#line 274 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdexcept"





#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\typeinfo"
















#pragma once






#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




#pragma warning(disable: 4275)	

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_typeinfo.h"







#pragma once




#pragma pack(push, 8)






#line 21 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_typeinfo.h"
    struct __type_info_node;
#line 23 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_typeinfo.h"




    extern __type_info_node __type_info_root_node;
#line 29 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_typeinfo.h"



__pragma(pack(push, 8)) extern "C" {

struct __std_type_info_data
{
    const char * _UndecoratedName;
    const char   _DecoratedName[1];
    __std_type_info_data() = delete;
    __std_type_info_data(const __std_type_info_data&) = delete;
    __std_type_info_data(__std_type_info_data&&) = delete;

    __std_type_info_data& operator=(const __std_type_info_data&) = delete;
    __std_type_info_data& operator=(__std_type_info_data&&) = delete;
};

 int __cdecl __std_type_info_compare(
      const __std_type_info_data* _Lhs,
      const __std_type_info_data* _Rhs
    );

 size_t __cdecl __std_type_info_hash(
      const __std_type_info_data* _Data
    );

 const char* __cdecl __std_type_info_name(
      __std_type_info_data* _Data,
      __type_info_node*     _RootNode
    );

} __pragma(pack(pop))


#pragma warning(push)
#pragma warning(disable: 4577) 
class type_info
{
public:

    type_info(const type_info&) = delete;
    type_info& operator=(const type_info&) = delete;

    size_t hash_code() const noexcept
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(const type_info& _Other) const noexcept
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(const type_info& _Other) const noexcept
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(const type_info& _Other) const noexcept
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    const char* name() const noexcept
    {
        


        return __std_type_info_name(&_Data, &__type_info_root_node);
        #line 99 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_typeinfo.h"
    }

    const char* raw_name() const noexcept
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() noexcept;

private:

    mutable __std_type_info_data _Data;
};
#pragma warning(pop)

namespace std {
	using ::type_info;
}



namespace std {

#pragma warning(push)
#pragma warning(disable: 4577) 
class bad_cast
    : public exception
{
public:

    bad_cast() noexcept
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(const char* const _Message) noexcept
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(const char* const _Message, int) noexcept
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid() noexcept
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(const char* const _Message) noexcept
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(const char* const _Message, int) noexcept
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(const char* const _Message) noexcept
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(const char* const _Message, int) noexcept
        : bad_typeid(_Message, 1)
    {
    }
};

#pragma warning(pop)
} 

#line 194 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_typeinfo.h"
#line 195 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vcruntime_typeinfo.h"
#pragma pack(pop)
#line 34 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\typeinfo"

 namespace std {


constexpr int _Small_object_num_ptrs = 6 + 16 / sizeof (void *);

 




















































#line 94 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\typeinfo"

 }



#pragma pack(pop)
#pragma warning(pop)
#line 102 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\typeinfo"
#line 103 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\typeinfo"







#line 10 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"

#pragma once



#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\ctype.h"







#pragma once






__pragma(pack(push, 8)) extern "C" {









  __declspec(dllimport) int __cdecl _isctype(  int _C,   int _Type);
  __declspec(dllimport) int __cdecl _isctype_l(  int _C,   int _Type,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isalpha(  int _C);
  __declspec(dllimport) int __cdecl _isalpha_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isupper(  int _C);
  __declspec(dllimport) int __cdecl _isupper_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl islower(  int _C);
  __declspec(dllimport) int __cdecl _islower_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl isdigit(  int _C);

  __declspec(dllimport) int __cdecl _isdigit_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isxdigit(  int _C);
  __declspec(dllimport) int __cdecl _isxdigit_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl isspace(  int _C);

  __declspec(dllimport) int __cdecl _isspace_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl ispunct(  int _C);
  __declspec(dllimport) int __cdecl _ispunct_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isblank(  int _C);
  __declspec(dllimport) int __cdecl _isblank_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isalnum(  int _C);
  __declspec(dllimport) int __cdecl _isalnum_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isprint(  int _C);
  __declspec(dllimport) int __cdecl _isprint_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isgraph(  int _C);
  __declspec(dllimport) int __cdecl _isgraph_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl iscntrl(  int _C);
  __declspec(dllimport) int __cdecl _iscntrl_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl toupper(  int _C);


   __declspec(dllimport) int __cdecl tolower(  int _C);

   __declspec(dllimport) int __cdecl _tolower(  int _C);
  __declspec(dllimport) int __cdecl _tolower_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl _toupper(  int _C);
  __declspec(dllimport) int __cdecl _toupper_l(  int _C,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl __isascii(  int _C);
  __declspec(dllimport) int __cdecl __toascii(  int _C);
  __declspec(dllimport) int __cdecl __iscsymf(  int _C);
  __declspec(dllimport) int __cdecl __iscsym(  int _C);










    
    
    






















    
    
    
        __declspec(dllimport) int __cdecl _chvalidator(  int _Ch,   int _Mask);
        
    

#line 116 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\ctype.h"



    
    
    
    
    
    
    
    



    












#line 144 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\ctype.h"

    __inline __crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
    {
        _locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
        return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
    }

    
    __declspec(dllimport) int __cdecl _chvalidator_l(  _locale_t,   int _Ch,   int _Mask);
    #line 154 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\ctype.h"

    __inline int __cdecl _chvalidchk_l(
              int       const _C,
              int       const _Mask,
          _locale_t const _Locale
        )
    {
        
        return _chvalidator_l(_Locale, _C, _Mask);
        






#line 171 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\ctype.h"
    }

    
    

    __inline int __cdecl _ischartype_l(
              int       const _C,
              int       const _Mask,
          _locale_t const _Locale
        )
    {
        if (_Locale && __acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
        {
            return _isctype_l(_C, _Mask, _Locale);
        }

        return _chvalidchk_l(_C, _Mask, _Locale);
    }

    
    
    
    
    
    
    
    
    
    
    
    

    
    

    
    


    
    
    
    
    

    
    
    
    

#line 222 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\ctype.h"



    
    
    
    
#line 230 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\ctype.h"



#line 234 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\ctype.h"
} __pragma(pack(pop))
#line 236 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\ctype.h"
#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\locale.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {















struct lconv
{
    char*    decimal_point;
    char*    thousands_sep;
    char*    grouping;
    char*    int_curr_symbol;
    char*    currency_symbol;
    char*    mon_decimal_point;
    char*    mon_thousands_sep;
    char*    mon_grouping;
    char*    positive_sign;
    char*    negative_sign;
    char     int_frac_digits;
    char     frac_digits;
    char     p_cs_precedes;
    char     p_sep_by_space;
    char     n_cs_precedes;
    char     n_sep_by_space;
    char     p_sign_posn;
    char     n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
};

struct tm;























    __declspec(dllimport) void __cdecl _lock_locales(void);
    __declspec(dllimport) void __cdecl _unlock_locales(void);

    
    __declspec(dllimport) int __cdecl _configthreadlocale(
          int _Flag
        );

        
    __declspec(dllimport) char* __cdecl setlocale(
                int         _Category,
          char const* _Locale
        );

    
    __declspec(dllimport) struct lconv* __cdecl localeconv(void);

    
    __declspec(dllimport) _locale_t __cdecl _get_current_locale(void);

    
    __declspec(dllimport) _locale_t __cdecl _create_locale(
            int         _Category,
          char const* _Locale
        );

    __declspec(dllimport) void __cdecl _free_locale(
          _locale_t _Locale
        );

    
        
    __declspec(dllimport) wchar_t* __cdecl _wsetlocale(
                int            _Category,
          wchar_t const* _Locale
        );

    
    __declspec(dllimport) _locale_t __cdecl _wcreate_locale(
            int            _Category,
          wchar_t const* _Locale
        );



    __declspec(dllimport) wchar_t**    __cdecl ___lc_locale_name_func(void);
    __declspec(dllimport) unsigned int __cdecl ___lc_codepage_func   (void);
    __declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func (void);




    
     
     
    __declspec(dllimport) char*    __cdecl _Getdays(void);

     
     
    __declspec(dllimport) char*    __cdecl _Getmonths(void);

    __declspec(dllimport) void*    __cdecl _Gettnames(void);

     
     
    __declspec(dllimport) wchar_t* __cdecl _W_Getdays(void);

     
     
    __declspec(dllimport) wchar_t* __cdecl _W_Getmonths(void);

    __declspec(dllimport) void*    __cdecl _W_Gettnames(void);

     
    __declspec(dllimport) size_t __cdecl _Strftime(
          char*           _Buffer,
                              size_t           _Max_size,
                            char const*      _Format,
                              struct tm const* _Timeptr,
                          void*            _Lc_time_arg);

     
    __declspec(dllimport) size_t __cdecl _Wcsftime(
          wchar_t*        _Buffer,
                              size_t           _Max_size,
                            wchar_t const*   _Format,
                              struct tm const* _Timeptr,
                          void*            _Lc_time_arg
        );

#line 175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\locale.h"


} __pragma(pack(pop))
#line 179 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\locale.h"
#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"



 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 


 
extern "C" {
 #line 22 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"
#line 23 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"

		












		










 
 
 
 
 
 
 
 

typedef struct _Collvec
	{	
	unsigned int _Page;		
	wchar_t *_LocaleName;
	} _Collvec;

typedef struct _Ctypevec
	{	
	unsigned int _Page;		
	const short *_Table;
	int _Delfl;
	wchar_t *_LocaleName;
	} _Ctypevec;

typedef struct _Cvtvec
	{	
	unsigned int _Page;		
	unsigned int _Mbcurmax;
	int _Isclocale;	
	unsigned char _Isleadbyte[32];	
	} _Cvtvec;

		
 _Collvec __cdecl _Getcoll(void);
 _Ctypevec __cdecl _Getctype(void);
 _Cvtvec __cdecl _Getcvt(void);



extern "C"
#line 88 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"
 int __cdecl _Getdateorder(void);
#line 90 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"

 








 int __cdecl _Mbrtowc(  wchar_t *, const char *, size_t,
	mbstate_t *, const _Cvtvec *);
 #line 103 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"

 float __cdecl _Stof(const char *,
	    char **, long);
 double __cdecl _Stod(const char *,
	    char **, long);
 long double __cdecl _Stold(const char *,
	    char **, long);

 int __cdecl _Strcoll(const char *, const char *,
	const char *, const char *, const _Collvec *);
 size_t __cdecl _Strxfrm(
	    char *_String1,
	  char *_End1, const char *, const char *, const _Collvec *);
 int __cdecl _Tolower(int, const _Ctypevec *);
 int __cdecl _Toupper(int, const _Ctypevec *);
 int __cdecl _Wcrtomb(  char *, wchar_t, mbstate_t *,
	const _Cvtvec *);
 int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
	const wchar_t *, const wchar_t *, const _Collvec *);
 size_t __cdecl _Wcsxfrm(
	    wchar_t *_String1,
	  wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

 short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
 const wchar_t *__cdecl _Getwctypes(const wchar_t *,
	const wchar_t *, short *, const _Ctypevec *);
 wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
 wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);


 
}
 #line 136 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"
#line 137 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"

extern "C" {
 
 
__declspec(dllimport) char *__cdecl _Getdays(void);

 
 
__declspec(dllimport) char *__cdecl _Getmonths(void);

__declspec(dllimport) void *__cdecl _Gettnames(void);

 
__declspec(dllimport) size_t __cdecl _Strftime(  char *,
	  size_t _Maxsize,   const char *,   const struct tm *,
	  void *);

 
 
__declspec(dllimport) wchar_t *__cdecl _W_Getdays(void);

 
 
__declspec(dllimport) wchar_t *__cdecl _W_Getmonths(void);

__declspec(dllimport) void *__cdecl _W_Gettnames(void);

 
__declspec(dllimport) size_t __cdecl _Wcsftime(  wchar_t *,
	  size_t _Maxsize,   const wchar_t *,   const struct tm *,
	  void *);
}

 







 _locale_t __cdecl _GetLocaleForCP(unsigned int);
 #line 180 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 186 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"
#line 187 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo.h"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo"



 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
class __declspec(dllimport) _Timevec
	{	
public:
	 _Timevec(void *_Ptr = nullptr)
		: _Timeptr(_Ptr)
		{	
		}

	 _Timevec(const _Timevec& _Right)
		{	
		*this = _Right;
		}

	 ~_Timevec() noexcept
		{	
		free(_Timeptr);
		}

	_Timevec&  operator=(const _Timevec& _Right)
		{	
		_Timeptr = _Right._Timeptr;
		((_Timevec *)&_Right)->_Timeptr = nullptr;
		return (*this);
		}

	void * _Getptr() const
		{	
		return (_Timeptr);
		}

private:
	void *_Timeptr;	
	};

		
class __declspec(dllimport) _Locinfo
	{	
public:
	typedef ::_Collvec _Collvec;
	typedef ::_Ctypevec _Ctypevec;
	typedef ::_Cvtvec _Cvtvec;
	typedef ::std:: _Timevec _Timevec;

	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, const char *);
	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, int, const char *);
	static  void __cdecl _Locinfo_dtor(
		_Locinfo *);
	static  _Locinfo& __cdecl _Locinfo_Addcats(
		_Locinfo *, int, const char *);

	 _Locinfo(const char *_Pch = "C")
 
		: _Lock(0)
 #line 75 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo"

		{	
		if (_Pch == nullptr)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Pch);
		}

	 _Locinfo(int _Cat, const char *_Pch)
 
		: _Lock(0)
 #line 86 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo"

		{	
		if (_Pch == nullptr)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Cat, _Pch);
		}

	 ~_Locinfo() noexcept
		{	
		_Locinfo_dtor(this);
		}

	_Locinfo&  _Addcats(int _Cat, const char *_Pch)
		{	
		if (_Pch == nullptr)
			throw runtime_error("bad locale name");
		return (_Locinfo_Addcats(this, _Cat, _Pch));
		}

	const char * _Getname() const
		{	
		return (_Newlocname._C_str());
		}

	_Collvec  _Getcoll() const
		{	
		return (::_Getcoll());
		}

	_Ctypevec  _Getctype() const
		{	
		return (::_Getctype());
		}

	_Cvtvec  _Getcvt() const
		{	
		return (::_Getcvt());
		}

	const lconv * _Getlconv() const
		{	
		return (localeconv());
		}

	_Timevec  _Gettnames() const
		{	
		return (_Timevec(::_Gettnames()));
		}

	const char * _Getdays() const
		{	
		const char *_Ptr = ::_Getdays();

		if (_Ptr != nullptr)
			{	
			((_Locinfo *)this)->_Days = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Days._Empty() ? _Days._C_str()
			: ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				":Thu:Thursday:Fri:Friday:Sat:Saturday");
		}

	const char * _Getmonths() const
		{	
		const char *_Ptr = ::_Getmonths();

		if (_Ptr != nullptr)
			{	
			((_Locinfo *)this)->_Months = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Months._Empty() ? _Months._C_str()
			: ":Jan:January:Feb:February:Mar:March"
				":Apr:April:May:May:Jun:June"
				":Jul:July:Aug:August:Sep:September"
				":Oct:October:Nov:November:Dec:December");
		}

	const char * _Getfalse() const
		{	
		return ("false");
		}

	const char * _Gettrue() const
		{	
		return ("true");
		}

	int  _Getdateorder() const
		{	
		return (::_Getdateorder());
		}

	_Timevec  _W_Gettnames() const
		{	
		return (_Timevec(::_W_Gettnames()));
		}

	const unsigned short * _W_Getdays() const
		{	
		const wchar_t *_Ptr = ::_W_Getdays();

		if (_Ptr != nullptr)
			{	
			((_Locinfo *)this)->_W_Days = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Days._Empty()
			? _W_Days._C_str()
			: L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
		}

	const unsigned short * _W_Getmonths() const
		{	
		const wchar_t *_Ptr = ::_W_Getmonths();

		if (_Ptr != nullptr)
			{	
			((_Locinfo *)this)->_W_Months = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Months._Empty()
			? _W_Months._C_str()
			: L":Jan:January:Feb:February:Mar:March"
				L":Apr:April:May:May:Jun:June"
				L":Jul:July:Aug:August:Sep:September"
				L":Oct:October:Nov:November:Dec:December"));
		}

	_Locinfo(const _Locinfo&) = delete;
	_Locinfo& operator=(const _Locinfo&) = delete;

private:
 



	_Lockit _Lock;	
 #line 227 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo"

	_Yarn<char> _Days;	
	_Yarn<char> _Months;	
	_Yarn<wchar_t> _W_Days;	
	_Yarn<wchar_t> _W_Months;	
	_Yarn<char> _Oldlocname;	
	_Yarn<char> _Newlocname;	
	};

		
template<class _Elem> inline
	int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (*_First1 < *_First2)
			return (-1);	
		else if (*_First2 < *_First1)
			return (+1);	
	return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
	}

template<> inline
	int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

		
template<class _Elem> inline
	size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	const ptrdiff_t _Count = _Last2 - _First2;
	if (_Count <= _Last1 - _First1)
		{
		:: memcpy(_First1, _First2, _Count * sizeof(_Elem));
		}

	return (_Count);
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  char *_First1,   char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  wchar_t *_First1,   wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 304 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo"
#line 305 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocinfo"





#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Ty> inline
	pair<_Ty *, ptrdiff_t> _Get_temporary_buffer(ptrdiff_t _Count) noexcept
	{	
	if (static_cast<size_t>(_Count) <= static_cast<size_t>(-1) / sizeof(_Ty))
		{
		for (; 0 < _Count; _Count /= 2)
			{
			const auto _Size = static_cast<size_t>(_Count) * sizeof(_Ty);
			void * _Pbuf;
 









#line 37 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory"
				{
				_Pbuf = ::operator new(_Size, nothrow);
				}
			if (_Pbuf)
				{
				return {static_cast<_Ty *>(_Pbuf), _Count};
				}
			}
		}

	return {nullptr, 0};
	}

		
template<class _Ty> inline
	void _Return_temporary_buffer(_Ty * const _Pbuf) noexcept
	{	
 









#line 65 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory"
		{
		::operator delete(_Pbuf);
		}
	}

		
template<class _FwdIt>
	struct _Uninitialized_backout
	{	
	_FwdIt _First;
	_FwdIt _Last;

	explicit _Uninitialized_backout(_FwdIt _Dest)
		: _First(_Dest),
		_Last(_Dest)
		{}

	_Uninitialized_backout(_FwdIt _First_, _FwdIt _Last_)
		: _First(_First_),
		_Last(_Last_)
		{}

	_Uninitialized_backout(const _Uninitialized_backout&) = delete;
	_Uninitialized_backout& operator=(const _Uninitialized_backout&) = delete;

	~_Uninitialized_backout()
		{	
		_Destroy_range(_First, _Last);
		}

	template<class... _Types>
		void _Emplace_back(_Types&&... _Vals)
		{	
		_Construct_in_place(*_Last, ::std:: forward<_Types>(_Vals)...);
		++_Last;
		}

	_FwdIt _Release()
		{	
		_First = _Last;
		return (_Last);
		}
	};

		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_move_unchecked1(_InIt _First, const _InIt _Last,
		const _FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_Dest};
	for (; _First != _Last; ++_First)
		{
		_Backout._Emplace_back(::std:: move(*_First));
		}

	return (_Backout._Release());
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_move_unchecked1(const _InIt _First, const _InIt _Last,
		const _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_move_unchecked(const _InIt _First, const _InIt _Last,
		const _FwdIt _Dest)
	{	
	return (_Uninitialized_move_unchecked1(_First, _Last, _Dest, _Ptr_move_cat(_First, _Dest)));
	}

		
template<class _FwdIt,
	class _Alloc>
	class _Uninitialized_backout_al
	{	
public:
	_Uninitialized_backout_al(_FwdIt _Dest, _Alloc& _Al_)
		: _First(_Dest),
		_Last(_Dest),
		_Al(_Al_)
		{
		}

	_Uninitialized_backout_al(const _Uninitialized_backout_al&) = delete;
	_Uninitialized_backout_al& operator=(const _Uninitialized_backout_al&) = delete;

	~_Uninitialized_backout_al()
		{	
		_Destroy_range(_First, _Last, _Al);
		}

	template<class... _Types>
		void _Emplace_back(_Types&&... _Vals)
		{	
		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), ::std:: forward<_Types>(_Vals)...);
		++_Last;
		}

	_FwdIt _Release()
		{	
		_First = _Last;
		return (_Last);
		}

private:
	_FwdIt _First;
	_FwdIt _Last;
	_Alloc& _Al;
	};

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy_al_unchecked(_InIt _First, const _InIt _Last, const _FwdIt _Dest, _Alloc& _Al,
		_General_ptr_iterator_tag, _Any_tag)
	{	
	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};
	for (; _First != _Last; ++_First)
		{
		_Backout._Emplace_back(*_First);
		}

	return (_Backout._Release());
	}

template<class _Ty1,
	class _Ty2,
	class _Alloc> inline
	_Ty2 *_Uninitialized_copy_al_unchecked(_Ty1 * const _First, _Ty1 * const _Last, _Ty2 * const _Dest, _Alloc&,
		_Really_trivial_ptr_iterator_tag, true_type)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy(const _InIt _First, const _InIt _Last, _FwdIt _Dest, _Alloc& _Al)
	{	
		
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
			_Ptr_copy_cat(_UFirst, _UDest),
			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>()));

	return (_Dest);
	}

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move_al_unchecked(_InIt _First, const _InIt _Last, const _FwdIt _Dest, _Alloc& _Al,
		_General_ptr_iterator_tag, _Any_tag)
	{	
	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};
	for (; _First != _Last; ++_First)
		{
		_Backout._Emplace_back(::std:: move(*_First));
		}

	return (_Backout._Release());
	}

template<class _Ty1,
	class _Ty2,
	class _Alloc> inline
	_Ty2 *_Uninitialized_move_al_unchecked(_Ty1 * const _First, _Ty1 * const _Last, _Ty2 * const _Dest, _Alloc&,
		_Really_trivial_ptr_iterator_tag, true_type)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move(const _InIt _First, const _InIt _Last, _FwdIt _Dest, _Alloc& _Al)
	{	
		
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
			_Ptr_move_cat(_UFirst, _UDest),
			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(::std:: move(*_UFirst))>()));
	return (_Dest);
	}

		
template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninit_alloc_fill_n1(const _FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt>& _Val,
		_Alloc& _Al, false_type)
	{	
	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_First, _Al};
	for (; 0 < _Count; --_Count)
		{
		_Backout._Emplace_back(_Val);
		}

	return (_Backout._Release());
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninit_alloc_fill_n1(const _FwdIt _First, const _Diff _Count, const _Iter_value_t<_FwdIt>& _Val,
		_Alloc&, true_type)
	{	
	:: memset(_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));
	return (_First + _Count);
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninitialized_fill_n(const _FwdIt _First, const _Diff _Count, const _Iter_value_t<_FwdIt>& _Val,
		_Alloc& _Al)
	{	
	return (_Uninit_alloc_fill_n1(_First, _Count, _Val, _Al,
		bool_constant<conjunction_v<decltype(_Fill_memset_is_safe(_First, _Val)),
			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First)), decltype(_Val)>>>{}));
	}

		
template<class _FwdIt>
	using _Use_memset_value_construct_t = bool_constant<conjunction_v<
		is_pointer<_FwdIt>,
		is_scalar<_Iter_value_t<_FwdIt>>,
		negation<is_volatile<_Iter_value_t<_FwdIt>>>,
		negation<is_member_pointer<_Iter_value_t<_FwdIt>>>>>;

template<class _FwdIt> inline
	_FwdIt _Zero_range(const _FwdIt _First, const _FwdIt _Last)
	{	
	char * const _First_ch = reinterpret_cast<char *>(_First);
	char * const _Last_ch = reinterpret_cast<char *>(_Last);
	:: memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));
	return (_Last);
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninitialized_value_construct_n1(const _FwdIt _First, _Diff _Count, _Alloc& _Al, false_type)
	{	
	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_First, _Al};
	for (; 0 < _Count; --_Count)
		{
		_Backout._Emplace_back();
		}

	return (_Backout._Release());
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninitialized_value_construct_n1(_FwdIt _First, _Diff _Count, _Alloc&, true_type)
	{	
	return (_Zero_range(_First, _First + _Count));
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninitialized_value_construct_n(_FwdIt _First, _Diff _Count, _Alloc& _Al)
	{	
	return (_Uninitialized_value_construct_n1(_First, _Count, _Al,
		bool_constant<conjunction_v<_Use_memset_value_construct_t<_FwdIt>,
			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>>{}));
	}

	
struct _Not_a_node_tag
	{	
	};

		
template<class _Ty>
	  pair<_Ty *, ptrdiff_t> get_temporary_buffer(ptrdiff_t _Count) noexcept
	{	
	return (_Get_temporary_buffer<_Ty>(_Count));
	}

		
template<class _Ty>
	 void return_temporary_buffer(_Ty * _Pbuf)
	{	
	_Return_temporary_buffer(_Pbuf);
	}
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 374 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory"
#line 375 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmemory"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"




 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked(_InIt _First, const _InIt _Last,
		const _FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_Dest};
	for (; _First != _Last; ++_First)
		{
		_Backout._Emplace_back(*_First);
		}

	return (_Backout._Release());
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked(const _InIt _First, const _InIt _Last,
		const _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _FwdIt _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest, _Ptr_copy_cat(_UFirst, _UDest)));
	return (_Dest);
	}

 
template<class _InIt,
	class _OutTy,
	size_t _OutSize> inline
	_OutTy * uninitialized_copy(const _InIt _First, const _InIt _Last,
		_OutTy (&_Dest)[_OutSize])
	{	
	return (::std:: uninitialized_copy(_First, _Last, _Array_iterator<_OutTy, _OutSize>(_Dest))._Unwrapped());
	}
 #line 65 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

		

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked2(_InIt _First, _Diff _Count,
		const _FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_Dest};
	for (; 0 < _Count; --_Count, (void)++_First)
		{
		_Backout._Emplace_back(*_First);
		}

	return (_Backout._Release());
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked2(const _InIt _First, const _Diff _Count,
		const _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _First + _Count, _Dest));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt uninitialized_copy_n(const _InIt _First, const _Diff _Count_raw, _FwdIt _Dest)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _UFirst = _Get_unwrapped_n(_First, _Count);
		const auto _UDest = _Get_unwrapped_n(_Dest, _Count);
		_Seek_wrapped(_Dest,
			_Uninitialized_copy_n_unchecked2(_UFirst, _Count, _UDest, _Ptr_copy_cat(_UFirst, _UDest)));
		}

	return (_Dest);
	}

 
template<class _InTy,
	size_t _InSize,
	class _Diff,
	class _FwdIt> inline
	_FwdIt uninitialized_copy_n(_InTy (&_First)[_InSize], const _Diff _Count_raw, _FwdIt _Dest)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		do { if ((::std:: size(_First) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 119, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 119, 0); } while (false); } ; } while (false);
		const auto _UDest = _Get_unwrapped_n(_Dest, _Count);
		_Seek_wrapped(_Dest,
			_Uninitialized_copy_n_unchecked2(_First, _Count, _UDest, _Ptr_copy_cat(_First, _UDest)));
		}

	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutTy,
	size_t _OutSize> inline
	_OutTy * uninitialized_copy_n(const _InIt _First, const _Diff _Count_raw, _OutTy (&_Dest)[_OutSize])
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		do { if ((::std:: size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 137, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 137, 0); } while (false); } ; } while (false);
		const auto _UFirst = _Get_unwrapped_n(_First, _Count);
		return (_Uninitialized_copy_n_unchecked2(_UFirst, _Count, _Dest, _Ptr_copy_cat(_UFirst, _Dest)));
		}

	return (_Dest);
	}

template<class _InTy,
	size_t _InSize,
	class _Diff,
	class _OutTy,
	size_t _OutSize> inline
	_OutTy * uninitialized_copy_n(_InTy (&_First)[_InSize], const _Diff _Count_raw, _OutTy (&_Dest)[_OutSize])
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		do { if ((::std:: size(_First) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 155, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 155, 0); } while (false); } ; } while (false);
		do { if ((::std:: size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 156, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 156, 0); } while (false); } ; } while (false);
		return (_Uninitialized_copy_n_unchecked2(_First, _Count, _Dest, _Ptr_copy_cat(_First, _Dest)));
		}

	return (_Dest);
	}
 #line 163 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"












































































































































#line 304 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

		
template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked(const _FwdIt _First, const _FwdIt _Last, const _Tval& _Val, false_type)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_First};
	while (_Backout._Last != _Last)
		{
		_Backout._Emplace_back(_Val);
		}

	_Backout._Release();
	}

template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked(const _FwdIt _First, const _FwdIt _Last, const _Tval& _Val, true_type)
	{	
	:: memset(_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First));
	}

template<class _FwdIt,
	class _Tval> inline
	void uninitialized_fill(const _FwdIt _First, const _FwdIt _Last, const _Tval& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	_Uninitialized_fill_unchecked(_UFirst, _Get_unwrapped(_Last), _Val, _Fill_memset_is_safe(_UFirst, _Val));
	}


		

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked1(const _FwdIt _First, _Diff _Count, const _Tval& _Val, false_type)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_First};
	for (; 0 < _Count; --_Count)
		{
		_Backout._Emplace_back(_Val);
		}

	return (_Backout._Release());
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked1(const _FwdIt _First, const _Diff _Count, const _Tval& _Val, true_type)
	{	
	:: memset(_First, static_cast<unsigned char>(_Val), _Count);
	return (_First + _Count);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt uninitialized_fill_n(_FwdIt _First, const _Diff _Count_raw, const _Tval& _Val)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _UFirst = _Get_unwrapped_n(_First, _Count);
		_Seek_wrapped(_First,
			_Uninitialized_fill_n_unchecked1(_UFirst, _Count, _Val, _Fill_memset_is_safe(_UFirst, _Val)));
		}

	return (_First);
	}
























































































































































































#line 561 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"


		
template<class _OutIt,
	class _Ty>
	class  raw_storage_iterator
	{	
public:
	using iterator_category = output_iterator_tag;
	using value_type = void;
	using difference_type = void;
	using pointer = void;
	using reference = void;

	explicit raw_storage_iterator(_OutIt _First)
		: _Next(_First)
		{	
		}

	 raw_storage_iterator& operator*()
		{	
		return (*this);
		}

	raw_storage_iterator& operator=(const _Ty& _Val)
		{	
		_Construct_in_place(*_Next, _Val);
		return (*this);
		}

	raw_storage_iterator& operator=(_Ty&& _Val)
		{	
		_Construct_in_place(*_Next, ::std:: move(_Val));
		return (*this);
		}

	raw_storage_iterator& operator++()
		{	
		++_Next;
		return (*this);
		}

	raw_storage_iterator operator++(int)
		{	
		raw_storage_iterator _Ans = *this;
		++_Next;
		return (_Ans);
		}

	 _OutIt base() const
		{	
		return (_Next);
		}

private:
	_OutIt _Next;	
	};


 
		
template<class _Ty>
	class auto_ptr;

template<class _Ty>
	struct auto_ptr_ref
		{	
	explicit auto_ptr_ref(_Ty * _Right)
		: _Ref(_Right)
		{	
		}

	_Ty * _Ref;	
	};

template<class _Ty>
	class auto_ptr
	{	
public:
	typedef _Ty element_type;

	explicit auto_ptr(_Ty * _Ptr = nullptr) noexcept
		: _Myptr(_Ptr)
		{	
		}

	auto_ptr(auto_ptr& _Right) noexcept
		: _Myptr(_Right.release())
		{	
		}

	auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept
		{	
		_Ty * _Ptr = _Right._Ref;
		_Right._Ref = nullptr;	
		_Myptr = _Ptr;	
		}

	template<class _Other>
		operator auto_ptr<_Other>() noexcept
		{	
		return (auto_ptr<_Other>(*this));
		}

	template<class _Other>
		operator auto_ptr_ref<_Other>() noexcept
		{	
		_Other * _Cvtptr = _Myptr;	
		auto_ptr_ref<_Other> _Ans(_Cvtptr);
		_Myptr = nullptr;	
		return (_Ans);
		}

	template<class _Other>
		auto_ptr& operator=(auto_ptr<_Other>& _Right) noexcept
		{	
		reset(_Right.release());
		return (*this);
		}

	template<class _Other>
		auto_ptr(auto_ptr<_Other>& _Right) noexcept
		: _Myptr(_Right.release())
		{	
		}

	auto_ptr& operator=(auto_ptr& _Right) noexcept
		{	
		reset(_Right.release());
		return (*this);
		}

	auto_ptr& operator=(auto_ptr_ref<_Ty> _Right) noexcept
		{	
		_Ty * _Ptr = _Right._Ref;
		_Right._Ref = 0;	
		reset(_Ptr);	
		return (*this);
		}

	~auto_ptr() noexcept
		{	
		delete _Myptr;
		}

	 _Ty& operator*() const noexcept
		{	
 
		do { if (_Myptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 709, 0, "%s", "auto_ptr not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"auto_ptr not dereferencable\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 709, 0); } while (false); } ; } while (false);
 #line 711 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

		return (*get());
		}

	 _Ty * operator->() const noexcept
		{	
 
		do { if (_Myptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 718, 0, "%s", "auto_ptr not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"auto_ptr not dereferencable\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory", 718, 0); } while (false); } ; } while (false);
 #line 720 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

		return (get());
		}

	 _Ty * get() const noexcept
		{	
		return (_Myptr);
		}

	_Ty * release() noexcept
		{	
		_Ty * _Tmp = _Myptr;
		_Myptr = nullptr;
		return (_Tmp);
		}

	void reset(_Ty * _Ptr = nullptr)
		{	
		if (_Ptr != _Myptr)
			delete _Myptr;
		_Myptr = _Ptr;
		}

private:
	_Ty * _Myptr;	
	};

template<>
	class auto_ptr<void>
	{
public:
	typedef void element_type;
	};
 #line 754 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"


	
class bad_weak_ptr
	: public exception
	{	
public:
	bad_weak_ptr() noexcept
		{	
		}

	 virtual const char *  what() const noexcept override
		{	
		return ("bad_weak_ptr");
		}
	};

	
class __declspec(novtable) _Ref_count_base
	{	
private:











	virtual void _Destroy() noexcept = 0;
	virtual void _Delete_this() noexcept = 0;
#line 789 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

	_Atomic_counter_t _Uses;
	_Atomic_counter_t _Weaks;

protected:
	_Ref_count_base()
		: _Uses(1), _Weaks(1)	
		{	
		}

public:
	virtual ~_Ref_count_base() noexcept
		{	
		}

	bool _Incref_nz()
		{	
		for (;;)
			{	
 
			const _Atomic_integral_t _Count =
				static_cast<volatile _Atomic_counter_t&>(_Uses);

			if (_Count == 0)
				return (false);

			if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
					reinterpret_cast<volatile long *>(&_Uses),
					static_cast<long>(_Count + 1), static_cast<long>(_Count))) == _Count)
				return (true);

 








#line 830 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"
			}
		}

	void _Incref()
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
		}

	void _Incwref()
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
		}

	void _Decref()
		{	
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
			{	
			_Destroy();
			_Decwref();
			}
		}

	void _Decwref()
		{	
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
			{
			_Delete_this();
			}
		}

	long _Use_count() const noexcept
		{	
		return (static_cast<long>(_Get_atomic_count(_Uses)));
		}

	virtual void * _Get_deleter(const type_info&) const noexcept
		{	
		return (nullptr);
		}
	};

	
template<class _Ty>
	class _Ref_count
		: public _Ref_count_base
	{	
public:
	explicit _Ref_count(_Ty * _Px)
		: _Ref_count_base(), _Ptr(_Px)
		{	
		}

private:
	virtual void _Destroy() noexcept override
		{	
		delete _Ptr;
		}

	virtual void _Delete_this() noexcept override
		{	
		delete this;
		}

	_Ty * _Ptr;
	};

	
template<class _Resource,
	class _Dx>
	class _Ref_count_resource
		: public _Ref_count_base
	{	
public:
	_Ref_count_resource(_Resource _Px, _Dx _Dt)
		: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), ::std:: move(_Dt), _Px)
		{	
		}

	virtual void * _Get_deleter(const type_info& _Typeid) const noexcept override
		{	

		if (_Typeid == typeid(_Dx))
			{
			return (const_cast<_Dx *>(::std:: addressof(_Mypair._Get_first())));
			}


#line 918 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

		return (nullptr);
		}

private:
	virtual void _Destroy() noexcept override
		{	
		_Mypair._Get_first()(_Mypair._Get_second());
		}

	virtual void _Delete_this() noexcept override
		{	
		delete this;
		}

	_Compressed_pair<_Dx, _Resource> _Mypair;
	};

	
template<class _Resource,
	class _Dx,
	class _Alloc>
	class _Ref_count_resource_alloc
		: public _Ref_count_base
	{	
public:
	_Ref_count_resource_alloc(_Resource _Px, _Dx _Dt, const _Alloc& _Ax)
		: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), ::std:: move(_Dt),
			_One_then_variadic_args_t(), _Ax, _Px)
		{	
		}

	virtual void * _Get_deleter(const type_info& _Typeid) const noexcept override
		{	

		if (_Typeid == typeid(_Dx))
			{
			return (const_cast<_Dx *>(::std:: addressof(_Mypair._Get_first())));
			}


#line 960 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

		return (nullptr);
		}

private:
	using _Myalty = _Rebind_alloc_t<_Alloc, _Ref_count_resource_alloc>;

	virtual void _Destroy() noexcept override
		{	
		_Mypair._Get_first()(_Mypair._Get_second()._Get_second());
		}

	virtual void _Delete_this() noexcept override
		{	
		_Myalty _Al = _Mypair._Get_second()._Get_first();
		allocator_traits<_Myalty>::destroy(_Al, this);
		_Deallocate_plain(_Al, this);
		}

	_Compressed_pair<_Dx, _Compressed_pair<_Myalty, _Resource>> _Mypair;
	};

	
template<class _Ty>
	struct default_delete;

template<class _Ty,
	class _Dx = default_delete<_Ty>>
	class unique_ptr;

template<class _Ty>
	class shared_ptr;

template<class _Ty>
	class weak_ptr;

template<class _Yty,
	class = void>
	struct _Can_enable_shared
		: false_type
	{	
	};

template<class _Yty>
	struct _Can_enable_shared<_Yty, void_t<typename _Yty::_Esft_type>>
		: is_convertible<remove_cv_t<_Yty> *, typename _Yty::_Esft_type *>::type
	{	
	};

template<class _Other,
	class _Yty>
	void _Enable_shared_from_this1(const shared_ptr<_Other>& _This, _Yty * _Ptr, true_type)
	{	
	if (_Ptr && _Ptr->_Wptr.expired())
		{
		_Ptr->_Wptr = shared_ptr<remove_cv_t<_Yty>>(_This, const_cast<remove_cv_t<_Yty> *>(_Ptr));
		}
	}

template<class _Other,
	class _Yty>
	void _Enable_shared_from_this1(const shared_ptr<_Other>&, _Yty *, false_type)
	{	
	}

template<class _Other,
	class _Yty>
	void _Enable_shared_from_this(const shared_ptr<_Other>& _This, _Yty * _Ptr)
	{	
	_Enable_shared_from_this1(_This, _Ptr, bool_constant<conjunction_v<
		negation<is_array<_Other>>,
		negation<is_volatile<_Yty>>,
		_Can_enable_shared<_Yty>>>{});
	}

	
template<class _Ty>
	class _Ptr_base
	{	
public:
	using element_type = remove_extent_t<_Ty>;

	 long use_count() const noexcept
		{	
		return (_Rep ? _Rep->_Use_count() : 0);
		}

	template<class _Ty2>
		 bool owner_before(const _Ptr_base<_Ty2>& _Right) const noexcept
		{	
		return (_Rep < _Right._Rep);
		}

	_Ptr_base(const _Ptr_base&) = delete;
	_Ptr_base& operator=(const _Ptr_base&) = delete;

protected:
	 element_type * get() const noexcept
		{	
		return (_Ptr);
		}

	constexpr _Ptr_base() noexcept = default;

	~_Ptr_base() = default;

	template<class _Ty2>
		void _Move_construct_from(_Ptr_base<_Ty2>&& _Right)
		{	
		_Ptr = _Right._Ptr;
		_Rep = _Right._Rep;

		_Right._Ptr = nullptr;
		_Right._Rep = nullptr;
		}

	template<class _Ty2>
		void _Copy_construct_from(const shared_ptr<_Ty2>& _Other)
		{	
		if (_Other._Rep)
			{
			_Other._Rep->_Incref();
			}

		_Ptr = _Other._Ptr;
		_Rep = _Other._Rep;
		}

	template<class _Ty2>
		void _Alias_construct_from(const shared_ptr<_Ty2>& _Other, element_type * _Px)
		{	
		if (_Other._Rep)
			{
			_Other._Rep->_Incref();
			}

		_Ptr = _Px;
		_Rep = _Other._Rep;
		}

	template<class _Ty0>
		friend class weak_ptr;	

	template<class _Ty2>
		bool _Construct_from_weak(const weak_ptr<_Ty2>& _Other)
		{	
		if (_Other._Rep && _Other._Rep->_Incref_nz())
			{
			_Ptr = _Other._Ptr;
			_Rep = _Other._Rep;
			return (true);
			}

		return (false);
		}

	void _Decref()
		{	
		if (_Rep)
			{
			_Rep->_Decref();
			}
		}

	void _Swap(_Ptr_base& _Right) noexcept
		{	
		::std:: swap(_Ptr, _Right._Ptr);
		::std:: swap(_Rep, _Right._Rep);
		}

	void _Set_ptr_rep(element_type * _Other_ptr, _Ref_count_base * _Other_rep)
		{	
		_Ptr = _Other_ptr;
		_Rep = _Other_rep;
		}

	template<class _Ty2>
		void _Weakly_construct_from(const _Ptr_base<_Ty2>& _Other)
		{	
		if (_Other._Rep)
			{
			_Other._Rep->_Incwref();
			}

		_Ptr = _Other._Ptr;
		_Rep = _Other._Rep;
		}

	void _Decwref()
		{	
		if (_Rep)
			{
			_Rep->_Decwref();
			}
		}

private:
	element_type * _Ptr{nullptr};
	_Ref_count_base * _Rep{nullptr};

	template<class _Ty0>
		friend class _Ptr_base;


	template<class _Dx,
		class _Ty0>
		friend _Dx * get_deleter(const shared_ptr<_Ty0>& _Sx) noexcept;
#line 1168 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"
	};

	
template<class _Yty,
	class = void>
	struct _Can_scalar_delete
		: false_type
	{};
template<class _Yty>
	struct _Can_scalar_delete<_Yty, void_t<decltype(delete ::std:: declval<_Yty *>())>>
		: true_type
	{};

	
template<class _Yty,
	class = void>
	struct _Can_array_delete
		: false_type
	{};
template<class _Yty>
	struct _Can_array_delete<_Yty, void_t<decltype(delete[] ::std:: declval<_Yty *>())>>
		: true_type
	{};

	
template<class _Fx,
	class _Arg,
	class = void>
	struct _Can_call_function_object
		: false_type
	{};
template<class _Fx,
	class _Arg>
	struct _Can_call_function_object<_Fx, _Arg, void_t<decltype(::std:: declval<_Fx>()(::std:: declval<_Arg>()))>>
		: true_type
	{};

	
template<class _Yty,
	class _Ty>
	struct _SP_convertible
		: is_convertible<_Yty *, _Ty *>::type
	{};
template<class _Yty,
	class _Uty>
	struct _SP_convertible<_Yty, _Uty[]>
		: is_convertible<_Yty(*)[], _Uty(*)[]>::type
	{};
template<class _Yty,
	class _Uty,
	size_t _Ext>
	struct _SP_convertible<_Yty, _Uty[_Ext]>
		: is_convertible<_Yty(*)[_Ext], _Uty(*)[_Ext]>::type
	{};

	
template<class _Yty,
	class _Ty>
	struct _SP_pointer_compatible
		: is_convertible<_Yty *, _Ty *>::type
	{	
		
	};
template<class _Uty,
	size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], _Uty[]>
		: true_type
	{	
	};
template<class _Uty,
	size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], const _Uty[]>
		: true_type
	{	
	};
template<class _Uty,
	size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], volatile _Uty[]>
		: true_type
	{	
	};
template<class _Uty,
	size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], const volatile _Uty[]>
		: true_type
	{	
	};

	
template<class _Ty>
	class shared_ptr
		: public _Ptr_base<_Ty>
	{	
private:
	using _Mybase = _Ptr_base<_Ty>;

public:
	using typename _Mybase::element_type;



#line 1270 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

	constexpr shared_ptr() noexcept
		{	
		}

	constexpr shared_ptr(nullptr_t) noexcept
		{	
		}

	template<class _Ux,
		enable_if_t<conjunction_v<conditional_t<is_array_v<_Ty>, _Can_array_delete<_Ux>, _Can_scalar_delete<_Ux>>,
			_SP_convertible<_Ux, _Ty>>, int> = 0>
		explicit shared_ptr(_Ux * _Px)
		{	
		_Setp(_Px, is_array<_Ty>{});
		}

	template<class _Ux,
		class _Dx,
		enable_if_t<conjunction_v<is_move_constructible<_Dx>,
			_Can_call_function_object<_Dx&, _Ux *&>,
			_SP_convertible<_Ux, _Ty>>, int> = 0>
		shared_ptr(_Ux * _Px, _Dx _Dt)
		{	
		_Setpd(_Px, ::std:: move(_Dt));
		}

	template<class _Ux,
		class _Dx,
		class _Alloc,
		enable_if_t<conjunction_v<is_move_constructible<_Dx>,
			_Can_call_function_object<_Dx&, _Ux *&>,
			_SP_convertible<_Ux, _Ty>>, int> = 0>
		shared_ptr(_Ux * _Px, _Dx _Dt, _Alloc _Ax)
		{	
		_Setpda(_Px, ::std:: move(_Dt), _Ax);
		}

	template<class _Dx,
		enable_if_t<conjunction_v<is_move_constructible<_Dx>,
			_Can_call_function_object<_Dx&, nullptr_t&>
		>, int> = 0>
		shared_ptr(nullptr_t, _Dx _Dt)
		{	
		_Setpd(nullptr, ::std:: move(_Dt));
		}

	template<class _Dx,
		class _Alloc,
		enable_if_t<conjunction_v<is_move_constructible<_Dx>,
			_Can_call_function_object<_Dx&, nullptr_t&>
		>, int> = 0>
		shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
		{	
		_Setpda(nullptr, ::std:: move(_Dt), _Ax);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Right, element_type * _Px) noexcept
		{	
		this->_Alias_construct_from(_Right, _Px);
		}

	shared_ptr(const shared_ptr& _Other) noexcept
		{	
		this->_Copy_construct_from(_Other);
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		shared_ptr(const shared_ptr<_Ty2>& _Other) noexcept
		{	
		this->_Copy_construct_from(_Other);
		}

	shared_ptr(shared_ptr&& _Right) noexcept
		{	
		this->_Move_construct_from(::std:: move(_Right));
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		shared_ptr(shared_ptr<_Ty2>&& _Right) noexcept
		{	
		this->_Move_construct_from(::std:: move(_Right));
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		explicit shared_ptr(const weak_ptr<_Ty2>& _Other)
		{	
		if (!this->_Construct_from_weak(_Other))
			{
			throw bad_weak_ptr{};
			}
		}

 
	template<class _Ty2,
		enable_if_t<is_convertible_v<_Ty2 *, _Ty *>, int> = 0>
		shared_ptr(auto_ptr<_Ty2>&& _Other)
		{	
		_Ty2 * _Px = _Other.get();
		_Set_ptr_rep_and_enable_shared(_Px, new _Ref_count<_Ty2>(_Px));
		_Other.release();
		}
 #line 1377 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

	template<class _Ux,
		class _Dx,
		enable_if_t<conjunction_v<
			_SP_pointer_compatible<_Ux, _Ty>,
			is_convertible<typename unique_ptr<_Ux, _Dx>::pointer, element_type *>
		>, int> = 0>
		shared_ptr(unique_ptr<_Ux, _Dx>&& _Other)
		{	
		using _Fancy_t = typename unique_ptr<_Ux, _Dx>::pointer;
		using _Raw_t = typename unique_ptr<_Ux, _Dx>::element_type *;
		using _Deleter_t = conditional_t<is_reference_v<_Dx>, decltype(::std:: ref(_Other.get_deleter())), _Dx>;

		const _Fancy_t _Fancy = _Other.get();

		if (_Fancy)
			{
			const _Raw_t _Raw = _Fancy;
			const auto _Rx = new _Ref_count_resource<_Fancy_t, _Deleter_t>(_Fancy, _Other.get_deleter());
			_Set_ptr_rep_and_enable_shared(_Raw, _Rx);
			_Other.release();
			}
		}

	~shared_ptr() noexcept
		{	
		this->_Decref();
		}

	shared_ptr& operator=(const shared_ptr& _Right) noexcept
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		shared_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	shared_ptr& operator=(shared_ptr&& _Right) noexcept
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		shared_ptr& operator=(shared_ptr<_Ty2>&& _Right) noexcept
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

 
	template<class _Ty2>
		shared_ptr& operator=(auto_ptr<_Ty2>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}
 #line 1440 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

	template<class _Ux,
		class _Dx>
		shared_ptr& operator=(unique_ptr<_Ux, _Dx>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	void swap(shared_ptr& _Other) noexcept
		{	
		this->_Swap(_Other);
		}

	void reset() noexcept
		{	
		shared_ptr().swap(*this);
		}

	template<class _Ux>
		void reset(_Ux * _Px)
		{	
		shared_ptr(_Px).swap(*this);
		}

	template<class _Ux,
		class _Dx>
		void reset(_Ux * _Px, _Dx _Dt)
		{	
		shared_ptr(_Px, _Dt).swap(*this);
		}

	template<class _Ux,
		class _Dx,
		class _Alloc>
		void reset(_Ux * _Px, _Dx _Dt, _Alloc _Ax)
		{	
		shared_ptr(_Px, _Dt, _Ax).swap(*this);
		}

	using _Mybase::get;

	template<class _Ty2 = _Ty,
		enable_if_t<!disjunction_v<is_array<_Ty2>, is_void<_Ty2>>, int> = 0>
		 _Ty2& operator*() const noexcept
		{	
		return (*get());
		}

	template<class _Ty2 = _Ty,
		enable_if_t<!is_array_v<_Ty2>, int> = 0>
		 _Ty2 * operator->() const noexcept
		{	
		return (get());
		}

	template<class _Ty2 = _Ty,
		class _Elem = element_type,
		enable_if_t<is_array_v<_Ty2>, int> = 0>
		 _Elem& operator[](ptrdiff_t _Idx) const
		{	
		return (get()[_Idx]);
		}

	  bool unique() const noexcept
		{	
		return (this->use_count() == 1);
		}

	explicit operator bool() const noexcept
		{	
		return (get() != nullptr);
		}

private:
	template<class _Ux>
		void _Setp(_Ux * _Px, true_type)
		{	
		_Setpd(_Px, default_delete<_Ux[]>{});
		}

	template<class _Ux>
		void _Setp(_Ux * _Px, false_type)
		{	
		try {	
		_Set_ptr_rep_and_enable_shared(_Px, new _Ref_count<_Ux>(_Px));
		} catch (...) {	
		delete _Px;
		throw;
		}
		}

	template<class _UxptrOrNullptr,
		class _Dx>
		void _Setpd(_UxptrOrNullptr _Px, _Dx _Dt)
		{	
		try {	
		_Set_ptr_rep_and_enable_shared(_Px, new _Ref_count_resource<_UxptrOrNullptr, _Dx>(_Px, ::std:: move(_Dt)));
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}

	template<class _UxptrOrNullptr,
		class _Dx,
		class _Alloc>
		void _Setpda(_UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax)
		{	
		using _Refd = _Ref_count_resource_alloc<_UxptrOrNullptr, _Dx, _Alloc>;
		using _Alref_alloc = _Rebind_alloc_t<_Alloc, _Refd>;
		using _Alref_traits = allocator_traits<_Alref_alloc>;
		_Alref_alloc _Alref(_Ax);

		try {	
		const auto _Pfancy = _Alref_traits::allocate(_Alref, 1);
		_Refd * const _Pref = _Unfancy(_Pfancy);
			try {
			_Alref_traits::construct(_Alref, _Pref, _Px, ::std:: move(_Dt), _Ax);
			_Set_ptr_rep_and_enable_shared(_Px, _Pref);
			} catch (...) {
			_Alref_traits::deallocate(_Alref, _Pfancy, 1);
			throw;
			}
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}

	template<class _Ty0,
		class... _Types>
		friend shared_ptr<_Ty0> make_shared(_Types&&... _Args);

	template<class _Ty0,
		class _Alloc,
		class... _Types>
		friend shared_ptr<_Ty0> allocate_shared(const _Alloc& _Al_arg, _Types&&... _Args);

	template<class _Ux>
		void _Set_ptr_rep_and_enable_shared(_Ux * _Px, _Ref_count_base * _Rx)
		{	
		this->_Set_ptr_rep(_Px, _Rx);
		_Enable_shared_from_this(*this, _Px);
		}

	void _Set_ptr_rep_and_enable_shared(nullptr_t, _Ref_count_base * _Rx)
		{	
		this->_Set_ptr_rep(nullptr, _Rx);
		}
	};








#line 1600 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

template<class _Ty1,
	class _Ty2>
	 bool operator==(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	 bool operator!=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() != _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	 bool operator<(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() < _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	 bool operator>=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() >= _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	 bool operator>(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() > _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	 bool operator<=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() <= _Right.get());
	}

template<class _Ty>
	 bool operator==(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() == nullptr);
	}

template<class _Ty>
	 bool operator==(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (nullptr == _Right.get());
	}

template<class _Ty>
	 bool operator!=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() != nullptr);
	}

template<class _Ty>
	 bool operator!=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (nullptr != _Right.get());
	}

template<class _Ty>
	 bool operator<(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() < static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
	}

template<class _Ty>
	 bool operator<(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) < _Right.get());
	}

template<class _Ty>
	 bool operator>=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() >= static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
	}

template<class _Ty>
	 bool operator>=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) >= _Right.get());
	}

template<class _Ty>
	 bool operator>(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() > static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
	}

template<class _Ty>
	 bool operator>(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) > _Right.get());
	}

template<class _Ty>
	 bool operator<=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() <= static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
	}

template<class _Ty>
	 bool operator<=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) <= _Right.get());
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Out, const shared_ptr<_Ty>& _Px)
	{	
	return (_Out << _Px.get());
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>& _Left, shared_ptr<_Ty>& _Right) noexcept
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2>
	 shared_ptr<_Ty1> static_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	const auto _Ptr = static_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());
	return (shared_ptr<_Ty1>(_Other, _Ptr));
	}

template<class _Ty1,
	class _Ty2>
	 shared_ptr<_Ty1> const_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	const auto _Ptr = const_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());
	return (shared_ptr<_Ty1>(_Other, _Ptr));
	}

template<class _Ty1,
	class _Ty2>
	 shared_ptr<_Ty1> reinterpret_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	const auto _Ptr = reinterpret_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());
	return (shared_ptr<_Ty1>(_Other, _Ptr));
	}


template<class _Ty1,
	class _Ty2>
	 shared_ptr<_Ty1> dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	const auto _Ptr = dynamic_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());

	if (_Ptr)
		{
		return (shared_ptr<_Ty1>(_Other, _Ptr));
		}

	return (shared_ptr<_Ty1>());
	}




#line 1772 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"


template<class _Dx,
	class _Ty>
	 _Dx * get_deleter(const shared_ptr<_Ty>& _Sx) noexcept
	{	
	if (_Sx._Rep)
		{
		return (static_cast<_Dx *>(_Sx._Rep->_Get_deleter(typeid(_Dx))));
		}

	return (nullptr);
	}




#line 1790 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

	
template<class _Ty>
	class _Ref_count_obj
		: public _Ref_count_base
	{	
public:
	template<class... _Types>
		explicit _Ref_count_obj(_Types&&... _Args)
		: _Ref_count_base()
		{	
		::new (static_cast<void *>(&_Storage)) _Ty(::std:: forward<_Types>(_Args)...);
		}

	_Ty * _Getptr()
		{	
		return (reinterpret_cast<_Ty *>(&_Storage));
		}

private:
	virtual void _Destroy() noexcept override
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this() noexcept override
		{	
		delete this;
		}

	aligned_union_t<1, _Ty> _Storage;
	};

	
template<class _Ty,
	class _Alloc>
	class _Ref_count_obj_alloc
		: public _Ref_count_base
	{	
public:
	template<class... _Types>
		explicit _Ref_count_obj_alloc(const _Alloc& _Al_arg, _Types&&... _Args)
		: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Al_arg)
		{	
		::new (static_cast<void *>(&_Mypair._Get_second())) _Ty(::std:: forward<_Types>(_Args)...);
		}

	_Ty * _Getptr()
		{	
		return (reinterpret_cast<_Ty *>(&_Mypair._Get_second()));
		}

private:
	using _Myalty = _Rebind_alloc_t<_Alloc, _Ref_count_obj_alloc>;
	using _Mystoragety = aligned_union_t<1, _Ty>;

	virtual void _Destroy() noexcept override
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this() noexcept override
		{	
		_Myalty _Al = _Mypair._Get_first();
		allocator_traits<_Myalty>::destroy(_Al, this);
		_Deallocate_plain(_Al, this);
		}

	_Compressed_pair<_Myalty, _Mystoragety> _Mypair;
	};

	
template<class _Ty,
	class... _Types>
	 inline shared_ptr<_Ty> make_shared(_Types&&... _Args)
	{	
	const auto _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

	shared_ptr<_Ty> _Ret;
	_Ret._Set_ptr_rep_and_enable_shared(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc,
	class... _Types>
	 inline shared_ptr<_Ty> allocate_shared(const _Alloc& _Al_arg, _Types&&... _Args)
	{	
	using _Refoa = _Ref_count_obj_alloc<_Ty, _Alloc>;
	using _Alref_alloc = _Rebind_alloc_t<_Alloc, _Refoa>;
	using _Alref_traits = allocator_traits<_Alref_alloc>;
	_Alref_alloc _Alref(_Al_arg);

	const auto _Rx = _Alref_traits::allocate(_Alref, 1);

	try {
		_Alref_traits::construct(_Alref, _Unfancy(_Rx), _Al_arg, ::std:: forward<_Types>(_Args)...);
	} catch (...) {
		_Alref_traits::deallocate(_Alref, _Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Set_ptr_rep_and_enable_shared(_Rx->_Getptr(), _Unfancy(_Rx));
	return (_Ret);
	}

	
template<class _Ty>
	class weak_ptr
		: public _Ptr_base<_Ty>
	{	
public:
	constexpr weak_ptr() noexcept
		{	
		}

	weak_ptr(const weak_ptr& _Other) noexcept
		{	
		this->_Weakly_construct_from(_Other);
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		weak_ptr(const shared_ptr<_Ty2>& _Other) noexcept
		{	
		this->_Weakly_construct_from(_Other);
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		weak_ptr(const weak_ptr<_Ty2>& _Other) noexcept
		{	
		this->_Weakly_construct_from(_Other.lock());
		}

	weak_ptr(weak_ptr&& _Other) noexcept
		{	
		this->_Move_construct_from(::std:: move(_Other));
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		weak_ptr(weak_ptr<_Ty2>&& _Other) noexcept
		{	
		this->_Weakly_construct_from(_Other.lock());
		_Other.reset();
		}

	~weak_ptr() noexcept
		{	
		this->_Decwref();
		}

	weak_ptr& operator=(const weak_ptr& _Right) noexcept
		{	
		weak_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) noexcept
		{	
		weak_ptr(_Right).swap(*this);
		return (*this);
		}

	weak_ptr& operator=(weak_ptr&& _Right) noexcept
		{	
		weak_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(weak_ptr<_Ty2>&& _Right) noexcept
		{	
		weak_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
		{	
		weak_ptr(_Right).swap(*this);
		return (*this);
		}

	void reset() noexcept
		{	
		weak_ptr().swap(*this);
		}

	void swap(weak_ptr& _Other) noexcept
		{	
		this->_Swap(_Other);
		}

	 bool expired() const noexcept
		{	
		return (this->use_count() == 0);
		}

	 shared_ptr<_Ty> lock() const noexcept
		{	
		shared_ptr<_Ty> _Ret;
		(void) _Ret._Construct_from_weak(*this);
		return (_Ret);
		}
	};




#line 2005 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

template<class _Ty>
	void swap(weak_ptr<_Ty>& _Left, weak_ptr<_Ty>& _Right) noexcept
	{	
	_Left.swap(_Right);
	}

	
template<class _Ty>
	class enable_shared_from_this
	{	
public:
	using _Esft_type = enable_shared_from_this;

	 shared_ptr<_Ty> shared_from_this()
		{	
		return (shared_ptr<_Ty>(_Wptr));
		}

	 shared_ptr<const _Ty> shared_from_this() const
		{	
		return (shared_ptr<const _Ty>(_Wptr));
		}

	 weak_ptr<_Ty> weak_from_this() noexcept
		{	
		return (_Wptr);
		}

	 weak_ptr<const _Ty> weak_from_this() const noexcept
		{	
		return (_Wptr);
		}

protected:
	constexpr enable_shared_from_this() noexcept
		: _Wptr()
		{	
		}

	enable_shared_from_this(const enable_shared_from_this&) noexcept
		: _Wptr()
		{	
		}

	enable_shared_from_this& operator=(const enable_shared_from_this&) noexcept
		{	
		return (*this);
		}

	~enable_shared_from_this() = default;

private:
	template<class _Other,
		class _Yty>
		friend void _Enable_shared_from_this1(const shared_ptr<_Other>& _This, _Yty * _Ptr, true_type);

	mutable weak_ptr<_Ty> _Wptr;
	};


	

	
template<class _Ty>
	struct default_delete
	{	
	constexpr default_delete() noexcept = default;

	template<class _Ty2,
		enable_if_t<is_convertible_v<_Ty2 *, _Ty *>, int> = 0>
		default_delete(const default_delete<_Ty2>&) noexcept
		{	
		}

	void operator()(_Ty * _Ptr) const noexcept
		{	
		static_assert(0 < sizeof (_Ty),
			"can't delete an incomplete type");
		delete _Ptr;
		}
	};

template<class _Ty>
	struct default_delete<_Ty[]>
	{	
	constexpr default_delete() noexcept = default;

	template<class _Uty,
		enable_if_t<is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
		default_delete(const default_delete<_Uty[]>&) noexcept
		{	
		}

	template<class _Uty,
		enable_if_t<is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
		void operator()(_Uty * _Ptr) const noexcept
		{	
		static_assert(0 < sizeof (_Uty),
			"can't delete an incomplete type");
		delete[] _Ptr;
		}
	};

		
template<class _Ty,
	class _Dx_noref,
	class = void>
	struct _Get_deleter_pointer_type
	{	
	typedef _Ty * type;
	};

template<class _Ty,
	class _Dx_noref>
	struct _Get_deleter_pointer_type<_Ty, _Dx_noref, void_t<typename _Dx_noref::pointer>>
	{	
	typedef typename _Dx_noref::pointer type;
	};

	
template<class _Ty,
	class _Dx>
	class _Unique_ptr_base
	{	
public:
	typedef remove_reference_t<_Dx> _Dx_noref;
	typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

	template<class _Ptr2,
		class _Dx2>
		_Unique_ptr_base(_Ptr2 _Ptr, _Dx2&& _Dt)
		: _Mypair(_One_then_variadic_args_t(), ::std:: forward<_Dx2>(_Dt), _Ptr)
		{	
		}

	template<class _Ptr2>
		constexpr _Unique_ptr_base(_Ptr2 _Ptr)
		: _Mypair(_Zero_then_variadic_args_t(), _Ptr)
		{	
		}

	 _Dx& get_deleter() noexcept
		{	
		return (_Mypair._Get_first());
		}

	 const _Dx& get_deleter() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	pointer& _Myptr() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const pointer& _Myptr() const noexcept
		{	
		return (_Mypair._Get_second());
		}

	_Compressed_pair<_Dx, pointer> _Mypair;
	};

template<class _Dx2>
	using _Unique_ptr_enable_default_t = enable_if_t<conjunction_v<negation<is_pointer<_Dx2>>,
		is_default_constructible<_Dx2>>, int>;

	
template<class _Ty,
	class _Dx>	
	class unique_ptr
		: public _Unique_ptr_base<_Ty, _Dx>
	{	
public:
	typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	using _Mybase::get_deleter;

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr() noexcept
			: _Mybase(pointer())
		{	
		}

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr(nullptr_t) noexcept
			: _Mybase(pointer())
		{	
		}

	unique_ptr& operator=(nullptr_t) noexcept
		{	
		reset();
		return (*this);
		}

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		explicit unique_ptr(pointer _Ptr) noexcept
			: _Mybase(_Ptr)
		{	
		}

	template<class _Dx2 = _Dx,
		enable_if_t<is_constructible_v<_Dx2, const _Dx2&>, int> = 0>
		unique_ptr(pointer _Ptr, const _Dx& _Dt) noexcept
			: _Mybase(_Ptr, _Dt)
		{	
		}

	template<class _Dx2 = _Dx,
		enable_if_t<conjunction_v<negation<is_reference<_Dx2>>,
			is_constructible<_Dx2, _Dx2>>, int> = 0>
		unique_ptr(pointer _Ptr, _Dx&& _Dt) noexcept
			: _Mybase(_Ptr, ::std:: move(_Dt))
		{	
		}

	template<class _Dx2 = _Dx,
		enable_if_t<conjunction_v<is_reference<_Dx2>,
			is_constructible<_Dx2, remove_reference_t<_Dx2>>>, int> = 0>
		unique_ptr(pointer, remove_reference_t<_Dx>&&) = delete;

	unique_ptr(unique_ptr&& _Right) noexcept
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

	template<class _Ty2,
		class _Dx2,
		enable_if_t<conjunction_v<negation<is_array<_Ty2>>,
			is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer, pointer>,
			conditional_t<is_reference_v<_Dx>, is_same<_Dx2, _Dx>, is_convertible<_Dx2, _Dx>>
		>, int> = 0>
		unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
			: _Mybase(_Right.release(),
				::std:: forward<_Dx2>(_Right.get_deleter()))
		{	
		}

 
	template<class _Ty2,
		enable_if_t<conjunction_v<is_convertible<_Ty2 *, _Ty *>,
			is_same<_Dx, default_delete<_Ty>>>, int> = 0>
		unique_ptr(auto_ptr<_Ty2>&& _Right) noexcept
			: _Mybase(_Right.release())
		{	
		}
 #line 2262 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

	template<class _Ty2,
		class _Dx2,
		enable_if_t<conjunction_v<negation<is_array<_Ty2>>,
			is_assignable<_Dx&, _Dx2>,
			is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer, pointer>
		>, int> = 0>
		unique_ptr& operator=(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
		{	
		reset(_Right.release());
		this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
		return (*this);
		}

	unique_ptr& operator=(unique_ptr&& _Right) noexcept
		{	
		if (this != ::std:: addressof(_Right))
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
			}
		return (*this);
		}

	void swap(unique_ptr& _Right) noexcept
		{	
		_Swap_adl(this->_Myptr(), _Right._Myptr());
		_Swap_adl(this->get_deleter(), _Right.get_deleter());
		}

	~unique_ptr() noexcept
		{	
		if (get() != pointer())
			{
			this->get_deleter()(get());
			}
		}

	 add_lvalue_reference_t<_Ty> operator*() const
		{	
		return (*get());
		}

	 pointer operator->() const noexcept
		{	
		return (this->_Myptr());
		}

	 pointer get() const noexcept
		{	
		return (this->_Myptr());
		}

	explicit operator bool() const noexcept
		{	
		return (get() != pointer());
		}

	pointer release() noexcept
		{	
		pointer _Ans = get();
		this->_Myptr() = pointer();
		return (_Ans);
		}

	void reset(pointer _Ptr = pointer()) noexcept
		{	
		pointer _Old = get();
		this->_Myptr() = _Ptr;
		if (_Old != pointer())
			{
			this->get_deleter()(_Old);
			}
		}

	unique_ptr(const unique_ptr&) = delete;
	unique_ptr& operator=(const unique_ptr&) = delete;
	};

	
template<class _Ty,
	class _Dx>
	class unique_ptr<_Ty[], _Dx>
		: public _Unique_ptr_base<_Ty, _Dx>
	{	
public:
	typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	using _Mybase::get_deleter;

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr() noexcept
			: _Mybase(pointer())
		{	
		}

	template<class _Uty,
		class _Is_nullptr = is_same<_Uty, nullptr_t>>
		using _Enable_ctor_reset = enable_if_t<
			is_same_v<_Uty, pointer>
			|| _Is_nullptr::value
			|| (is_same_v<pointer, element_type *>
			&& is_pointer_v<_Uty>
			&& is_convertible_v<
				remove_pointer_t<_Uty>(*)[],
				element_type(*)[]
			>)>;

	template<class _Uty,
		class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0,
		class = _Enable_ctor_reset<_Uty>>
		explicit unique_ptr(_Uty _Ptr) noexcept
			: _Mybase(_Ptr)
		{	
		}

	template<class _Uty,
		class _Dx2 = _Dx,
		enable_if_t<is_constructible_v<_Dx2, const _Dx2&>, int> = 0,
		class = _Enable_ctor_reset<_Uty>>
		unique_ptr(_Uty _Ptr, const _Dx& _Dt) noexcept
			: _Mybase(_Ptr, _Dt)
		{	
		}

	template<class _Uty,
		class _Dx2 = _Dx,
		enable_if_t<conjunction_v<negation<is_reference<_Dx2>>,
			is_constructible<_Dx2, _Dx2>>, int> = 0,
		class = _Enable_ctor_reset<_Uty>>
		unique_ptr(_Uty _Ptr, _Dx&& _Dt) noexcept
			: _Mybase(_Ptr, ::std:: move(_Dt))
		{	
		}

	template<class _Uty,
		class _Dx2 = _Dx,
		enable_if_t<conjunction_v<is_reference<_Dx2>,
			is_constructible<_Dx2, remove_reference_t<_Dx2>>>, int> = 0>
		unique_ptr(_Uty, remove_reference_t<_Dx>&&) = delete;

	unique_ptr(unique_ptr&& _Right) noexcept
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

	unique_ptr& operator=(unique_ptr&& _Right) noexcept
		{	
		if (this != ::std:: addressof(_Right))
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: move(_Right.get_deleter());
			}
		return (*this);
		}

	template<class _Uty,
		class _Ex,
		class _More,
		class _UP_pointer = typename unique_ptr<_Uty, _Ex>::pointer,
		class _UP_element_type = typename unique_ptr<_Uty, _Ex>::element_type>
		using _Enable_conversion = enable_if_t<conjunction_v<
			is_array<_Uty>,
			is_same<pointer, element_type *>,
			is_same<_UP_pointer, _UP_element_type *>,
			is_convertible<_UP_element_type(*)[], element_type(*)[]>,
			_More>>;

	template<class _Uty,
		class _Ex,
		class = _Enable_conversion<_Uty, _Ex,
			conditional_t<is_reference_v<_Dx>, is_same<_Ex, _Dx>, is_convertible<_Ex, _Dx>>>>
		unique_ptr(unique_ptr<_Uty, _Ex>&& _Right) noexcept
			: _Mybase(_Right.release(),
				::std:: forward<_Ex>(_Right.get_deleter()))
		{	
		}

	template<class _Uty,
		class _Ex,
		class = _Enable_conversion<_Uty, _Ex, is_assignable<_Dx&, _Ex>>>
		unique_ptr& operator=(unique_ptr<_Uty, _Ex>&& _Right) noexcept
		{	
		reset(_Right.release());
		this->get_deleter() = ::std:: forward<_Ex>(_Right.get_deleter());
		return (*this);
		}

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr(nullptr_t) noexcept
			: _Mybase(pointer())
		{	
		}

	unique_ptr& operator=(nullptr_t) noexcept
		{	
		reset();
		return (*this);
		}

	void reset(nullptr_t = nullptr) noexcept
		{	
		reset(pointer());
		}

	void swap(unique_ptr& _Right) noexcept
		{	
		_Swap_adl(this->_Myptr(), _Right._Myptr());
		_Swap_adl(this->get_deleter(), _Right.get_deleter());
		}

	~unique_ptr() noexcept
		{	
		_Delete();
		}

	 _Ty& operator[](size_t _Idx) const
		{	
		return (get()[_Idx]);
		}

	 pointer get() const noexcept
		{	
		return (this->_Myptr());
		}

	explicit operator bool() const noexcept
		{	
		return (get() != pointer());
		}

	pointer release() noexcept
		{	
		pointer _Ans = get();
		this->_Myptr() = pointer();
		return (_Ans);
		}

	template<class _Uty,
		class = _Enable_ctor_reset<_Uty, false_type>>
		void reset(_Uty _Ptr) noexcept
		{	
		pointer _Old = get();
		this->_Myptr() = _Ptr;
		if (_Old != pointer())
			{
			this->get_deleter()(_Old);
			}
		}

	unique_ptr(const unique_ptr&) = delete;
	unique_ptr& operator=(const unique_ptr&) = delete;

private:
	void _Delete()
		{	
		if (get() != pointer())
			{
			this->get_deleter()(get());
			}
		}
	};


	
template<class _Ty,
	class... _Types,
	enable_if_t<!is_array_v<_Ty>, int> = 0>
	 inline unique_ptr<_Ty> make_unique(_Types&&... _Args)
	{	
	return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
	}

template<class _Ty,
	enable_if_t<is_array_v<_Ty> && extent_v<_Ty> == 0, int> = 0>
	 inline unique_ptr<_Ty> make_unique(size_t _Size)
	{	
	typedef remove_extent_t<_Ty> _Elem;
	return (unique_ptr<_Ty>(new _Elem[_Size]()));
	}

template<class _Ty,
	class... _Types,
	enable_if_t<extent_v<_Ty> != 0, int> = 0>
	void make_unique(_Types&&...) = delete;


	
template<class _Alloc>
	struct _Allocator_deleter
	{
	_Alloc _Al;

	using pointer = typename allocator_traits<_Alloc>::pointer;
	void operator()(pointer _Ptr) noexcept
		{	
		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_Ptr));
		_Al.deallocate(_Ptr, 1);
		}
	};

template<class _Alloc>
	using _Unique_ptr_alloc = unique_ptr<typename _Alloc::value_type, _Allocator_deleter<_Alloc>>;

template<class _Alloc,
	class... _Args>
	_Unique_ptr_alloc<_Alloc> _Make_unique_alloc(_Alloc& _Al, _Args&&... _Vals)
	{	
	auto _Ptr = _Al.allocate(1);
	try {
		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Ptr), ::std:: forward<_Args>(_Vals)...);
	} catch (...) {
		_Al.deallocate(_Ptr, 1);
	throw;
	}

	return (_Unique_ptr_alloc<_Alloc>(_Ptr, _Allocator_deleter<_Alloc>{_Al}));
	}

template<class _Ty,
	class _Dx,
	enable_if_t<_Is_swappable<_Dx>::value, int> = 0>
	void swap(unique_ptr<_Ty, _Dx>& _Left, unique_ptr<_Ty, _Dx>& _Right) noexcept
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	 bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	 bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	 bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
	typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
	typedef common_type_t<_Ptr1, _Ptr2> _Common;
	return (less<_Common>()(_Left.get(), _Right.get()));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	 bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	 bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	 bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Dx>
	 bool operator==(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t) noexcept
	{	
	return (!_Left);
	}

template<class _Ty,
	class _Dx>
	 bool operator==(nullptr_t, const unique_ptr<_Ty, _Dx>& _Right) noexcept
	{	
	return (!_Right);
	}

template<class _Ty,
	class _Dx>
	 bool operator!=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Dx>
	 bool operator!=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Dx>
	 bool operator<(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
	{	
	typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
	return (less<_Ptr>()(_Left.get(), _Right));
	}

template<class _Ty,
	class _Dx>
	 bool operator<(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
	{	
	typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
	return (less<_Ptr>()(_Left, _Right.get()));
	}

template<class _Ty,
	class _Dx>
	 bool operator>=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty,
	class _Dx>
	 bool operator>=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty,
	class _Dx>
	 bool operator>(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Dx>
	 bool operator>(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Dx>
	 bool operator<=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Dx>
	 bool operator<=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _OutTy,
	class _PxTy,
	class = void>
	struct _Can_stream_unique_ptr
		: false_type
	{};
template<class _OutTy,
	class _PxTy>
	struct _Can_stream_unique_ptr<_OutTy, _PxTy, void_t<
		decltype(::std:: declval<_OutTy>() << ::std:: declval<_PxTy>().get())>>
		: true_type
	{};

template<class _Elem,
	class _Traits,
	class _Yty,
	class _Dx,
	enable_if_t<_Can_stream_unique_ptr<basic_ostream<_Elem, _Traits>&, const unique_ptr<_Yty, _Dx>&>::value, int> = 0>
	basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Out, const unique_ptr<_Yty, _Dx>& _Px)
	{	
	_Out << _Px.get();
	return (_Out);
	}

		
enum class pointer_safety {	
	relaxed,
	preferred,
	strict
	};

inline void declare_reachable(void *)
	{	
	}

template<class _Ty> inline
	_Ty * undeclare_reachable(_Ty * _Ptr)
	{	
	return (_Ptr);
	}

inline void declare_no_pointers(char *, size_t)
	{	
	}

inline void undeclare_no_pointers(char *, size_t)
	{	
	}

inline pointer_safety get_pointer_safety() noexcept
	{	
	return (pointer_safety::relaxed);
	}

		
template<class _Ty = void>
	struct owner_less;	

template<class _Ty>
	struct owner_less<shared_ptr<_Ty>>
	{	
	 typedef shared_ptr<_Ty> first_argument_type;
	 typedef shared_ptr<_Ty> second_argument_type;
	 typedef bool result_type;

	 bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	 bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	 bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}
	};

template<class _Ty>
	struct owner_less<weak_ptr<_Ty>>
	{	
	 typedef weak_ptr<_Ty> first_argument_type;
	 typedef weak_ptr<_Ty> second_argument_type;
	 typedef bool result_type;

	 bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	 bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	 bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}
	};

template<>
	struct owner_less<void>
	{	
	using is_transparent = int;

	template<class _Ty,
		class _Uty>
		 bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	template<class _Ty,
		class _Uty>
		 bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	template<class _Ty,
		class _Uty>
		 bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	template<class _Ty,
		class _Uty>
		 bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}
	};

	
template<class _Ty,
	class _Dx>
	struct hash<unique_ptr<_Ty, _Dx>>
		: _Conditionally_enabled_hash<unique_ptr<_Ty, _Dx>,
			is_default_constructible_v<hash<typename unique_ptr<_Ty, _Dx>::pointer>>>
	{	
	static size_t _Do_hash(const unique_ptr<_Ty, _Dx>& _Keyval)
			noexcept(_Is_nothrow_hashable<typename unique_ptr<_Ty, _Dx>::pointer>::value) 
		{	
		return (hash<typename unique_ptr<_Ty, _Dx>::pointer>{}(_Keyval.get()));
		}
	};

template<class _Ty>
	struct hash<shared_ptr<_Ty>>
	{	
	 typedef shared_ptr<_Ty> argument_type;
	 typedef size_t result_type;

	 size_t operator()(const shared_ptr<_Ty>& _Keyval) const noexcept
		{	
		return (hash<typename shared_ptr<_Ty>::element_type *>()(_Keyval.get()));
		}
	};

		
inline void * align(size_t _Bound, size_t _Size, void *& _Ptr, size_t& _Space) noexcept
	{	
	size_t _Off = static_cast<size_t>(reinterpret_cast<uintptr_t>(_Ptr) & (_Bound - 1));
	if (_Off != 0)
		{
		_Off = _Bound - _Off;	
		}

	if (_Space < _Off || _Space - _Off < _Size)
		{
		return (nullptr);
		}

	
	_Ptr = static_cast<char *>(_Ptr) + _Off;
	_Space -= _Off;
	return (_Ptr);
	}



		
extern "C" {
 void __cdecl _Lock_shared_ptr_spin_lock();
 void __cdecl _Unlock_shared_ptr_spin_lock();
}

		
struct _Shared_ptr_spin_lock
	{	
	_Shared_ptr_spin_lock()
		{	
		_Lock_shared_ptr_spin_lock();
		}

	~_Shared_ptr_spin_lock() noexcept
		{	
		_Unlock_shared_ptr_spin_lock();
		}
	};

template<class _Ty>
	 inline bool atomic_is_lock_free(const shared_ptr<_Ty> *)
	{	
	return (false);
	}

template<class _Ty>
	 inline shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> * _Ptr,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	shared_ptr<_Ty> _Result = *_Ptr;
	return (_Result);
	}

template<class _Ty>
	 inline shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> * _Ptr)
	{	
	return (::std:: atomic_load_explicit(_Ptr, memory_order_seq_cst));
	}

template<class _Ty> inline
	void atomic_store_explicit(shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	_Ptr->swap(_Other);
	}

template<class _Ty> inline
	void atomic_store(shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other)
	{	
	::std:: atomic_store_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst);
	}

template<class _Ty> inline
	shared_ptr<_Ty> atomic_exchange_explicit(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	_Ptr->swap(_Other);
	return (_Other);
	}

template<class _Ty> inline
	shared_ptr<_Ty> atomic_exchange(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other)
	{	
	return (::std:: atomic_exchange_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst));
	}

template<class _Ty> inline
	bool atomic_compare_exchange_weak_explicit(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp, shared_ptr<_Ty> _Value,
		memory_order, memory_order)
	{	
	shared_ptr<_Ty> _Old_exp;	
	_Shared_ptr_spin_lock _Lock;
	bool _Success = _Ptr->get() == _Exp->get()
		&& !_Ptr->owner_before(*_Exp)
		&& !_Exp->owner_before(*_Ptr);
	if (_Success)
		_Ptr->swap(_Value);
	else
		{	
		_Exp->swap(_Old_exp);
		*_Exp = *_Ptr;
		}
	return (_Success);
	}

template<class _Ty> inline
	bool atomic_compare_exchange_weak(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp,
			shared_ptr<_Ty> _Value)
	{	
	return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
		memory_order_seq_cst, memory_order_seq_cst));
	}

template<class _Ty> inline
	bool atomic_compare_exchange_strong_explicit(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp, shared_ptr<_Ty> _Value,
		memory_order, memory_order)
	{	
	return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
		memory_order_seq_cst, memory_order_seq_cst));
	}

template<class _Ty> inline
	bool atomic_compare_exchange_strong(
	shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp,
		shared_ptr<_Ty> _Value)
	{	
	return (::std:: atomic_compare_exchange_strong_explicit(_Ptr, _Exp, ::std:: move(_Value),
		memory_order_seq_cst, memory_order_seq_cst));
	}


namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using ::std:: allocate_shared;
using ::std:: bad_weak_ptr;
using ::std:: const_pointer_cast;
using ::std:: dynamic_pointer_cast;
using ::std:: enable_shared_from_this;
using ::std:: get_deleter;
using ::std:: make_shared;
using ::std:: shared_ptr;
using ::std:: static_pointer_cast;
using ::std:: swap;
using ::std:: weak_ptr;
}
#line 3059 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"

}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3066 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"
#line 3067 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\memory"





#line 12 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xfacet"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 






namespace std {
	
class __declspec(dllimport) _Facet_base
	{	
public:
	virtual  ~_Facet_base() noexcept
		{	
		}

	
	virtual void  _Incref() = 0;

	
	virtual _Facet_base *  _Decref() = 0;
	};

 


#line 40 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *);
 #line 42 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xfacet"
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 48 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xfacet"
#line 49 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xfacet"

 



#line 14 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Dummy>
	class _Locbase
	{	
public:
	 static const int collate = ((1 << (1)) >> 1);
	 static const int ctype = ((1 << (2)) >> 1);
	 static const int monetary = ((1 << (3)) >> 1);
	 static const int numeric = ((1 << (4)) >> 1);
	 static const int time = ((1 << (5)) >> 1);
	 static const int messages = ((1 << (6)) >> 1);
	 static const int all = (((1 << ((6 + 1))) >> 1) - 1);
	 static const int none = 0;
	};

template<class _Dummy>
	const int _Locbase<_Dummy>::collate;
template<class _Dummy>
	const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
	const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
	const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
	const int _Locbase<_Dummy>::time;
template<class _Dummy>
	const int _Locbase<_Dummy>::messages;
template<class _Dummy>
	const int _Locbase<_Dummy>::all;
template<class _Dummy>
	const int _Locbase<_Dummy>::none;

		
class locale;
template<class _Facet>
	const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
	class collate;

struct __declspec(dllimport) _Crt_new_delete
	{	
  
	void * __cdecl operator new(size_t _Size)
		{	
		void * _Ptr = operator new(_Size, nothrow);
		if (!_Ptr)
			_Xbad_alloc();
		return (_Ptr);
		}

	void * __cdecl operator new(size_t _Size, const nothrow_t&) noexcept
		{	
		return (_malloc_dbg(_Size > 0 ? _Size : 1, 2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale", 75));
		}

	void __cdecl operator delete(void * _Ptr) noexcept
		{	
		:: free(_Ptr);
		}

	void __cdecl operator delete(void * _Ptr, const nothrow_t&) noexcept
		{	
		operator delete(_Ptr);
		}

	void * __cdecl operator new(size_t, void *_Ptr) noexcept
		{	
		return (_Ptr);
		}

	void __cdecl operator delete(void *, void *) noexcept
		{	
		}
  #line 97 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
	};

class locale
	: public _Locbase<int>, public _Crt_new_delete
	{	
public:
	typedef int category;

			
	class __declspec(dllimport) id
		{	
	public:
		 id(size_t _Val = 0)
			: _Id(_Val)
			{	
			}

		 operator size_t()
			{	
			if (_Id == 0)
				{	
				{ ::std:: _Lockit _Lock(0);
					if (_Id == 0)
						{
						_Id = static_cast<size_t>(++_Id_cnt);
						}
				}
				}
			return (_Id);
			}

	private:
		size_t _Id;	

		 static int _Id_cnt;

	public:
		 id(const id&) = delete;
		id&  operator=(const id&) = delete;
		};

	class _Locimp;

			
	class __declspec(dllimport) facet
		: public _Facet_base, public _Crt_new_delete
		{	
	public:
		static size_t __cdecl _Getcat(const facet ** = nullptr,
			const locale * = nullptr)
			{	
			return (static_cast<size_t>(-1));
			}

		virtual void  _Incref() override
			{	
			_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Myrefs));
			}

		virtual _Facet_base * _Decref() override
			{	
			if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Myrefs)) == 0)
				{
				return (this);
				}

			return (nullptr);
			}

	private:
		_Atomic_counter_t _Myrefs;	

	protected:
		explicit  facet(size_t _Initrefs = 0)
			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	
			{	
			}

		virtual  ~facet() noexcept
			{	
			}

	public:
		 facet(const facet&) = delete;
		facet&  operator=(const facet&) = delete;
		};

			
	class __declspec(dllimport) _Locimp
		: public facet
		{	
	protected:
		 ~_Locimp() noexcept
		{	
		_Locimp_dtor(this);
		}

	private:
		static  _Locimp *__cdecl
			_New_Locimp(bool _Transparent = false);
		static  _Locimp *__cdecl
			_New_Locimp(const _Locimp& _Right);

		static  void __cdecl
			_Locimp_dtor(_Locimp *);
		static  void __cdecl
			_Locimp_Addfac(_Locimp *, facet *, size_t);	
		static void __cdecl
			_Locimp_ctor(_Locimp *, const _Locimp&);

		friend locale;

		 _Locimp(bool _Transparent)
			: locale::facet(1), _Facetvec(nullptr), _Facetcount(0),
				_Catmask(none), _Xparent(_Transparent),
					_Name("*")
			{	
			}

		 _Locimp(const _Locimp& _Right)
			: locale::facet(1), _Facetvec(nullptr), _Facetcount(_Right._Facetcount),
				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
					_Name(_Right._Name.c_str())
			{	
			_Locimp_ctor(this, _Right);
			}

		void  _Addfac(facet *_Pfacet, size_t _Id)
			{	
			_Locimp_Addfac(this, _Pfacet, _Id);
			}

		static _Locimp *__cdecl _Makeloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		static void __cdecl _Makewloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

 
		static void __cdecl _Makeushloc(const _Locinfo&,
			category, _Locimp *, const locale *);	
 #line 239 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

		static void __cdecl _Makexloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		facet **_Facetvec;	
		size_t _Facetcount;	
		category _Catmask;	
		bool _Xparent;	
		_Yarn<char> _Name;	

		 static _Locimp *_Clocptr;

public:
		_Locimp&  operator=(const _Locimp&) = delete;
		};

	template<class _Elem,
		class _Traits,
		class _Alloc>
		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
		{	
		const auto& _Coll_fac = use_facet<::std:: collate<_Elem>>(*this);

		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
		}

	template<class _Facet>
		locale combine(const locale& _Loc) const
		{	
		_Facet *_Facptr;

		try {
			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
		} catch (...) {
			_Xruntime_error("locale::combine facet missing");
		}

		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
		_Newimp->_Addfac(_Facptr, _Facet::id);
		_Newimp->_Catmask = none;
		_Newimp->_Name = "*";
		return (locale(_Newimp));
		}

	template<class _Facet>
		locale(const locale& _Loc, const _Facet *_Facptr)
			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		if (_Facptr != nullptr)
			{	
			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
			_Ptr->_Catmask = none;
			_Ptr->_Name = "*";
			}
		}

	locale(_Uninitialized)
		{	
		}

	locale(const locale& _Right) noexcept
		: _Ptr(_Right._Ptr)
		{	
		_Ptr->_Incref();
		}

	locale() noexcept
		: _Ptr(_Init(true))
		{	
		}

 
	locale(const locale& _Loc, const locale& _Other,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		if (_Cat != none)
			{	
			try {
				{ _Locinfo _Lobj;
					_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
					_Lobj._Addcats(_Loc._Ptr->_Catmask,
						_Loc.name().c_str());
					_Lobj._Addcats(_Other._Ptr->_Catmask,
						_Other.name().c_str());
					_Ptr->_Catmask = _Loc._Ptr->_Catmask
						| _Other._Ptr->_Catmask;
					_Ptr->_Name = _Lobj._Getname();
				}
			} catch (...) {
			delete _Ptr->_Decref();
			throw;
			}
			}
		}

private:
	void _Construct(const string &_Str,
		category _Cat)
		{	
		bool _Bad = false;
		_Init();
		if (_Cat != none)
			{	
			try {
				{ _Locinfo _Lobj(_Cat, _Str.c_str());
					if (_Badname(_Lobj))
						_Bad = true;
					else
						{	
						_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr);
						_Ptr->_Catmask = _Cat;
						_Ptr->_Name = _Str.c_str();
						}
				}
			} catch (...) {
			delete _Ptr->_Decref();
			throw;
			}
			}

		if (_Bad)
			{	
			delete _Ptr->_Decref();
			_Xruntime_error("bad locale name");
			}
		}

public:
	explicit locale(const char *_Locname,
		category _Cat = all)
		: _Ptr(_Locimp::_New_Locimp())
		{	
		
		
		if (_Locname == nullptr)
			_Xruntime_error("bad locale name");
		_Construct(_Locname, _Cat);
		}

	locale(const locale& _Loc, const char *_Locname,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		
		
		if (_Locname == nullptr)
			_Xruntime_error("bad locale name");
		_Construct(_Locname, _Cat);
		}

	explicit locale(const string& _Str,
		category _Cat = all)
		: _Ptr(_Locimp::_New_Locimp())
		{	
		_Construct(_Str, _Cat);
		}

	locale(const locale& _Loc, const string& _Str,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		_Construct(_Str, _Cat);
		}
 #line 406 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

	~locale() noexcept
		{	
		if (_Ptr != nullptr)
			delete _Ptr->_Decref();
		}

	locale& operator=(const locale& _Right) noexcept
		{	
		if (_Ptr != _Right._Ptr)
			{	
			delete _Ptr->_Decref();
			_Ptr = _Right._Ptr;
			_Ptr->_Incref();
			}
		return (*this);
		}

	string name() const
		{	
		return (_Ptr == nullptr ? string() : _Ptr->_Name.c_str());
		}

	  const char *c_str() const
		{	
		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());
		}

	const facet *_Getfacet(size_t _Id) const
		{	
		const facet *_Facptr = _Id < _Ptr->_Facetcount
			? _Ptr->_Facetvec[_Id] : nullptr;	
		if (_Facptr != nullptr || !_Ptr->_Xparent)
			return (_Facptr);	
		else
			{	
			locale::_Locimp *_Ptr0 = _Getgloballocale();
			return (_Id < _Ptr0->_Facetcount
				? _Ptr0->_Facetvec[_Id]	
				: nullptr);	
			}
		}

	 bool operator==(const locale& _Loc) const
		{	
		return (_Ptr == _Loc._Ptr
			|| (name().compare("*") != 0
				&& name().compare(_Loc.name()) == 0));
		}

	 bool operator!=(const locale& _Right) const
		{	
		return (!(*this == _Right));
		}

	static  const locale& __cdecl
		classic();	

	static  locale __cdecl
		global(const locale&);	

	static  locale __cdecl
		empty();	

private:
	locale(_Locimp *_Ptrimp)
		: _Ptr(_Ptrimp)
		{	
		}

	static  _Locimp *__cdecl
		_Init(bool _Do_incref = false);	
	static  _Locimp *__cdecl
		_Getgloballocale();
	static  void __cdecl
		_Setgloballocale(void *);

	bool _Badname(const _Locinfo& _Lobj)
		{	
		return (:: strcmp(_Lobj._Getname(), "*") == 0);
		}

	_Locimp *_Ptr;	
	};

		
template<class _Facet>
	struct _Facetptr
	{	
	 static const locale::facet *_Psave;
	};

template<class _Facet>
	 const locale::facet *_Facetptr<_Facet>::
		_Psave = nullptr;

template<class _Facet> inline
	const _Facet& __cdecl use_facet(const locale& _Loc)

	{	
	{ ::std:: _Lockit _Lock(0);	
		const locale::facet *_Psave =
			_Facetptr<_Facet>::_Psave;	

		const size_t _Id = _Facet::id;
		const locale::facet *_Pf = _Loc._Getfacet(_Id);

		if (_Pf == nullptr)
			{
			if (_Psave != nullptr)
				{
				_Pf = _Psave;	
				}
			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))
				{
 
				throw bad_cast{};	
 

#line 526 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
				}
			else
				{	
				auto _Pfmod = const_cast<locale::facet *>(_Psave);
				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

 

#line 535 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
				_Facet_Register(_Pfmod);
 #line 537 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

				_Pfmod->_Incref();
				_Facetptr<_Facet>::_Psave = _Psave;
				_Pf = _Psave;

				(void) _Psave_guard.release();
				}
			}

		return (static_cast<const _Facet&>(*_Pf));	
	}
	}	

		
template<class _Elem,
	class _InIt> inline
	int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
		const _Elem *_Ptr)
	{	
	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
		if (_Ptr[_Off] == _Ptr[0])
			++_Numfields;	
	string _Str(_Numfields, '\0');	

	int _Ans = -2;	
	for (size_t _Column = 1; ; ++_Column, (void)++_First, _Ans = -1)
		{	
		bool _Prefix = false;	
		size_t _Off = 0;	
		size_t _Field = 0;	

		for (; _Field < _Numfields; ++_Field)
			{	
			while (_Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0])
				{	
				++_Off;
				}

			if (_Str[_Field] != '\0')
				{
				_Off += _Str[_Field];	
				}
			else if (_Ptr[_Off += _Column] == _Ptr[0] || _Ptr[_Off] == (_Elem)0)
				{	
				_Str[_Field] = (char)(_Column < 127 ? _Column : 127);	
				_Ans = (int)_Field;	
				}
			else if (_First == _Last || _Ptr[_Off] != *_First)
				{
				_Str[_Field] = (char)(_Column < 127 ? _Column : 127);	
				}
			else
				{
				_Prefix = true;	
				}
			}

		if (!_Prefix || _First == _Last)
			break;	
		}
	return (_Ans);	
	}

		
template<class _Elem> inline
	char __cdecl _Maklocbyte(_Elem _Char,
		const _Locinfo::_Cvtvec&)
	{	
	return ((char)(unsigned char)_Char);
	}

template<> inline
	char __cdecl _Maklocbyte(wchar_t _Char,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {};
	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}

 
template<> inline
	char __cdecl _Maklocbyte(unsigned short _Char,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {};
	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}
 #line 629 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

		
template<class _Elem> inline
	_Elem __cdecl _Maklocchr(char _Byte, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	return ((_Elem)(unsigned char)_Byte);
	}

template<> inline
	wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	wchar_t _Wc = L'\0';
	mbstate_t _Mbst1 = {};
	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}

 
template<> inline
	unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	unsigned short _Wc = (unsigned short)0;
	mbstate_t _Mbst1 = {};
	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}
 #line 659 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

		
template<class _Elem> inline
	_Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	size_t _Count = :: strlen(_Ptr) + 1;

	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),
		2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale", 668);

	if (!_Ptrdest)
		_Xbad_alloc();

	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

	return (_Ptrdest);
	}

template<> inline
	wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	wchar_t _Wc;
	mbstate_t _Mbst1 = {};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
		2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale", 698);

	if (!_Ptrdest)
		_Xbad_alloc();
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {};

	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';

	return (_Ptrdest);
	}

 
template<> inline
	unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	unsigned short _Wc;
	mbstate_t _Mbst1 = {};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		{
		if ((_Bytes =
			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			{
			break;
			}
		}

	++_Wchars;	

	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Wchars, sizeof (wchar_t),
		2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale", 740);

	if (!_Ptrdest)
		{
		_Xbad_alloc();
		}

	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {};
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		{
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			{
			break;
			}
		}

	*_Ptrnext = L'\0';
	return ((unsigned short *)_Ptrdest);
	}
 #line 762 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

		
class __declspec(dllimport) codecvt_base
	: public locale::facet
	{	
public:
	enum
		{	
		ok, partial, error, noconv};
	typedef int result;

	 codecvt_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	bool  always_noconv() const noexcept
		{	
		return (do_always_noconv());
		}

	int  max_length() const noexcept
		{	
		return (do_max_length());
		}

	int  encoding() const noexcept
		{	
		return (do_encoding());
		}

	 ~codecvt_base() noexcept
		{	
		}

protected:
	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return (1);
		}

	virtual int  do_encoding() const noexcept
		{	
		return (1);	
		}
	};

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt
		: public codecvt_base
	{	
public:
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State, _First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;	

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Locinfo());
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (is_same_v<_Byte, _Elem>);
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		_Mid1 = _First1;
		_Mid2 = _First2;
		if (is_same_v<_Byte, _Elem>)
			{
			return (noconv);	
			}

		
		for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
			{
			*_Mid2 = (_Elem)*_Mid1;
			}

		return (ok);
		}

	virtual result  do_out(_Statype&,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Mid1 = _First1;
		_Mid2 = _First2;
		if (is_same_v<_Byte, _Elem>)
			{
			return (noconv);	
			}

		
		for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
			{
			*_Mid2 = (_Byte)*_Mid1;
			}

		return (ok);
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
		{	
		_Mid2 = _First2;
		return (ok);	
		}

	virtual int  do_length(_Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (static_cast<int>(_Min_value(_Count, static_cast<size_t>(_Last1 - _First1)))); 
		}
	};

		





template<class _Elem,
	class _Byte,
	class _Statype>
	 locale::id codecvt<_Elem, _Byte, _Statype>::id;





		
enum _Codecvt_mode {
	_Consume_header = 4,
	_Generate_header = 2
	};

		
template<>
	class __declspec(dllimport) codecvt<char16_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
	typedef char16_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
		{	
		_Init(_Lobj);
		}

	 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			{
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Ploc->c_str()));
			}

		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{	
			unsigned char _By = (unsigned char)*_Mid1;
			unsigned long _Ch;
			int _Nextra, _Nskip;

			if (*_Pstate > 1)
				{
				if (_By < 0x80 || 0xc0 <= _By)
					{
					return (_Mybase::error);	
					}

				
				++_Mid1;
				*_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
				*_Pstate = 1;
				continue;
				}

			if (_By < 0x80)
				{
				_Ch = _By;
				_Nextra = 0;
				}
			else if (_By < 0xc0)
				{	
				++_Mid1;
				return (_Mybase::error);
				}
			else if (_By < 0xe0)
				{
				_Ch = static_cast<unsigned long>(_By & 0x1f);
				_Nextra = 1;
				}
			else if (_By < 0xf0)
				{
				_Ch = static_cast<unsigned long>(_By & 0x0f);
				_Nextra = 2;
				}
			else if (_By < 0xf8)
				{
				_Ch = static_cast<unsigned long>(_By & 0x07);
				_Nextra = 3;
				}
			else
				{
				_Ch = static_cast<unsigned long>(_By & 0x03);
				_Nextra = _By < 0xfc ? 4 : 5;
				}

			_Nskip = _Nextra < 3 ? 0 : 1;	
			_First1 = _Mid1;	

			if (_Nextra == 0)
				{
				++_Mid1;
				}
			else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
				{
				break;	
				}
			else
				{
				for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
					{
					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
						{
						return (_Mybase::error);	
						}
					else
						{
						_Ch = _Ch << 6 | (_By & 0x3f);
						}
					}
				}

			if (0 < _Nskip)
				{
				_Ch <<= 6;	
				}

			if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
				{
				return (_Mybase::error);	
				}

			if (0xffff < _Ch)
				{	
				unsigned short _Ch0 =
					(unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

				*_Mid2++ = (_Elem)_Ch0;
				*_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
				continue;
				}

			if (_Nskip != 0)
				{
				if (_Mid1 == _Last1)
					{	
					_Mid1 = _First1;
					break;
					}

				if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
					{
					return (_Mybase::error);	
					}

				_Ch |= _By & 0x3f;	
				}

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;

				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
					{	
					const result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
						_First2, _Last2, _Mid2);

					if (_Ans == _Mybase::partial)
						{	
						*_Pstate = 0;
						_Mid1 = _First1;
						}

					return (_Ans);
					}
				}

			*_Mid2++ = (_Elem)_Ch;
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{	
			unsigned long _Ch;
			const unsigned short _Ch1 = (unsigned short)*_Mid1;
			bool _Save = false;

			if (1 < *_Pstate)
				{	
				if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
					return (_Mybase::error);	
				_Ch = static_cast<unsigned long>((*_Pstate << 10) | (_Ch1 - 0xdc00));
				}
			else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
				{	
				_Ch = static_cast<unsigned long>((_Ch1 - 0xd800 + 0x0040) << 10);
				_Save = true;	
				}
			else
				_Ch = _Ch1;	

			_Byte _By;
			int _Nextra;

			if (_Ch < 0x0080)
				{
				_By = (_Byte)_Ch;
				_Nextra = 0;
				}
			else if (_Ch < 0x0800)
				{
				_By = (_Byte)(0xc0 | _Ch >> 6);
				_Nextra = 1;
				}
			else if (_Ch < 0x10000)
				{
				_By = (_Byte)(0xe0 | _Ch >> 12);
				_Nextra = 2;
				}
			else
				{
				_By = (_Byte)(0xf0 | _Ch >> 18);
				_Nextra = 3;
				}

			int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

			if (_Last2 - _Mid2 < _Nput)
				{
				break;	
				}

			if (*_Pstate == 0 && (_Mode & _Generate_header) != 0)
				{
				if (_Last2 - _Mid2 < 3 + _Nput)
					{
					break;	
					}

				
				*_Mid2++ = (_Byte)(unsigned char)0xef;
				*_Mid2++ = (_Byte)(unsigned char)0xbb;
				*_Mid2++ = (_Byte)(unsigned char)0xbf;
				}

			++_Mid1;
			if (_Save || _Nextra < 3)
				{	
				*_Mid2++ = _By;
				--_Nput;
				}

			for (; 0 < _Nput; --_Nput)
				{
				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
				}

			*_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid2 = _First2;

		return (1 < *_Pstate
			? _Mybase::error : _Mybase::ok);	
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		size_t _Wchars = 0;
		_Statype _Mystate = _State;

		while (_Wchars < _Count && _First1 != _Last1)
			{	
			const _Byte *_Mid1;
			_Elem *_Mid2;
			_Elem _Ch;
			const auto _Result = do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, &_Ch + 1, _Mid2);
			if (_Result == _Mybase::noconv)
				{
				_Wchars += static_cast<size_t>(_Last1 - _First1);
				break;
				}

			if (_Result == _Mybase::ok)
				{
				if (_Mid2 == &_Ch + 1)
					{
					++_Wchars;	
					}

				_First1 = _Mid1;
				continue;
				}

			break;	
			}

		return (static_cast<int>(_Min_value(static_cast<size_t>(2147483647), _Wchars)));
		}

	virtual bool  do_always_noconv() const noexcept override
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept override
		{	
		return ((_Mode & _Consume_header) != 0 ? 9	
			: (_Mode & _Generate_header) != 0 ? 7	
			: 6);	
		}

	virtual int do_encoding() const noexcept override
		{	
		return (0);	
		}

private:
	unsigned long _Maxcode;	
	_Codecvt_mode _Mode;	
	};

		
template<>
	class __declspec(dllimport) codecvt<char32_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
	typedef char32_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
		{	
		_Init(_Lobj);
		}

	 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		char *_Pstate = (char *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{	
			unsigned char _By = (unsigned char)*_Mid1;
			unsigned long _Ch;
			int _Nextra;

			if (_By < 0x80)
				{
				_Ch = _By;
				_Nextra = 0;
				}
			else if (_By < 0xc0)
				{	
				++_Mid1;
				return (_Mybase::error);
				}
			else if (_By < 0xe0)
				{
				_Ch = static_cast<unsigned long>(_By & 0x1f);
				_Nextra = 1;
				}
			else if (_By < 0xf0)
				{
				_Ch = static_cast<unsigned long>(_By & 0x0f);
				_Nextra = 2;
				}
			else if (_By < 0xf8)
				{
				_Ch = static_cast<unsigned long>(_By & 0x07);
				_Nextra = 3;
				}
			else
				{
				_Ch = static_cast<unsigned long>(_By & 0x03);
				_Nextra = _By < 0xfc ? 4 : 5;
				}

			if (_Nextra == 0)
				{
				++_Mid1;
				}
			else if (_Last1 - _Mid1 < _Nextra + 1)
				{
				break;	
				}
			else
				{
				for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
					{
					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
						{
						return (_Mybase::error);	
						}
					else
						{
						_Ch = _Ch << 6 | (_By & 0x3f);
						}
					}
				}

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;

				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
					{	
					const result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
						_First2, _Last2, _Mid2);

					if (_Ans == _Mybase::partial)
						{	
						*_Pstate = 0;
						_Mid1 = _First1;
						}
					return (_Ans);
					}
				}

			if (_Maxcode < _Ch)
				{
				return (_Mybase::error);	
				}

			*_Mid2++ = (_Elem)_Ch;
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		char *_Pstate = (char *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{	
			_Byte _By;
			int _Nextra;
			unsigned long _Ch = (unsigned long)*_Mid1;

			if (_Maxcode < _Ch)
				return (_Mybase::error);

			if (_Ch < 0x0080)
				{
				_By = (_Byte)_Ch;
				_Nextra = 0;
				}
			else if (_Ch < 0x0800)
				{
				_By = (_Byte)(0xc0 | _Ch >> 6);
				_Nextra = 1;
				}
			else if (_Ch < 0x00010000)
				{
				_By = (_Byte)(0xe0 | _Ch >> 12);
				_Nextra = 2;
				}
			else if (_Ch < 0x00200000)
				{
				_By = (_Byte)(0xf0 | _Ch >> 18);
				_Nextra = 3;
				}
			else if (_Ch < 0x04000000)
				{
				_By = (_Byte)(0xf8 | _Ch >> 24);
				_Nextra = 4;
				}
			else
				{
				_By = (_Byte)(0xfc | (_Ch >> 30 & 0x03));
				_Nextra = 5;
				}

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;
				if ((_Mode & _Generate_header) != 0)
					{
					if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
						{
						return (_Mybase::partial);	
						}

					
					*_Mid2++ = (_Byte)(unsigned char)0xef;
					*_Mid2++ = (_Byte)(unsigned char)0xbb;
					*_Mid2++ = (_Byte)(unsigned char)0xbf;
					}
				}

			if (_Last2 - _Mid2 < 1 + _Nextra)
				{
				break;	
				}

			++_Mid1;
			for (*_Mid2++ = _By; 0 < _Nextra; )
				{
				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
				}
			}
		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		_Mid2 = _First2;

		return (_Mybase::ok);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		size_t _Wchars = 0;
		_Statype _Mystate = _State;

		while (_Wchars < _Count && _First1 != _Last1)
			{	
			const _Byte *_Mid1;
			_Elem *_Mid2;
			_Elem _Ch;
			const auto _Result = do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, &_Ch + 1, _Mid2);
			if (_Result == _Mybase::noconv)
				{
				_Wchars += static_cast<size_t>(_Last1 - _First1);
				break;
				}

			if (_Result == _Mybase::ok)
				{
				if (_Mid2 == &_Ch + 1)
					{
					++_Wchars;	
					}

				_First1 = _Mid1;
				continue;
				}

			break;	
			}

		return (static_cast<int>(_Min_value(static_cast<size_t>(2147483647), _Wchars)));
		}

	virtual bool  do_always_noconv() const noexcept override
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept override
		{	
		return ((_Mode & (_Consume_header | _Generate_header)) != 0
			? 9 : 6);
		}

	virtual int  do_encoding() const noexcept override
		{	
		return ((_Mode & (_Consume_header | _Generate_header)) != 0
			? -1 : 0);	
		}

private:
	unsigned long _Maxcode;	
	_Codecvt_mode _Mode;	
	};

		
template<>
	class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef wchar_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		_Statype _Mystate{};
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		_Mid1 = _First1;
		_Mid2 = _First2;
		for (;;)
			{
			if (_Mid1 == _Last1)
				{
				return (ok);
				}

			if (_Mid2 == _Last2)
				{
				return (partial);
				}

			int _Bytes = _Mbrtowc(_Mid2, _Mid1, static_cast<size_t>(_Last1 - _Mid1), &_Mystate, &_Cvt);
			switch (_Bytes)
				{
				case -2:	
					return (partial);

				case -1:	
					return (error);

				case 0:	
					_Bytes = 1;
					

				default:	
					_Mid1 += _Bytes;
					++_Mid2;
					break;
				}
			}
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		_Mid1 = _First1;
		_Mid2 = _First2;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{
			if ((int)5 <= _Last2 - _Mid2)
				{
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					{
					return (error);	
					}
				else
					{
					++_Mid1;
					_Mid2 += _Bytes;
					}
				}
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					{
					return (error);	
					}
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					break;
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
					++_Mid1;
					_Mid2 += _Bytes;
					}
				}
			}

		return (_Mid1 == _Last1 ? ok : partial);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Adl_verify_range(_First2, _Last2);
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(_Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		_Adl_verify_range(_First1, _Last1);
		size_t _Wchars = 0;
		_Statype _Mystate{};

		while (_Wchars < _Count && _First1 != _Last1)
			{
			_Elem _Ch;
			int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast<size_t>(_Last1 - _First1), &_Mystate, &_Cvt);
			if (_Bytes < 0)
				{	
				break;
				}

			if (_Bytes == 0)
				{	
				_Bytes = 1;
				}

			
			_First1 += _Bytes;
			++_Wchars;
			}

		return (static_cast<int>(_Min_value(static_cast<size_t>(2147483647), _Wchars)));
		}

	virtual bool  do_always_noconv() const noexcept override
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept override
		{	
		return (5);
		}

	virtual int  do_encoding() const noexcept override
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};

 
		
template<>
	class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef unsigned short _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		_Statype _Mystate{};
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		_Mid1 = _First1;
		_Mid2 = _First2;
		for (;;)
			{
			if (_Mid1 == _Last1)
				{
				return (ok);
				}

			if (_Mid2 == _Last2)
				{
				return (partial);
				}

			int _Bytes = _Mbrtowc(reinterpret_cast<wchar_t *>(_Mid2), _Mid1,
				static_cast<size_t>(_Last1 - _Mid1), &_Mystate, &_Cvt);
			switch (_Bytes)
				{
				case -2:	
					return (partial);

				case -1:	
					return (error);

				case 0:	
					_Bytes = 1;
					

				default:	
					_Mid1 += _Bytes;
					++_Mid2;
					break;
				}
			}
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		_Mid1 = _First1;
		_Mid2 = _First2;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{
			if ((int)5 <= _Last2 - _Mid2)
				{
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					{
					return (error);	
					}
				else
					{
					++_Mid1;
					_Mid2 += _Bytes;
					}
				}
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					{
					return (error);	
					}
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					break;
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
					++_Mid1;
					_Mid2 += _Bytes;
					}
				}
			}

		return (_Mid1 == _Last1 ? ok : partial);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Adl_verify_range(_First2, _Last2);
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			{
			_Ans = error;	
			}
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
			_Mid2 += _Bytes;
			}

		return (_Ans);
		}

	virtual int  do_length(_Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		_Adl_verify_range(_First1, _Last1);
		size_t _Wchars = 0;
		_Statype _Mystate{};

		while (_Wchars < _Count && _First1 != _Last1)
			{
			wchar_t _Ch;
			int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast<size_t>(_Last1 - _First1), &_Mystate, &_Cvt);
			if (_Bytes < 0)
				{	
				break;
				}

			if (_Bytes == 0)
				{	
				_Bytes = 1;
				}

			
			_First1 += _Bytes;
			++_Wchars;
			}

		return (static_cast<int>(_Min_value(static_cast<size_t>(2147483647), _Wchars)));
		}

	virtual bool  do_always_noconv() const noexcept override
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept override
		{	
		return (5);
		}

	virtual int  do_encoding() const noexcept override
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};
 #line 2173 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt_byname
		: public codecvt<_Elem, _Byte, _Statype>
	{	
public:
	explicit  codecvt_byname(const char *_Locname, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  codecvt_byname(const string& _Str, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~codecvt_byname() noexcept
		{	
		}
	};

		
struct __declspec(dllimport) ctype_base
	: public locale::facet
	{	
	enum
		{	
		alnum = 0x04 | 0x02 | 0x01 | 0x100, alpha = 0x02 | 0x01 | 0x100,
		cntrl = 0x20, digit = 0x04, graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
		lower = 0x02, print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
		punct = 0x10, space = 0x08 | 0x40 | 0x000, upper = 0x01,
		xdigit = 0x80, blank = 0x08 | 0x40 | 0x000 | 0x000};
	typedef short mask;	

	 ctype_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	 ~ctype_base() noexcept
		{	
		}
	};

		
template<class _Elem>
	class ctype
		: public ctype_base
	{	
public:
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
			& _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
			}

		return (_First);
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && !is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			{
			return (_Ch);
			}

		return (widen((char)_Tolower(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				{
				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
				}
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			{
			return (_Ch);
			}

		return (widen((char)_Toupper(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				{
				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
				}
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Maklocchr(_Byte, static_cast<_Elem *>(nullptr), _Cvt));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Maklocchr(*_First, static_cast<_Elem *>(nullptr), _Cvt);
			}

		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Byte;
		if (_Ch == (_Elem)0)
			{
			return ('\0');
			}

		if ((_Byte = _Maklocbyte(_Ch, _Cvt)) == '\0')
			{
			return (_Dflt);
			}

		return (_Byte);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Donarrow(*_First, _Dflt);
			}

		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

		





template<class _Elem>
	locale::id ctype<_Elem>::id;





		
template<>
	class __declspec(dllimport) ctype<char>
	: public ctype_base
	{	
public:
	typedef char _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
		}

	const _Elem * is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)*_First];
		return (_First);
		}

	const _Elem * scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && !is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	const _Elem * scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const _Elem * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	_Elem  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(const mask *_Table = nullptr,
		bool _Deletetable = false,
		size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}

		_Tidy();	
		if (_Table != nullptr)
			{	
			_Ctype._Table = _Table;
			_Ctype._Delfl = _Deletetable ? -1 : 0;
			}
		else
			{	
			_Ctype._Table = classic_table();
			_Ctype._Delfl = 0;
			}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

	const mask * table() const noexcept
		{	
		return (_Ctype._Table);
		}

	static const mask *__cdecl classic_table() noexcept
		{	
		return (::std:: use_facet<ctype>(locale::classic()).table());
		}

	 static const size_t table_size =
		1 << 8;	

protected:
	virtual  ~ctype() noexcept
		{	
		_Tidy();
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		}

	void  _Tidy()
		{	
		if (0 < _Ctype._Delfl)
			:: free((void *)_Ctype._Table);
		else if (_Ctype._Delfl < 0)
			delete[] _Ctype._Table;

		:: free(_Ctype._LocaleName);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Byte);
		}

	virtual const _Elem * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		:: memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));
		return (_Last);
		}

	virtual _Elem  do_narrow(_Elem _Ch, char) const
		{	
		return (_Ch);
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char, char *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		:: memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));
		return (_Last);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	};

		
template<>
	class __declspec(dllimport) ctype<wchar_t>
	: public ctype_base
	{	
public:
	typedef wchar_t _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			{
			*_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));
			}

		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && !is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = _Towlower(*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = _Towupper(*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {};
		wchar_t _Wc;
		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (wchar_t)((wint_t)(0xFFFF)) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Dowiden(*_First);
			}

		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Donarrow(*_First, _Dflt);
			}

		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

 
		
template<>
	class __declspec(dllimport) ctype<unsigned short>
	: public ctype_base
	{	
public:
	typedef unsigned short _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			{
			*_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));
			}

		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
			(const wchar_t *)_Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && !is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = _Towlower(*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = _Towupper(*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {};
		unsigned short _Wc;
		return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (unsigned short)((wint_t)(0xFFFF)) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Dowiden(*_First);
			}

		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Donarrow(*_First, _Dflt);
			}

		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};
 #line 3207 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"

		
template<class _Elem>
	class ctype_byname
	: public ctype<_Elem>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() noexcept
		{	
		}
	};

		
template<>
	class ctype_byname<char>
	: public ctype<char>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() noexcept
		{	
		}
	};

 

  
template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;
  #line 3257 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
 #line 3258 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3264 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"
#line 3265 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocale"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"

 #line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\system_error"

#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cerrno"

#pragma once






#line 10 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cerrno"
#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cerrno"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\system_error"


#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xcall_once.h"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
struct once_flag
	{	
	constexpr once_flag() noexcept
		: _Opaque(nullptr)
		{	
		}

	once_flag(const once_flag&) = delete;
	once_flag& operator=(const once_flag&) = delete;

	void *_Opaque;
	};

typedef int (__stdcall *_Execute_once_fp_t)(void *, void *, void **);
 int __cdecl _Execute_once(
	once_flag& _Flag, _Execute_once_fp_t _Callback, void *_Pv) noexcept;

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 42 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xcall_once.h"
#line 43 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xcall_once.h"





#line 10 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\system_error"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xerrc.h"

#pragma once






#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
	
enum class errc
	{	
	address_family_not_supported = 102, 
	address_in_use = 100, 
	address_not_available = 101, 
	already_connected = 113, 
	argument_list_too_long = 7, 
	argument_out_of_domain = 33, 
	bad_address = 14, 
	bad_file_descriptor = 9, 
	bad_message = 104, 
	broken_pipe = 32, 
	connection_aborted = 106, 
	connection_already_in_progress = 103, 
	connection_refused = 107, 
	connection_reset = 108, 
	cross_device_link = 18, 
	destination_address_required = 109, 
	device_or_resource_busy = 16, 
	directory_not_empty = 41, 
	executable_format_error = 8, 
	file_exists = 17, 
	file_too_large = 27, 
	filename_too_long = 38, 
	function_not_supported = 40, 
	host_unreachable = 110, 
	identifier_removed = 111, 
	illegal_byte_sequence = 42, 
	inappropriate_io_control_operation = 25, 
	interrupted = 4, 
	invalid_argument = 22, 
	invalid_seek = 29, 
	io_error = 5, 
	is_a_directory = 21, 
	message_size = 115, 
	network_down = 116, 
	network_reset = 117, 
	network_unreachable = 118, 
	no_buffer_space = 119, 
	no_child_process = 10, 
	no_link = 121, 
	no_lock_available = 39, 
	no_message_available = 120, 
	no_message = 122, 
	no_protocol_option = 123, 
	no_space_on_device = 28, 
	no_stream_resources = 124, 
	no_such_device_or_address = 6, 
	no_such_device = 19, 
	no_such_file_or_directory = 2, 
	no_such_process = 3, 
	not_a_directory = 20, 
	not_a_socket = 128, 
	not_a_stream = 125, 
	not_connected = 126, 
	not_enough_memory = 12, 
	not_supported = 129, 
	operation_canceled = 105, 
	operation_in_progress = 112, 
	operation_not_permitted = 1, 
	operation_not_supported = 130, 
	operation_would_block = 140, 
	owner_dead = 133, 
	permission_denied = 13, 
	protocol_error = 134, 
	protocol_not_supported = 135, 
	read_only_file_system = 30, 
	resource_deadlock_would_occur = 36, 
	resource_unavailable_try_again = 11, 
	result_out_of_range = 34, 
	state_not_recoverable = 127, 
	stream_timeout = 137, 
	text_file_busy = 139, 
	timed_out = 138, 
	too_many_files_open_in_system = 23, 
	too_many_files_open = 24, 
	too_many_links = 31, 
	too_many_symbolic_link_levels = 114, 
	value_too_large = 132, 
	wrong_protocol_type = 136 
	};

}



#pragma warning(pop)
#pragma pack(pop)

#line 108 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xerrc.h"
#line 109 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xerrc.h"





#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\system_error"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
enum class io_errc {	
	stream = 1
	};

		
template<class _Enum>
	struct is_error_code_enum
		: false_type
	{	
	};

template<>
	struct is_error_code_enum<io_errc>
		: true_type
	{	
	};

template<class _Ty>
	 constexpr bool is_error_code_enum_v = is_error_code_enum<_Ty>::value;

		
template<class _Enum>
	struct is_error_condition_enum
		: false_type
	{	
	};

template<>
	struct is_error_condition_enum<errc>
		: true_type
	{	
	};

template<class _Ty>
	 constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Ty>::value;

class error_code;
class error_condition;
 error_code make_error_code(errc) noexcept;
 error_code make_error_code(io_errc) noexcept;
 error_condition make_error_condition(errc) noexcept;
 error_condition make_error_condition(io_errc) noexcept;

		
class error_category;

 const error_category& generic_category() noexcept;
 const error_category& iostream_category() noexcept;
 const error_category& system_category() noexcept;

class __declspec(novtable) error_category
	{	
public:
	 error_category() noexcept	
		{	
		_Addr = reinterpret_cast<uintptr_t>(this);
		}

	virtual ~error_category() noexcept
		{
		}

	 virtual const char *name() const noexcept = 0;

	 virtual string message(int _Errval) const = 0;

	 virtual error_condition default_error_condition(int _Errval) const noexcept;

	 virtual bool equivalent(int _Errval, const error_condition& _Cond) const noexcept;

	 virtual bool equivalent(const error_code& _Code, int _Errval) const noexcept;

	 bool operator==(const error_category& _Right) const noexcept
		{	
		return (_Addr == _Right._Addr);
		}

	 bool operator!=(const error_category& _Right) const noexcept
		{	
		return (!(*this == _Right));
		}

	 bool operator<(const error_category& _Right) const noexcept
		{	
		return (_Addr < _Right._Addr);
		}

	error_category(const error_category&) = delete;
	error_category& operator=(const error_category&) = delete;

protected:
	uintptr_t _Addr;

	enum : uintptr_t
		{	
		_Future_addr = 1,
		_Generic_addr = 3,
		_Iostream_addr = 5,
		_System_addr = 7
		};
	};

		
class error_code
	{	
public:
	error_code() noexcept
		: _Myval(0),
		_Mycat(&system_category())
		{	
		}

	error_code(int _Val, const error_category& _Cat) noexcept
		: _Myval(_Val),
		_Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		enable_if_t<is_error_code_enum_v<_Enum>, int> = 0>
		error_code(_Enum _Errcode) noexcept
		: _Myval(0),
		_Mycat(nullptr)
		{	
		*this = make_error_code(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat) noexcept
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum,
		enable_if_t<is_error_code_enum_v<_Enum>, int> = 0>
		error_code& operator=(_Enum _Errcode) noexcept
		{	
		*this = make_error_code(_Errcode);	
		return (*this);
		}

	void clear() noexcept
		{	
		_Myval = 0;
		_Mycat = &system_category();
		}

	 int value() const noexcept
		{	
		return (_Myval);
		}

	 const error_category& category() const noexcept
		{	
		return (*_Mycat);
		}

	 error_condition default_error_condition() const noexcept;

	 string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const noexcept
		{	
		return (value() != 0);
		}

private:
	int _Myval;	
	const error_category *_Mycat;	
	};

		
class error_condition
	{	
public:
	error_condition() noexcept
		: _Myval(0),
		_Mycat(&generic_category())
		{	
		}

	error_condition(int _Val, const error_category& _Cat) noexcept
		: _Myval(_Val),
		_Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		enable_if_t<is_error_condition_enum_v<_Enum>, int> = 0>
		error_condition(_Enum _Errcode) noexcept
		: _Myval(0),
		_Mycat(nullptr)
		{	
		*this = make_error_condition(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat) noexcept
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum,
		enable_if_t<is_error_condition_enum_v<_Enum>, int> = 0>
		error_condition& operator=(_Enum _Errcode) noexcept
		{	
		*this = make_error_condition(_Errcode);	
		return (*this);
		}

	void clear() noexcept
		{	
		_Myval = 0;
		_Mycat = &generic_category();
		}

	 int value() const noexcept
		{	
		return (_Myval);
		}

	 const error_category& category() const noexcept
		{	
		return (*_Mycat);
		}

	 string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const noexcept
		{	
		return (value() != 0);
		}

private:
	int _Myval;	
	const error_category * _Mycat;	
	};

		
 inline bool operator==(const error_code& _Left, const error_code& _Right) noexcept
	{	
	return (_Left.category() == _Right.category()
		&& _Left.value() == _Right.value());
	}

 inline bool operator==(const error_code& _Left, const error_condition& _Right) noexcept
	{	
	return (_Left.category().equivalent(_Left.value(), _Right)
		|| _Right.category().equivalent(_Left, _Right.value()));
	}

 inline bool operator==(const error_condition& _Left, const error_code& _Right) noexcept
	{	
	return (_Right.category().equivalent(_Right.value(), _Left)
		|| _Left.category().equivalent(_Right, _Left.value()));
	}

 inline bool operator==(const error_condition& _Left, const error_condition& _Right) noexcept
	{	
	return (_Left.category() == _Right.category()
		&& _Left.value() == _Right.value());
	}

		
 inline bool operator!=(const error_code& _Left, const error_code& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

 inline bool operator!=(const error_code& _Left, const error_condition& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

 inline bool operator!=(const error_condition& _Left, const error_code& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

 inline bool operator!=(const error_condition& _Left, const error_condition& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

		
 inline bool operator<(const error_code& _Left, const error_code& _Right) noexcept
	{	
	return (_Left.category() < _Right.category()
		|| (_Left.category() == _Right.category()
			&& _Left.value() < _Right.value()));
	}

 inline bool operator<(const error_condition& _Left, const error_condition& _Right) noexcept
	{	
	return (_Left.category() < _Right.category()
		|| (_Left.category() == _Right.category()
			&& _Left.value() < _Right.value()));
	}

		
 inline error_condition error_category::default_error_condition(int _Errval) const noexcept
	{	
	return (error_condition(_Errval, *this));
	}

 inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const noexcept
	{	
	return (default_error_condition(_Errval) == _Cond);
	}

 inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept
	{	
	return (*this == _Code.category() && _Code.value() == _Errval);
	}

		
 inline error_condition error_code::default_error_condition() const noexcept
	{	
	return (category().default_error_condition(value()));
	}

		
 inline error_code make_error_code(errc _Errno) noexcept
	{	
	return (error_code((int)_Errno, generic_category()));
	}

 inline error_code make_error_code(io_errc _Errno) noexcept
	{	
	return (error_code((int)_Errno, iostream_category()));
	}

		
 inline error_condition make_error_condition(errc _Errno) noexcept
	{	
	return (error_condition((int)_Errno, generic_category()));
	}

 inline error_condition make_error_condition(io_errc _Errno) noexcept
	{	
	return (error_condition((int)_Errno, iostream_category()));
	}

		
template<>
	struct hash<error_code>
	{	
	 typedef error_code argument_type;
	 typedef size_t result_type;

	 size_t operator()(const error_code& _Keyval) const noexcept
		{	
		return (hash<int>{}(_Keyval.value()));
		}
	};

template<>
	struct hash<error_condition>
	{	
	 typedef error_condition argument_type;
	 typedef size_t result_type;

	 size_t operator()(const error_condition& _Keyval) const noexcept
		{	
		return (hash<int>{}(_Keyval.value()));
		}
	};

		
class _System_error
	: public runtime_error
	{	
private:
	static string _Makestr(error_code _Errcode, string _Message)
		{	
		if (!_Message.empty())
			{
			_Message.append(": ");
			}

		_Message.append(_Errcode.message());
		return (_Message);
		}

protected:
	_System_error(error_code _Errcode, const string& _Message)
		: runtime_error(_Makestr(_Errcode, _Message)),
		_Mycode(_Errcode)
		{	
		}

	error_code _Mycode;	
	};

class system_error
	: public _System_error
	{	
private:
	typedef _System_error _Mybase;

public:
	system_error(error_code _Errcode)
		: _Mybase(_Errcode, "")
		{	
		}

	system_error(error_code _Errcode, const string& _Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(error_code _Errcode, const char *_Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat)
		: _Mybase(error_code(_Errval, _Errcat), "")
		{	
		}

	system_error(int _Errval, const error_category& _Errcat, const string& _Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat, const char *_Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	 const error_code& code() const noexcept
		{	
		return (_Mycode);
		}

 

 





#line 472 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\system_error"
	};

 const char *__cdecl _Syserror_map(int);
 int __cdecl _Winerror_map(int);
 unsigned long __cdecl _Winerror_message(
	unsigned long _Message_id, char *_Narrow, unsigned long _Size);

		
class _Generic_error_category
	: public error_category
	{	
public:
	_Generic_error_category() noexcept
		{	
		_Addr = _Generic_addr;
		}

	 virtual const char *name() const noexcept override
		{	
		return ("generic");
		}

	 virtual string message(int _Errcode) const override
		{	
		return (_Syserror_map(_Errcode));
		}
	};

		
class _Iostream_error_category
	: public _Generic_error_category
	{	
public:
	_Iostream_error_category() noexcept
		{	
		_Addr = _Iostream_addr;
		}

	 virtual const char *name() const noexcept override
		{	
		return ("iostream");
		}

	 virtual string message(int _Errcode) const override
		{	
		if (_Errcode == (int)io_errc::stream)
			{
			return ("iostream stream error");
			}
		else
			{
			return (_Generic_error_category::message(_Errcode));
			}
		}
	};

		
class _System_error_category
	: public error_category
	{	
public:
	_System_error_category() noexcept
		{	
		_Addr = _System_addr;
		}

	 virtual const char *name() const noexcept override
		{	
		return ("system");
		}

	 virtual string message(int _Errcode) const override
		{	
		const unsigned long _Size = 32767;
		string _Narrow(_Size, '\0');

		const unsigned long _Val = _Winerror_message(static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);
		if (_Val == 0)
			{
			_Narrow = "unknown error";
			}
		else
			{
			_Narrow.resize(_Val);
			}

		_Narrow.shrink_to_fit();
		return (_Narrow);
		}

	 virtual error_condition default_error_condition(int _Errval) const noexcept override
		{	
		const int _Posv = _Winerror_map(_Errval);
		if (_Posv == 0)
			{
			return (error_condition(_Errval, system_category()));
			}
		else
			{
			return (error_condition(_Posv, generic_category()));
			}
		}
	};























template<class _Ty> inline
	int __stdcall _Immortalize_impl(void *, void * _Storage_ptr, void **) noexcept
	{	
	::new (_Storage_ptr) _Ty();
	return (1);
	}

template<class _Ty> inline
	_Ty& _Immortalize()
	{	
	static_assert(sizeof(void *) == sizeof(once_flag), "TRANSITION, VSO#406237");
	static_assert(alignof(void *) == alignof(once_flag), "TRANSITION, VSO#406237");
	static void * _Flag = nullptr;
	static aligned_union_t<1, _Ty> _Storage;
	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)
		{	
		::std:: terminate();
		}

	return (reinterpret_cast<_Ty&>(_Storage));
	}
#line 620 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\system_error"

 inline const error_category& generic_category() noexcept
	{	
	return (_Immortalize<_Generic_error_category>());
	}

 inline const error_category& iostream_category() noexcept
	{	
	return (_Immortalize<_Iostream_error_category>());
	}

 inline const error_category& system_category() noexcept
	{	
	return (_Immortalize<_System_error_category>());
	}
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 641 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\system_error"
#line 642 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\system_error"





#line 9 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"

 #line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\share.h"







#pragma once




#line 14 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\share.h"
#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 

namespace std {
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

 
 

 
 
 

		
template<class _Dummy>
	class _Iosb
	{	
public:
	enum _Dummy_enum {_Dummy_enum_val = 1};	
	enum _Fmtflags
		{	
		_Fmtmask = 0xffff, _Fmtzero = 0};

	static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
	static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
	static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
	static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
	static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
	static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
	static constexpr _Fmtflags left = (_Fmtflags)0x0040;
	static constexpr _Fmtflags right = (_Fmtflags)0x0080;
	static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
	static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
	static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
	static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
	static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
	static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

	static constexpr _Fmtflags hexfloat =
		(_Fmtflags)0x3000;	

	static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
	static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
	static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040
		| 0x0080 | 0x0100);
	static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200
		| 0x0400 | 0x0800);
	static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000
		| 0x2000);

	enum _Iostate
		{	
		_Statmask = 0x17};

	static constexpr _Iostate goodbit = (_Iostate)0x0;
	static constexpr _Iostate eofbit = (_Iostate)0x1;
	static constexpr _Iostate failbit = (_Iostate)0x2;
	static constexpr _Iostate badbit = (_Iostate)0x4;

	enum _Openmode
		{	
		_Openmask = 0xff};

	static constexpr _Openmode in = (_Openmode)0x01;
	static constexpr _Openmode out = (_Openmode)0x02;
	static constexpr _Openmode ate = (_Openmode)0x04;
	static constexpr _Openmode app = (_Openmode)0x08;
	static constexpr _Openmode trunc = (_Openmode)0x10;
	static constexpr _Openmode _Nocreate = (_Openmode)0x40;
	static constexpr _Openmode _Noreplace = (_Openmode)0x80;
	static constexpr _Openmode binary = (_Openmode)0x20;

	enum _Seekdir
		{	
		_Seekbeg,
		_Seekcur,
		_Seekend
		};

	static constexpr _Seekdir beg = _Seekbeg;
	static constexpr _Seekdir cur = _Seekcur;
	static constexpr _Seekdir end = _Seekend;

	enum
		{	
		_Openprot = 0x40};
	};

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags
		_Iosb<_Dummy>::hexfloat;	

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;

		
class __declspec(dllimport) ios_base
	: public _Iosb<int>
	{	
public:
	typedef int fmtflags;
	typedef int iostate;
	typedef int openmode;
	typedef int seekdir;

 
	typedef ::std:: streamoff streamoff;
	typedef ::std:: streampos streampos;
 #line 212 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"

	enum event
		{	
		erase_event, imbue_event, copyfmt_event};

	typedef void (__cdecl *event_callback)(event, ios_base&, int);

 
	typedef unsigned int io_state, open_mode, seek_dir;
 #line 222 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"

			
	class failure

		: public system_error
		{	
	public:
		explicit failure(const string &_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}

		explicit failure(const char *_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}


 

 





#line 251 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"
		};

			
	class __declspec(dllimport) Init
		{	
	public:
		 Init()
			{	
			_Init_ctor(this);
			}

		 ~Init() noexcept
			{	
			_Init_dtor(this);
			}

	private:
		static  void __cdecl _Init_ctor(Init *);
		static  void __cdecl _Init_dtor(Init *);

		 static int _Init_cnt;	

		static  int& __cdecl _Init_cnt_func();
		};

	explicit  operator bool() const
		{	
		return (!fail());
		}

	 bool  operator!() const
		{	
		return (fail());
		}

	void  clear(iostate _State, bool _Reraise)
		{	
		_State &= _Statmask;
		_Mystate = _State;
		const auto _Filtered = _State & _Except;
		if (_Filtered)
			{
			if (_Reraise)
				{
				throw;
				}

			const char * _Msg;
			if (_Filtered & ios_base::badbit)
				{
				_Msg = "ios_base::badbit set";
				}
			else if (_Filtered & ios_base::failbit)
				{
				_Msg = "ios_base::failbit set";
				}
			else
				{
				_Msg = "ios_base::eofbit set";
				}

			throw failure(_Msg);
			}
		}

	void  clear(iostate _State = goodbit)
		{	
		clear(_State, false);
		}

 
	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}
 #line 327 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"

	 iostate  rdstate() const
		{	
		return (_Mystate);
		}

	void  setstate(iostate _State, bool _Exreraise)
		{	
		clear(rdstate() | _State, _Exreraise);
		}

	void  setstate(iostate _State)
		{	
		clear(rdstate() | _State, false);
		}

 
	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}
 #line 349 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"

	 bool  good() const
		{	
		return (rdstate() == ios_base::goodbit);
		}

	 bool  eof() const
		{	
		return (rdstate() & ios_base::eofbit);
		}

	 bool  fail() const
		{	
		return (rdstate() & (ios_base::badbit | ios_base::failbit));
		}

	 bool  bad() const
		{	
		return (rdstate() & ios_base::badbit);
		}

	 iostate  exceptions() const
		{	
		return (_Except);
		}

	void  exceptions(iostate _Newexcept)
		{	
		_Except = _Newexcept & _Statmask;
		clear(rdstate());
		}

 
	void  exceptions(io_state _State)
		{	
		exceptions((iostate)_State);
		}
 #line 387 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"

	 fmtflags  flags() const
		{	
		return (_Fmtfl);
		}

	fmtflags  flags(fmtflags _Newfmtflags)
		{	
		const fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = _Newfmtflags & _Fmtmask;
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags)
		{	
		const ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl |= _Newfmtflags & _Fmtmask;
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags, fmtflags _Mask)
		{	
		const ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (_Oldfmtflags & ~_Mask) | (_Newfmtflags & _Mask & _Fmtmask);
		return (_Oldfmtflags);
		}

	void  unsetf(fmtflags _Mask)
		{	
		_Fmtfl &= ~_Mask;
		}

	 streamsize  precision() const
		{	
		return (_Prec);
		}

	streamsize  precision(streamsize _Newprecision)
		{	
		const streamsize _Oldprecision = _Prec;
		_Prec = _Newprecision;
		return (_Oldprecision);
		}

	 streamsize  width() const
		{	
		return (_Wide);
		}

	streamsize  width(streamsize _Newwidth)
		{	
		const streamsize _Oldwidth = _Wide;
		_Wide = _Newwidth;
		return (_Oldwidth);
		}

	 locale  getloc() const
		{	
		return (*_Ploc);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = *_Ploc;
		*_Ploc = _Loc;
		_Callfns(imbue_event);
		return (_Oldlocale);
		}

	 static int __cdecl xalloc()
		{	
		{ ::std:: _Lockit _Lock(2);	
			return (_Index++);
		}
		}

	 long&  iword(int _Idx)
		{	
		return (_Findarr(_Idx)._Lo);
		}

	 void *&  pword(int _Idx)
		{	
		return (_Findarr(_Idx)._Vp);
		}

	void  register_callback(event_callback _Pfn,
		int _Idx)
		{	
		_Calls = new _Fnarray(_Idx, _Pfn, _Calls);
		}

	ios_base&  copyfmt(const ios_base& _Other)
		{	
		if (this != ::std:: addressof(_Other))
			{	
			_Tidy();
			*_Ploc = *_Other._Ploc;
			_Fmtfl = _Other._Fmtfl;
			_Prec = _Other._Prec;
			_Wide = _Other._Wide;
			_Iosarray *_Ptr = _Other._Arr;

			for (_Arr = nullptr; _Ptr != nullptr; _Ptr = _Ptr->_Next)
				if (_Ptr->_Lo != 0 || _Ptr->_Vp != nullptr)
					{	
					iword(_Ptr->_Index) = _Ptr->_Lo;
					pword(_Ptr->_Index) = _Ptr->_Vp;
					}

			for (_Fnarray *_Pfa = _Other._Calls; _Pfa != nullptr;
				_Pfa = _Pfa->_Next)
				register_callback(_Pfa->_Pfn, _Pfa->_Index);

			_Callfns(copyfmt_event);	
			exceptions(_Other._Except);	
			}
		return (*this);
		}

	static bool __cdecl sync_with_stdio(bool _Newsync = true)
		{	
		{ ::std:: _Lockit _Lock(2);	
			const bool _Oldsync = _Sync;
			_Sync = _Newsync;
			return (_Oldsync);
		}
		}

	void  swap(ios_base& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			::std:: swap(_Mystate, _Right._Mystate);
			::std:: swap(_Except, _Right._Except);
			::std:: swap(_Fmtfl, _Right._Fmtfl);
			::std:: swap(_Prec, _Right._Prec);
			::std:: swap(_Wide, _Right._Wide);

			::std:: swap(_Arr, _Right._Arr);
			::std:: swap(_Calls, _Right._Calls);
			::std:: swap(_Ploc, _Right._Ploc);
			}
		}

	virtual  ~ios_base() noexcept	
		{	
		_Ios_base_dtor(this);
		}

	static  void __cdecl
		_Addstd(ios_base *);	

	size_t _Stdstr;	

protected:
	 ios_base()
		{	
		}

	void  _Init()
		{	
		_Ploc = nullptr;
		_Stdstr = 0;
		_Except = goodbit;
		_Fmtfl = (fmtflags)(skipws | dec);
		_Prec = 6;
		_Wide = 0;
		_Arr = nullptr;
		_Calls = nullptr;
		clear(goodbit);
		_Ploc = new locale;
		}

private:
			
	struct _Iosarray
		: public _Crt_new_delete
		{	
	public:
		 _Iosarray(int _Idx, _Iosarray *_Link)
			: _Next(_Link), _Index(_Idx), _Lo(0), _Vp(nullptr)
			{	
			}

		_Iosarray *_Next;	
		int _Index;	
		long _Lo;	
		void *_Vp;	
		};

			
	struct _Fnarray
		: public _Crt_new_delete
		{	
		 _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
			: _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
			{	
			}

		_Fnarray *_Next;	
		int _Index;	
		event_callback _Pfn;	
		};

	void  _Callfns(event _Ev)
		{	
		for (_Fnarray *_Pfa = _Calls; _Pfa != nullptr; _Pfa = _Pfa->_Next)
			(*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
		}

	_Iosarray&  _Findarr(int _Idx)
		{	
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr, _Ptr2 = nullptr; _Ptr1 != nullptr; _Ptr1 = _Ptr1->_Next)
			if (_Ptr1->_Index == _Idx)
				return (*_Ptr1);	
			else if (_Ptr2 == nullptr && _Ptr1->_Lo == 0 && _Ptr1->_Vp == nullptr)
				_Ptr2 = _Ptr1;	

		if (_Ptr2 != nullptr)
			{	
			_Ptr2->_Index = _Idx;
			return (*_Ptr2);
			}

		_Arr = new _Iosarray(_Idx, _Arr);	
		return (*_Arr);
		}

	void  _Tidy()
		{	
		_Callfns(erase_event);
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr; _Ptr1 != nullptr; _Ptr1 = _Ptr2)
			{	
			_Ptr2 = _Ptr1->_Next;
			delete _Ptr1;
			}
		_Arr = nullptr;

		_Fnarray *_Pfa1, *_Pfa2;
		for (_Pfa1 = _Calls; _Pfa1 != nullptr; _Pfa1 = _Pfa2)
			{	
			_Pfa2 = _Pfa1->_Next;
			delete _Pfa1;
			}
		_Calls = nullptr;
		}

	iostate _Mystate;	
	iostate _Except;	
	fmtflags _Fmtfl;	
	streamsize _Prec;	
	streamsize _Wide;	
	_Iosarray *_Arr;	
	_Fnarray *_Calls;	
	locale *_Ploc;	

	 static int _Index;
	 static bool _Sync;

	static  void __cdecl
		_Ios_base_dtor(ios_base *);

public:
	ios_base(const ios_base&) = delete;
	ios_base& operator=(const ios_base&) = delete;
	};
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 664 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"
#line 665 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xiosbase"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_streambuf
	{	
protected:
	 basic_streambuf()
		: _Plocale(new locale)
		{	
		_Init();
		}

	 basic_streambuf(_Uninitialized)
		{	
		}

	 basic_streambuf(const basic_streambuf& _Right)
		: _Plocale(new locale(_Right.getloc()))
		{	
		_Init();
		setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
		setg(_Right.eback(), _Right.gptr(), _Right.egptr());
		}

	basic_streambuf&  operator=(const basic_streambuf& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			pubimbue(_Right.getloc());
			}
		return (*this);
		}

	void  swap(basic_streambuf& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Elem *_Pfirst0 = pbase();
			_Elem *_Pnext0 = pptr();
			_Elem *_Pend = epptr();
			_Elem *_Gfirst0 = eback();
			_Elem *_Gnext0 = gptr();
			_Elem *_Gend = egptr();

			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			_Right.setp(_Pfirst0, _Pnext0, _Pend);

			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			_Right.setg(_Gfirst0, _Gnext0, _Gend);

			::std:: swap(_Plocale, _Right._Plocale);
			}
		}

public:
	typedef _Elem char_type;
	typedef _Traits traits_type;

	virtual  ~basic_streambuf() noexcept
		{	
		delete _Plocale;
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	pos_type  pubseekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekoff(_Off, _Way, _Mode));
		}

 
	pos_type  pubseekoff(off_type _Off,
		ios_base::seek_dir _Way,
		ios_base::open_mode _Mode)
		{	
		return (pubseekoff(_Off, (ios_base::seekdir)_Way,
			(ios_base::openmode)_Mode));
		}
 #line 101 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekpos(_Pos, _Mode));
		}

 
	pos_type  pubseekpos(pos_type _Pos,
		ios_base::open_mode _Mode)
		{	
		return (seekpos(_Pos, (ios_base::openmode)_Mode));
		}
 #line 115 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"

	basic_streambuf * pubsetbuf(_Elem *_Buffer,
		streamsize _Count)
		{	
		return (setbuf(_Buffer, _Count));
		}

	locale  pubimbue(const locale &_Newlocale)
		{	
		locale _Oldlocale = *_Plocale;
		imbue(_Newlocale);
		*_Plocale = _Newlocale;
		return (_Oldlocale);
		}

	locale  getloc() const
		{	
		return (*_Plocale);
		}

	streamsize  in_avail()
		{	
		streamsize _Res = _Gnavail();
		return (0 < _Res ? _Res : showmanyc());
		}

	int  pubsync()
		{	
		return (sync());
		}

	int_type  sbumpc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*_Gninc()) : uflow());
		}

	int_type  sgetc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*gptr()) : underflow());
		}

	streamsize  sgetn(_Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsgetn(_Ptr, _Count));
		}

	int_type  snextc()
		{	
		return (1 < _Gnavail()
			? _Traits::to_int_type(*_Gnpreinc())
			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
				? _Traits::eof() : sgetc());
		}

	int_type  sputbackc(_Elem _Ch)
		{	
		return (gptr() != nullptr && eback() < gptr()
			&& _Traits::eq(_Ch, gptr()[-1])
			? _Traits::to_int_type(*_Gndec())
			: pbackfail(_Traits::to_int_type(_Ch)));
		}

 
	void  stossc()
		{	
		if (0 < _Gnavail())
			_Gninc();
		else
			uflow();
		}
 #line 189 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"

	int_type  sungetc()
		{	
		return (gptr() != nullptr && eback() < gptr()
			? _Traits::to_int_type(*_Gndec()) : pbackfail());
		}

	int_type  sputc(_Elem _Ch)
		{	
		return (0 < _Pnavail()
			? _Traits::to_int_type(*_Pninc() = _Ch)
			: overflow(_Traits::to_int_type(_Ch)));
		}

	streamsize  sputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsputn(_Ptr, _Count));
		}

	virtual void  _Lock()
		{	
		}

	virtual void  _Unlock()
		{	
		}

protected:
	_Elem * eback() const
		{	
		return (*_IGfirst);
		}

	_Elem * gptr() const
		{	
		return (*_IGnext);
		}

	_Elem * pbase() const
		{	
		return (*_IPfirst);
		}

	_Elem * pptr() const
		{	
		return (*_IPnext);
		}

	_Elem * egptr() const
		{	
		return (*_IGnext + *_IGcount);
		}

	void  gbump(int _Off)
		{	
		*_IGcount -= _Off;
		*_IGnext += _Off;
		}

	void  setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IGfirst = _First;
		*_IGnext = _Next;
		*_IGcount = (int)(_Last - _Next);
		}

	_Elem * epptr() const
		{	
		return (*_IPnext + *_IPcount);
		}

	_Elem * _Gndec()
		{	
		++*_IGcount;
		return (--*_IGnext);
		}

	_Elem * _Gninc()
		{	
		--*_IGcount;
		return ((*_IGnext)++);
		}

	_Elem * _Gnpreinc()
		{	
		--*_IGcount;
		return (++(*_IGnext));
		}

	streamsize  _Gnavail() const
		{	
		return (*_IGnext != nullptr ? *_IGcount : 0);
		}

	void  pbump(int _Off)
		{	
		*_IPcount -= _Off;
		*_IPnext += _Off;
		}

	void  setp(_Elem *_First, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _First;
		*_IPcount = (int)(_Last - _First);
		}

	void  setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _Next;
		*_IPcount = (int)(_Last - _Next);
		}

	_Elem * _Pninc()
		{	
		--*_IPcount;
		return ((*_IPnext)++);
		}

	streamsize  _Pnavail() const
		{	
		return (*_IPnext != nullptr ? *_IPcount : 0);
		}

	void  _Init()
		{	
		_IGfirst = &_Gfirst;
		_IPfirst = &_Pfirst;
		_IGnext = &_Gnext;
		_IPnext = &_Pnext;
		_IGcount = &_Gcount;
		_IPcount = &_Pcount;
		setp(nullptr, nullptr);
		setg(nullptr, nullptr, nullptr);
		}

	void  _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
		_Elem **_Pf, _Elem **_Pn, int *_Pc)
		{	
		_IGfirst = _Gf;
		_IPfirst = _Pf;
		_IGnext = _Gn;
		_IPnext = _Pn;
		_IGcount = _Gc;
		_IPcount = _Pc;
		}

	virtual int_type  overflow(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual int_type  pbackfail(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual streamsize  showmanyc()
		{	
		return (0);
		}

	virtual int_type  underflow()
		{	
		return (_Traits::eof());
		}

	virtual int_type  uflow()
		{	
		return (_Traits::eq_int_type(_Traits::eof(), underflow())
			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
		}

	virtual streamsize  xsgetn(_Elem * _Ptr, streamsize _Count)
		{	
		const streamsize _Start_count = _Count;

		while (0 < _Count)
			{
			streamsize _Size = _Gnavail();
			if (0 < _Size)
				{	
				if (_Count < _Size)
					{
					_Size = _Count;
					}

				_Traits::copy(_Ptr, gptr(), static_cast<size_t>(_Size));
				_Ptr += _Size;
				_Count -= _Size;
				gbump(static_cast<int>(_Size));
				}
			else
				{
				const int_type _Meta = uflow();
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{
					break;	
					}

				
				*_Ptr++ = _Traits::to_char_type(_Meta);
				--_Count;
				}
			}

		return (_Start_count - _Count);
		}

	virtual streamsize  xsputn(const _Elem *_Ptr, streamsize _Count)
		{	
		const streamsize _Start_count = _Count;
		while (0 < _Count)
			{
			streamsize _Size = _Pnavail();
			if (0 < _Size)
				{	
				if (_Count < _Size)
					{
					_Size = _Count;
					}

				_Traits::copy(pptr(), _Ptr, static_cast<size_t>(_Size));
				_Ptr += _Size;
				_Count -= _Size;
				pbump(static_cast<int>(_Size));
				}
			else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr))))
				{
				break;	
				}
			else
				{	
				++_Ptr;
				--_Count;
				}
			}

		return (_Start_count - _Count);
		}

	virtual pos_type  seekoff(off_type,
		ios_base::seekdir,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(-1));
		}

	virtual pos_type  seekpos(pos_type,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(-1));
		}

	virtual basic_streambuf * setbuf(_Elem *, streamsize)
		{	
		return (this);
		}

	virtual int  sync()
		{	
		return (0);
		}

	virtual void  imbue(const locale&)
		{	
		}

private:
	_Elem *_Gfirst;	
	_Elem *_Pfirst;	
	_Elem **_IGfirst;	
	_Elem **_IPfirst;	
	_Elem *_Gnext;	
	_Elem *_Pnext;	
	_Elem **_IGnext;	
	_Elem **_IPnext;	

	int _Gcount;	
	int _Pcount;	
	int *_IGcount;	
	int *_IPcount;	

protected:
	locale *_Plocale;	
	};

 

  
template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
  #line 484 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"

  



 #line 490 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"

		
template<class _Elem,
	class _Traits>
	class istreambuf_iterator
	{	
public:
	using iterator_category = input_iterator_tag;
	using value_type = _Elem;
	using difference_type = typename _Traits::off_type;
	using pointer = const _Elem *;
	using reference = _Elem;

	using char_type = _Elem;
	using traits_type = _Traits;
	using streambuf_type = basic_streambuf<_Elem, _Traits>;
	using istream_type = basic_istream<_Elem, _Traits>;

	using int_type = typename traits_type::int_type;

	constexpr istreambuf_iterator() noexcept
		: _Strbuf(nullptr),
		_Got(true),
		_Val()
		{
		}

	istreambuf_iterator(streambuf_type * _Sb) noexcept
		: _Strbuf(_Sb),
		_Got(_Sb == nullptr),
		_Val()
		{	
		}

	istreambuf_iterator(istream_type& _Istr) noexcept
		: _Strbuf(_Istr.rdbuf()),
		_Got(_Strbuf == nullptr),
		_Val()
		{	
		}

private:
	class _Istreambuf_proxy
		{
	public:
		 _Elem operator*() const
			{
			return (_Keep);
			}
	private:
		friend istreambuf_iterator;
		_Istreambuf_proxy(streambuf_type * _Strbuf_, _Elem _Keep_)
			: _Strbuf(_Strbuf_),
			_Keep(_Keep_)
			{
			}

		streambuf_type * _Strbuf;
		_Elem _Keep;
		};

public:
	istreambuf_iterator(const _Istreambuf_proxy& _Px) noexcept
		: _Strbuf(_Px._Strbuf),
		_Got(_Strbuf == nullptr),
		_Val()
		{	
		}

	 _Elem operator*() const
		{	
		if (!_Got)
			_Peek();

 
		do { if (_Strbuf != nullptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf", 565, 0, "%s", "istreambuf_iterator is not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"istreambuf_iterator is not dereferencable\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf", 565, 0); } while (false); } ; } while (false);
 #line 567 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"

		return (_Val);
		}

	istreambuf_iterator& operator++()
		{	
 
		do { if (_Strbuf != nullptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf", 574, 0, "%s", "istreambuf_iterator is not incrementable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"istreambuf_iterator is not incrementable\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf", 574, 0); } while (false); } ; } while (false);
 #line 576 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"

		_Inc();
		return (*this);
		}

	_Istreambuf_proxy operator++(int)
		{	
		if (!_Got)
			_Peek();
		_Istreambuf_proxy _Tmp{_Strbuf, _Val};
		++*this;
		return (_Tmp);
		}

	 bool equal(const istreambuf_iterator& _Right) const
		{	
		if (!_Got)
			_Peek();
		if (!_Right._Got)
			_Right._Peek();
		return ((_Strbuf == nullptr && _Right._Strbuf == nullptr)
			|| (_Strbuf != nullptr && _Right._Strbuf != nullptr));
		}

private:
	void _Inc()
		{	
		if (_Strbuf == nullptr
			|| traits_type::eq_int_type(traits_type::eof(),
				_Strbuf->sbumpc()))
			{
			_Strbuf = nullptr;
			_Got = true;
			}
		else
			{
			_Got = false;
			}
		}

	_Elem _Peek() const
		{	
		int_type _Meta;
		if (_Strbuf == nullptr
			|| traits_type::eq_int_type(traits_type::eof(),
				_Meta = _Strbuf->sgetc()))
			_Strbuf = nullptr;
		else
			_Val = traits_type::to_char_type(_Meta);
		_Got = true;
		return (_Val);
		}

	mutable streambuf_type * _Strbuf;	
	mutable bool _Got;	
	mutable _Elem _Val;	
	};

template<class _Elem,
	class _Traits>
	 inline bool operator==(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (_Left.equal(_Right));
	}

template<class _Elem,
	class _Traits>
	 inline bool operator!=(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (!(_Left == _Right));
	}

		
template<class _Elem,
	class _Traits>
	class ostreambuf_iterator
	{	
public:
	using iterator_category = output_iterator_tag;
	using value_type = void;
	using difference_type = void;
	using pointer = void;
	using reference = void;

	using char_type = _Elem;
	using traits_type = _Traits;
	using streambuf_type = basic_streambuf<_Elem, _Traits>;
	using ostream_type = basic_ostream<_Elem, _Traits>;

	ostreambuf_iterator(streambuf_type *_Sb) noexcept
		: _Failed(false), _Strbuf(_Sb)
		{	
		}

	ostreambuf_iterator(ostream_type& _Ostr) noexcept
		: _Failed(false), _Strbuf(_Ostr.rdbuf())
		{	
		}

	ostreambuf_iterator& operator=(_Elem _Right)
		{	
		if (_Strbuf == nullptr
			|| traits_type::eq_int_type(_Traits::eof(),
				_Strbuf->sputc(_Right)))
			_Failed = true;
		return (*this);
		}

	 ostreambuf_iterator& operator*()
		{	
		return (*this);
		}

	ostreambuf_iterator& operator++()
		{	
		return (*this);
		}

	ostreambuf_iterator& operator++(int)
		{	
		return (*this);
		}

	 bool failed() const noexcept
		{	
		return (_Failed);
		}

private:
	bool _Failed;	
	streambuf_type *_Strbuf;	
	};
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 719 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"
#line 720 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\streambuf"





#line 11 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

		

 
extern "C" {
 #line 24 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"

extern  float __cdecl _Stofx(const char *,
	    char **,
	long, int *);
extern  double __cdecl _Stodx(const char *,
	    char **,
	long, int *);
extern  long double __cdecl _Stoldx(const char *,
	    char **,
	long, int *);
extern  long __cdecl _Stolx(const char *,
	    char **,
	int, int *);
extern  unsigned long __cdecl _Stoulx(const char *,
	    char **,
	int, int *);
extern  long long __cdecl _Stollx(const char *,
	    char **,
	int, int *);
extern  unsigned long long __cdecl _Stoullx(const char *,
	    char **,
	int, int *);

 
}
 #line 50 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"

namespace std {

		
inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
	{	
	int& _Errno_ref = (*_errno());	
	const int _Orig = _Errno_ref;

	_Errno_ref = 0;
	double _Val = :: strtod(_Str, _Endptr);
	*_Perr = _Errno_ref;
	_Errno_ref = _Orig;

	if (_Pten != 0)
		_Val *= :: pow(10.0, static_cast<double>(_Pten));

	return (_Val);
	}

		
inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
	{	
	int& _Errno_ref = (*_errno());	
	const int _Orig = _Errno_ref;

	_Errno_ref = 0;
	float _Val = :: strtof(_Str, _Endptr);
	*_Perr = _Errno_ref;
	_Errno_ref = _Orig;

	if (_Pten != 0)
		_Val *= :: powf(10.0f, static_cast<float>(_Pten));

	return (_Val);
	}

		
template<class _Elem,
	size_t _Base_size> inline
	size_t _Find_elem(const _Elem (&_Base)[_Base_size], const _Elem _Ch)
	{	
		
	return (static_cast<size_t>(_Find_unchecked(_Base, _Base + (_Base_size - 1), _Ch) - _Base));
	}

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
	{	
	const size_t _Count = :: wcslen(_Ptr) + 1;

	wchar_t *_Ptrdest = (wchar_t *)_calloc_dbg(_Count, sizeof (wchar_t),
		2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum", 101);

	if (!_Ptrdest)
		_Xbad_alloc();
	:: wmemcpy(_Ptrdest, _Ptr, _Count);
	return (_Ptrdest);
	}

		
template<class _Elem>
	class numpunct
		: public locale::facet
	{	
public:
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;
	typedef _Elem char_type;

	 __declspec(dllimport) static locale::id id;	

	_Elem decimal_point() const
		{	
		return (do_decimal_point());
		}

	_Elem thousands_sep() const
		{	
		return (do_thousands_sep());
		}

	string grouping() const
		{	
		return (do_grouping());
		}

	string_type falsename() const
		{	
		return (do_falsename());
		}

	string_type truename() const
		{	
		return (do_truename());
		}

	explicit numpunct(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
			if (_Kseparator == 0)
				_Kseparator =	
					_Maklocchr(',', static_cast<_Elem *>(nullptr), _Lobj._Getcvt());
		}
		}

	numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj, _Isdef);
		}

	static size_t _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new numpunct<_Elem>(
				_Locinfo(_Ploc->c_str()), 0, true);
		return (4);
		}

protected:
	virtual  ~numpunct() noexcept
		{	
		_Tidy();
		}

	numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj, _Isdef);
		}
		}

	template<class _Elem2>
		void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
		{	
		_Dp = _Maklocchr(_Ptr->decimal_point[0], static_cast<_Elem2 *>(nullptr), _Cvt);
		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], static_cast<_Elem2 *>(nullptr), _Cvt);
		}

	void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
		{	
		_Dp = (_Elem)_Ptr->_W_decimal_point[0];
		_Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
		}

	void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
		{	
		const lconv *_Ptr = _Lobj._Getlconv();
		_Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();	

		_Grouping = nullptr;
		_Falsename = nullptr;
		_Truename = nullptr;

		try {
		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char *>(nullptr), _Lobj._Getcvt());
		_Falsename = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem *>(nullptr), _Cvt);
		_Truename = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem *>(nullptr), _Cvt);
		} catch (...) {
		_Tidy();
		throw;
		}

		if (_Isdef)
			{	

			_Dp = _Maklocchr('.', static_cast<_Elem *>(nullptr), _Cvt);
			_Kseparator = _Maklocchr(',', static_cast<_Elem *>(nullptr), _Cvt);
			}
		else
			_Getvals((_Elem)0, _Ptr, _Cvt);
		}

	virtual _Elem  do_decimal_point() const
		{	
		return (_Dp);
		}

	virtual _Elem  do_thousands_sep() const
		{	
		return (_Kseparator);
		}

	virtual string  do_grouping() const
		{	
		return (string(_Grouping));
		}

	virtual string_type  do_falsename() const
		{	
		return (string_type(_Falsename));
		}

	virtual string_type  do_truename() const
		{	
		return (string_type(_Truename));
		}

private:
	void _Tidy()
		{	
		:: free((void *)_Grouping);
		:: free((void *)_Falsename);
		:: free((void *)_Truename);
		}

	const char *_Grouping;	
	_Elem _Dp;	
	_Elem _Kseparator;	
	const _Elem *_Falsename;	
	const _Elem *_Truename;	
	};

		
template<class _Elem>
	class numpunct_byname
		: public numpunct<_Elem>
	{	
public:
	explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
		: numpunct<_Elem>(_Locname, _Refs)
		{	
		}

	explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
		: numpunct<_Elem>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~numpunct_byname() noexcept
		{	
		}
	};

		






template<class _Elem>
	 locale::id numpunct<_Elem>::id;




#line 303 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_get
		: public locale::facet
	{	
public:
	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new num_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_get() noexcept
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_get(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _InIt iter_type;

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			bool& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

protected:
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			bool& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		if (_Iosbase.flags() & ios_base::boolalpha)
			{	
			const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
			basic_string<_Elem> _Str(static_cast<size_t>(1), _Elem{});
			_Str += _Punct_fac.falsename();
			_Str.push_back(_Elem{});
			_Str += _Punct_fac.truename();	
			switch (_Getloctxt(_First, _Last, 2, _Str.c_str()))
				{
				case 0:
					_Val = false;
					break;
				case 1:
					_Val = true;
					break;
				default:
					_Val = false;
					_State = ios_base::failbit;
					break;
				}
			}
		else
			{	
			char _Ac[32];
			const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());	
			if (_Ac[0] == '\0')
				{	
					
					
					
					
					
				_Val = false;
				_State = ios_base::failbit;
				}
			else
				{
				char * _Ep;
				int _Errno;
				const long _Ans = :: _Stolx(_Ac, &_Ep, _Base, &_Errno);	
				if (_Ep == _Ac || _Errno != 0)
					{
					_Val = true;
					_State = ios_base::failbit;
					}
				else
					{
					_Val = _Ans != 0;
					if (_Ans != 0 && _Ans != 1)
						{
						_State = ios_base::failbit;
						}
					}
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			const bool _Minus = _Ac[0] == '-';
			const char * _Digits = _Ac;
			
			
			if (_Minus)
				{	
				++_Digits;
				}

			char * _Ep;
			int _Errno;
			const unsigned long _Tmp = :: _Stoulx(_Digits, &_Ep, _Base, &_Errno);	
			_Val = static_cast<unsigned short>(_Tmp);
			if (_Ep == _Digits || _Errno != 0 || _Tmp > 0xffff)
				{
				_State = ios_base::failbit;
				_Val = 0xffff;
				}
			else if (_Minus)
				{	
					
				_Val = static_cast<unsigned short>(0 - _Val);
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		static_assert(sizeof(unsigned int) == sizeof(unsigned long),
			"Bad overflow assumptions due to sizeof(unsigned int) != sizeof(unsigned long)");
		unsigned long _Tmp;
		_First = num_get::do_get(_First, _Last, _Iosbase, _State, _Tmp); 
		_Val = _Tmp;
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			char * _Ep;
			int _Errno;
			_Val = :: _Stolx(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc()); 
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			char * _Ep;
			int _Errno;
			_Val = :: _Stoulx(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			char * _Ep;
			int _Errno;
			_Val = :: _Stollx(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			int _Errno;
			char * _Ep;
			_Val = :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}







	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[(8 + 768 + 16)];
		int _Hexexp = 1000000000;
		const int _Base = _Getffld(_Ac, _First, _Last, _Iosbase, &_Hexexp);	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0.0f;
			}
		else
			{
			int _Errno;
			char * _Ep;
			_Val = _Stofx_v2(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				_Val = 0.0f;
				}
			else if (_Hexexp != 1000000000 && _Hexexp != 0)
				{
				_Val = :: ldexpf(_Val, 4 * _Hexexp);
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[(8 + 768 + 16)];
		int _Hexexp = 1000000000;
		const int _Base = _Getffld(_Ac, _First, _Last, _Iosbase, &_Hexexp);	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0.0;
			}
		else
			{
			int _Errno;
			char * _Ep;
			_Val = _Stodx_v2(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				_Val = 0.0;
				}
			else if (_Hexexp != 1000000000 && _Hexexp != 0)
				{
				_Val = :: ldexp(_Val, 4 * _Hexexp);
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}


	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		static_assert(sizeof(double) == sizeof(long double),
			"Bad assumption: sizeof(double) == sizeof(long double).");
		double _Result;
		_First = num_get::do_get(_First, _Last, _Iosbase, _State, _Result); 
		_Val = _Result;
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex, _Iosbase.getloc());	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = nullptr;
			}
		else
			{
			int _Errno;
			char * _Ep;



			_Val = reinterpret_cast<void *>(:: _Stoulx(_Ac, &_Ep, _Base, &_Errno));
#line 793 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				_Val = nullptr;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

private:
	int __cdecl _Getifld(char *_Ac,
		_InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
			const locale& _Loc) const
		{	
		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Loc);
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Grouping.size() == 0
			? (_Elem)0 : _Punct_fac.thousands_sep();

		constexpr int _Numget_signoff = 22;
		constexpr int _Numget_xoff = 24;
		static constexpr char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Loc);
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		char *_Ptr = _Ac;

		if (_First != _Last)
			{
			if (*_First == _Atoms[_Numget_signoff + 1])
				{	
				*_Ptr++ = '+';
				++_First;
				}
			else if (*_First == _Atoms[_Numget_signoff])
				{	
				*_Ptr++ = '-';
				++_First;
				}
			}

		_Basefield &= ios_base::basefield;
		int _Base = _Basefield == ios_base::oct ? 8
			: _Basefield == ios_base::hex ? 16
			: _Basefield == ios_base::_Fmtzero ? 0 : 10;

		bool _Seendigit = false;	
		bool _Nonzero = false;	

		if (_First != _Last && *_First == _Atoms[0])
			{	
			_Seendigit = true;
			++_First;
			if (_First != _Last && (*_First == _Atoms[_Numget_xoff + 1]
					|| *_First == _Atoms[_Numget_xoff])
				&& (_Base == 0 || _Base == 16))
				{
				_Base = 16;
				_Seendigit = false;
				++_First;
				}
			else if (_Base == 0)
				{
				_Base = 8;
				}
			}

		const auto _Dlen = static_cast<size_t>(_Base == 0 || _Base == 10 ? 10
			: _Base == 8 ? 8 : 16 + 6);
		string _Groups((size_t)1, (char)_Seendigit);
		size_t _Group = 0;

		for (char *const _Pe = &_Ac[32 - 1];
			_First != _Last; ++_First)
			{	
			size_t _Idx = _Find_elem(_Atoms, *_First);
			if (_Idx < _Dlen)
				{	
				*_Ptr = _Src[_Idx];
				if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
					{
					++_Ptr;
					_Nonzero = true;
					}

				_Seendigit = true;
				if (_Groups[_Group] != 127)
					++_Groups[_Group];
				}
			else if (_Groups[_Group] == '\0'
				|| _Kseparator == (_Elem)0
				|| *_First != _Kseparator)
				break;	
			else
				{	
				_Groups.push_back('\0');
				++_Group;
				}
			}

		if (_Group != 0)
			{
			if ('\0' < _Groups[_Group])
				{
				++_Group;	
				}
			else
				{
				_Seendigit = false;	
				}
			}

		for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
			if (*_Pg == 127)
				break;	
			else if ((0 < --_Group && *_Pg != _Groups[_Group])
				|| (0 == _Group && *_Pg < _Groups[_Group]))
				_Seendigit = false;	
			else if ('\0' < _Pg[1])
				++_Pg;	

		if (_Seendigit && !_Nonzero)
			*_Ptr++ = '0';	
		else if (!_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Base);
		}

	int __cdecl _Getffld(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
			return (_Getffldx(_Ac, _First, _Last,
				_Iosbase, _Phexexp));	

		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		char *_Ptr = _Ac;
		bool _Bad = false;
		bool _Sticky = false;

		constexpr int _Numget_signoff = 10;
		constexpr int _Numget_eoff = 12;
		static constexpr char _Src[] = {"0123456789-+Ee"};
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		if (_First != _Last)
			{
			if (*_First == _Atoms[_Numget_signoff + 1])
				{	
				*_Ptr++ = '+';
				++_First;
				}
			else if (*_First == _Atoms[_Numget_signoff])
				{	
				*_Ptr++ = '-';
				++_First;
				}
			}

		char *_Leading = _Ptr;	
		*_Ptr++ = '0';	

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Pten = 0;	
		size_t _Idx;

		const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			{
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
					_Seendigit = true, (void)++_First)
				{
				if (_Max_sig_dig <= _Significant)
					{	
					++_Pten;
					if (0 < _Idx)
						{
						_Sticky = true;
						}
					}
				else if (_Idx != 0 || _Significant != 0)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
				}
			}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				{
				if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
					{	
					_Seendigit = true;
					if (_Max_sig_dig <= _Significant)
						{	
						++_Pten;
						if (0 < _Idx)
							{
							_Sticky = true;
							}
						}
					else if (_Idx != 0 || _Significant != 0)
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}

					if (_Groups[_Group] != 127)
						{
						++_Groups[_Group];
						}
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					{
					break;	
					}
				else
					{	
					_Groups.push_back('\0');
					++_Group;
					}
				}

			if (_Group != 0)
				{
				if ('\0' < _Groups[_Group])
					{
					++_Group;	
					}
				else
					{
					_Bad = true;	
					}
				}

			while (!_Bad && 0 < _Group)
				{
				if (*_Pg == 127)
					{
					break;	
					}

				if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					{
					_Bad = true;	
					}
				else if ('\0' < _Pg[1])
					{
					++_Pg;	
					}
				}
			}

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			{	
			*_Ptr++ = localeconv()->decimal_point[0];
			++_First;
			}

		if (*_Phexexp != 1000000000 && _Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, (void)++_First)
				--_Pten;	
			if (_Pten < 0)
				{	
				*_Ptr++ = '0';
				++_Pten;
				}
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, (void)++_First)
			if (_Significant < _Max_sig_dig)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}
			else if (0 < _Idx)
				_Sticky = true;	

		if (_Sticky)
			{	
			char *_Px = _Ptr;
			while (--_Px != _Leading)
				{	
				if (*_Px != localeconv()->decimal_point[0])
					{	
					if (*_Px != '9')
						{	
						++*_Px;
						break;
						}

					*_Px = '0';	
					}
				}

			if (_Px == _Leading)
				{	
				*_Px = '1';
				++_Pten;
				}
			}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_Numget_eoff + 1]
				|| *_First == _Atoms[_Numget_eoff]))
			{	
			*_Ptr++ = 'e';
			++_First;
			_Seendigit = false;
			_Significant = 0;

			if (_First != _Last)
				{
				if (*_First == _Atoms[_Numget_signoff + 1])
					{	
					*_Ptr++ = '+';
					++_First;
					}
				else if (*_First == _Atoms[_Numget_signoff])
					{	
					*_Ptr++ = '-';
					++_First;
					}
				}

			for (; _First != _Last && *_First == _Atoms[0]; ++_First)
				{	
				_Seendigit = true;
				}

			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, (void)++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Pten);
		}

	int __cdecl _Getffldx(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();

		constexpr int _Numget_signoff = 22;
		constexpr int _Numget_xoff = 24;
		constexpr int _Numget_poff = 26;
		static constexpr char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		char *_Ptr = _Ac;
		bool _Bad = false;
		size_t _Idx;

		if (_First != _Last)
			{
			if (*_First == _Atoms[_Numget_signoff + 1])
				{	
				*_Ptr++ = '+';
				++_First;
				}
			else if (*_First == _Atoms[_Numget_signoff])
				{	
				*_Ptr++ = '-';
				++_First;
				}
			}

		*_Ptr++ = '0';
		*_Ptr++ = 'x';

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Phex = 0;	

		if (_First != _Last && *_First == _Atoms[0])
			{
			if (++_First != _Last
				&& (*_First == _Atoms[_Numget_xoff + 1]
					|| *_First == _Atoms[_Numget_xoff]))
				{
				++_First;	
				}
			else
				{
				_Seendigit = true;	
				}
			}

		const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			{
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff;
					_Seendigit = true, (void)++_First)
				{
				if (_Max_sig_dig <= _Significant)
					{
					++_Phex;	
					}
				else if (_Idx != 0 || _Significant != 0)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
				}
			}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				{
				if ((_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff)
					{	
					_Seendigit = true;
					if (_Max_sig_dig <= _Significant)
						{
						++_Phex;	
						}
					else if (_Idx != 0 || _Significant != 0)
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}

					if (_Groups[_Group] != 127)
						{
						++_Groups[_Group];
						}
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					{
					break;	
					}
				else
					{	
					_Groups.push_back('\0');
					++_Group;
					}
				}

			if (_Group != 0)
				{
				if ('\0' < _Groups[_Group])
					{
					++_Group;	
					}
				else
					{
					_Bad = true;	
					}
				}

			while (!_Bad && 0 < _Group)
				{
				if (*_Pg == 127)
					{
					break;	
					}

				if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					{
					_Bad = true;	
					}
				else if ('\0' < _Pg[1])
					{
					++_Pg;	
					}
				}
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			{	
			*_Ptr++ = localeconv()->decimal_point[0];
			++_First;
			}

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, (void)++_First)
				--_Phex;	
			if (_Phex < 0)
				{	
				*_Ptr++ = '0';
				++_Phex;
				}
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff;
				_Seendigit = true, (void)++_First)
			if (_Significant < _Max_sig_dig)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_Numget_poff + 1]
				|| *_First == _Atoms[_Numget_poff]))
			{	
			*_Ptr++ = 'p';
			++_First;
			_Seendigit = false;
			_Significant = 0;

			if (_First != _Last)
				{
				if (*_First == _Atoms[_Numget_signoff + 1])
					{	
					*_Ptr++ = '+';
					++_First;
					}
				else if (*_First == _Atoms[_Numget_signoff])
					{	
					*_Ptr++ = '-';
					++_First;
					}
				}

			for (; _First != _Last && *_First == _Atoms[0]; ++_First)
				{	
				_Seendigit = true;
				}

			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff;
				_Seendigit = true, (void)++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		*_Phexexp = _Phex;	
		return (0);	
		}



	};

		





template<class _Elem,
	class _InIt>
	 locale::id num_get<_Elem, _InIt>::id;





		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_put
		: public locale::facet
	{	
public:
	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new num_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_put() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _OutIt iter_type;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, bool _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

protected:
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, bool _Val) const
		{	
		if (!(_Iosbase.flags() & ios_base::boolalpha))
			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
		else
			{	
			const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
			basic_string<_Elem> _Str;
			if (_Val)
				_Str.assign(_Punct_fac.truename());
			else
				_Str.assign(_Punct_fac.falsename());

			size_t _Fillcount = _Iosbase.width() <= 0
				|| (size_t)_Iosbase.width() <= _Str.size()
					? 0 : (size_t)_Iosbase.width() - _Str.size();

			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
				{	
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
				}
			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	
			_Iosbase.width(0);
			return (_Rep(_Dest, _Fill, _Fillcount));	
			}
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
				_Iosbase.flags()), _Val))));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
				_Iosbase.flags()), _Val))));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
				_Iosbase.flags()), _Val))));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
				_Iosbase.flags()), _Val))));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		string _Buf;
		char _Fmt[8];
		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
			== ios_base::fixed;
		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
			? 6 : _Iosbase.precision();	
		size_t _Bufsize = (size_t)_Precision;
		if (_Isfixed && 1e10 < :: fabs(_Val))
			{	
			int _Ptwo;
			(void):: frexp(_Val, &_Ptwo);
			_Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
			}

		_Buf.resize(_Bufsize + 50);	
		const auto _Ngen = static_cast<size_t>(:: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
			_Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val));

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		string _Buf;
		char _Fmt[8];
		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
			== ios_base::fixed;
		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
			? 6 : _Iosbase.precision();	
		size_t _Bufsize = (size_t)_Precision;
		if (_Isfixed && 1e10 < :: fabsl(_Val))
			{	
			int _Ptwo;
			(void):: frexpl(_Val, &_Ptwo);
			_Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
			}

		_Buf.resize(_Bufsize + 50);	
		const auto _Ngen = static_cast<size_t>(:: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
			_Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val));

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		char _Buf[2 * 32];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val))));
		}

private:
	char *__cdecl _Ffmt(char *_Fmt,
		char _Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showpoint)
			*_Ptr++ = '#';
		*_Ptr++ = '.';
		*_Ptr++ = '*';	
		if (_Spec != '\0')
			*_Ptr++ = _Spec;	

		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
		if (_Flags & ios_base::uppercase)
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'A'	
				: _Ffl == ios_base::scientific ? 'E' : 'G';	
		else
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'a'	
				: _Ffl == ios_base::scientific ? 'e' : 'g';	

		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Fput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
			size_t _Count) const
		{	
		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));
		const char *_Exps;
		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
			_Exps = "eE";
		else
			{	
			_Exps = "pP";
			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
				_Prefix += 2;
			}
		const size_t _Eoff =
			:: strcspn(&_Buf[0], _Exps);	
		char _Dp[2] = {"."};
		_Dp[0] = :: localeconv()->decimal_point[0];
		const size_t _Poff =
			:: strcspn(&_Buf[0], &_Dp[0]);	

		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Iosbase.getloc());
		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Punct_fac.thousands_sep();

		if (_Poff != _Count)
			_Groupstring[_Poff] = _Punct_fac.decimal_point();

		size_t _Off = _Poff == _Count ? _Eoff : _Poff;
		const char *_Pg = &_Grouping[0];
		while (*_Pg != 127 && '\0' < *_Pg
			&& (size_t)*_Pg < _Off - _Prefix)
			{	
			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
			if ('\0' < _Pg[1])
				++_Pg;	
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	char *__cdecl _Ifmt(char *_Fmt,
		const char *_Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showbase)
			*_Ptr++ = '#';
		if (_Spec[0] != 'L')
			*_Ptr++ = _Spec[0];	
		else

			{	
			*_Ptr++ = 'I';
			*_Ptr++ = '6';
			*_Ptr++ = '4';
			}

		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
			: _Basefield != ios_base::hex ? _Spec[1]	
			: _Flags & ios_base::uppercase ? 'X' : 'x';
		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Iput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
		{	
		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));
		if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
			&& _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
			{
			_Prefix += 2;
			}

		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Iosbase.getloc());
		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const char *_Pg = &_Grouping[0];
		if (*_Pg != 127 && '\0' < *_Pg)
			{	
			const _Elem _Kseparator = _Punct_fac.thousands_sep();
			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Count - _Prefix)
				{	
				_Count -= *_Pg;
				_Groupstring.insert(_Count, 1, _Kseparator);
				if ('\0' < _Pg[1])
					++_Pg;	
				}
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	_OutIt __cdecl _Put(_OutIt _Dest,
		const _Elem *_Ptr, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)
			*_Dest = *_Ptr;
		return (_Dest);
		}

	_OutIt __cdecl _Rep(_OutIt _Dest,
		_Elem _Ch, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest)
			*_Dest = _Ch;
		return (_Dest);
		}
	};

		





template<class _Elem,
	class _OutIt>
	 locale::id num_put<_Elem, _OutIt>::id;

 

  
template  locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
	istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
	ostreambuf_iterator<char, char_traits<char> > >;

template  locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
	istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
	ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
  #line 1860 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"

  






 #line 1869 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"




}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1879 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"
#line 1880 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xlocnum"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ios"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_ios
		: public ios_base
	{	
public:
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ctype<_Elem> _Ctype;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_ios(_Mysb *_Strbuf)
		{	
		init(_Strbuf);
		}

	virtual  ~basic_ios() noexcept
		{	
		}

	void  clear(iostate _State = goodbit, bool _Reraise = false)
		{	
		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);
		}

 
	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}
 #line 52 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ios"

	void  setstate(iostate _State, bool _Reraise = false)
		{	
		clear(rdstate() | _State, _Reraise);
		}

 
	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}
 #line 64 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ios"

	basic_ios&  copyfmt(const basic_ios& _Right)
		{	
		_Tiestr = _Right.tie();
		_Fillch = _Right.fill();
		ios_base::copyfmt(_Right);
		return (*this);
		}

	_Myos * tie() const
		{	
		return (_Tiestr);
		}

	_Myos * tie(_Myos *_Newtie)
		{	
		_Myos *_Oldtie = _Tiestr;
		_Tiestr = _Newtie;
		return (_Oldtie);
		}

	 _Mysb * rdbuf() const
		{	
		return (_Mystrbuf);
		}

	_Mysb * rdbuf(_Mysb *_Strbuf)
		{	
		_Mysb *_Oldstrbuf = _Mystrbuf;
		_Mystrbuf = _Strbuf;
		clear();
		return (_Oldstrbuf);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = ios_base::imbue(_Loc);
		if (rdbuf() != nullptr)
			rdbuf()->pubimbue(_Loc);
		return (_Oldlocale);
		}

	_Elem  fill() const
		{	
		return (_Fillch);
		}

	_Elem  fill(_Elem _Newfill)
		{	
		_Elem _Oldfill = _Fillch;
		_Fillch = _Newfill;
		return (_Oldfill);
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (::std:: use_facet<_Ctype>(getloc()).narrow(_Ch, _Dflt));
		}

	_Elem  widen(char _Byte) const
		{	
		return (::std:: use_facet<_Ctype>(getloc()).widen(_Byte));
		}

	void  move(basic_ios& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mystrbuf = nullptr;
			_Tiestr = nullptr;
			this->swap(_Right);
			}
		}

	void  move(basic_ios&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mystrbuf = nullptr;
			_Tiestr = nullptr;
			this->swap(_Right);
			}
		}

	void  swap(basic_ios& _Right) noexcept
		{	
		ios_base::swap(_Right);
		::std:: swap(_Fillch, _Right._Fillch);
		::std:: swap(_Tiestr, _Right._Tiestr);
		}

	void  set_rdbuf(_Mysb *_Strbuf)
		{	
		_Mystrbuf = _Strbuf;
		}

protected:
	void  init(_Mysb *_Strbuf = nullptr,
		bool _Isstd = false)
		{	
		_Init();	
		_Mystrbuf = _Strbuf;
		_Tiestr = nullptr;
		_Fillch = widen(' ');

		if (_Mystrbuf == nullptr)
			setstate(badbit);

		if (_Isstd)
			_Addstd(this);	
		}

	 basic_ios()
		{	
		}

private:
	_Mysb *_Mystrbuf;	
	_Myos *_Tiestr;	
	_Elem _Fillch;	

public:
	 basic_ios(const basic_ios&) = delete;
	basic_ios&  operator=(const basic_ios&) = delete;
	};

 

  
template class __declspec(dllimport) basic_ios<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
	char_traits<wchar_t> >;
  #line 198 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ios"

  



 #line 204 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ios"

		
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl dec(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::dec, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::fixed, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hex(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hex, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl internal(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::internal, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl left(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::left, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::uppercase);
	return (_Iosbase);
	}

inline ios_base& __cdecl oct(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::oct, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl right(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::right, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::scientific, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::uppercase);
	return (_Iosbase);
	}


namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1 {
using ::std:: hexfloat;
}
#line 355 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ios"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 363 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ios"
#line 364 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ios"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		

 
 

 



 



 



#line 34 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"

 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_ostream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
	typedef num_put<_Elem, _Iter> _Nput;

	explicit  basic_ostream(
		basic_streambuf<_Elem, _Traits> *_Strbuf,

		bool _Isstd = false)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_ostream(_Uninitialized, bool _Addit = true)
		{	
		if (_Addit)
			this->_Addstd(this);	
		}

protected:
	 basic_ostream(basic_ostream&& _Right)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		}

	basic_ostream&  operator=(basic_ostream&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(basic_ostream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			_Myios::swap(_Right);
		}

public:
	 basic_ostream(const basic_ostream&) = delete;
	basic_ostream&  operator=(const basic_ostream&) = delete;

	virtual  ~basic_ostream() noexcept
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	class _Sentry_base
		{	
	public:
		 _Sentry_base(basic_ostream& _Ostr)
			: _Myostr(_Ostr)
			{	
			if (_Myostr.rdbuf() != nullptr)
				_Myostr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() noexcept
			{	
			if (_Myostr.rdbuf() != nullptr)
				_Myostr.rdbuf()->_Unlock();
			}

		basic_ostream& _Myostr;	

		_Sentry_base& operator=(const _Sentry_base&) = delete;
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(basic_ostream& _Ostr)
			: _Sentry_base(_Ostr)
			{	
			if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr)
				_Ostr.tie()->flush();
			_Ok = _Ostr.good();	
			}

 



  #pragma warning(push)
  #pragma warning(disable: 4996)	
 #line 134 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"
		 ~sentry() noexcept
			{	
 
			if (!::std:: uncaught_exception())	
				{
				this->_Myostr._Osfx();
				}
 

#line 144 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"
			}
 


  #pragma warning(pop)
 #line 150 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"

		explicit  operator bool() const
			{	
			return (_Ok);
			}

		 sentry(const sentry&) = delete;
		sentry&  operator=(const sentry&) = delete;

	private:
		bool _Ok;	
		};

	bool  opfx()
		{	
		if (this->good() && _Myios::tie() != nullptr && _Myios::tie() != this)
			_Myios::tie()->flush();
		return (this->good());
		}

	void  osfx()
		{	
		_Osfx();
		}

	void  _Osfx()
		{	
		try {
		if (this->good() && this->flags() & ios_base::unitbuf)
			if (_Myios::rdbuf()->pubsync() == -1)	
				_Myios::setstate(ios_base::badbit);
		} catch (...) {
		}
		}

  


















	basic_ostream&  operator<<(basic_ostream& (__cdecl *_Pfn)(basic_ostream&))
		{	
		return ((*_Pfn)(*this));
		}

	basic_ostream&  operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	basic_ostream&  operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	basic_ostream&  operator<<(bool _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned short)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}










	basic_ostream&  operator<<(unsigned short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned int)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(unsigned int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(unsigned long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(long long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(unsigned long long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(float _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (double)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(long double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(const void *_Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}







#line 507 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"

	basic_ostream&  operator<<(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != nullptr)
			for (int_type _Meta = _Traits::eof(); ; _Copied = true)
				{	
				try {
				_Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
					? _Strbuf->sgetc() : _Strbuf->snextc();
				} catch (...) {
					_Myios::setstate(ios_base::failbit);
					throw;
				}

				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					break;	

				try {
					if (_Traits::eq_int_type(_Traits::eof(),
						_Myios::rdbuf()->sputc(
							_Traits::to_char_type(_Meta))))
						{	
						_State |= ios_base::badbit;
						break;
						}
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

		this->width(0);
		_Myios::setstate(_Strbuf == nullptr ? ios_base::badbit
			: !_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	basic_ostream&  put(_Elem _Ch)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputc(_Ch)))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  write(const _Elem *_Str,
		streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else if (0 < _Count)
			{	
			try {
			if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  flush()
		{	
		if (_Myios::rdbuf() != nullptr)
			{	
			const sentry _Ok(*this);

			if (_Ok && _Myios::rdbuf()->pubsync() == -1)
				_Myios::setstate(ios_base::badbit);	
			}
		return (*this);
		}

	basic_ostream&  seekp(pos_type _Pos)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::out) == -1)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	basic_ostream&  seekp(off_type _Off, ios_base::seekdir _Way)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::out) == -1)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	pos_type  tellp()
		{	
		const sentry _Ok(*this);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::out));
		else
			return (pos_type(-1));
		}
	};

 #pragma vtordisp(pop)	

  

















































 

  
template class __declspec(dllimport) basic_ostream<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
	char_traits<wchar_t> >;
  #line 691 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"

  



 #line 697 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"

		

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize):: strlen(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Ostr.getloc());
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Ostr.getloc());
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr,
		const char *_Val)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, char _Ch)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Ostr,
	class _Ty,
	class = void>
	struct _Can_stream_out
		: false_type
	{
	};

template<class _Ostr,
	class _Ty>
	struct _Can_stream_out<_Ostr, _Ty, void_t<decltype(::std:: declval<_Ostr&>() << ::std:: declval<const _Ty&>())>>
		: true_type
	{
	};

template<class _Ostr,
	class _Ty,
	enable_if_t<conjunction_v< 
		negation<is_lvalue_reference<_Ostr>>,
		is_base_of<ios_base, _Ostr>,
		_Can_stream_out<_Ostr, _Ty>>, int> = 0> inline
	_Ostr&& operator<<(_Ostr&& _Os, const _Ty& _Val)
	{	
	_Os << _Val;
	return (::std:: move(_Os));
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Ostr.widen('\n'));
	_Ostr.flush();
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Elem());
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const error_code& _Errcode)
	{	
	return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
	}
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1059 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"
#line 1060 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ostream"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\istream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_istream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef istreambuf_iterator<_Elem, _Traits> _Iter;
	typedef ctype<_Elem> _Ctype;
	typedef num_get<_Elem, _Iter> _Nget;

  







#line 40 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\istream"

	explicit  basic_istream(_Mysb *_Strbuf,
		bool _Isstd = false)

		: _Chcount(0)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_istream(_Uninitialized)
		{	
		this->_Addstd(this);
		}

protected:
	 basic_istream(basic_istream&& _Right)
		: _Chcount(_Right._Chcount)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		_Right._Chcount = 0;
		}

	basic_istream&  operator=(basic_istream&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(basic_istream& _Right)
		{	
		_Myios::swap(_Right);
		::std:: swap(_Chcount, _Right._Chcount);
		}

public:
	 basic_istream(const basic_istream&) = delete;
	basic_istream&  operator=(const basic_istream&) = delete;

	virtual  ~basic_istream() noexcept
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

		
	class _Sentry_base
		{	
	public:
		 _Sentry_base(basic_istream& _Istr)
			: _Myistr(_Istr)
			{	
			if (_Myistr.rdbuf() != nullptr)
				_Myistr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() noexcept
			{	
			if (_Myistr.rdbuf() != nullptr)
				_Myistr.rdbuf()->_Unlock();
			}

		basic_istream& _Myistr;	

		_Sentry_base& operator=(const _Sentry_base&) = delete;
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(basic_istream& _Istr, bool _Noskip = false)
			: _Sentry_base(_Istr)
			{	
			_Ok = this->_Myistr._Ipfx(_Noskip);
			}

		explicit  operator bool() const
			{	
			return (_Ok);
			}

		 sentry(const sentry&) = delete;
		sentry&  operator=(const sentry&) = delete;

	private:
		bool _Ok;	
		};

	bool  _Ipfx(bool _Noskip = false)
		{	
		if (this->good())
			{	
			if (_Myios::tie() != nullptr)
				_Myios::tie()->flush();

			if (!_Noskip && this->flags() & ios_base::skipws)
				{	
				const _Ctype& _Ctype_fac = ::std:: use_facet<_Ctype>(this->getloc());

				try {
				int_type _Meta = _Myios::rdbuf()->sgetc();

				for (; ; _Meta = _Myios::rdbuf()->snextc())
					if (_Traits::eq_int_type(_Traits::eof(), _Meta))
						{	
						_Myios::setstate(ios_base::eofbit);
						break;
						}
					else if (!_Ctype_fac.is(_Ctype::space,
						_Traits::to_char_type(_Meta)))
						break;	
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

			if (this->good())
				return (true);
			}
		_Myios::setstate(ios_base::failbit);
		return (false);
		}

	bool  ipfx(bool _Noskip = false)
		{	
		return (_Ipfx(_Noskip));
		}

	void  isfx()
		{	
		}

  


















	basic_istream&  operator>>(basic_istream& (__cdecl *_Pfn)(basic_istream&))
		{	
		return ((*_Pfn)(*this));
		}

	basic_istream&  operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	basic_istream&  operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

private:
	template<class _Ty>
		basic_istream& _Common_extract_with_num_get(_Ty& _Val)
		{	
		ios_base::iostate _Err = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			try {
			::std:: use_facet<_Nget>(this->getloc()).get(*this, {}, *this, _Err, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Err);
		return (*this);
		}

public:
	basic_istream&  operator>>(bool& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(short& _Val)
		{	
		ios_base::iostate _Err = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			try {
			long _Lval;
			::std:: use_facet<_Nget>(this->getloc()).get(*this, {}, *this, _Err, _Lval);
			if (_Lval < (-32768))
				{
				_Err |= ios_base::failbit;
				_Val = (-32768);
				}
			else if (_Lval > 32767)
				{
				_Err |= ios_base::failbit;
				_Val = 32767;
				}
			else
				{
				_Val = static_cast<short>(_Lval);
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Err);
		return (*this);
		}










	basic_istream&  operator>>(unsigned short& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(int& _Val)
		{	
		static_assert(sizeof(int) == sizeof(long),
			"Bad overflow assumptions due to sizeof(int) != sizeof(long)");
		long _Result = _Val;
		_Common_extract_with_num_get(_Result);
		_Val = _Result;
		return (*this);
		}

	basic_istream&  operator>>(unsigned int& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(long& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(unsigned long& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(long long& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(unsigned long long& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(float& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(double& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(long double& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(void *& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(_Mysb * _Strbuf)
		{	
		_Chcount = 0;	
		const sentry _Ok(*this, true);
		ios_base::iostate _State = ios_base::goodbit;
		if (_Ok && _Strbuf != nullptr)
			{	
			try {
			for (int_type _Meta = _Myios::rdbuf()->sgetc(); ; _Meta = _Myios::rdbuf()->snextc())
				{
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				
				try {
					if (_Traits::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Traits::to_char_type(_Meta))))
						{
						break;
						}

				} catch (...) {
					break;
				}

				++_Chcount;
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		if (_Chcount == 0)
			{	
			_State = ios_base::failbit;
			}

		_Myios::setstate(_State);
		return (*this);
		}

	int_type  get()
		{	
		int_type _Meta = 0;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			_Meta = _Myios::rdbuf()->sgetc();

			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				_State |= ios_base::eofbit | ios_base::failbit;	
			else
				{	
				_Myios::rdbuf()->sbumpc();
				++_Chcount;
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	basic_istream&  get(_Elem *_Str, streamsize _Count)
		{	
		return (get(_Str, _Count, _Myios::widen('\n')));
		}

	basic_istream&  get(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Traits::to_char_type(_Meta) == _Delim)
					break;	
				else
					{	
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Chcount == 0
			? _State | ios_base::failbit : _State);
		*_Str = _Elem();	
		return (*this);
		}

	basic_istream&  get(_Elem& _Ch)
		{	
		int_type _Meta = get();
		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
			_Ch = _Traits::to_char_type(_Meta);
		return (*this);
		}

	basic_istream&  get(_Mysb& _Strbuf)
		{	
		return (get(_Strbuf, _Myios::widen('\n')));
		}

	basic_istream&  get(_Mysb& _Strbuf, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						_Elem _Ch = _Traits::to_char_type(_Meta);
						if (_Ch == _Delim
							|| _Traits::eq_int_type(_Traits::eof(),
								_Strbuf.sputc(_Ch)))
							break;
					} catch (...) {
						break;
					}
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		if (_Chcount == 0)
			_State |= ios_base::failbit;
		_Myios::setstate(_State);
		return (*this);
		}

	basic_istream&  getline(_Elem *_Str, streamsize _Count)
		{	
		return (getline(_Str, _Count, _Myios::widen('\n')));
		}

	basic_istream&  getline(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			int_type _Metadelim = _Traits::to_int_type(_Delim);

			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Meta == _Metadelim)
					{	
					++_Chcount;
					_Myios::rdbuf()->sbumpc();
					break;
					}
				else if (--_Count <= 0)
					{	
					_State |= ios_base::failbit;
					break;
					}
				else
					{	
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		*_Str = _Elem();	
		_Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
		return (*this);
		}

	basic_istream&  ignore(streamsize _Count = 1,
		int_type _Metadelim = _Traits::eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			for (;;)
				{	
				int_type _Meta;
				if (_Count != (numeric_limits<streamsize>::max)()
					&& --_Count < 0)
					break;	
				else if (_Traits::eq_int_type(_Traits::eof(),
					_Meta = _Myios::rdbuf()->sbumpc()))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					++_Chcount;
					if (_Meta == _Metadelim)
						break;	
					}
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_istream&  read(_Elem *_Str, streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
			_Chcount += _Num;
			if (_Num != _Count)
				_State |= ios_base::eofbit | ios_base::failbit;	
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  readsome(_Elem *_Str,
		streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		streamsize _Num;

		if (!_Ok)
			_State |= ios_base::failbit;	
		else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
			_State |= ios_base::eofbit;	
		else if (0 < _Count && 0 < _Num)
			{	
			read(_Str, _Num < _Count ? _Num : _Count);
			}

		_Myios::setstate(_State);
		return (gcount());
		}

	int_type  peek()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		int_type _Meta = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Meta = _Myios::rdbuf()->sgetc()))
				_State |= ios_base::eofbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	basic_istream&  putback(_Elem _Ch)
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputbackc(_Ch)))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_istream&  unget()
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sungetc()))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	 streamsize  gcount() const
		{	
		return (_Chcount);
		}

	int  sync()
		{	
		const sentry _Ok(*this, true);

		if (_Myios::rdbuf() == nullptr)
			return (-1);
		else if (_Myios::rdbuf()->pubsync() == -1)
			{	
			_Myios::setstate(ios_base::badbit);
			return (-1);
			}
		else
			return (0);
		}

	basic_istream&  seekg(pos_type _Pos)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::in) == -1)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	basic_istream&  seekg(off_type _Off, ios_base::seekdir _Way)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::in) == -1)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	pos_type  tellg()
		{	
		const sentry _Ok(*this, true);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::in));
		else
			return (pos_type(-1));
		}

private:
	streamsize _Chcount;	
	};

 #pragma vtordisp(pop)	

  






















 

  
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
  #line 776 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\istream"

  



 #line 782 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\istream"

		
template<class _Elem,
	class _Traits>
	class basic_iostream
	: public basic_istream<_Elem, _Traits>,
		public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
		: _Myis(_Strbuf, false),
			_Myos(_Noinit, false)
		{	
		}

protected:
	 basic_iostream(basic_iostream&& _Right)
		: _Myis(_Right.rdbuf(), false),
			_Myos(_Noinit, false)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		}

	basic_iostream&  operator=(basic_iostream&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(basic_iostream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			_Myios::swap(_Right);
		}

public:
	 basic_iostream(const basic_iostream&) = delete;
	basic_iostream&  operator=(const basic_iostream&) = delete;

	virtual  ~basic_iostream() noexcept
		{	
		}
	};

 

  
template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
  #line 842 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\istream"

  



 #line 848 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\istream"

		

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;
	ios_base::iostate _State = ios_base::goodbit;
	_Elem *_Str0 = _Str;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = ::std:: use_facet<_Ctype>(_Istr.getloc());

		try {
		streamsize _Count = 0 < _Istr.width() ? _Istr.width()
			: (numeric_limits<streamsize>::max)();
		typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
		_Elem _Ch;
		for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Ch = _Traits::to_char_type(_Meta))
					|| _Ch == _Elem())
				break;	
			else
				*_Str++ = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	*_Str = _Elem();	
	_Istr.width(0);
	_Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	typename _Myis::int_type _Meta;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		try {
		_Meta = _Istr.rdbuf()->sbumpc();
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			_State |= ios_base::eofbit | ios_base::failbit;	
		else
			_Ch = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Istr,
	class _Ty,
	class = void>
	struct _Can_stream_in
		: false_type
	{
	};

template<class _Istr,
	class _Ty>
	struct _Can_stream_in<_Istr, _Ty, void_t<decltype(::std:: declval<_Istr&>() >> ::std:: declval<_Ty>())>>
		: true_type
	{
	};

template<class _Istr,
	class _Ty,
	enable_if_t<conjunction_v<	
		negation<is_lvalue_reference<_Istr>>,
		is_base_of<ios_base, _Istr>,
		_Can_stream_in<_Istr, _Ty>>, int> = 0> inline
	_Istr&& operator>>(_Istr&& _Is, _Ty&& _Val)
	{	
	_Is >> ::std:: forward<_Ty>(_Val);
	return (::std:: move(_Is));
	}

		
template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>&
		__cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
	{	
	const typename basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

	if (_Ok)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const auto& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Istr.getloc());

		try {
		for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ; _Meta = _Istr.rdbuf()->snextc())
			{
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (!_Ctype_fac.is(ctype<_Elem>::space, _Traits::to_char_type(_Meta)))
				{
				break;	
				}
			}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		_Istr.setstate(_State);
		}

	return (_Istr);
	}
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1012 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\istream"
#line 1013 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\istream"





#line 7 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\string"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring_insert.h"


#pragma once






#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {

template<class _Elem,
	class _Traits,
	class _SizeT> inline
	basic_ostream<_Elem, _Traits>& _Insert_string(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const _Elem * const _Data, const _SizeT _Size)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	_SizeT _Pad = _Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size
		? 0 : static_cast<_SizeT>(_Ostr.width()) - _Size;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Data, (streamsize)_Size)
				!= (streamsize)_Size)
				_State |= ios_base::badbit;
		else
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

}



#pragma warning(pop)
#pragma pack(pop)
#line 72 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring_insert.h"
#line 73 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xstring_insert.h"
#line 8 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\string"



#line 12 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\string"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef ctype<_Elem> _Ctype;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = ::std:: use_facet<_Ctype>(_Istr.getloc());
		_Str.erase();

		try {
		_Mysizt _Size = 0 < _Istr.width()
			&& (_Mysizt)_Istr.width() < _Str.max_size()
				? (_Mysizt)_Istr.width() : _Str.max_size();
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Traits::to_char_type(_Meta)))
				break;	
			else
				{	
				_Str.push_back(_Traits::to_char_type(_Meta));
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.width(0);
	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr, true);

	if (_Ok)
		{	
		try {
		_Str.erase();
		const typename _Traits::int_type _Metadelim =
			_Traits::to_int_type(_Delim);
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; ; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Traits::eq_int_type(_Meta, _Metadelim))
				{	
				_Changed = true;
				_Istr.rdbuf()->sbumpc();
				break;
				}
			else if (_Str.max_size() <= _Str.size())
				{	
				_State |= ios_base::failbit;
				break;
				}
			else
				{	
				_Str += _Traits::to_char_type(_Meta);
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(_Istr, _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (::std:: move(_Istr) >> _Str);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	return (getline(::std:: move(_Istr), _Str, _Delim));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (_Insert_string(_Ostr, _Str.data(), _Str.size()));
	}

		

inline int stoi(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if (_Errno_ref == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long long stoll(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const long long _Ans = :: strtoll(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long long stoull(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const unsigned long long _Ans = :: strtoull(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const string& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const float _Ans = :: strtof(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const string& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const double _Ans = :: strtod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const string& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const long double _Ans = :: strtold(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		
inline int stoi(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if (_Errno_ref == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long long stoll(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const long long _Ans = :: wcstoll(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long long stoull(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const unsigned long long _Ans = :: wcstoull(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const wstring& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const float _Ans = :: wcstof(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const wstring& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const double _Ans = :: wcstod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const wstring& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const long double _Ans = :: wcstold(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		
template<class _Elem,
	class _UTy> inline
	_Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal)
	{	
	static_assert(is_unsigned_v<_UTy>, "_UTy must be unsigned");





#pragma warning(push)
#pragma warning(disable: 4127)	
	if (sizeof(_UTy) > 4)
		{	
		while (_UVal > 0xFFFFFFFFU)
			{
			auto _UVal_chunk = static_cast<unsigned long>(_UVal % 1000000000);
			_UVal /= 1000000000;

			for (int _Idx = 0; _Idx != 9; ++_Idx)
				{
				*--_RNext = static_cast<_Elem>('0' + _UVal_chunk % 10);
				_UVal_chunk /= 10;
				}
			}
		}
#pragma warning(pop)

	auto _UVal_trunc = static_cast<unsigned long>(_UVal);
#line 493 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\string"

	do
		{
		*--_RNext = static_cast<_Elem>('0' + _UVal_trunc % 10);
		_UVal_trunc /= 10;
		}
	while (_UVal_trunc != 0);
	return (_RNext);
	}

template<class _Elem,
	class _Ty> inline
	basic_string<_Elem> _Integral_to_string(const _Ty _Val)
	{	
	static_assert(is_integral_v<_Ty>, "_Ty must be integral");
	using _UTy = make_unsigned_t<_Ty>;
	_Elem _Buff[21]; 
	_Elem* const _Buff_end = ::std:: end(_Buff);
	_Elem* _RNext = _Buff_end;
	const auto _UVal = static_cast<_UTy>(_Val);
	if (_Val < 0)
		{
		_RNext = _UIntegral_to_buff(_RNext, 0 - _UVal);
		*--_RNext = '-';
		}
	else
		_RNext = _UIntegral_to_buff(_RNext, _UVal);

	return (basic_string<_Elem>(_RNext, _Buff_end));
	}

template<class _Ty> inline
	string _Floating_to_string(const char *_Fmt, _Ty _Val)
	{	
	static_assert(is_floating_point_v<_Ty>,
		"_Ty must be floating point");

	const auto _Len = static_cast<size_t>(:: _scprintf(_Fmt, _Val));
	string _Str(_Len, '\0');
	:: sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
	return (_Str);
	}

template<class _Ty> inline
	wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val)
	{	
	static_assert(is_floating_point_v<_Ty>,
		"_Ty must be floating point");

	const auto _Len = static_cast<size_t>(:: _scwprintf(_Fmt, _Val));
	wstring _Str(_Len, L'\0');
	:: swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
	return (_Str);
	}



		
 inline string to_string(int _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

 inline string to_string(unsigned int _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

 inline string to_string(long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

 inline string to_string(unsigned long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

 inline string to_string(long long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

 inline string to_string(unsigned long long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

 inline string to_string(float _Val)
	{	
	return (_Floating_to_string("%f", _Val));
	}

 inline string to_string(double _Val)
	{	
	return (_Floating_to_string("%f", _Val));
	}

 inline string to_string(long double _Val)
	{	
	return (_Floating_to_string("%Lf", _Val));
	}

		
 inline wstring to_wstring(int _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

 inline wstring to_wstring(unsigned int _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

 inline wstring to_wstring(long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

 inline wstring to_wstring(unsigned long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

 inline wstring to_wstring(long long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

 inline wstring to_wstring(unsigned long long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

 inline wstring to_wstring(float _Val)
	{	
	return (_Floating_to_wstring(L"%f", _Val));
	}

 inline wstring to_wstring(double _Val)
	{	
	return (_Floating_to_wstring(L"%f", _Val));
	}

 inline wstring to_wstring(long double _Val)
	{	
	return (_Floating_to_wstring(L"%Lf", _Val));
	}

	
inline namespace literals {
inline namespace string_literals {
 inline string operator "" s(const char *_Str, size_t _Len)
	{	
	return (string(_Str, _Len));
	}

 inline wstring operator "" s(const wchar_t *_Str, size_t _Len)
	{	
	return (wstring(_Str, _Len));
	}

 inline u16string operator "" s(const char16_t *_Str, size_t _Len)
	{	
	return (u16string(_Str, _Len));
	}

 inline u32string operator "" s(const char32_t *_Str, size_t _Len)
	{	
	return (u32string(_Str, _Len));
	}
}	
}	












#line 679 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\string"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 687 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\string"
#line 688 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\string"





#line 4 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iostream"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 
namespace std {
  











		
 extern __declspec(dllimport) istream cin, *_Ptr_cin;
 extern __declspec(dllimport) ostream cout, *_Ptr_cout;
 extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
 extern __declspec(dllimport) ostream clog, *_Ptr_clog;

 extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
 extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
 extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
 extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;

		
class __declspec(dllimport) _Winit {
public:
	__thiscall _Winit();
	__thiscall ~_Winit() noexcept;
private:
	 static int _Init_cnt;
	};
  #line 47 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iostream"
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 53 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iostream"
#line 54 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\iostream"





#line 5 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

#pragma once





#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )





extern "C" {

__declspec(noalias) void __cdecl __std_swap_ranges_trivially_swappable_noalias(
	void * _First1, void * _Last1, void * _First2) noexcept;
}
#line 22 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

namespace std {
		
const int _ISORT_MAX = 32;	

		
template<class _Diff>
	constexpr ptrdiff_t _Temporary_buffer_size(const _Diff _Value) noexcept
	{	
	using _CT = common_type_t<ptrdiff_t, _Diff>;
	return (static_cast<ptrdiff_t>(_Min_value(static_cast<_CT>(2147483647i32), static_cast<_CT>(_Value))));
	}

template<class _Ty>
	struct _Optimistic_temporary_buffer
	{	
	static constexpr size_t _Optimistic_size = 4096; 
	static constexpr size_t _Optimistic_count = _Max_value(static_cast<size_t>(1), _Optimistic_size / sizeof(_Ty));

	template<class _Diff>
		explicit _Optimistic_temporary_buffer(const _Diff _Requested_size) noexcept
		{	
		const auto _Attempt = _Temporary_buffer_size(_Requested_size);
		if (_Requested_size <= _Optimistic_count)
			{	
			_Data = reinterpret_cast<_Ty *>(&_Stack_space[0]);
			_Capacity = static_cast<ptrdiff_t>(_Requested_size);	
			return;
			}

		const pair<_Ty *, ptrdiff_t> _Raw = _Get_temporary_buffer<_Ty>(_Attempt);
		if (_Raw.second > _Optimistic_count)
			{	
			_Data = _Raw.first;
			_Capacity = _Raw.second;
			return;
			}

		
		_Return_temporary_buffer(_Raw.first);
		_Data = reinterpret_cast<_Ty *>(&_Stack_space[0]);
		_Capacity = _Optimistic_count;
		}

	_Optimistic_temporary_buffer(const _Optimistic_temporary_buffer&) = delete;
	_Optimistic_temporary_buffer& operator=(const _Optimistic_temporary_buffer&) = delete;

	~_Optimistic_temporary_buffer() noexcept
		{	
		if (_Capacity > _Optimistic_count)
			{
			_Return_temporary_buffer(_Data);
			}
		}

	_Ty * _Data;	
	ptrdiff_t _Capacity;
	aligned_union_t<0, _Ty> _Stack_space[_Optimistic_count];
	};

		
template<class _InIt,
	class _Fn> inline
	_Fn for_each(_InIt _First, _InIt _Last, _Fn _Func)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		_Func(*_UFirst);
		}

	return (_Func);
	}

































































#line 163 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	 inline _InIt find_if(_InIt _First, const _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			break;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}







#line 191 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	 inline _InIt find_if_not(_InIt _First, const _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (!_Pred(*_UFirst))
			{
			break;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}







#line 219 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	 inline _FwdIt adjacent_find(const _FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	auto _ULast = _Get_unwrapped(_Last);
	if (_UFirst != _ULast)
		{
		for (auto _UNext = _UFirst; ++_UNext != _ULast; _UFirst = _UNext)
			{
			if (_Pred(*_UFirst, *_UNext))
				{
				_ULast = _UFirst;
				break;
				}
			}
		}

	_Seek_wrapped(_Last, _ULast);
	return (_Last);
	}

template<class _FwdIt>
	 inline _FwdIt adjacent_find(const _FwdIt _First, const _FwdIt _Last)
	{	
	return (::std:: adjacent_find(_First, _Last, equal_to<>()));
	}















#line 265 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	 inline _Iter_diff_t<_InIt> count_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_Iter_diff_t<_InIt> _Count = 0;
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			++_Count;
			}
		}

	return (_Count);
	}








#line 294 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2> _Mismatch_unchecked(_InIt1 _First1, const _InIt1 _Last1, _InIt2 _First2, _Pr _Pred)
	{	
	while (_First1 != _Last1 && _Pred(*_First1, *_First2))
		{
		++_First1;
		++_First2;
		}

	return {_First1, _First2};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	 inline pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, const _InIt1 _Last1, _InIt2 _First2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
	const auto _Result = _Mismatch_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred));
	_Seek_wrapped(_First2, _Result.second);
	_Seek_wrapped(_First1, _Result.first);
	return {_First1, _First2};
	}

 
template<class _InIt1,
	class _RightTy,
	size_t _RightSize,
	class _Pr,
	enable_if_t<!is_same_v<_RightTy *, _Pr>, int> = 0>
	 inline pair<_InIt1, _RightTy *> mismatch(const _InIt1 _First1, const _InIt1 _Last1,
		_RightTy (&_First2)[_RightSize], _Pr _Pred)
	{	
	const auto _Result = ::std:: mismatch(_First1, _Last1,
		_Array_iterator<_RightTy, _RightSize>(_First2), _Pass_fn(_Pred));
	return {_Result.first, _Result.second._Unwrapped()};
	}
 #line 339 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"


























#line 366 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2>
	 inline pair<_InIt1, _InIt2> mismatch(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2)
	{	
	return (::std:: mismatch(_First1, _Last1, _First2, equal_to<>()));
	}

 
template<class _InIt1,
	class _RightTy,
	size_t _RightSize>
	 inline pair<_InIt1, _RightTy *> mismatch(const _InIt1 _First1, const _InIt1 _Last1,
		_RightTy (&_First2)[_RightSize])
	{	
	return (::std:: mismatch(_First1, _Last1, _First2, equal_to<>()));
	}
 #line 384 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"



























#line 412 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2> _Mismatch_unchecked(_InIt1 _First1, const _InIt1 _Last1,
		_InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
		input_iterator_tag, input_iterator_tag)
	{	
	while (_First1 != _Last1 && _First2 != _Last2 && _Pred(*_First1, *_First2))
		{
		++_First1;
		++_First2;
		}

	return {_First1, _First2};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2> _Mismatch_unchecked(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	using _CT = _Common_diff_t<_InIt1, _InIt2>;
	const _CT _Count1 = _Last1 - _First1;
	const _CT _Count2 = _Last2 - _First2;
	const auto _Count = static_cast<_Iter_diff_t<_InIt1>>(_Min_value(_Count1, _Count2));
	return (_Mismatch_unchecked(_First1, _First1 + _Count, _First2, _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	 inline pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	const auto _Result = _Mismatch_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
			_Get_unwrapped(_First2), _Get_unwrapped(_Last2), _Pass_fn(_Pred),
			_Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>());
	_Seek_wrapped(_First2, _Result.second);
	_Seek_wrapped(_First1, _Result.first);
	return {_First1, _First2};
	}









#line 468 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2>
	 inline pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: mismatch(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}













#line 489 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	 inline bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (!_Pred(*_UFirst))
			{
			return (false);
			}
		}

	return (true);
	}







#line 516 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	 inline bool any_of(const _InIt _First, const _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			return (true);
			}
		}

	return (false);
	}







#line 543 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	 inline bool none_of(const _InIt _First, const _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			return (false);
			}
		}

	return (true);
	}







#line 570 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			*_UDest = *_UFirst;
			++_UDest;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize,
	class _Pr> inline
	_DestTy * copy_if(_InIt _First, _InIt _Last, _DestTy (&_Dest)[_DestSize], _Pr _Pred)
	{	
	return (::std:: copy_if(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))
		._Unwrapped());
	}
 #line 605 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"





























#line 635 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	pair<_OutIt1, _OutIt2>
		partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest_true, _OutIt2 _Dest_false, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest_true = _Get_unwrapped_unverified(_Dest_true);
	auto _UDest_false = _Get_unwrapped_unverified(_Dest_false);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			*_UDest_true = *_UFirst;
			++_UDest_true;
			}
		else
			{
			*_UDest_false = *_UFirst;
			++_UDest_false;
			}
		}

	_Seek_wrapped(_Dest_false, _UDest_false);
	_Seek_wrapped(_Dest_true, _UDest_true);
	return {_Dest_true, _Dest_false};
	}

 
template<class _InIt,
	class _DestTrueTy,
	size_t _DestTrueSize,
	class _OutIt2,
	class _Pr> inline
	pair<_DestTrueTy *, _OutIt2>
		partition_copy(_InIt _First, _InIt _Last,
			_DestTrueTy (&_Dest_true)[_DestTrueSize], _OutIt2 _Dest_false, _Pr _Pred)
	{	
	const auto _Result = ::std:: partition_copy(_First, _Last,
		_Array_iterator<_DestTrueTy, _DestTrueSize>(_Dest_true), _Dest_false, _Pass_fn(_Pred));
	return {_Result.first._Unwrapped(), _Result.second};
	}

template<class _InIt,
	class _OutIt1,
	class _DestFalseTy,
	size_t _DestFalseSize,
	class _Pr> inline
	pair<_OutIt1, _DestFalseTy *>
		partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest_true, _DestFalseTy (&_Dest_false)[_DestFalseSize], _Pr _Pred)
	{	
	const auto _Result = ::std:: partition_copy(_First, _Last,
		_Dest_true, _Array_iterator<_DestFalseTy, _DestFalseSize>(_Dest_false), _Pass_fn(_Pred));
	return {_Result.first, _Result.second._Unwrapped()};
	}

template<class _InIt,
	class _DestTrueTy,
	size_t _DestTrueSize,
	class _DestFalseTy,
	size_t _DestFalseSize,
	class _Pr> inline
	pair<_DestTrueTy *, _DestFalseTy *>
		partition_copy(_InIt _First, _InIt _Last,
			_DestTrueTy (&_Dest_true)[_DestTrueSize], _DestFalseTy (&_Dest_false)[_DestFalseSize],
			_Pr _Pred)
	{	
	const auto _Result = ::std:: partition_copy(_First, _Last,
		_Array_iterator<_DestTrueTy, _DestTrueSize>(_Dest_true),
		_Array_iterator<_DestFalseTy, _DestFalseSize>(_Dest_false), _Pass_fn(_Pred));
	return {_Result.first._Unwrapped(), _Result.second._Unwrapped()};
	}
 #line 715 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"








































































#line 788 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	 inline bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);

	for (;; ++_UFirst)
		{	
		if (_UFirst == _ULast)
			{
			return (true);
			}

		if (!_Pred(*_UFirst))
			{
			break;
			}
		}

	while (++_UFirst != _ULast)
		{	
		if (_Pred(*_UFirst))
			{
			return (false);	
			}
		}

	return (true);
	}











#line 833 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	 inline _FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _Count = ::std:: distance(_UFirst, _ULast);
	while (0 < _Count)
		{	
		const auto _Count2 = static_cast<_Iter_diff_t<_FwdIt>>(_Count >> 1);
		const auto _UMid = ::std:: next(_UFirst, _Count2);

		if (_Pred(*_UMid))
			{	
			_UFirst = _Next_iter(_UMid);
			_Count -= _Count2;
			--_Count;
			}
		else
			{
			_Count = _Count2;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_rev_pred_unchecked1(_InIt1 _First1, _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred, false_type)
	{	
	for (; _First2 != _Last2; ++_First1, (void)++_First2)
		{
		if (!_Pred(*_First1, *_First2))
			{
			return (false);
			}
		}

	return (true);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_rev_pred_unchecked1(const _InIt1 _First1, const _InIt2 _First2, const _InIt2 _Last2, _Pr, true_type)
	{	
	const auto _First1_ch = reinterpret_cast<const char *>(_First1);
	const auto _First2_ch = reinterpret_cast<const char *>(_First2);
	const auto _Count = static_cast<size_t>(reinterpret_cast<const char *>(_Last2) - _First2_ch);
	return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_rev_pred_unchecked(const _InIt1 _First1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred)
	{	
	return (_Equal_rev_pred_unchecked1(_First1, _First2, _Last2, _Pred,
		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
	}

		
template<class _FwdItHaystack,
	class _FwdItPat,
	class _Pr> inline
	_FwdItHaystack _Search_unchecked(_FwdItHaystack _First1, _FwdItHaystack _Last1,
		_FwdItPat _First2, _FwdItPat _Last2, _Pr _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
	for (;; ++_First1)
		{	
		_FwdItHaystack _Mid1 = _First1;
		for (_FwdItPat _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
			{
			if (_Mid2 == _Last2)
				{
				return (_First1);
				}
			else if (_Mid1 == _Last1)
				{
				return (_Last1);
				}
			else if (!_Pred(*_Mid1, *_Mid2))
				{
				break;
				}
			}
		}
	}

template<class _FwdItHaystack,
	class _FwdItPat,
	class _Pr> inline
	_FwdItHaystack _Search_unchecked(_FwdItHaystack _First1, const _FwdItHaystack _Last1,
		const _FwdItPat _First2, const _FwdItPat _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	_Iter_diff_t<_FwdItPat> _Count2 = _Last2 - _First2;
	if (_Last1 - _First1 >= _Count2)
		{
		const auto _Last_possible = _Last1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);
		for (;; ++_First1)
			{
			if (_Equal_rev_pred_unchecked(_First1, _First2, _Last2, _Pred))
				{
				return (_First1);
				}

			if (_First1 == _Last_possible)
				{
				break;
				}
			}
		}

	return (_Last1);
	}

template<class _FwdItHaystack,
	class _FwdItPat,
	class _Pr>
	 inline _FwdItHaystack search(_FwdItHaystack _First1, const _FwdItHaystack _Last1,
		const _FwdItPat _First2, const _FwdItPat _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	_Seek_wrapped(_First1,
		_Search_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
			_Get_unwrapped(_First2), _Get_unwrapped(_Last2), _Pass_fn(_Pred),
			_Iter_cat_t<_FwdItHaystack>(), _Iter_cat_t<_FwdItPat>()));
	return (_First1);
	}









#line 982 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _FwdItHaystack,
	class _FwdItPat>
	 inline _FwdItHaystack search(const _FwdItHaystack _First1, const _FwdItHaystack _Last1,
		const _FwdItPat _First2, const _FwdItPat _Last2)
	{	
	return (::std:: search(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}











#line 1002 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _FwdItHaystack,
	class _Searcher>
	 inline _FwdItHaystack search(const _FwdItHaystack _First, const _FwdItHaystack _Last,
		const _Searcher& _Search)
	{	
	return (_Search(_First, _Last).first);
	}

		
template<class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_FwdIt _Search_n_unchecked(_FwdIt _First, const _FwdIt _Last,
		const _Diff _Count, const _Ty& _Val, _Pr _Pred, forward_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First);

	for (; _First != _Last; ++_First)
		{
		if (_Pred(*_First, _Val))
			{	
			_FwdIt _Mid = _First;

			for (_Diff _Count1 = _Count;;)
				{
				if (--_Count1 == 0)
					{
					return (_First);	
					}
				else if (++_Mid == _Last)
					{
					return (_Last);	
					}
				else if (!_Pred(*_Mid, _Val))
					{	
					break;
					}
				}

			_First = _Mid;	
			}
		}

	return (_Last);
	}

template<class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_FwdIt _Search_n_unchecked(_FwdIt _First, const _FwdIt _Last,
		const _Diff _Count, const _Ty& _Val, _Pr _Pred, random_access_iterator_tag)
	{	
	if (_Count <= 0)
		{
		return (_First);
		}

	if (static_cast<uintmax_t>(_Count)
		> static_cast<uintmax_t>((numeric_limits<_Iter_diff_t<_FwdIt>>::max)()))
		{	
			
		return (_Last);
		}

	const auto _Count_diff = static_cast<_Iter_diff_t<_FwdIt>>(_Count);
	_FwdIt _Old_first = _First;
	for (_Iter_diff_t<_FwdIt> _Inc = 0; _Count_diff <= _Last - _Old_first; )
		{	
		_First = _Old_first + _Inc;
		if (_Pred(*_First, _Val))
			{	
			_Iter_diff_t<_FwdIt> _Count1 = _Count_diff;
			_FwdIt _Mid = _First;

			for (; _Old_first != _First && _Pred(_First[-1], _Val);
				--_First)
				--_Count1;	

			if (_Count1 <= _Last - _Mid)
				{
				for (;;)
					{	
					if (--_Count1 == 0)
						{
						return (_First);	
						}
					else if (!_Pred(*++_Mid, _Val))
						{	
						break;
						}
					}
				}
			_Old_first = ++_Mid;	
			_Inc = 0;
			}
		else
			{	
			_Old_first = _First + 1;
			_Inc = _Count_diff - 1;
			}
		}

	return (_Last);
	}

template<class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr>
	 inline _FwdIt search_n(_FwdIt _First, const _FwdIt _Last,
		const _Diff _Count_raw, const _Ty& _Val, _Pr _Pred)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Search_n_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Count, _Val,
			_Pass_fn(_Pred), _Iter_cat_t<_FwdIt>()));

	return (_First);
	}










#line 1137 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _FwdIt,
	class _Diff,
	class _Ty>
	 inline _FwdIt search_n(const _FwdIt _First, const _FwdIt _Last, const _Diff _Count, const _Ty& _Val)
	{	
	return (::std:: search_n(_First, _Last, _Count, _Val, equal_to<>()));
	}












#line 1158 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 _Find_end_unchecked(_FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2, _Pr _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
	_FwdIt1 _Result = _Last1;
	for (;;)
		{	
		_FwdIt1 _Next1 = _First1;
		_FwdIt2 _Next2 = _First2;
		for (;;)
			{	
			const bool _End_of_needle = static_cast<bool>(_Next2 == _Last2);
			if (_End_of_needle)
				{	
				_Result = _First1;
				}

			if (_Next1 == _Last1)
				{	
				return (_Result);
				}

			if (_End_of_needle || !_Pred(*_Next1, *_Next2))
				{	
				break;
				}

			++_Next1;
			++_Next2;
			}

		++_First1;
		}
	}

template<class _BidIt1,
	class _BidIt2,
	class _Pr> inline
	_BidIt1 _Find_end_unchecked(const _BidIt1 _First1, const _BidIt1 _Last1,
		const _BidIt2 _First2, const _BidIt2 _Last2, _Pr _Pred,
		bidirectional_iterator_tag, bidirectional_iterator_tag)
	{	
	for (_BidIt1 _Candidate = _Last1; ; --_Candidate)
		{	
		_BidIt1 _Next1 = _Candidate;
		_BidIt2 _Next2 = _Last2;
		for (;;)
			{	
			if (_First2 == _Next2)
				{	
				return (_Next1);
				}

			if (_First1 == _Next1)
				{	
				return (_Last1);
				}

			--_Next1;
			--_Next2;
			if (!_Pred(*_Next1, *_Next2))
				{	
				break;
				}
			}
		}
	}

template<class _RanIt1,
	class _RanIt2,
	class _Pr> inline
	_RanIt1 _Find_end_unchecked(const _RanIt1 _First1, const _RanIt1 _Last1,
		const _RanIt2 _First2, const _RanIt2 _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	const _Iter_diff_t<_RanIt2> _Count2 = _Last2 - _First2;
	if (0 < _Count2 && _Count2 <= _Last1 - _First1)
		{
		for (_RanIt1 _Candidate = _Last1 - static_cast<_Iter_diff_t<_RanIt1>>(_Count2); ; --_Candidate)
			{
			if (_Equal_rev_pred_unchecked(_Candidate, _First2, _Last2, _Pred))
				{
				return (_Candidate);
				}

			if (_First1 == _Candidate)
				{
				break;
				}
			}
		}

	return (_Last1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr>
	 inline _FwdIt1 find_end(_FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	_Seek_wrapped(_First1,
		_Find_end_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
		_Get_unwrapped(_First2), _Get_unwrapped(_Last2),
		_Pass_fn(_Pred), _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));

	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2>
	 inline _FwdIt1 find_end(_FwdIt1 const _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2)
	{	
	return (::std:: find_end(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}



















#line 1301 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr>
	 inline _FwdIt1 find_first_of(_FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	for (; _UFirst1 != _ULast1; ++_UFirst1)
		{
		for (auto _UMid2 = _UFirst2; _UMid2 != _ULast2; ++_UMid2)
			{
			if (_Pred(*_UFirst1, *_UMid2))
				{
				_Seek_wrapped(_First1, _UFirst1);
				return (_First1);
				}
			}
		}

	_Seek_wrapped(_First1, _UFirst1);
	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2>
	 inline _FwdIt1 find_first_of(const _FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2)
	{	
	return (::std:: find_first_of(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}




















#line 1359 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"


		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 _Swap_ranges_unchecked(_FwdIt1 _First1, const _FwdIt1 _Last1, _FwdIt2 _First2)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		{
		::std:: iter_swap(_First1, _First2);
		}

	return (_First2);
	}


template<class _Ty,
	enable_if_t<_Is_trivially_swappable_v<_Ty>, int> = 0> inline
	_Ty * _Swap_ranges_unchecked(_Ty * const _First1, _Ty * const _Last1, _Ty * const _First2)
	{	
	__std_swap_ranges_trivially_swappable_noalias(_First1, _Last1, _First2);
	return (_First2 + (_Last1 - _First1));
	}
#line 1383 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 swap_ranges(const _FwdIt1 _First1, const _FwdIt1 _Last1, _FwdIt2 _First2)
	{	
	_Adl_verify_range(_First1, _Last1);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_FwdIt1>(_UFirst1, _ULast1));
	_Seek_wrapped(_First2, _Swap_ranges_unchecked(_UFirst1, _ULast1, _UFirst2));
	return (_First2);
	}

 
template<class _FwdIt1,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy * swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1, _DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: swap_ranges(_First1, _Last1, _Array_iterator<_DestTy, _DestSize>(_Dest))._Unwrapped());
	}
 #line 1405 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"
























#line 1430 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Fn> inline
	_OutIt transform(const _InIt _First, const _InIt _Last, _OutIt _Dest, _Fn _Func)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	for (; _UFirst != _ULast; ++_UFirst, (void)++_UDest)
		{
		*_UDest = _Func(*_UFirst);
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize,
	class _Fn> inline
	_DestTy * transform(const _InIt _First, const _InIt _Last, _DestTy (&_Dest)[_DestSize], _Fn _Func)
	{	
	return (::std:: transform(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Func))
		._Unwrapped());
	}
 #line 1461 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"






















#line 1484 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn> inline
	_OutIt transform(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, _OutIt _Dest, _Fn _Func)
	{	
	_Adl_verify_range(_First1, _Last1);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _Count = _Idl_distance<_InIt1>(_UFirst1, _ULast1);
	auto _UFirst2 = _Get_unwrapped_n(_First2, _Count);
	auto _UDest = _Get_unwrapped_n(_Dest, _Count);
	for (; _UFirst1 != _ULast1; ++_UFirst1, (void)++_UFirst2, ++_UDest)
		{
		*_UDest = _Func(*_UFirst1, *_UFirst2);
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 
template<class _InIt1,
	class _RightTy,
	size_t _RightSize,
	class _OutIt,
	class _Fn> inline
	_OutIt transform(const _InIt1 _First1, const _InIt1 _Last1,
		_RightTy (&_First2)[_RightSize], const _OutIt _Dest, _Fn _Func)
	{	
	return (::std:: transform(_First1, _Last1,
		_Array_iterator<_RightTy, _RightSize>(_First2), _Dest, _Pass_fn(_Func)));
	}

template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize,
	class _Fn> inline
	_DestTy * transform(const _InIt1 _First1, const _InIt1 _Last1,
		_InIt2 _First2, _DestTy (&_Dest)[_DestSize], _Fn _Func)
	{	
	return (::std:: transform(_First1, _Last1,
			_First2, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Func))._Unwrapped());
	}

template<class _InIt1,
	class _RightTy,
	size_t _RightSize,
	class _DestTy,
	size_t _DestSize,
	class _Fn> inline
	_DestTy * transform(const _InIt1 _First1, const _InIt1 _Last1,
		_RightTy (&_First2)[_RightSize], _DestTy (&_Dest)[_DestSize], _Fn _Func)
	{	
	return (::std:: transform(_First1, _Last1,
		_Array_iterator<_RightTy, _RightSize>(_First2),
		_Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Func))._Unwrapped());
	}
 #line 1546 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"
























































#line 1603 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty> inline
	void replace(const _FwdIt _First, const _FwdIt _Last, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (*_UFirst == _Oldval)
			{
			*_UFirst = _Newval;
			}
		}
	}








#line 1629 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void replace_if(const _FwdIt _First, const _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			*_UFirst = _Val;
			}
		}
	}









#line 1657 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt replace_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	for (; _UFirst != _ULast; ++_UFirst, (void)++_UDest)
		{
		if (*_UFirst == _Oldval)
			{
			*_UDest = _Newval;
			}
		else
			{
			*_UDest = *_UFirst;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize,
	class _Ty> inline
	_DestTy * replace_copy(_InIt _First, _InIt _Last,
		_DestTy (&_Dest)[_DestSize], const _Ty& _Oldval, const _Ty& _Newval)
	{	
	return (::std:: replace_copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Oldval, _Newval)
		._Unwrapped());
	}
 #line 1697 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"































#line 1729 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt replace_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	for (; _UFirst != _ULast; ++_UFirst, (void)++_UDest)
		{
		if (_Pred(*_UFirst))
			{
			*_UDest = _Val;
			}
		else
			{
			*_UDest = *_UFirst;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize,
	class _Pr,
	class _Ty> inline
	_DestTy * replace_copy_if(_InIt _First, _InIt _Last,
		_DestTy (&_Dest)[_DestSize], _Pr _Pred, const _Ty& _Val)
	{	
	return (::std:: replace_copy_if(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred), _Val)
		._Unwrapped());
	}
 #line 1771 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

































#line 1805 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Fn> inline
	void generate(_FwdIt _First, _FwdIt _Last, _Fn _Func)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		*_UFirst = _Func();
		}
	}











#line 1831 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _OutIt,
	class _Diff,
	class _Fn> inline
	_OutIt generate_n(_OutIt _Dest, const _Diff _Count_raw, _Fn _Func)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		auto _UDest = _Get_unwrapped_n(_Dest, _Count);
		do
			{
			*_UDest = _Func();
			--_Count;
			++_UDest;
			}
		while (0 < _Count);

		_Seek_wrapped(_Dest, _UDest);
		}

	return (_Dest);
	}

 
template<class _DestTy,
	size_t _DestSize,
	class _Diff,
	class _Fn> inline
	_DestTy * generate_n(_DestTy (&_Dest)[_DestSize], const _Diff _Count_raw, _Fn _Func)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	do { if ((::std:: size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 1864, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 1864, 0); } while (false); } ; } while (false);
	_DestTy * _UDest = _Dest;
	for (; 0 < _Count; --_Count, (void)++_UDest)
		{
		*_UDest = _Func();
		}

	return (_UDest);
	}
 #line 1874 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"



























#line 1902 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt remove_copy(_InIt _First, _InIt _Last, _OutIt _Dest, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (!(*_UFirst == _Val))
			{
			*_UDest = *_UFirst;
			++_UDest;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize,
	class _Ty> inline
	_DestTy * remove_copy(_InIt _First, _InIt _Last,
		_DestTy (&_Dest)[_DestSize], const _Ty& _Val)
	{	
	return (::std:: remove_copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Val)
		._Unwrapped());
	}
 #line 1938 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"






























#line 1969 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt remove_copy_if(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (!_Pred(*_UFirst))
			{
			*_UDest = *_UFirst;
			++_UDest;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize,
	class _Pr> inline
	_DestTy * remove_copy_if(_InIt _First, _InIt _Last,
		_DestTy (&_Dest)[_DestSize], _Pr _Pred)
	{	
	return (::std:: remove_copy_if(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))
		._Unwrapped());
	}
 #line 2005 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"






























#line 2036 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty>
	 inline _FwdIt remove(_FwdIt _First, const _FwdIt _Last, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_UFirst = _Find_unchecked(_UFirst, _ULast, _Val);
	auto _UNext = _UFirst;
	if (_UFirst != _ULast)
		{
		while (++_UFirst != _ULast)
			{
			if (!(*_UFirst == _Val))
				{
				*_UNext = ::std:: move(*_UFirst);
				++_UNext;
				}
			}
		}

	_Seek_wrapped(_First, _UNext);
	return (_First);
	}







#line 2070 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	 inline _FwdIt remove_if(_FwdIt _First, const _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_UFirst = ::std:: find_if(_UFirst, _ULast, _Pass_fn(_Pred));
	auto _UNext = _UFirst;
	if (_UFirst != _ULast)
		{
		while (++_UFirst != _ULast)
			{
			if (!_Pred(*_UFirst))
				{
				*_UNext = ::std:: move(*_UFirst);
				++_UNext;
				}
			}
		}

	_Seek_wrapped(_First, _UNext);
	return (_First);
	}







#line 2104 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	 inline _FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	if (_UFirst != _ULast)
		{
		for (auto _UFirstb = _UFirst; ++_UFirst != _ULast; _UFirstb = _UFirst)
			{
			if (_Pred(*_UFirstb, *_UFirst))
				{	
				while (++_UFirst != _ULast)
					{
					if (!_Pred(*_UFirstb, *_UFirst))
						{
						*++_UFirstb = ::std:: move(*_UFirst);
						}
					}

				_Seek_wrapped(_Last, ++_UFirstb);
				return (_Last);
				}
			}
		}

	_Seek_wrapped(_Last, _ULast);
	return (_Last);
	}

template<class _FwdIt>
	 inline _FwdIt unique(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: unique(_First, _Last, equal_to<>()));
	}




















#line 2163 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy_unchecked(_FwdIt _First, _FwdIt _Last,
		_OutIt _Dest, _Pr _Pred, true_type, _Any_tag)
	{	
		
	if (_First != _Last)
		{
		_FwdIt _Firstb = _First;

		*_Dest = *_Firstb;
		++_Dest;

		while (++_First != _Last)
			{
			if (!_Pred(*_Firstb, *_First))
				{	
				_Firstb = _First;
				*_Dest = *_Firstb;
				++_Dest;
				}
			}
		}

	return (_Dest);
	}

template<class _InIt,
	class _FwdIt,
	class _Pr> inline
	_FwdIt _Unique_copy_unchecked(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Pr _Pred, false_type, true_type)
	{	
		
	if (_First != _Last)
		{
		*_Dest = *_First;

		while (++_First != _Last)
			{
			if (!_Pred(*_Dest, *_First))
				{
				*++_Dest = *_First;
				}
			}

		++_Dest;
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, false_type, false_type)
	{	
		
	if (_First != _Last)
		{
		_Iter_value_t<_InIt> _Val = *_First;

		*_Dest = _Val;
		++_Dest;

		while (++_First != _Last)
			{
			if (!_Pred(_Val, *_First))
				{	
				_Val = *_First;
				*_Dest = _Val;
				++_Dest;
				}
			}
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_Dest,
		_Unique_copy_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last),
			_Get_unwrapped_unverified(_Dest), _Pass_fn(_Pred),
			bool_constant<_Is_fwd_iter_v<_InIt>>{}, 
			bool_constant<conjunction_v<bool_constant<_Is_fwd_iter_v<_OutIt>>,
				is_same<_Iter_value_t<_InIt>, _Iter_value_t<_OutIt>>>>{}
			));

	return (_Dest);
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize,
	class _Pr> inline
	_DestTy * unique_copy(_InIt _First, _InIt _Last, _DestTy (&_Dest)[_DestSize], _Pr _Pred)
	{	
	return (::std:: unique_copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))
		._Unwrapped());
	}
 #line 2275 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt,
	class _OutIt> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	
	return (::std:: unique_copy(_First, _Last, _Dest, equal_to<>()));
	}

 
template<class _InIt,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy * unique_copy(_InIt _First, _InIt _Last, _DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: unique_copy(_First, _Last, _Dest, equal_to<>()));
	}
 #line 2292 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"
























































#line 2349 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _BidIt,
	class _OutIt> inline
	_OutIt reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_BidIt>(_UFirst, _ULast));
	for (; _UFirst != _ULast; ++_UDest)
		{
		*_UDest = *--_ULast;
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 
template<class _BidIt,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy * reverse_copy(_BidIt _First, _BidIt _Last, _DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: reverse_copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest))
		._Unwrapped());
	}
 #line 2379 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

























#line 2405 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _OutIt> inline
	_OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest)
	{	
	_Adl_verify_range(_First, _Mid);
	_Adl_verify_range(_Mid, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _UMid = _Get_unwrapped(_Mid);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_FwdIt>(_UFirst, _ULast));
	_UDest = _Copy_unchecked(_UMid, _ULast, _UDest);
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _UMid, _UDest));
	return (_Dest);
	}














































































































































#line 2564 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _RngFn> inline
	void _Random_shuffle1(_RanIt _First, _RanIt _Last, _RngFn& _RngFunc)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	if (_UFirst == _ULast)
		{
		return;
		}

	using _Diff = _Iter_diff_t<_RanIt>;
	auto _UTarget = _UFirst;
	_Diff _Target_index = 1;
	for (; ++_UTarget != _ULast; ++_Target_index)
		{	
		_Diff _Off = _RngFunc(static_cast<_Diff>(_Target_index + 1));
		do { if (0 <= _Off && _Off <= _Target_index) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 2584, 0, "%s", "random value out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"random value out of range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 2584, 0); } while (false); } ; } while (false);
		if (_Off != _Target_index)	
			{
			::std:: iter_swap(_UTarget, _UFirst + _Off);
			}
		}
	}

template<class _RanIt,
	class _Urng> inline
	void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func)
	{	
	typedef remove_reference_t<_Urng> _Urng0;
	_Rng_from_urng<_Iter_diff_t<_RanIt>, _Urng0> _RngFunc(_Func);
	_Random_shuffle1(_First, _Last, _RngFunc);
	}

 
		
template<class _RanIt,
	class _RngFn> inline
	void random_shuffle(_RanIt _First, _RanIt _Last, _RngFn&& _RngFunc)
	{	
	_Random_shuffle1(_First, _Last, _RngFunc);
	}

	
struct _Rand_urng_from_func
	{	
	typedef unsigned int result_type;

	static result_type (min)()
		{	
		return (0);
		}

	static result_type (max)()
		{	
		return (0x7fff);
		}

	result_type operator()()
		{	
		return (static_cast<result_type>(:: rand()));
		}
	};

		
template<class _RanIt> inline
	void random_shuffle(_RanIt _First, _RanIt _Last)
	{	
	_Rand_urng_from_func _Func;
	::std:: shuffle(_First, _Last, _Func);
	}
 #line 2639 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Partition_unchecked(_FwdIt _First, const _FwdIt _Last, _Pr _Pred,
		forward_iterator_tag)
	{	
	for (;;)
		{	
		if (_First == _Last)
			{
			return (_First);
			}

		if (!_Pred(*_First))
			{
			break;
			}

		++_First;
		}

	for (_FwdIt _Next = _First; ++_Next != _Last; )
		{
		if (_Pred(*_Next))
			{
			::std:: iter_swap(_First, _Next);	
			++_First;
			}
		}

	return (_First);
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt _Partition_unchecked(_BidIt _First, _BidIt _Last, _Pr _Pred,
		bidirectional_iterator_tag)
	{	
	for (;;)
		{	
		for (;;)
			{	
			if (_First == _Last)
				{
				return (_First);
				}

			if (!_Pred(*_First))
				{
				break;
				}

			++_First;
			}

		do
			{	
			--_Last;
			if (_First == _Last)
				{
				return (_First);
				}
			}
		while (!_Pred(*_Last));

		::std:: iter_swap(_First, _Last);	
		++_First;
		}
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt partition(_FwdIt _First, const _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Partition_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred),
			_Iter_cat_t<_FwdIt>()));

	return (_First);
	}







#line 2729 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _BidIt> inline
	_BidIt _Buffered_rotate_unchecked(const _BidIt _First, const _BidIt _Mid, const _BidIt _Last,
		const _Iter_diff_t<_BidIt> _Count1, const _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity)
	{	
		
		
	if (_Count1 == 0)
		{
		return (_Last);
		}

	if (_Count2 == 0)
		{
		return (_First);
		}

	if (_Count1 <= _Count2 && _Count1 <= _Capacity)
		{	
		_Uninitialized_backout<_Iter_value_t<_BidIt> *> _Backout{_Temp_ptr,
			_Uninitialized_move_unchecked(_First, _Mid, _Temp_ptr)};
		const _BidIt _New_mid = _Move_unchecked(_Mid, _Last, _First);
		_Move_unchecked(_Backout._First, _Backout._Last, _New_mid);
		return (_New_mid); 
		}

	if (_Count2 <= _Capacity)
		{	
		_Uninitialized_backout<_Iter_value_t<_BidIt> *> _Backout{_Temp_ptr,
			_Uninitialized_move_unchecked(_Mid, _Last, _Temp_ptr)};
		_Move_backward_unchecked(_First, _Mid, _Last);
		return (_Move_unchecked(_Backout._First, _Backout._Last, _First)); 
		}

	
	return (_Rotate_unchecked(_First, _Mid, _Last));
	}

template<class _BidIt,
	class _Pr> inline
	pair<_BidIt, _Iter_diff_t<_BidIt>> _Stable_partition_unchecked1(_BidIt _First, _BidIt _Last, _Pr _Pred,
		const _Iter_diff_t<_BidIt> _Count, _Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity)
	{	
		
		
		
		
		
	using _Diff = _Iter_diff_t<_BidIt>;
	if (_Count - static_cast<_Diff>(1) <= _Capacity) 
		{
		_Uninitialized_backout<_Iter_value_t<_BidIt> *> _Backout{_Temp_ptr};
		_BidIt _Next = _First;
		_Backout._Emplace_back(::std:: move(*_First));
		while (++_First != _Last)
			{	
				
			if (_Pred(*_First))
				{
				*_Next = ::std:: move(*_First);
				++_Next;
				}
			else
				{
				_Backout._Emplace_back(::std:: move(*_First));
				}
			}

		
		*_Next = ::std:: move(*_Last);
		++_Next;
		_Move_unchecked(_Backout._First, _Backout._Last, _Next);	
		_Diff _True_distance = static_cast<_Diff>(_Count - static_cast<_Diff>(_Backout._Last - _Backout._First));
		return (pair<_BidIt, _Diff>(_Next, _True_distance));	
		}

	const _Diff _Mid_offset = _Count / static_cast<_Diff>(2); 
	const _BidIt _Mid = ::std:: next(_First, _Mid_offset);

	
	_BidIt _Left = _Mid;
	_Diff _Left_true_count = _Mid_offset;
	for (;;)
		{	
		--_Left;
		if (_First == _Left)
			{	
			--_Left_true_count;	
			break;
			}

		if (_Pred(*_Left))
			{	
			const pair<_BidIt, _Diff> _Low =
				_Stable_partition_unchecked1(_First, _Left, _Pred, _Left_true_count, _Temp_ptr, _Capacity);
			_Left = _Low.first;
			_Left_true_count = _Low.second;
			break;
			}

		--_Left_true_count;
		}

	
	_BidIt _Right = _Mid;
	_Diff _Right_true_count = 0;
	for (;;)
		{	
		if (_Right == _Last)
			{	
			++_Right;	
			++_Right_true_count;
			break;
			}

		if (!_Pred(*_Right))
			{	
			const _Diff _Right_count = _Count - _Mid_offset;
			const _Diff _Remaining = _Right_count - _Right_true_count;
			const pair<_BidIt, _Diff> _High =
				_Stable_partition_unchecked1(_Right, _Last, _Pred, _Remaining, _Temp_ptr, _Capacity);
			_Right = _High.first;
			_Right_true_count += _High.second;
			break;
			}

		++_Right;
		++_Right_true_count;
		}

	
	const _BidIt _Partition_point = _Buffered_rotate_unchecked(_Left, _Mid, _Right,
		static_cast<_Diff>(_Mid_offset - _Left_true_count), _Right_true_count, _Temp_ptr, _Capacity);
	return (pair<_BidIt, _Diff>(_Partition_point, static_cast<_Diff>(_Left_true_count + _Right_true_count)));
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt _Stable_partition_unchecked(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	for (;;)
		{
		if (_First == _Last)
			{	
			return (_First);
			}

		if (!_Pred(*_First))
			{	
			break;
			}

		++_First;
		}

	for (;;)
		{
		--_Last;
		if (_First == _Last)
			{	
			return (_First);
			}

		if (_Pred(*_Last))
			{	
			break;
			}
		}

	using _Diff = _Iter_diff_t<_BidIt>;
	const _Diff _Temp_count = ::std:: distance(_First, _Last); 
	const _Diff _Total_count = _Temp_count + static_cast<_Diff>(1);
	_Optimistic_temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{_Temp_count};
	return (_Stable_partition_unchecked1(_First, _Last, _Pred, _Total_count, _Temp_buf._Data, _Temp_buf._Capacity)
		.first);
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Stable_partition_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
	return (_First);
	}











#line 2929 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Push_heap_by_index(_RanIt _First, _Iter_diff_t<_RanIt> _Hole,
		_Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred)
	{	
	for (_Iter_diff_t<_RanIt> _Idx = (_Hole - 1) >> 1;	
		_Top < _Hole && _Debug_lt_pred(_Pred, *(_First + _Idx), _Val);
		_Idx = (_Hole - 1) >> 1)	
		{	
		*(_First + _Hole) = ::std:: move(*(_First + _Idx));
		_Hole = _Idx;
		}

	*(_First + _Hole) = ::std:: move(_Val);	
	}

template<class _RanIt,
	class _Pr> inline
	void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	auto _ULast = _Get_unwrapped(_Last);
	using _Diff = _Iter_diff_t<_RanIt>;
	_Diff _Count = _ULast - _UFirst;
	if (2 <= _Count)
		{
		_Iter_value_t<_RanIt> _Val = ::std:: move(*--_ULast);
		_Push_heap_by_index(_UFirst, --_Count, _Diff(0), ::std:: move(_Val), _Pass_fn(_Pred));
		}
	}

template<class _RanIt> inline
	void push_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: push_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Pop_heap_hole_by_index(_RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom,
		_Ty&& _Val, _Pr _Pred)
	{	
		
	using _Diff = _Iter_diff_t<_RanIt>;
	const _Diff _Top = _Hole;
	_Diff _Idx = _Hole;

	
	
	const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1;	
	while (_Idx < _Max_sequence_non_leaf)
		{	
		_Idx = 2 * _Idx + 2;
		if (_Debug_lt_pred(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))
			--_Idx;
		*(_First + _Hole) = ::std:: move(*(_First + _Idx));
		_Hole = _Idx;
		}

	if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0)
		{	
		*(_First + _Hole) = ::std:: move(*(_First + (_Bottom - 1)));
		_Hole = _Bottom - 1;
		}

	_Push_heap_by_index(_First, _Hole, _Top, ::std:: move(_Val), _Pred);
	}

template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest,
		_Ty&& _Val, _Pr _Pred)
	{	
		
		
	*_Dest = ::std:: move(*_First);
	_Pop_heap_hole_by_index(_First, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Last - _First),
		::std:: move(_Val), _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	if (2 <= _Last - _First)
		{
		--_Last;
		_Iter_value_t<_RanIt> _Val = ::std:: move(*_Last);
		_Pop_heap_hole_unchecked(_First, _Last, _Last, ::std:: move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Pop_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void pop_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: pop_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Iter_diff_t<_RanIt> _Bottom = _Last - _First;
	for (_Iter_diff_t<_RanIt> _Hole = _Bottom >> 1; 0 < _Hole; )	
		{	
		--_Hole;
		_Iter_value_t<_RanIt> _Val = ::std:: move(*(_First + _Hole));
		_Pop_heap_hole_by_index(_First, _Hole, _Bottom, ::std:: move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Make_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void make_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: make_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Pr> inline
	_RanIt _Is_heap_until_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	const _Iter_diff_t<_RanIt> _Size = _Last - _First;
	for (_Iter_diff_t<_RanIt> _Off = 1; _Off < _Size; ++_Off)
		{
		if (_Debug_lt_pred(_Pred, _First[(_Off - 1) >> 1], _First[_Off]))	
			{
			return (_First + _Off);
			}
		}

	return (_Last);
	}

template<class _RanIt,
	class _Pr>
	 inline _RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Is_heap_until_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
	return (_First);
	}

template<class _RanIt,
	class _Pr>
	 inline bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	return (_Is_heap_until_unchecked(_UFirst, _ULast, _Pass_fn(_Pred)) == _ULast);
	}

template<class _RanIt>
	 inline _RanIt is_heap_until(_RanIt _First, _RanIt _Last)
	{	
	return (::std:: is_heap_until(_First, _Last, less<>()));
	}

template<class _RanIt>
	 inline bool is_heap(_RanIt _First, _RanIt _Last)
	{	
	return (::std:: is_heap(_First, _Last, less<>()));
	}







































#line 3158 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _Pr> inline
	void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	for (; 2 <= _Last - _First; --_Last)
		{
		_Pop_heap_unchecked(_First, _Last, _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);

	const auto _Counterexample = _Is_heap_until_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
	if (_Counterexample != _ULast)
		{
		do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 3181, 0, "%s", "invalid heap in sort_heap()")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid heap in sort_heap()\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 3181, 0); } while (false);
		}
#line 3184 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"
	_Sort_heap_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void sort_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: sort_heap(_First, _Last, less<>());
	}

		
template<class _FwdIt,
	class _Ty>
	 inline _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: lower_bound(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	 inline _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	_Iter_diff_t<_FwdIt> _Count = ::std:: distance(_UFirst, _Get_unwrapped(_Last));

	while (0 < _Count)
		{	
		_Iter_diff_t<_FwdIt> _Count2 = _Count >> 1; 
		const auto _UMid = ::std:: next(_UFirst, _Count2);
		if (_Pred(_Val, *_UMid))
			{
			_Count = _Count2;
			}
		else
			{	
			_UFirst = _Next_iter(_UMid);
			_Count -= _Count2 + 1;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}

template<class _FwdIt,
	class _Ty>
	 inline _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: upper_bound(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	 inline pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);

	using _Diff = _Iter_diff_t<_FwdIt>;
	_Diff _Count = ::std:: distance(_UFirst, _ULast);

	for (;;)
		{	
		if (_Count <= 0)
			{
			_Seek_wrapped(_Last, _UFirst); 
			_Seek_wrapped(_First, _UFirst);
			break;
			}

		_Diff _Count2 = _Count >> 1; 
		const auto _UMid = ::std:: next(_UFirst, _Count2);
		if (_Debug_lt_pred(_Pred, *_UMid, _Val))
			{	
			_UFirst = _Next_iter(_UMid);
			_Count -= _Count2 + 1;
			}
		else if (_Pred(_Val, *_UMid))
			{
			_Count = _Count2;	
			}
		else
			{	
			auto _UFirst2 = ::std:: lower_bound(_UFirst, _UMid, _Val, _Pass_fn(_Pred));
			::std:: advance(_UFirst, _Count);
			auto _ULast2 = ::std:: upper_bound(_Next_iter(_UMid), _UFirst, _Val, _Pass_fn(_Pred));
			_Seek_wrapped(_Last, _ULast2);
			_Seek_wrapped(_First, _UFirst2);
			break;
			}
		}

	return {_First, _Last};
	}

template<class _FwdIt,
	class _Ty>
	 inline pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: equal_range(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	 inline bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_UFirst = ::std:: lower_bound(_UFirst, _ULast, _Val, _Pass_fn(_Pred));
	return (_UFirst != _ULast && !_Pred(_Val, *_UFirst));
	}

template<class _FwdIt,
	class _Ty>
	 inline bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: binary_search(_First, _Last, _Val, less<>()));
	}

		
inline _Distance_unknown _Idl_dist_add(_Distance_unknown, _Distance_unknown)
	{	
	return {};
	}

template<class _Diff1> inline
	_Distance_unknown _Idl_dist_add(_Diff1, _Distance_unknown)
	{	
	return {};
	}

template<class _Diff2> inline
	_Distance_unknown _Idl_dist_add(_Distance_unknown, _Diff2)
	{	
	return {};
	}

template<class _Diff1,
	class _Diff2> inline
	auto _Idl_dist_add(_Diff1 _Lhs, _Diff2 _Rhs)
	{	
	return (_Lhs + _Rhs);
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
	_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
	const auto _Count1 = _Idl_distance<_InIt1>(_UFirst1, _ULast1);
	const auto _Count2 = _Idl_distance<_InIt2>(_UFirst2, _ULast2);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_dist_add(_Count1, _Count2));
	if (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		for (;;)
			{
			if (_Debug_lt_pred(_Pred, *_UFirst2, *_UFirst1))
				{
				*_UDest = *_UFirst2;
				++_UDest;
				++_UFirst2;

				if (_UFirst2 == _ULast2)
					{
					break;
					}
				}
			else
				{
				*_UDest = *_UFirst1;
				++_UDest;
				++_UFirst1;

				if (_UFirst1 == _ULast1)
					{
					break;
					}
				}
			}
		}

	_UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);	
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize,
	class _Pr> inline
	_DestTy * merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_DestTy (&_Dest)[_DestSize], _Pr _Pred)
	{	
	return (::std:: merge(_First1, _Last1, _First2, _Last2,
		_Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))._Unwrapped());
	}
 #line 3404 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy * merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}
 #line 3427 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"







































































#line 3499 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
		
		
		
		
		
		
		
		
template<class _BidIt> inline
	void _Rotate_one_right(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
		
	_Iter_value_t<_BidIt> _Temp(::std:: move(*_Mid));
	_Move_backward_unchecked(_First, _Mid, _Last);
	*_First = ::std:: move(_Temp);
	}

template<class _BidIt> inline
	void _Rotate_one_left(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
		
	_Iter_value_t<_BidIt> _Temp(::std:: move(*_First));
	*_Move_unchecked(_Mid, _Last, _First) = ::std:: move(_Temp);
	}

template<class _BidIt,
	class _Pr> inline
	void _Inplace_merge_buffer_left(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_value_t<_BidIt> * const _Temp_ptr, _Pr _Pred)
	{	
		
	using _Ptr_ty = _Iter_value_t<_BidIt> *;
	_Uninitialized_backout<_Ptr_ty> _Backout{_Temp_ptr,
		_Uninitialized_move_unchecked(_First, _Mid, _Temp_ptr)};
	_Ptr_ty _Left_first = _Temp_ptr;
	const _Ptr_ty _Left_last = _Backout._Last - 1; 
	*_First = ::std:: move(*_Mid); 
	++_First;
	++_Mid;
	for (;;)
		{
		if (_Pred(*_Mid, *_Left_first))
			{	
			*_First = ::std:: move(*_Mid);
			++_First;
			++_Mid;
			if (_Mid == _Last)
				{
				_Move_unchecked(_Left_first, _Backout._Last, _First);	
				return;
				}
			}
		else
			{	
			*_First = ::std:: move(*_Left_first);
			++_First;
			++_Left_first;
			if (_Left_first == _Left_last)
				{	
				*_Move_unchecked(_Mid, _Last, _First) = ::std:: move(*_Left_last);
				return;
				}
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Inplace_merge_buffer_right(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_value_t<_BidIt> * const _Temp_ptr, _Pr _Pred)
	{	
		
	using _Ptr_ty = _Iter_value_t<_BidIt> *;
	_Uninitialized_backout<_Ptr_ty> _Backout{_Temp_ptr,
		_Uninitialized_move_unchecked(_Mid, _Last, _Temp_ptr)};
	*--_Last = ::std:: move(*--_Mid); 
	const _Ptr_ty _Right_first = _Temp_ptr;
	_Ptr_ty _Right_last = _Backout._Last - 1;
	--_Mid;
	for (;;)
		{
		if (_Pred(*_Right_last, *_Mid))
			{	
			*--_Last = ::std:: move(*_Mid);
			if (_First == _Mid)
				{
				*--_Last = ::std:: move(*_Right_last);	
				_Move_backward_unchecked(_Right_first, _Right_last, _Last);	
				return;
				}

			--_Mid;
			}
		else
			{	
			*--_Last = ::std:: move(*_Right_last);
			--_Right_last;
			if (_Right_first == _Right_last)
				{	
				*--_Last = ::std:: move(*_Mid);	
				_Move_backward_unchecked(_First, _Mid, _Last);
				*_First = ::std:: move(*_Right_first);
				return;
				}
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred);

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_divide_and_conquer2(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred,
		_BidIt _Firstn, _BidIt _Lastn, _Iter_diff_t<_BidIt> _Count1n, _Iter_diff_t<_BidIt> _Count2n)
	{	
	using _Diff = _Iter_diff_t<_BidIt>;
	_BidIt _Midn = _Buffered_rotate_unchecked(_Firstn, _Mid, _Lastn,
		static_cast<_Diff>(_Count1 - _Count1n), _Count2n, _Temp_ptr, _Capacity);	
	_Buffered_inplace_merge_unchecked(_First, _Firstn, _Midn,
		_Count1n, _Count2n, _Temp_ptr, _Capacity, _Pred);	
	_Buffered_inplace_merge_unchecked(_Midn, _Lastn, _Last,
		static_cast<_Diff>(_Count1 - _Count1n), static_cast<_Diff>(_Count2 - _Count2n),
		_Temp_ptr, _Capacity, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_divide_and_conquer(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred)
	{	
		
	if (_Count1 <= _Count2)
		{
		const _Iter_diff_t<_BidIt> _Count1n = _Count1 >> 1;	
		const _BidIt _Firstn = ::std:: next(_First, _Count1n);
		const _BidIt _Lastn = ::std:: lower_bound(_Mid, _Last, *_Firstn, _Pred);
		_Buffered_inplace_merge_divide_and_conquer2(_First, _Mid, _Last, _Count1, _Count2,
			_Temp_ptr, _Capacity, _Pred,
			_Firstn, _Lastn, _Count1n, ::std:: distance(_Mid, _Lastn));
		}
	else
		{
		const _Iter_diff_t<_BidIt> _Count2n = _Count2 >> 1;	
		const _BidIt _Lastn = ::std:: next(_Mid, _Count2n);
		const _BidIt _Firstn = ::std:: upper_bound(_First, _Mid, *_Lastn, _Pred);
		_Buffered_inplace_merge_divide_and_conquer2(_First, _Mid, _Last, _Count1, _Count2,
			_Temp_ptr, _Capacity, _Pred,
			_Firstn, _Lastn, ::std:: distance(_First, _Firstn), _Count2n);
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_unchecked_impl(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred)
	{	
		
	if (_Count1 <= _Count2 && _Count1 <= _Capacity)
		{
		_Inplace_merge_buffer_left(_First, _Mid, _Last, _Temp_ptr, _Pred);
		}
	else if (_Count2 <= _Capacity)
		{
		_Inplace_merge_buffer_right(_First, _Mid, _Last, _Temp_ptr, _Pred);
		}
	else
		{
		_Buffered_inplace_merge_divide_and_conquer(_First, _Mid, _Last, _Count1, _Count2, _Temp_ptr, _Capacity, _Pred);
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred)
	{	
		
		
	if (_Mid == _Last)
		{
		return;
		}

	for (;;)
		{
		if (_First == _Mid)
			{
			return;
			}

		if (_Pred(*_Mid, *_First))
			{
			break;
			}

		++_First;
		--_Count1;
		}

	const auto _Highest = _Prev_iter(_Mid);
	do
		{
		--_Last;
		--_Count2;
		if (_Mid == _Last)
			{
			_Rotate_one_right(_First, _Mid, ++_Last);
			return;
			}
		}
	while (!_Pred(*_Last, *_Highest));

	++_Last;
	++_Count2;

	if (_Count1 == 1)
		{
		_Rotate_one_left(_First, _Mid, _Last);
		return;
		}

	_Buffered_inplace_merge_unchecked_impl(_First, _Mid, _Last, _Count1, _Count2, _Temp_ptr, _Capacity, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Mid);
	_Adl_verify_range(_Mid, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	auto _UMid = _Get_unwrapped(_Mid);
	auto _ULast = _Get_unwrapped(_Last);
	_Debug_order_unchecked(_UFirst, _UMid, _Pred);

	
	if (_UMid == _ULast)
		{
		return;
		}

	for (;;)
		{
		if (_UFirst == _UMid)
			{
			return;
			}

		if (_Pred(*_UMid, *_UFirst))
			{	
			break;
			}

		++_UFirst;
		}

	const auto _Highest = _Prev_iter(_UMid);
	do
		{
		--_ULast;
		if (_UMid == _ULast)
			{	
			_Rotate_one_right(_UFirst, _UMid, ++_ULast);
			return;
			}
		}
	while (!_Pred(*_ULast, *_Highest));	

	++_ULast;

	const _Iter_diff_t<_BidIt> _Count1 = ::std:: distance(_UFirst, _UMid);
	if (_Count1 == 1)
		{	
		_Rotate_one_left(_UFirst, _UMid, _ULast);
		return;
		}

	const _Iter_diff_t<_BidIt> _Count2 = ::std:: distance(_UMid, _ULast);
	_Optimistic_temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{_Min_value(_Count1, _Count2)};
	_Buffered_inplace_merge_unchecked_impl(_UFirst, _UMid, _ULast,
		_Count1, _Count2, _Temp_buf._Data, _Temp_buf._Capacity, _Pass_fn(_Pred));
	}

template<class _BidIt> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
	::std:: inplace_merge(_First, _Mid, _Last, less<>());
	}




















#line 3819 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _BidIt,
	class _Pr> inline
	_BidIt _Insertion_sort_unchecked(_BidIt _First, const _BidIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		{
		for (_BidIt _Next = _First; ++_Next != _Last; )
			{	
			_BidIt _Next1 = _Next;
			_Iter_value_t<_BidIt> _Val = ::std:: move(*_Next);

			if (_Debug_lt_pred(_Pred, _Val, *_First))
				{	
				_Move_backward_unchecked(_First, _Next, ++_Next1);
				*_First = ::std:: move(_Val);
				}
			else
				{	
				for (_BidIt _First1 = _Next1;
					_Debug_lt_pred(_Pred, _Val, *--_First1);
					_Next1 = _First1)
					{
					*_Next1 = ::std:: move(*_First1);	
					}

				*_Next1 = ::std:: move(_Val);	
				}
			}
		}

	return (_Last);
	}

template<class _RanIt,
	class _Pr> inline
	void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	if (_Debug_lt_pred(_Pred, *_Mid, *_First))
		{
		::std:: iter_swap(_Mid, _First);
		}

	if (_Debug_lt_pred(_Pred, *_Last, *_Mid))
		{	
		::std:: iter_swap(_Last, _Mid);

		if (_Debug_lt_pred(_Pred, *_Mid, *_First))
			{
			::std:: iter_swap(_Mid, _First);
			}
		}
	}

template<class _RanIt,
	class _Pr> inline
	void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	using _Diff = _Iter_diff_t<_RanIt>;
	const _Diff _Count = _Last - _First;
	if (40 < _Count)
		{	
		const _Diff _Step = (_Count + 1) >> 3; 
		const _Diff _Two_step = _Step << 1; 
		_Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);
		_Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
		_Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);
		_Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
		}
	else
		{
		_Med3_unchecked(_First, _Mid, _Last, _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	pair<_RanIt, _RanIt>
		_Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_RanIt _Mid = _First + ((_Last - _First) >> 1);	
	_Guess_median_unchecked(_First, _Mid, _Last - 1, _Pred);
	_RanIt _Pfirst = _Mid;
	_RanIt _Plast = _Pfirst + 1;

	while (_First < _Pfirst
		&& !_Debug_lt_pred(_Pred, *(_Pfirst - 1), *_Pfirst)
		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))
		{
		--_Pfirst;
		}

	while (_Plast < _Last
		&& !_Debug_lt_pred(_Pred, *_Plast, *_Pfirst)
		&& !_Pred(*_Pfirst, *_Plast))
		{
		++_Plast;
		}

	_RanIt _Gfirst = _Plast;
	_RanIt _Glast = _Pfirst;

	for (;;)
		{	
		for (; _Gfirst < _Last; ++_Gfirst)
			{
			if (_Debug_lt_pred(_Pred, *_Pfirst, *_Gfirst))
				{
				}
			else if (_Pred(*_Gfirst, *_Pfirst))
				{
				break;
				}
			else if (_Plast != _Gfirst)
				{
				::std:: iter_swap(_Plast, _Gfirst);
				++_Plast;
				}
			else
				{
				++_Plast;
				}
			}

		for (; _First < _Glast; --_Glast)
			{
			if (_Debug_lt_pred(_Pred, *(_Glast - 1), *_Pfirst))
				{
				}
			else if (_Pred(*_Pfirst, *(_Glast - 1)))
				{
				break;
				}
			else if (--_Pfirst != _Glast - 1)
				{
				::std:: iter_swap(_Pfirst, _Glast - 1);
				}
			}

		if (_Glast == _First && _Gfirst == _Last)
			{
			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));
			}

		if (_Glast == _First)
			{	
			if (_Plast != _Gfirst)
				{
				::std:: iter_swap(_Pfirst, _Plast);
				}

			++_Plast;
			::std:: iter_swap(_Pfirst, _Gfirst);
			++_Pfirst;
			++_Gfirst;
			}
		else if (_Gfirst == _Last)
			{	
			if (--_Glast != --_Pfirst)
				{
				::std:: iter_swap(_Glast, _Pfirst);
				}

			::std:: iter_swap(_Pfirst, --_Plast);
			}
		else
			{
			::std:: iter_swap(_Gfirst, --_Glast);
			++_Gfirst;
			}
		}
	}

template<class _RanIt,
	class _Pr> inline
	void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred)
	{	
	_Iter_diff_t<_RanIt> _Count;
	while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal)
		{	
		auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);
		
		_Ideal = (_Ideal >> 1) + (_Ideal >> 2);	

		if (_Mid.first - _First < _Last - _Mid.second)
			{	
			_Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);
			_First = _Mid.second;
			}
		else
			{	
			_Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);
			_Last = _Mid.first;
			}
		}

	if (_ISORT_MAX < _Count)
		{	
		_Make_heap_unchecked(_First, _Last, _Pred);
		_Sort_heap_unchecked(_First, _Last, _Pred);
		}
	else if (2 <= _Count)
		{
		_Insertion_sort_unchecked(_First, _Last, _Pred);	
		}
	}

template<class _RanIt,
	class _Pr> inline
	void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void sort(const _RanIt _First, const _RanIt _Last)
	{	
	::std:: sort(_First, _Last, less<>());
	}















#line 4058 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	_Ty * _Uninitialized_merge_move(_FwdIt _First, const _FwdIt _Mid, const _FwdIt _Last, _Ty * const _Dest, _Pr _Pred)
	{	
		
	_Uninitialized_backout<_Ty *> _Backout{_Dest};
	_FwdIt _Next = _Mid;
	for (;;)
		{
		if (_Debug_lt_pred(_Pred, *_Next, *_First))
			{
			_Backout._Emplace_back(::std:: move(*_Next));
			++_Next;

			if (_Next == _Last)
				{
				_Backout._Last = _Uninitialized_move_unchecked(_First, _Mid, _Backout._Last);
				return (_Backout._Release());
				}
			}
		else
			{
			_Backout._Emplace_back(::std:: move(*_First));
			++_First;

			if (_First == _Mid)
				{
				_Backout._Last = _Uninitialized_move_unchecked(_Next, _Last, _Backout._Last);
				return (_Backout._Release());
				}
			}
		}
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge_move(_InIt _First, const _InIt _Mid, const _InIt _Last, _OutIt _Dest, _Pr _Pred)
	{	
		
	_InIt _Next = _Mid;
	for (;;)
		{
		if (_Debug_lt_pred(_Pred, *_Next, *_First))
			{
			*_Dest = ::std:: move(*_Next);
			++_Dest;
			++_Next;

			if (_Next == _Last)
				{
				return (_Move_unchecked(_First, _Mid, _Dest));
				}
			}
		else
			{
			*_Dest = ::std:: move(*_First);
			++_Dest;
			++_First;

			if (_First == _Mid)
				{
				return (_Move_unchecked(_Next, _Last, _Dest));
				}
			}
		}
	}

template<class _BidIt,
	class _Ty,
	class _Pr> inline
	void _Uninitialized_chunked_merge_unchecked(_BidIt _First, const _BidIt _Last, _Ty * _Dest,
		const _Iter_diff_t<_BidIt> _Chunk, _Iter_diff_t<_BidIt> _Count, _Pr _Pred)
	{	
		
		
	_Uninitialized_backout<_Ty *> _Backout{_Dest};
	while (_Chunk < _Count)
		{
		_Count -= _Chunk;
		const _BidIt _Mid1 = ::std:: next(_First, _Chunk);
		const auto _Chunk2 = _Min_value(_Chunk, _Count);
		_Count -= _Chunk2;
		const _BidIt _Mid2 = ::std:: next(_Mid1, _Chunk2);
		_Backout._Last = _Uninitialized_merge_move(_First, _Mid1, _Mid2, _Backout._Last, _Pred);
		_First = _Mid2;
		}

	_Uninitialized_move_unchecked(_First, _Last, _Backout._Last);	
	_Backout._Release();
	}

template<class _BidIt,
	class _OutIt,
	class _Pr> inline
	void _Chunked_merge_unchecked(_BidIt _First, const _BidIt _Last, _OutIt _Dest,
		const _Iter_diff_t<_BidIt> _Chunk, _Iter_diff_t<_BidIt> _Count, _Pr _Pred)
	{	
		
		
	while (_Chunk < _Count)
		{
		_Count -= _Chunk;
		const _BidIt _Mid1 = ::std:: next(_First, _Chunk);
		const auto _Chunk2 = _Min_value(_Chunk, _Count);
		_Count -= _Chunk2;
		const _BidIt _Mid2 = ::std:: next(_Mid1, _Chunk2);
		_Dest = _Merge_move(_First, _Mid1, _Mid2, _Dest, _Pred);
		_First = _Mid2;
		}

	_Move_unchecked(_First, _Last, _Dest);	
	}

template<class _BidIt,
	class _Pr>
	void _Insertion_sort_isort_max_chunks(_BidIt _First, const _BidIt _Last, _Iter_diff_t<_BidIt> _Count, _Pr _Pred)
	{	
		
	constexpr auto _Diffsort_max = static_cast<_Iter_diff_t<_BidIt>>(_ISORT_MAX);
	for (; _Diffsort_max < _Count; _Count -= _Diffsort_max)
		{	
		_First = _Insertion_sort_unchecked(_First, ::std:: next(_First, _Diffsort_max), _Pred);
		}

	_Insertion_sort_unchecked(_First, _Last, _Pred);	
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_merge_sort_unchecked(const _BidIt _First, const _BidIt _Last,
		const _Iter_diff_t<_BidIt> _Count,
		_Iter_value_t<_BidIt> * const _Temp_ptr, _Pr _Pred)
	{	
		
		
	_Insertion_sort_isort_max_chunks(_First, _Last, _Count, _Pred);
	
	auto _Chunk = static_cast<_Iter_diff_t<_BidIt>>(_ISORT_MAX);
	if (_Count <= _Chunk)
		{
		return;
		}

	
	_Uninitialized_chunked_merge_unchecked(_First, _Last, _Temp_ptr, _Chunk, _Count, _Pred);
	_Uninitialized_backout<_Iter_value_t<_BidIt> *> _Backout{_Temp_ptr, _Temp_ptr + _Count};
	for (;;)
		{
		
		_Chunk <<= 1;
		_Chunked_merge_unchecked(_Temp_ptr, _Temp_ptr + _Count, _First,
			static_cast<ptrdiff_t>(_Chunk), static_cast<ptrdiff_t>(_Count), _Pred);
		_Chunk <<= 1;
		if (_Count <= _Chunk)
			{	
			return;
			}

		
		_Chunked_merge_unchecked(_First, _Last, _Temp_ptr, _Chunk, _Count, _Pred);
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Stable_sort_unchecked(const _BidIt _First, const _BidIt _Last, const _Iter_diff_t<_BidIt> _Count,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred)
	{	
	using _Diff = _Iter_diff_t<_BidIt>;
	if (_Count <= _ISORT_MAX)
		{
		_Insertion_sort_unchecked(_First, _Last, _Pred);	
		}
	else
		{	
		const auto _Half_count = static_cast<_Diff>(_Count >> 1);
		const auto _Half_count_ceil = static_cast<_Diff>(_Count - _Half_count);
		const _BidIt _Mid = ::std:: next(_First, _Half_count_ceil);
		if (_Half_count_ceil <= _Capacity)
			{	
			_Buffered_merge_sort_unchecked(_First, _Mid, _Half_count_ceil, _Temp_ptr, _Pred);
			_Buffered_merge_sort_unchecked(_Mid, _Last, _Half_count, _Temp_ptr, _Pred);
			}
		else
			{	
			_Stable_sort_unchecked(_First, _Mid, _Half_count_ceil, _Temp_ptr, _Capacity, _Pred);
			_Stable_sort_unchecked(_Mid, _Last, _Half_count, _Temp_ptr, _Capacity, _Pred);
			}

		_Buffered_inplace_merge_unchecked(_First, _Mid, _Last,
			_Half_count_ceil, _Half_count, _Temp_ptr, _Capacity, _Pred);	
		}
	}

template<class _BidIt,
	class _Pr> inline
	void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _Count = ::std:: distance(_UFirst, _ULast);
	if (_Count <= _ISORT_MAX)
		{
		if (_Count > 1)
			{
			_Insertion_sort_unchecked(_First, _Last, _Pass_fn(_Pred));
			}

		return;
		}

	_Optimistic_temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{_Count - (_Count >> 1)};
	_Stable_sort_unchecked(_UFirst, _ULast, _Count, _Temp_buf._Data, _Temp_buf._Capacity, _Pass_fn(_Pred));
	}







#line 4285 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _BidIt> inline
	void stable_sort(_BidIt _First, _BidIt _Last)
	{	
	::std:: stable_sort(_First, _Last, less<>());
	}









#line 4301 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _Pr> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Mid);
	_Adl_verify_range(_Mid, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _UMid = _Get_unwrapped(_Mid);
	const auto _ULast = _Get_unwrapped(_Last);

	if (_UFirst == _UMid)
		{
		return;	
		}

	_Make_heap_unchecked(_UFirst, _UMid, _Pass_fn(_Pred));
	for (auto _UNext = _UMid; _UNext < _ULast; ++_UNext)
		{
		if (_Debug_lt_pred(_Pred, *_UNext, *_UFirst))
			{	
			_Iter_value_t<_RanIt> _Val = ::std:: move(*_UNext);
			_Pop_heap_hole_unchecked(_UFirst, _UMid, _UNext, ::std:: move(_Val), _Pass_fn(_Pred));
			}
		}

	_Sort_heap_unchecked(_UFirst, _UMid, _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	::std:: partial_sort(_First, _Mid, _Last, less<>());
	}




















#line 4357 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _RanIt,
	class _Pr> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	auto _UMid2 = _UFirst2;
	if (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		for (; _UFirst1 != _ULast1 && _UMid2 != _ULast2; ++_UFirst1, (void)++_UMid2)
			{
			*_UMid2 = *_UFirst1;	
			}

		_Make_heap_unchecked(_UFirst2, _UMid2, _Pass_fn(_Pred));
		for (; _UFirst1 != _ULast1; ++_UFirst1)
			{
			if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2))
				{
				
				_Pop_heap_hole_by_index(_UFirst2, static_cast<_Iter_diff_t<_RanIt>>(0),
					static_cast<_Iter_diff_t<_RanIt>>(_UMid2 - _UFirst2),
					static_cast<_Iter_value_t<_InIt>>(*_UFirst1), _Pass_fn(_Pred));
				}
			}

		_Sort_heap_unchecked(_UFirst2, _UMid2, _Pass_fn(_Pred));
		}

	_Seek_wrapped(_First2, _UMid2);
	return (_First2);
	}

template<class _InIt,
	class _RanIt> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2)
	{	
	return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2, less<>()));
	}


























#line 4432 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _Pr> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Nth);
	_Adl_verify_range(_Nth, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _UNth = _Get_unwrapped(_Nth);
	auto _ULast = _Get_unwrapped(_Last);
	if (_UNth == _ULast)
		{
		return;	
		}

	while (_ISORT_MAX < _ULast - _UFirst)
		{	
		auto _UMid = _Partition_by_median_guess_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));

		if (_UMid.second <= _UNth)
			{
			_UFirst = _UMid.second;
			}
		else if (_UMid.first <= _UNth)
			{
			return;	
			}
		else
			{
			_ULast = _UMid.first;
			}
		}

	_Insertion_sort_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));	
	}

template<class _RanIt> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
	{	
	::std:: nth_element(_First, _Nth, _Last, less<>());
	}




















#line 4495 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _Pr>
	 inline bool includes(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
	_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
	for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++_UFirst1)
		{
		if (_Debug_lt_pred(_Pred, *_UFirst2, *_UFirst1))
			{
			return (false);
			}

		if (!_Pred(*_UFirst1, *_UFirst2))
			{
			++_UFirst2;
			}
		}

	return (_UFirst2 == _ULast2);
	}

template<class _InIt1,
	class _InIt2>
	 inline bool includes(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: includes(_First1, _Last1, _First2, _Last2, less<>()));
	}





























#line 4562 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
	_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++_UDest)
		{
		if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2))
			{	
			*_UDest = *_UFirst1;
			++_UFirst1;
			}
		else if (_Pred(*_UFirst2, *_UFirst1))
			{	
			*_UDest = *_UFirst2;
			++_UFirst2;
			}
		else
			{	
			*_UDest = *_UFirst1;
			++_UFirst1;
			++_UFirst2;
			}
		}

	_UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize,
	class _Pr> inline
	_DestTy * set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _DestTy (&_Dest)[_DestSize], _Pr _Pred)
	{	
	return (::std:: set_union(_First1, _Last1, _First2, _Last2,
		_Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))._Unwrapped());
	}
 #line 4618 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy * set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}
 #line 4639 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"



































































#line 4707 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
	_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2))
			{
			++_UFirst1;
			}
		else if (_Pred(*_UFirst2, *_UFirst1))
			{
			++_UFirst2;
			}
		else
			{
			*_UDest = *_UFirst1;
			++_UDest;
			++_UFirst1;
			++_UFirst2;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize,
	class _Pr> inline
	_DestTy * set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _DestTy (&_Dest)[_DestSize], _Pr _Pred)
	{	
	return (::std:: set_intersection(_First1, _Last1, _First2, _Last2,
		_Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))._Unwrapped());
	}
 #line 4761 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy * set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}
 #line 4782 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"



































































#line 4850 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
	_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2))
			{	
			*_UDest = *_UFirst1;
			++_UDest;
			++_UFirst1;
			}
		else
			{
			if (!_Pred(*_UFirst2, *_UFirst1))
				{
				++_UFirst1;
				}

			++_UFirst2;
			}
		}

	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst1, _ULast1, _UDest));
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize,
	class _Pr> inline
	_DestTy * set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_DestTy (&_Dest)[_DestSize], _Pr _Pred)
	{	
	return (::std:: set_difference(_First1, _Last1, _First2, _Last2,
		_Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))._Unwrapped());
	}
 #line 4906 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy * set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}
 #line 4929 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"







































































#line 5001 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
	_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2))
			{	
			*_UDest = *_UFirst1;
			++_UDest;
			++_UFirst1;
			}
		else if (_Pred(*_UFirst2, *_UFirst1))
			{	
			*_UDest = *_UFirst2;
			++_UDest;
			++_UFirst2;
			}
		else
			{	
			++_UFirst1;
			++_UFirst2;
			}
		}

	_UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize,
	class _Pr> inline
	_DestTy * set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_DestTy (&_Dest)[_DestSize], _Pr _Pred)
	{	
	return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
		_Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))._Unwrapped());
	}
 #line 5060 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 
template<class _InIt1,
	class _InIt2,
	class _DestTy,
	size_t _DestSize> inline
	_DestTy * set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_DestTy (&_Dest)[_DestSize])
	{	
	return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}
 #line 5083 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"







































































#line 5155 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	constexpr _FwdIt _Max_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		{
		while (++_First != _Last)
			{
			if (_Debug_lt_pred(_Pred, *_Found, *_First))
				{
				_Found = _First;
				}
			}
		}

	return (_Found);
	}

template<class _FwdIt,
	class _Pr>
	 constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Max_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
	return (_First);
	}

template<class _FwdIt>
	 constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: max_element(_First, _Last, less<>()));
	}




















#line 5212 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	constexpr _FwdIt _Min_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		{
		while (++_First != _Last)
			{
			if (_Debug_lt_pred(_Pred, *_First, *_Found))
				{
				_Found = _First;
				}
			}
		}

	return (_Found);
	}

template<class _FwdIt,
	class _Pr>
	 constexpr _FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Min_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
	return (_First);
	}

template<class _FwdIt>
	 constexpr _FwdIt min_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: min_element(_First, _Last, less<>()));
	}




















#line 5269 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	constexpr pair<_FwdIt, _FwdIt> _Minmax_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	pair<_FwdIt, _FwdIt> _Found(_First, _First);

	if (_First != _Last)
		{
		while (++_First != _Last)
			{	
			_FwdIt _Next = _First;
			if (++_Next == _Last)
				{	
				if (_Debug_lt_pred(_Pred, *_First, *_Found.first))
					{
					_Found.first = _First;
					}
				else if (!_Debug_lt_pred(_Pred, *_First, *_Found.second))
					{
					_Found.second = _First;
					}
				}
			else
				{	
				if (_Debug_lt_pred(_Pred, *_Next, *_First))
					{	
					if (_Debug_lt_pred(_Pred, *_Next, *_Found.first))
						{
						_Found.first = _Next;
						}
					if (!_Debug_lt_pred(_Pred, *_First, *_Found.second))
						{
						_Found.second = _First;
						}
					}
				else
					{	
					if (_Debug_lt_pred(_Pred, *_First, *_Found.first))
						{
						_Found.first = _First;
						}
					if (!_Debug_lt_pred(_Pred, *_Next, *_Found.second))
						{
						_Found.second = _Next;
						}
					}
				_First = _Next;
				}
			}
		}

	return (_Found);
	}

template<class _FwdIt,
	class _Pr>
	 constexpr pair<_FwdIt, _FwdIt> minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _Result =
		_Minmax_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
	_Seek_wrapped(_Last, _Result.second);
	_Seek_wrapped(_First, _Result.first);
	return {_First, _Last};
	}

template<class _FwdIt>
	 constexpr pair<_FwdIt, _FwdIt> minmax_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: minmax_element(_First, _Last, less<>()));
	}




















#line 5363 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

		
template<class _Ty,
	class _Pr>
	 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
		noexcept(noexcept(_Debug_lt_pred(_Pred, _Left, _Right)))
	{	
	return (_Debug_lt_pred(_Pred, _Left, _Right) ? _Right : _Left);
	}

template<class _Ty,
	class _Pr>
	 constexpr _Ty (max)(initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	const _Ty *_Res = _Max_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
	return (*_Res);
	}

#pragma warning(push)
#pragma warning(disable: 28285)	
template<class _Ty>
	 
	 constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Left < _Right))
	{	
	if (_Left < _Right)
		{
		do { if (!(_Right < _Left)) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 5390, 0, "%s", "invalid comparator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid comparator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 5390, 0); } while (false); } ; } while (false);
		return (_Right);
		}

	return (_Left);
	}
#pragma warning(pop)

template<class _Ty>
	 constexpr _Ty (max)(initializer_list<_Ty> _Ilist)
	{	
	return ((::std:: max)(_Ilist, less<>()));
	}

		
template<class _Ty,
	class _Pr>
	 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
		noexcept(noexcept(_Debug_lt_pred(_Pred, _Right, _Left)))
	{	
	return (_Debug_lt_pred(_Pred, _Right, _Left) ? _Right : _Left);
	}

template<class _Ty,
	class _Pr>
	 constexpr _Ty (min)(initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	const _Ty *_Res = _Min_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
	return (*_Res);
	}

#pragma warning(push)
#pragma warning(disable: 28285)	
template<class _Ty>
	 
	 constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Right < _Left))
	{	
	if (_Right < _Left)
		{
		do { if (!(_Left < _Right)) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 5430, 0, "%s", "invalid comparator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid comparator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm", 5430, 0); } while (false); } ; } while (false);
		return (_Right);
		}

	return (_Left);
	}
#pragma warning(pop)

template<class _Ty>
	 constexpr _Ty (min)(initializer_list<_Ty> _Ilist)
	{	
	return ((::std:: min)(_Ilist, less<>()));
	}

		
template<class _Ty,
	class _Pr>
	 constexpr pair<const _Ty&, const _Ty&>
		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Right, _Left)
		? pair<const _Ty&, const _Ty&>(_Right, _Left)
		: pair<const _Ty&, const _Ty&>(_Left, _Right));
	}

template<class _Ty,
	class _Pr>
	 constexpr pair<_Ty, _Ty> minmax(initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	pair<const _Ty *, const _Ty *> _Res = _Minmax_element_unchecked(
		_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
	return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
	}

template<class _Ty>
	 constexpr pair<const _Ty&, const _Ty&>
		minmax(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left
		? pair<const _Ty&, const _Ty&>(_Right, _Left)
		: pair<const _Ty&, const _Ty&>(_Left, _Right));
	}

template<class _Ty>
	 constexpr pair<_Ty, _Ty> minmax(initializer_list<_Ty> _Ilist)
	{	
	return (::std:: minmax(_Ilist, less<>()));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UNext = _ULast;
	if (_UFirst == _ULast || _UFirst == --_UNext)
		{
		return (false);
		}

	for (;;)
		{	
		auto _UNext1 = _UNext;
		if (_Debug_lt_pred(_Pred, *--_UNext, *_UNext1))
			{	
			auto _UMid = _ULast;
			do
				{
				--_UMid;
				}
			while (!_Debug_lt_pred(_Pred, *_UNext, *_UMid));

			::std:: iter_swap(_UNext, _UMid);
			_Reverse_unchecked(_UNext1, _ULast);
			return (true);
			}

		if (_UNext == _UFirst)
			{	
			_Reverse_unchecked(_UFirst, _ULast);
			return (false);
			}
		}
	}

template<class _BidIt> inline
	bool next_permutation(_BidIt _First, _BidIt _Last)
	{	
	return (::std:: next_permutation(_First, _Last, less<>()));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UNext = _ULast;
	if (_UFirst == _ULast || _UFirst == --_UNext)
		{
		return (false);
		}

	for (;;)
		{	
		auto _UNext1 = _UNext;
		if (_Debug_lt_pred(_Pred, *_UNext1, *--_UNext))
			{	
			auto _UMid = _ULast;
			do
				{
				--_UMid;
				}
			while (!_Debug_lt_pred(_Pred, *_UMid, *_UNext));

			::std:: iter_swap(_UNext, _UMid);
			_Reverse_unchecked(_UNext1, _ULast);
			return (true);
			}

		if (_UNext == _UFirst)
			{	
			_Reverse_unchecked(_UFirst, _ULast);
			return (false);
			}
		}
	}

template<class _BidIt> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last)
	{	
	return (::std:: prev_permutation(_First, _Last, less<>()));
	}

		
template<class _FwdIt,
	class _Pr>
	 inline _FwdIt is_sorted_until(const _FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	auto _ULast = _Get_unwrapped(_Last);
	if (_UFirst != _ULast)
		{
		for (auto _UNext = _UFirst; ++_UNext != _ULast; ++_UFirst)
			{
			if (_Debug_lt_pred(_Pred, *_UNext, *_UFirst))
				{
				_ULast = _UNext;
				break;
				}
			}
		}

	_Seek_wrapped(_Last, _ULast);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr>
	 inline bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	return (::std:: is_sorted_until(_UFirst, _ULast, _Pass_fn(_Pred)) == _ULast);
	}

template<class _FwdIt>
	 inline _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted_until(_First, _Last, less<>()));
	}

template<class _FwdIt>
	 inline bool is_sorted(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted(_First, _Last, less<>()));
	}







































#line 5654 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"



























#line 5682 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"

}


#pragma warning(pop)
#pragma pack(pop)
#line 5689 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"
#line 5690 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\algorithm"





#line 6 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"

#line 1 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"






























































































































































































































































































#line 288 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"



enum
{
	STBI_default = 0, 

	STBI_grey = 1,
	STBI_grey_alpha = 2,
	STBI_rgb = 3,
	STBI_rgb_alpha = 4
};

typedef unsigned char stbi_uc;
typedef unsigned short stbi_us;


extern "C" {
#line 307 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"





#line 313 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"

	
	
	
	

	
	
	

	typedef struct
	{
		int(*read)  (void *user, char *data, int size);   
		void(*skip)  (void *user, int n);                 
		int(*eof)   (void *user);                       
	} stbi_io_callbacks;

	
	
	
	

	extern stbi_uc *stbi_load_from_memory(stbi_uc           const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
	extern stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);

	extern stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp);
#line 340 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"



	extern stbi_uc *stbi_load(char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
	extern stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
	
#line 347 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"






	extern stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
	extern stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);


	extern stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
	extern stbi_us *stbi_load_from_file_16(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
#line 360 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"

	
	
	
	

	extern float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
	extern float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);


	extern float *stbi_loadf(char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
	extern float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
#line 373 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"
#line 374 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"


	extern void   stbi_hdr_to_ldr_gamma(float gamma);
	extern void   stbi_hdr_to_ldr_scale(float scale);
#line 379 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"


	extern void   stbi_ldr_to_hdr_gamma(float gamma);
	extern void   stbi_ldr_to_hdr_scale(float scale);
#line 384 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"

	
	extern int    stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);
	extern int    stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);

	extern int      stbi_is_hdr(char const *filename);
	extern int      stbi_is_hdr_from_file(FILE *f);
#line 392 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"


	
	
	extern const char *stbi_failure_reason(void);

	
	extern void     stbi_image_free(void *retval_from_stbi_load);

	
	extern int      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);
	extern int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);
	extern int      stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len);
	extern int      stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *clbk, void *user);


	extern int      stbi_info(char const *filename, int *x, int *y, int *comp);
	extern int      stbi_info_from_file(FILE *f, int *x, int *y, int *comp);
	extern int      stbi_is_16_bit(char const *filename);
	extern int      stbi_is_16_bit_from_file(FILE *f);
#line 413 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"



	
	
	
	extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);

	
	
	extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);

	
	extern void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip);

	

	extern char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen);
	extern char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header);
	extern char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);
	extern int   stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);

	extern char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);
	extern int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);



}
#line 442 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"




#line 447 "d:\\vsprojects\\openglproject\\openglproject\\stb_image.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 8 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "d:\\opengl\\include\\glad\\glad.h"

































#line 35 "d:\\opengl\\include\\glad\\glad.h"


#line 38 "d:\\opengl\\include\\glad\\glad.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"



















#pragma warning(push)
#pragma warning(disable:4001) 
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"
#pragma once
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winpackagefamily.h"



















#pragma warning(push)
#pragma warning(disable:4001) 
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winpackagefamily.h"
#pragma once
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winpackagefamily.h"



#line 29 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winpackagefamily.h"


























































#pragma warning(pop)
#line 89 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winpackagefamily.h"
#line 90 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winpackagefamily.h"

#line 92 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winpackagefamily.h"
#line 27 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"





























































#line 89 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"

















































#line 143 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"



#line 147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"






#line 154 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"





#line 160 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"



#line 164 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"











#line 176 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"






































 

















#line 233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"



#pragma warning(pop)
#line 238 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"
#line 239 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"

#line 241 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winapifamily.h"
#line 2 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"




















#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"



















#pragma warning(push)
#pragma warning(disable:4668) 
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"
#pragma warning(disable:4001) 
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#pragma once

















































































































































































#line 205 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"











#line 217 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"






#line 224 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"


#line 227 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"



#line 231 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"
#line 232 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"







#line 240 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"
#line 241 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"






#line 248 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 250 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 252 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 254 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 256 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 258 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 260 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 262 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"


#line 265 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"
#line 266 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"








#line 275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"



#line 279 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"



#line 283 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"



#line 287 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"



#line 291 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"



#line 295 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 297 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"



#pragma warning(pop)


#line 304 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"
#line 305 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 307 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdkddkver.h"

#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"





#pragma once
#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#pragma region Application Family or OneCore Family



















































#line 84 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"




















#line 105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"





#line 111 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 112 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"



#line 116 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"



#line 120 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"



#line 124 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"



#line 128 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"



#line 132 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"





#line 138 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"




#line 143 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 144 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"







#line 152 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 153 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"



#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 160 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#pragma warning(push)
#line 163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 167 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\excpt.h"








#pragma once




__pragma(pack(push, 8)) extern "C" {




typedef enum _EXCEPTION_DISPOSITION
{
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;






    struct _EXCEPTION_RECORD;
    struct _CONTEXT;

    EXCEPTION_DISPOSITION __cdecl _except_handler(
          struct _EXCEPTION_RECORD* _ExceptionRecord,
          void*                     _EstablisherFrame,
          struct _CONTEXT*       _ContextRecord,
          void*                  _DispatcherContext
        );
















#line 58 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\excpt.h"











unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);










} __pragma(pack(pop))
#line 168 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\stdarg.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {










} __pragma(pack(pop))
#line 169 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 170 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"













#pragma once


extern "C" {
#line 19 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"











#pragma once

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"
















#pragma once
#line 19 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"


#pragma warning(push)
#pragma warning(disable:4668) 
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"



 

#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"
  
 #line 32 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"

 



  
 #line 39 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"

 
  
  
 #line 44 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"

#line 46 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"




















#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"


extern "C" {
#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"




























#line 100 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"












#line 113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"






































































































#line 216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"
#line 217 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"






































































































#line 320 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"



























































#line 380 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"























































































#line 468 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"



















#line 488 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"





#line 494 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"


#line 497 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"




































































#line 566 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"










#line 577 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"






























#line 608 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"
















#line 625 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"

















#line 643 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"


}
#line 647 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"



























#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings_strict.h"




























#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings_strict.h"





























































































































































#pragma once
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings_undef.h"








































































































































































































































































































































































































































































#line 189 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings_strict.h"











































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1065 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings_strict.h"
































































#line 1130 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings_strict.h"






















































#line 1185 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings_strict.h"
#line 1186 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings_strict.h"
#line 1187 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings_strict.h"
#line 675 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"
#line 676 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"

















#line 694 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"




























































































































#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdv_driverspecs.h"





















#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\sdv_driverspecs.h"
#line 126 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"



#pragma once
#line 131 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"


extern "C" {
#line 135 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"























































































































#line 255 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"

    
    
    
    
    
    
    
    
    
    
    

    
    

#line 272 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"

    
    
    



    
    
    
    
    

    
    
    
    
    
    
    

    
    
    
    



    
    


    
    
    
    
    
    
    
    
    
    
    
    


    
    


    
    


    
    



    
    









    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    


    


    
    
    
    
    

    


    
    
    
    
    

    


    
    
    
    
    

    


    
    
    
    
    


    




    
    
    
    
    

    


    
    
    
    
    


    


    
    
    
    
    
    

    


    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    


    
    

    
    
    
    

    

    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
    

    
    


    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    


    
    
    
    
     
    

    
    
        
        
        
        
    
    
    
    
    
    

    
    
    

    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
#line 699 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"
    
#line 701 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"
    


    
    
    
    
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    
    
    
    

    
    

    
    

    
    
    
    
    
    


    
    
    

    
	

    
    


    
    


    
    
    


    
    
    


    
    











































































    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

#line 887 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"

    
    
    

    
    
    


}
#line 899 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"

#line 901 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\driverspecs.h"

#line 696 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"












#line 709 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"


#pragma warning(pop)
#line 713 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"

#line 715 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\specstrings.h"
#line 15 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"



#pragma region Application Family or OneCore Family





#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"
#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"













#line 40 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"


extern "C" {
#line 44 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"







typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef   char *PSZ;
#line 59 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"













#line 73 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"



#line 77 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"



#line 81 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"



#line 85 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"



#line 89 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"












#line 102 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"






#line 109 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"



#line 113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"
#line 114 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"


























#line 141 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"




#line 146 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"
#line 147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"







#line 155 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"

typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL            *PBOOL;
typedef BOOL             *LPBOOL;
typedef BYTE            *PBYTE;
typedef BYTE             *LPBYTE;
typedef int             *PINT;
typedef int              *LPINT;
typedef WORD            *PWORD;
typedef WORD             *LPWORD;
typedef long             *LPLONG;
typedef DWORD           *PDWORD;
typedef DWORD            *LPDWORD;
typedef void             *LPVOID;
typedef const void       *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;



#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





















#pragma warning(push)
#pragma warning(disable:4668) 
#pragma warning(disable:4820) 
#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma warning(disable:4200) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 


extern "C" {
#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



















#line 53 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 64 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









#line 74 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 81 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 82 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"






































#pragma once
#line 41 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"


extern "C" {
#line 45 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"

    
    
    

    
    
    

    
    
    #line 57 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"
    

#line 60 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"
    

#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"
    

#line 66 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"
    

#line 69 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    


    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
















}
#line 261 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"

#line 263 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\kernelspecs.h"
#line 87 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 91 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





#line 97 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 99 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









#line 109 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







#line 121 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


#line 124 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









#line 134 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 138 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

















#line 156 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





















#line 178 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"






















#pragma warning(push)
#pragma warning(disable:4668) 
#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"









#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"
 


#line 40 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"
  
   
  

#line 45 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"
  typedef unsigned long POINTER_64_INT;
 #line 47 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"
 
#line 49 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"



#line 53 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"

#line 55 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"







#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"





#pragma once
#line 70 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"


extern "C" {
#line 74 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"

typedef signed char         INT8, *PINT8;
typedef signed short        INT16, *PINT16;
typedef signed int          INT32, *PINT32;
typedef signed __int64      INT64, *PINT64;
typedef unsigned char       UINT8, *PUINT8;
typedef unsigned short      UINT16, *PUINT16;
typedef unsigned int        UINT32, *PUINT32;
typedef unsigned __int64    UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;







#line 104 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"

















#line 122 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"











#line 134 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"
    typedef  int INT_PTR, *PINT_PTR;
    typedef  unsigned int UINT_PTR, *PUINT_PTR;

    typedef  long LONG_PTR, *PLONG_PTR;
    typedef  unsigned long ULONG_PTR, *PULONG_PTR;

    

#line 143 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"
#line 144 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"





























































































































































































typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef  long SHANDLE_PTR;
typedef  unsigned long HANDLE_PTR;

















__inline
void * __ptr64
PtrToPtr64(
    const void *p
    )
{
    return((void * __ptr64) (unsigned __int64) (ULONG_PTR)p );
}

__inline
void *
Ptr64ToPtr(
    const void * __ptr64 p
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) p);
}

__inline
void * __ptr64
HandleToHandle64(
    const void *h
    )
{
    return((void * __ptr64)(__int64)(LONG_PTR)h );
}

__inline
void *
Handle64ToHandle(
    const void * __ptr64 h
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) h );
}
#line 390 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"






#line 397 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"























typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;









































#line 464 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"





typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;







typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;




}
#line 499 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"


#pragma warning(pop)
#line 503 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"

#line 505 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\basetsd.h"
#line 180 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







#line 188 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 189 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 196 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 197 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 205 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 213 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








#line 222 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 223 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 227 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 234 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 242 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 243 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 250 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 251 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 258 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 259 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 264 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 266 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 267 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 274 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 282 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 283 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"















#line 299 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 300 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#line 307 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 308 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 313 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 315 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 316 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 321 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 323 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 324 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








#line 333 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 334 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




















#line 355 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"










#line 366 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 367 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"














#line 382 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







typedef void *PVOID;
typedef void * __ptr64 PVOID64;








#line 400 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





#line 406 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
















#line 423 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;
#line 437 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 438 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






typedef wchar_t WCHAR;    



#line 449 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef   WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef   PWSTR *PZPWSTR;
typedef   const PWSTR *PCZPWSTR;
typedef   WCHAR  *LPUWSTR, *PUWSTR;
typedef   const WCHAR *LPCWSTR, *PCWSTR;
typedef   PCWSTR *PZPCWSTR;
typedef   const PCWSTR *PCZPCWSTR;
typedef   const WCHAR  *LPCUWSTR, *PCUWSTR;

typedef   WCHAR *PZZWSTR;
typedef   const WCHAR *PCZZWSTR;
typedef   WCHAR  *PUZZWSTR;
typedef   const WCHAR  *PCUZZWSTR;

typedef  WCHAR *PNZWCH;
typedef  const WCHAR *PCNZWCH;
typedef  WCHAR  *PUNZWCH;
typedef  const WCHAR  *PCUNZWCH;



typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR  *LPCUWCHAR, *PCUWCHAR;





typedef unsigned long UCSCHAR;



















typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR  *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR  *PCUUCSSTR;

typedef UCSCHAR  *PUUCSCHAR;
typedef const UCSCHAR  *PCUUCSCHAR;

#line 514 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef   CHAR *NPSTR, *LPSTR, *PSTR;
typedef   PSTR *PZPSTR;
typedef   const PSTR *PCZPSTR;
typedef   const CHAR *LPCSTR, *PCSTR;
typedef   PCSTR *PZPCSTR;
typedef   const PCSTR *PCZPCSTR;

typedef   CHAR *PZZSTR;
typedef   const CHAR *PCZZSTR;

typedef  CHAR *PNZCH;
typedef  const CHAR *PCNZCH;

































typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;

#line 571 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef LPCH LPTCH, PTCH;
typedef LPCCH LPCTCH, PCTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
typedef PZZSTR PZZTSTR, PUZZTSTR;
typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
typedef PZPSTR PZPTSTR;
typedef PNZCH PNZTCH, PUNZTCH;
typedef PCNZCH PCNZTCH, PCUNZTCH;


#line 584 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



typedef SHORT *PSHORT;  
typedef LONG *PLONG;    








typedef struct _PROCESSOR_NUMBER {
    WORD   Group;
    BYTE  Number;
    BYTE  Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD   Group;
    WORD   Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;





#line 619 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 623 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"










typedef void *HANDLE;


#line 637 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 639 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 643 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
typedef HANDLE *PHANDLE;







typedef BYTE   FCHAR;
typedef WORD   FSHORT;
typedef DWORD  FLONG;










typedef   long HRESULT;
#line 666 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 667 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




    
    
    




#line 679 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









#line 689 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"













#line 703 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




























typedef char CCHAR;          
typedef DWORD LCID;         
typedef PDWORD PLCID;       
typedef WORD   LANGID;      








typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;

#line 749 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
























#line 774 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;









typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;


















#line 810 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;





#line 823 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } ;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
    LONGLONG QuadPart;
} LARGE_INTEGER;
#line 835 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef LARGE_INTEGER *PLARGE_INTEGER;





#line 843 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } ;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
    ULONGLONG QuadPart;
} ULARGE_INTEGER;
#line 855 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef ULARGE_INTEGER *PULARGE_INTEGER;





typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;
typedef LONG RTL_REFERENCE_COUNT32, *PRTL_REFERENCE_COUNT32;









typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG *PDWORDLONG;





























#line 914 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"












ULONGLONG
__stdcall
Int64ShllMod32 (
      ULONGLONG Value,
      DWORD ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
      LONGLONG Value,
      DWORD ShiftCount
    );

ULONGLONG
__stdcall
Int64ShrlMod32 (
      ULONGLONG Value,
      DWORD ShiftCount
    );


#pragma warning(push)
#line 950 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma warning(disable:4035 4793)               

__inline ULONGLONG
__stdcall
Int64ShllMod32 (
      ULONGLONG Value,
      DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shld    edx, eax, cl
        shl     eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
      LONGLONG Value,
      DWORD ShiftCount
    )
{
    __asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        sar     edx, cl
    }
}

__inline ULONGLONG
__stdcall
Int64ShrlMod32 (
      ULONGLONG Value,
      DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        shr     edx, cl
    }
}


#pragma warning(pop)


#line 1005 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





#line 1011 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






extern "C" {
#line 1019 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









































#line 1061 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








unsigned int
__cdecl
_rotl (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotl64 (
      unsigned __int64 Value,
      int Shift
    );

unsigned int
__cdecl
_rotr (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotr64 (
      unsigned __int64 Value,
      int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)

#line 1103 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


}
#line 1107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





typedef BYTE  BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;








typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"




















#line 22 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
#line 29 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"




































#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"








typedef GUID *LPGUID;
#line 77 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"



typedef const GUID *LPCGUID;
#line 82 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"




typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;







#line 104 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"







#line 112 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"







#line 121 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 122 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"







#line 130 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 131 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"







#line 139 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 140 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"

#line 142 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"








__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}











#line 175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"

















__inline bool operator==(const GUID & guidOne, const GUID & guidOther)
{
    return !!IsEqualGUID(guidOne,guidOther);
}

__inline bool operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}
#line 202 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 203 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 205 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 206 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\guiddef.h"
#line 1154 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




typedef struct  _OBJECTID {     
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 1163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"













































































#pragma region Application Family or OneCore Family




extern "C++" 
template <typename T, size_t N>
char (*RtlpNumberOf(  T (&)[N] ))[N];



#line 1257 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion











































#line 1302 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





#line 1308 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









































#line 1350 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




























typedef
 
 
EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
      struct _EXCEPTION_RECORD *ExceptionRecord,
      PVOID EstablisherFrame,
      struct _CONTEXT *ContextRecord,
      PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2306 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


























#line 2333 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


























#line 2360 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"











extern "C++" {

    template <size_t S>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE;

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<1>
    {
        typedef INT8 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<2>
    {
        typedef INT16 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<4>
    {
        typedef INT32 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<8>
    {
        typedef INT64 type;
    };

    
    template <class T>
    struct _ENUM_FLAG_SIZED_INTEGER
    {
        typedef typename _ENUM_FLAG_INTEGER_FOR_SIZE<sizeof(T)>::type type;
    };

}





#line 2414 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"













#line 2428 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


















  





























































#line 2509 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
  
#line 2511 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 2512 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;







typedef struct __declspec(align(16)) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __declspec(align(16)) _XSAVE_FORMAT {
    WORD   ControlWord;
    WORD   StatusWord;
    BYTE  TagWord;
    BYTE  Reserved1;
    WORD   ErrorOpcode;
    DWORD ErrorOffset;
    WORD   ErrorSelector;
    WORD   Reserved2;
    DWORD DataOffset;
    WORD   DataSelector;
    WORD   Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];






#line 2557 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    M128A XmmRegisters[8];
    BYTE  Reserved4[224];

#line 2562 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

} XSAVE_FORMAT, *PXSAVE_FORMAT;



typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 CompactionMask;
    DWORD64 Reserved2[6];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __declspec(align(16)) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
      PXSAVE_AREA Area;


    DWORD Reserved2;
#line 2587 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    PVOID Buffer;


    DWORD Reserved3;
#line 2593 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

} XSTATE_CONTEXT, *PXSTATE_CONTEXT;





typedef struct _SCOPE_TABLE_AMD64 {
    DWORD Count;
    struct {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef struct _SCOPE_TABLE_ARM {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef struct _SCOPE_TABLE_ARM64 {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM64, *PSCOPE_TABLE_ARM64;

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 6260 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







typedef struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {

    PDWORD64 X19;
    PDWORD64 X20;
    PDWORD64 X21;
    PDWORD64 X22;
    PDWORD64 X23;
    PDWORD64 X24;
    PDWORD64 X25;
    PDWORD64 X26;
    PDWORD64 X27;
    PDWORD64 X28;
    PDWORD64 Fp;
    PDWORD64 Lr;

    PDWORD64 D8;
    PDWORD64 D9;
    PDWORD64 D10;
    PDWORD64 D11;
    PDWORD64 D12;
    PDWORD64 D13;
    PDWORD64 D14;
    PDWORD64 D15;

} KNONVOLATILE_CONTEXT_POINTERS_ARM64, *PKNONVOLATILE_CONTEXT_POINTERS_ARM64;





#line 6298 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"












#line 6311 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




extern "C" {
#line 6317 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


















#line 6336 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




















#line 6357 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





void
__int2c (
    void
    );

#pragma intrinsic(__int2c)





#line 6374 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"























#line 6398 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 6400 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





























































#line 6462 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 6463 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


}
#line 6467 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"














#line 6482 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 6486 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"











#pragma warning(push)
#line 6499 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

                                


#pragma warning( pop )


#line 6507 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 6509 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 6510 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








extern "C" {
#line 6520 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




















 
BOOLEAN
_bittest (
      LONG const *Base,
      LONG Offset
    );

BOOLEAN
_bittestandcomplement (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandreset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
       LONG volatile *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
       LONG volatile *Base,
      LONG Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)








 
BOOLEAN
_BitScanForward (
      DWORD *Index,
      DWORD Mask
    );

 
BOOLEAN
_BitScanReverse (
      DWORD *Index,
      DWORD Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)

 
__forceinline
BOOLEAN
_InlineBitScanForward64 (
      DWORD *Index,
      DWORD64 Mask
    )
{
    if (_BitScanForward(Index, (DWORD)Mask)) {
        return 1;
    }

    if (_BitScanForward(Index, (DWORD)(Mask >> 32))) {
        *Index += 32;
        return 1;
    }

    return 0;
}



 
__forceinline
BOOLEAN
_InlineBitScanReverse64 (
      DWORD *Index,
      DWORD64 Mask
    )
{
    if (_BitScanReverse(Index, (DWORD)(Mask >> 32))) {
        *Index += 32;
        return 1;
    }

    if (_BitScanReverse(Index, (DWORD)Mask)) {
        return 1;
    }

    return 0;
}



#line 6653 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



























SHORT
_InterlockedIncrement16 (
       SHORT volatile *Addend
    );

SHORT
_InterlockedDecrement16 (
       SHORT volatile *Addend
    );

SHORT
_InterlockedCompareExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange,
      SHORT Comperand
    );

LONG64
_InterlockedCompareExchange64 (
       LONG64 volatile *Destination,
      LONG64 ExChange,
      LONG64 Comperand
    );

#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedCompareExchange64)

#line 6710 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
















































LONG
_InterlockedAnd (
       LONG volatile *Destination,
      LONG Value
    );

LONG
_InterlockedOr (
       LONG volatile *Destination,
      LONG Value
    );

LONG
_InterlockedXor (
       LONG volatile *Destination,
      LONG Value
    );

LONG
__cdecl
_InterlockedIncrement (
       LONG volatile *Addend
    );

LONG
__cdecl
_InterlockedDecrement (
       LONG volatile *Addend
    );

LONG
__cdecl
_InterlockedExchange (
       LONG volatile *Target,
      LONG Value
    );

LONG
__cdecl
_InterlockedExchangeAdd (
       LONG volatile *Addend,
      LONG Value
    );

__forceinline
LONG
_InlineInterlockedAdd (
       LONG volatile *Addend,
      LONG Value
    )

{

    return _InterlockedExchangeAdd(Addend, Value) + Value;
}

LONG
__cdecl
_InterlockedCompareExchange (
       LONG volatile * Destination,
      LONG ExChange,
      LONG Comperand
    );



__forceinline
 
PVOID
_InlineInterlockedExchangePointer(
      
#line 6831 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
     PVOID volatile * Destination,
      PVOID Value
    )
{
    return (PVOID)_InterlockedExchange((LONG volatile *) Destination,
                                      (LONG) Value);
}






__forceinline
 
PVOID
_InlineInterlockedCompareExchangePointer (
      
#line 6851 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
     PVOID volatile * Destination,
      PVOID ExChange,
      PVOID Comperand
    )
{
    return (PVOID)_InterlockedCompareExchange((LONG volatile *) Destination,
                                             (LONG) ExChange,
                                             (LONG) Comperand);
}










#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)








CHAR
_InterlockedExchange8 (
       CHAR volatile *Target,
      CHAR Value
    );

SHORT
_InterlockedExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange
    );

#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)

#line 6902 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"














char 
_InterlockedExchangeAdd8 (
       char volatile * _Addend, 
      char _Value
    );

char
_InterlockedAnd8 (
       char volatile *Destination,
      char Value
    );

char
_InterlockedOr8 (
       char volatile *Destination,
      char Value
    );

char
_InterlockedXor8 (
       char volatile *Destination,
      char Value
    );

SHORT
_InterlockedAnd16 (
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedXor16(
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedCompareExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange,
      SHORT Comperand
    );

SHORT
_InterlockedOr16 (
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedIncrement16 (
       SHORT volatile *Destination
    );

SHORT
_InterlockedDecrement16 (
       SHORT volatile *Destination
    );

#pragma intrinsic (_InterlockedExchangeAdd8)
#pragma intrinsic (_InterlockedAnd8)
#pragma intrinsic (_InterlockedOr8)
#pragma intrinsic (_InterlockedXor8)
#pragma intrinsic (_InterlockedAnd16)
#pragma intrinsic (_InterlockedOr16)
#pragma intrinsic (_InterlockedXor16)
#pragma intrinsic (_InterlockedCompareExchange16)
#pragma intrinsic (_InterlockedIncrement16)
#pragma intrinsic (_InterlockedDecrement16)

#line 6987 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








__forceinline
LONG64
_InlineInterlockedAnd64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Destination;
    } while (_InterlockedCompareExchange64(Destination,
                                          Old & Value,
                                          Old) != Old);

    return Old;
}






__forceinline
LONG64
_InlineInterlockedAdd64 (
       LONG64 volatile *Addend,
      LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old + Value;
}







#line 7043 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"













LONG
_InterlockedXor (
       LONG volatile *Target,
      LONG Set
    );

#pragma intrinsic(_InterlockedXor)





LONGLONG
__forceinline
_InlineInterlockedOr64 (
       LONGLONG volatile *Destination,
      LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (_InterlockedCompareExchange64(Destination,
                                          Old | Value,
                                          Old) != Old);

    return Old;
}



__forceinline
LONG64
_InlineInterlockedXor64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Destination;
    } while (_InterlockedCompareExchange64(Destination,
                                          Old ^ Value,
                                          Old) != Old);

    return Old;
}



LONGLONG
__forceinline
_InlineInterlockedIncrement64 (
       LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old + 1,
                                          Old) != Old);

    return Old + 1;
}






__forceinline
LONGLONG
_InlineInterlockedDecrement64 (
       LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old - 1,
                                          Old) != Old);

    return Old - 1;
}






__forceinline
LONGLONG
_InlineInterlockedExchange64 (
       LONGLONG volatile *Target,
      LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Target;
    } while (_InterlockedCompareExchange64(Target,
                                          Value,
                                          Old) != Old);

    return Old;
}






__forceinline
LONGLONG
_InlineInterlockedExchangeAdd64 (
       LONGLONG volatile *Addend,
      LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old;
}








void
__incfsbyte (
      DWORD Offset
    );

void
__addfsbyte (
      DWORD Offset,
      BYTE  Value
    );

void
__incfsword (
      DWORD Offset
    );

void
__addfsword (
      DWORD Offset,
      WORD   Value
    );

void
__incfsdword (
      DWORD Offset
    );

void
__addfsdword (
      DWORD Offset,
      DWORD Value
    );

#pragma intrinsic(__incfsbyte)
#pragma intrinsic(__addfsbyte)
#pragma intrinsic(__incfsword)
#pragma intrinsic(__addfsword)
#pragma intrinsic(__incfsdword)
#pragma intrinsic(__addfsdword)

#line 7241 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"













void
__cpuidex (
    int CPUInfo[4],
    int Function,
    int SubLeaf
    );

#pragma intrinsic(__cpuidex)

#line 7264 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







BYTE 
__readfsbyte (
      DWORD Offset
    );

WORD  
__readfsword (
      DWORD Offset
    );

DWORD
__readfsdword (
      DWORD Offset
    );

void
__writefsbyte (
      DWORD Offset,
      BYTE  Data
    );

void
__writefsword (
      DWORD Offset,
      WORD   Data
    );

void
__writefsdword (
      DWORD Offset,
      DWORD Data
    );

#pragma intrinsic(__readfsbyte)
#pragma intrinsic(__readfsword)
#pragma intrinsic(__readfsdword)
#pragma intrinsic(__writefsbyte)
#pragma intrinsic(__writefsword)
#pragma intrinsic(__writefsdword)

#line 7312 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



void
_mm_pause (
    void
    );

#pragma intrinsic(_mm_pause)



#line 7325 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


}
#line 7329 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 7331 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







#pragma prefast(push)
#pragma warning(push)
#pragma prefast(disable: 6001 28113, "The barrier variable is accessed only to create a side effect.")
#pragma warning(disable: 4793)
__forceinline
void
MemoryBarrier (
    void
    )
{
    LONG Barrier;

    _InterlockedOr(&Barrier, 0);
    return;
}

#pragma warning(pop)
#pragma prefast(pop)

#line 7358 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"












void
_mm_prefetch (
      CHAR const *a,
      int sel
    );

#pragma intrinsic(_mm_prefetch)






















DWORD64
__readpmc (
      DWORD Counter
    );

#pragma intrinsic(__readpmc)







DWORD64
__rdtsc (
    void
    );

#pragma intrinsic(__rdtsc)

#line 7420 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 7422 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






__inline PVOID GetFiberData( void )    { return *(PVOID *) (ULONG_PTR) __readfsdword (0x10);}
__inline PVOID GetCurrentFiber( void ) { return (PVOID) (ULONG_PTR) __readfsdword (0x10);}

#line 7432 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 7436 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
























































#line 7493 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Spare0;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;









typedef char __C_ASSERT__[(sizeof(XSAVE_FORMAT) == 512)?1:-1];

#line 7519 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 7524 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"











typedef struct _CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

    
    
    
    
    

    BYTE    ExtendedRegisters[512];

} CONTEXT;

typedef CONTEXT *PCONTEXT;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 7624 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 7628 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





typedef struct _LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;

#line 7659 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








extern "C" {
#line 7669 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

__forceinline
CHAR
ReadAcquire8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
CHAR
ReadNoFence8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
SHORT
ReadAcquire16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
SHORT
ReadNoFence16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG
ReadAcquire (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG
ReadNoFence (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG64
ReadAcquire64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG64
ReadNoFence64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}


}
#line 7889 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 7891 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





__forceinline
CHAR
ReadRaw8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *(CHAR *)Source;
    return Value;
}

__forceinline
void
WriteRaw8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *(CHAR *)Destination = Value;
    return;
}

__forceinline
SHORT
ReadRaw16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *(SHORT *)Source;
    return Value;
}

__forceinline
void
WriteRaw16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *(SHORT *)Destination = Value;
    return;
}

__forceinline
LONG
ReadRaw (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *(LONG *)Source;
    return Value;
}

__forceinline
void
WriteRaw (
       LONG volatile *Destination,
      LONG Value
    )

{

    *(LONG *)Destination = Value;
    return;
}

__forceinline
LONG64
ReadRaw64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *(LONG64 *)Source;
    return Value;
}

__forceinline
void
WriteRaw64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *(LONG64 *)Destination = Value;
    return;
}





__forceinline
BYTE 
ReadUCharAcquire (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadAcquire8((PCHAR)Source);
}

__forceinline
BYTE 
ReadUCharNoFence (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadNoFence8((PCHAR)Source);
}

__forceinline
BYTE 
ReadBooleanAcquire (
       BOOLEAN const volatile *Source
    )

{

    return (BOOLEAN)ReadAcquire8((PCHAR)Source);
}

__forceinline
BYTE 
ReadBooleanNoFence (
       BOOLEAN const volatile *Source
    )

{

    return (BOOLEAN)ReadNoFence8((PCHAR)Source);
}

__forceinline
BYTE 
ReadUCharRaw (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadRaw8((PCHAR)Source);
}

__forceinline
void
WriteUCharRelease (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharNoFence (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteBooleanRelease (
       BOOLEAN volatile *Destination,
      BOOLEAN Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteBooleanNoFence (
       BOOLEAN volatile *Destination,
      BOOLEAN Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharRaw (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
WORD  
ReadUShortAcquire (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadAcquire16((PSHORT)Source);
}

__forceinline
WORD  
ReadUShortNoFence (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadNoFence16((PSHORT)Source);
}

__forceinline
WORD  
ReadUShortRaw (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadRaw16((PSHORT)Source);
}

__forceinline
void
WriteUShortRelease (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortNoFence (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortRaw (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
DWORD
ReadULongAcquire (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadAcquire((PLONG)Source);
}

__forceinline
DWORD
ReadULongNoFence (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadNoFence((PLONG)Source);
}

__forceinline
DWORD
ReadULongRaw (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadRaw((PLONG)Source);
}

__forceinline
void
WriteULongRelease (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongNoFence (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongRaw (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
DWORD64
ReadULong64Acquire (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadAcquire64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64NoFence (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadNoFence64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64Raw (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WriteULong64Release (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64NoFence (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64Raw (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}















__forceinline
PVOID
ReadPointerAcquire (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadAcquire((PLONG)Source);
}

__forceinline
PVOID
ReadPointerNoFence (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadNoFence((PLONG)Source);
}

__forceinline
PVOID
ReadPointerRaw (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadRaw((PLONG)Source);
}

__forceinline
void
WritePointerRelease (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WritePointerNoFence (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WritePointerRaw (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}



























































































































#line 8553 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 8555 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


#line 8558 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


























#line 8585 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 8609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"











typedef struct _WOW64_CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    WOW64_FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

    
    
    
    
    

    BYTE    ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 8709 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


typedef struct _WOW64_LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;






















typedef struct _EXCEPTION_RECORD {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;


















#line 8819 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef PVOID PACCESS_TOKEN;            
typedef PVOID PSECURITY_DESCRIPTOR;     
typedef PVOID PSID;     
typedef PVOID PCLAIMS_BLOB;     








































typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;

























































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;












#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 8943 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 8952 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


































typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
#line 8990 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




typedef struct _SID {
   BYTE  Revision;
   BYTE  SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];
#line 9003 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
} SID, *PISID;
#line 9005 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





                                                























typedef union _SE_SID {
    SID Sid;
    BYTE  Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
} SE_SID, *PSE_SID;

#line 9040 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel,
    SidTypeLogonSession
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;
#line 9062 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
















































































































































































































































































































































































































typedef enum {

    WinNullSid                                  = 0,
    WinWorldSid                                 = 1,
    WinLocalSid                                 = 2,
    WinCreatorOwnerSid                          = 3,
    WinCreatorGroupSid                          = 4,
    WinCreatorOwnerServerSid                    = 5,
    WinCreatorGroupServerSid                    = 6,
    WinNtAuthoritySid                           = 7,
    WinDialupSid                                = 8,
    WinNetworkSid                               = 9,
    WinBatchSid                                 = 10,
    WinInteractiveSid                           = 11,
    WinServiceSid                               = 12,
    WinAnonymousSid                             = 13,
    WinProxySid                                 = 14,
    WinEnterpriseControllersSid                 = 15,
    WinSelfSid                                  = 16,
    WinAuthenticatedUserSid                     = 17,
    WinRestrictedCodeSid                        = 18,
    WinTerminalServerSid                        = 19,
    WinRemoteLogonIdSid                         = 20,
    WinLogonIdsSid                              = 21,
    WinLocalSystemSid                           = 22,
    WinLocalServiceSid                          = 23,
    WinNetworkServiceSid                        = 24,
    WinBuiltinDomainSid                         = 25,
    WinBuiltinAdministratorsSid                 = 26,
    WinBuiltinUsersSid                          = 27,
    WinBuiltinGuestsSid                         = 28,
    WinBuiltinPowerUsersSid                     = 29,
    WinBuiltinAccountOperatorsSid               = 30,
    WinBuiltinSystemOperatorsSid                = 31,
    WinBuiltinPrintOperatorsSid                 = 32,
    WinBuiltinBackupOperatorsSid                = 33,
    WinBuiltinReplicatorSid                     = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid             = 36,
    WinBuiltinNetworkConfigurationOperatorsSid  = 37,
    WinAccountAdministratorSid                  = 38,
    WinAccountGuestSid                          = 39,
    WinAccountKrbtgtSid                         = 40,
    WinAccountDomainAdminsSid                   = 41,
    WinAccountDomainUsersSid                    = 42,
    WinAccountDomainGuestsSid                   = 43,
    WinAccountComputersSid                      = 44,
    WinAccountControllersSid                    = 45,
    WinAccountCertAdminsSid                     = 46,
    WinAccountSchemaAdminsSid                   = 47,
    WinAccountEnterpriseAdminsSid               = 48,
    WinAccountPolicyAdminsSid                   = 49,
    WinAccountRasAndIasServersSid               = 50,
    WinNTLMAuthenticationSid                    = 51,
    WinDigestAuthenticationSid                  = 52,
    WinSChannelAuthenticationSid                = 53,
    WinThisOrganizationSid                      = 54,
    WinOtherOrganizationSid                     = 55,
    WinBuiltinIncomingForestTrustBuildersSid    = 56,
    WinBuiltinPerfMonitoringUsersSid            = 57,
    WinBuiltinPerfLoggingUsersSid               = 58,
    WinBuiltinAuthorizationAccessSid            = 59,
    WinBuiltinTerminalServerLicenseServersSid   = 60,
    WinBuiltinDCOMUsersSid                      = 61,
    WinBuiltinIUsersSid                         = 62,
    WinIUserSid                                 = 63,
    WinBuiltinCryptoOperatorsSid                = 64,
    WinUntrustedLabelSid                        = 65,
    WinLowLabelSid                              = 66,
    WinMediumLabelSid                           = 67,
    WinHighLabelSid                             = 68,
    WinSystemLabelSid                           = 69,
    WinWriteRestrictedCodeSid                   = 70,
    WinCreatorOwnerRightsSid                    = 71,
    WinCacheablePrincipalsGroupSid              = 72,
    WinNonCacheablePrincipalsGroupSid           = 73,
    WinEnterpriseReadonlyControllersSid         = 74,
    WinAccountReadonlyControllersSid            = 75,
    WinBuiltinEventLogReadersGroup              = 76,
    WinNewEnterpriseReadonlyControllersSid      = 77,
    WinBuiltinCertSvcDComAccessGroup            = 78,
    WinMediumPlusLabelSid                       = 79,
    WinLocalLogonSid                            = 80,
    WinConsoleLogonSid                          = 81,
    WinThisOrganizationCertificateSid           = 82,
    WinApplicationPackageAuthoritySid           = 83,
    WinBuiltinAnyPackageSid                     = 84,
    WinCapabilityInternetClientSid              = 85,
    WinCapabilityInternetClientServerSid        = 86,
    WinCapabilityPrivateNetworkClientServerSid  = 87,
    WinCapabilityPicturesLibrarySid             = 88,
    WinCapabilityVideosLibrarySid               = 89,
    WinCapabilityMusicLibrarySid                = 90,
    WinCapabilityDocumentsLibrarySid            = 91,
    WinCapabilitySharedUserCertificatesSid      = 92,
    WinCapabilityEnterpriseAuthenticationSid    = 93,
    WinCapabilityRemovableStorageSid            = 94,
    WinBuiltinRDSRemoteAccessServersSid         = 95,
    WinBuiltinRDSEndpointServersSid             = 96,
    WinBuiltinRDSManagementServersSid           = 97,
    WinUserModeDriversSid                       = 98,
    WinBuiltinHyperVAdminsSid                   = 99,
    WinAccountCloneableControllersSid           = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid          = 102,
    WinAuthenticationAuthorityAssertedSid       = 103,
    WinAuthenticationServiceAssertedSid         = 104,
    WinLocalAccountSid                          = 105,
    WinLocalAccountAndAdministratorSid          = 106,
    WinAccountProtectedUsersSid                 = 107,
    WinCapabilityAppointmentsSid                = 108,
    WinCapabilityContactsSid                    = 109,
    WinAccountDefaultSystemManagedSid           = 110,
    WinBuiltinDefaultSystemManagedGroupSid      = 111,
    WinBuiltinStorageReplicaAdminsSid           = 112,
    WinAccountKeyAdminsSid                      = 113,
    WinAccountEnterpriseKeyAdminsSid            = 114,
    WinAuthenticationKeyTrustSid                = 115,
    WinAuthenticationKeyPropertyMFASid          = 116,
    WinAuthenticationKeyPropertyAttestationSid  = 117,
    WinAuthenticationFreshKeyAuthSid            = 118,
    WinBuiltinDeviceOwnersSid                   = 119,
} WELL_KNOWN_SID_TYPE;
































































































typedef struct _ACL {
    BYTE  AclRevision;
    BYTE  Sbz1;
    WORD   AclSize;
    WORD   AceCount;
    WORD   Sbz2;
} ACL;
typedef ACL *PACL;






















typedef struct _ACE_HEADER {
    BYTE  AceType;
    BYTE  AceFlags;
    WORD   AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;



























































































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;

typedef struct _SYSTEM_ACCESS_FILTER_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_ACCESS_FILTER_ACE, *PSYSTEM_ACCESS_FILTER_ACE;

















typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;















typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;


























typedef WORD   SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;

























































































typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE  Revision;
    BYTE  Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE  Revision;
   BYTE  Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

   
typedef struct _SECURITY_OBJECT_AI_PARAMS {
    DWORD Size;             
    DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;



















































typedef struct _OBJECT_TYPE_LIST {
    WORD   Level;
    WORD   Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;















typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;


















































typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
















typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone                    = 0x00000000,   

    
    
    
    
    
    AccessReasonAllowedAce                  = 0x00010000,   
    AccessReasonDeniedAce                   = 0x00020000,   

    AccessReasonAllowedParentAce            = 0x00030000,   
    AccessReasonDeniedParentAce             = 0x00040000,   

    AccessReasonNotGrantedByCape            = 0x00050000,   
    AccessReasonNotGrantedByParentCape      = 0x00060000,   

    AccessReasonNotGrantedToAppContainer    = 0x00070000,   

    AccessReasonMissingPrivilege            = 0x00100000,
    AccessReasonFromPrivilege               = 0x00200000,


    AccessReasonIntegrityLevel              = 0x00300000,

    AccessReasonOwnership                   = 0x00400000,

    AccessReasonNullDacl                    = 0x00500000,
    AccessReasonEmptyDacl                   = 0x00600000,

    AccessReasonNoSD                        = 0x00700000,
    AccessReasonNoGrant                     = 0x00800000,   

    AccessReasonTrustLabel                  = 0x00900000,   

    AccessReasonFilterAce                   = 0x00a00000    
}
ACCESS_REASON_TYPE;

 












typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;


























typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;      
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;  
    PACCESS_MASK GrantedAccess;
    PDWORD    AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;












































































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;













































#line 10608 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






















#line 10631 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    TokenPrivateNameSpace,
    TokenSingletonAttributes,
    TokenBnoIsolation,
    TokenChildProcessFlags,
    MaxTokenInfoClass  
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;





typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;



typedef struct _SE_TOKEN_USER {
    union {
        TOKEN_USER TokenUser;
        SID_AND_ATTRIBUTES User;
    } ;

    union {
        SID Sid;
        BYTE  Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
    } ;

} SE_TOKEN_USER , PSE_TOKEN_USER;



#line 10736 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;



    SID_AND_ATTRIBUTES Groups[1];
#line 10745 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
} TOKEN_GROUPS, *PTOKEN_GROUPS;

typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;



#line 10760 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;










#line 10813 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef PVOID PSECURITY_ATTRIBUTES_OPAQUE;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
    PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    BYTE  PerUserPolicy[(((59)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;



#line 10898 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _TOKEN_SID_INFORMATION {
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;

typedef struct _TOKEN_BNO_ISOLATION_INFORMATION {
    PWSTR       IsolationPrefix;
    BOOLEAN     IsolationEnabled;
} TOKEN_BNO_ISOLATION_INFORMATION, *PTOKEN_BNO_ISOLATION_INFORMATION;






























typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    DWORD64             Version;
    PWSTR               Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;








typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID   pValue;         
    DWORD   ValueLength;    
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;



































































typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {

    
    
    
    

    PWSTR   Name; 

    
    
    

    WORD    ValueType;

    
    
    
    

    WORD    Reserved;

    
    
    

    DWORD   Flags;

    
    
    

    DWORD   ValueCount;

    
    
    

    union {
        PLONG64                                         pInt64;
        PDWORD64                                        pUint64;
        PWSTR                                           *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE            pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE    pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;






typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {

    
    
    
    

    DWORD   Name;

    
    
    

    WORD    ValueType;

    
    
    
    

    WORD    Reserved;

    
    
    

    DWORD   Flags;

    
    
    

    DWORD   ValueCount;

    
    
    

    union {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;





















typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {

    
    
    

    WORD    Version;

    
    
    

    WORD    Reserved;

    DWORD   AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1    pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;








typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;






typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;






















typedef BYTE  SE_SIGNING_LEVEL, *PSE_SIGNING_LEVEL;























typedef enum _SE_IMAGE_SIGNATURE_TYPE
{
    SeImageSignatureNone = 0,
    SeImageSignatureEmbedded,
    SeImageSignatureCache,
    SeImageSignatureCatalogCached,
    SeImageSignatureCatalogNotCached,
    SeImageSignatureCatalogHint,
    SeImageSignaturePackageCatalog,
} SE_IMAGE_SIGNATURE_TYPE, *PSE_IMAGE_SIGNATURE_TYPE;






typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;



typedef struct _SECURITY_CAPABILITIES {




    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
#line 11279 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;






















#line 11305 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




















#line 11326 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"











typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;   
    DWORD MemberLevel;  
    DWORD Flags;        
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union {
        PVOID FiberData;
        DWORD Version;
    };


#line 11366 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;


    union {
        DWORD FiberData;
        DWORD Version;
    };


#line 11388 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;


    union {
        DWORD64 FiberData;
        DWORD Version;
    };



#line 11408 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;










typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {  
    DWORD UmsVersion;   
        PVOID UmsContext;   
        PVOID UmsCompletionList;   
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES; 

typedef struct _WOW64_ARCHITECTURE_INFORMATION {
    DWORD Machine : 16;
    DWORD KernelMode : 1;
    DWORD UserMode : 1;
    DWORD Native : 1;
    DWORD Process : 1;
    DWORD ReservedZero0 : 12;
} WOW64_ARCHITECTURE_INFORMATION;














typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0   : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;               
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;             
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD  Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG  ReadOperationCount;
    ULONGLONG  WriteOperationCount;
    ULONGLONG  OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;




typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessControlFlowGuardPolicy,
    ProcessSignaturePolicy,
    ProcessFontDisablePolicy,
    ProcessImageLoadPolicy,
    ProcessSystemCallFilterPolicy,
    ProcessPayloadRestrictionPolicy,
    ProcessChildProcessPolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;






typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        } ;
    } ;
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD AuditDisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 30;
        } ;
    } ;
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        } ;
    } ;
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD ProhibitDynamicCode : 1;
            DWORD AllowThreadOptOut : 1;
            DWORD AllowRemoteDowngrade : 1;
            DWORD AuditProhibitDynamicCode : 1;
            DWORD ReservedFlags : 28;
        } ;
    } ;
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;

typedef struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableControlFlowGuard : 1;
            DWORD EnableExportSuppression : 1;
            DWORD StrictMode : 1;
            DWORD ReservedFlags : 29;
        } ;
    } ;
} PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY, *PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;

typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD MicrosoftSignedOnly : 1;
            DWORD StoreSignedOnly : 1;
            DWORD MitigationOptIn : 1;
            DWORD AuditMicrosoftSignedOnly : 1;
            DWORD AuditStoreSignedOnly : 1;
            DWORD ReservedFlags : 27;
        } ;
    } ;
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;

typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableNonSystemFonts     : 1;
            DWORD AuditNonSystemFontLoading : 1;
            DWORD ReservedFlags             : 30;
        } ;
    } ;
} PROCESS_MITIGATION_FONT_DISABLE_POLICY, *PPROCESS_MITIGATION_FONT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD NoRemoteImages : 1;
            DWORD NoLowMandatoryLabelImages : 1;
            DWORD PreferSystem32Images : 1;
            DWORD AuditNoRemoteImages : 1;
            DWORD AuditNoLowMandatoryLabelImages : 1;
            DWORD ReservedFlags : 27;
        } ;
    } ;
} PROCESS_MITIGATION_IMAGE_LOAD_POLICY, *PPROCESS_MITIGATION_IMAGE_LOAD_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD FilterId: 4;
            DWORD ReservedFlags : 28;
        } ;
    } ;
} PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;

typedef struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableExportAddressFilter     : 1;
            DWORD AuditExportAddressFilter      : 1;

            DWORD EnableExportAddressFilterPlus : 1;
            DWORD AuditExportAddressFilterPlus  : 1;

            DWORD EnableImportAddressFilter     : 1;
            DWORD AuditImportAddressFilter      : 1;

            DWORD EnableRopStackPivot           : 1;
            DWORD AuditRopStackPivot            : 1;

            DWORD EnableRopCallerCheck          : 1;
            DWORD AuditRopCallerCheck           : 1;

            DWORD EnableRopSimExec              : 1;
            DWORD AuditRopSimExec               : 1;

            DWORD ReservedFlags                 : 20;
        } ;
    } ;
} PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY, *PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;

typedef struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD NoChildProcessCreation : 1;
            DWORD AuditNoChildProcessCreation : 1;
            DWORD AllowSecureProcessCreation : 1;
            DWORD ReservedFlags : 29;
        } ;
    } ;
} PROCESS_MITIGATION_CHILD_PROCESS_POLICY, *PPROCESS_MITIGATION_CHILD_PROCESS_POLICY;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;


typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;





typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE, *PJOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
  *PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

typedef struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    union {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
            CpuRateControlToleranceInterval;
    } ;

    DWORD LimitFlags;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;


typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

typedef struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    union {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    } ;

    union {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
    } ;

    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;


typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    DWORD ControlFlags;
    union {
        DWORD CpuRate;
        DWORD Weight;
        struct {
            WORD   MinRate;
            WORD   MaxRate;
        } ;
    } ;
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;





typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 0x1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 0x2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 0x4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 0x7
} JOB_OBJECT_NET_RATE_CONTROL_FLAGS;



extern "C++" { inline constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator | (JOB_OBJECT_NET_RATE_CONTROL_FLAGS a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_NET_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_NET_RATE_CONTROL_FLAGS &operator |= (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator & (JOB_OBJECT_NET_RATE_CONTROL_FLAGS a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_NET_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_NET_RATE_CONTROL_FLAGS &operator &= (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator ~ (JOB_OBJECT_NET_RATE_CONTROL_FLAGS a) throw() { return JOB_OBJECT_NET_RATE_CONTROL_FLAGS(~((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)a)); } inline constexpr JOB_OBJECT_NET_RATE_CONTROL_FLAGS operator ^ (JOB_OBJECT_NET_RATE_CONTROL_FLAGS a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_NET_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_NET_RATE_CONTROL_FLAGS &operator ^= (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &a, JOB_OBJECT_NET_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_NET_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_NET_RATE_CONTROL_FLAGS>::type)b)); } }
typedef char __C_ASSERT__[(JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS == (JOB_OBJECT_NET_RATE_CONTROL_ENABLE + JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH + JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG))?1:-1];
#line 11902 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 11904 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



typedef struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
    DWORD64 MaxBandwidth;
    JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
    BYTE  DscpTag;
} JOBOBJECT_NET_RATE_CONTROL_INFORMATION;








typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 0x1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 0x2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 0x4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 0x8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = JOB_OBJECT_IO_RATE_CONTROL_ENABLE |
                                             JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME |
                                             JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL |
                                             JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP
} JOB_OBJECT_IO_RATE_CONTROL_FLAGS;



extern "C++" { inline constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator | (JOB_OBJECT_IO_RATE_CONTROL_FLAGS a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_IO_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_IO_RATE_CONTROL_FLAGS &operator |= (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator & (JOB_OBJECT_IO_RATE_CONTROL_FLAGS a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_IO_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_IO_RATE_CONTROL_FLAGS &operator &= (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator ~ (JOB_OBJECT_IO_RATE_CONTROL_FLAGS a) throw() { return JOB_OBJECT_IO_RATE_CONTROL_FLAGS(~((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)a)); } inline constexpr JOB_OBJECT_IO_RATE_CONTROL_FLAGS operator ^ (JOB_OBJECT_IO_RATE_CONTROL_FLAGS a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return JOB_OBJECT_IO_RATE_CONTROL_FLAGS(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } inline JOB_OBJECT_IO_RATE_CONTROL_FLAGS &operator ^= (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &a, JOB_OBJECT_IO_RATE_CONTROL_FLAGS b) throw() { return (JOB_OBJECT_IO_RATE_CONTROL_FLAGS &)(((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<JOB_OBJECT_IO_RATE_CONTROL_FLAGS>::type)b)); } }

#line 11936 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD   VolumeNameLength;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;

typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
    JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1;

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD   VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;

typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD   VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
    LONG64 SoftMaxIops;
    LONG64 SoftMaxBandwidth;
    LONG64 SoftMaxTimePercent;
    LONG64 LimitExcessNotifyIops;
    LONG64 LimitExcessNotifyBandwidth;
    LONG64 LimitExcessNotifyTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;



typedef enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS {
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 0x1,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 0x2,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 0x3
} JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS;

typedef struct _JOBOBJECT_IO_ATTRIBUTION_STATS {

    ULONG_PTR IoCount;
    ULONGLONG TotalNonOverlappedQueueTime;
    ULONGLONG TotalNonOverlappedServiceTime;
    ULONGLONG TotalSize;

} JOBOBJECT_IO_ATTRIBUTION_STATS, *PJOBOBJECT_IO_ATTRIBUTION_STATS;

typedef struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
    DWORD ControlFlags;

    JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
    JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;

} JOBOBJECT_IO_ATTRIBUTION_INFORMATION, *PJOBOBJECT_IO_ATTRIBUTION_INFORMATION;
































































































































typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,  
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    JobObjectReserved9Information,
    JobObjectReserved10Information,
    JobObjectReserved11Information,
    JobObjectReserved12Information,
    JobObjectReserved13Information,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation,
    JobObjectNotificationLimitInformation2,
    JobObjectLimitViolationInformation2,
    JobObjectCreateSilo,
    JobObjectSiloBasicInformation,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;



typedef struct _SILOOBJECT_BASIC_INFORMATION {
    DWORD SiloId;
    DWORD SiloParentId;
    DWORD NumberOfProcesses;
    BOOLEAN IsInServerSilo;
    BYTE  Reserved[3];
} SILOOBJECT_BASIC_INFORMATION, *PSILOOBJECT_BASIC_INFORMATION;

typedef enum _SERVERSILO_STATE {
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED,
    SERVERSILO_SHUTTING_DOWN,
    SERVERSILO_TERMINATING,
    SERVERSILO_TERMINATED,
} SERVERSILO_STATE, *PSERVERSILO_STATE;

typedef struct _SERVERSILO_BASIC_INFORMATION {
    DWORD ServiceSessionId;
    SERVERSILO_STATE State;
    DWORD    ExitStatus;
} SERVERSILO_BASIC_INFORMATION, *PSERVERSILO_BASIC_INFORMATION;


typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;

































typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE   Level;
    BYTE   Associativity;
    WORD   LineSize;
    DWORD  Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR   ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE  Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG  Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE  Flags;
    BYTE  EfficiencyClass;
    BYTE  Reserved[20];
    WORD   GroupCount;
      GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE  Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE  Level;
    BYTE  Associativity;
    WORD   LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE  Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE  MaximumProcessorCount;
    BYTE  ActiveProcessorCount;
    BYTE  Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD   MaximumGroupCount;
    WORD   ActiveGroupCount;
    BYTE  Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

  struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

typedef enum _CPU_SET_INFORMATION_TYPE {
    CpuSetInformation
} CPU_SET_INFORMATION_TYPE, *PCPU_SET_INFORMATION_TYPE;

  struct _SYSTEM_CPU_SET_INFORMATION {
    DWORD Size;
    CPU_SET_INFORMATION_TYPE Type;
    union {
        struct {
            DWORD Id;
            WORD   Group;
            BYTE  LogicalProcessorIndex;
            BYTE  CoreIndex;
            BYTE  LastLevelCacheIndex;
            BYTE  NumaNodeIndex;
            BYTE  EfficiencyClass;
            union {






                BYTE  AllFlags;
                struct {
                    BYTE  Parked : 1;
                    BYTE  Allocated : 1;
                    BYTE  AllocatedToTargetProcess : 1;
                    BYTE  RealTime : 1;
                    BYTE  ReservedFlags : 4;
                } ;
            } ;

            union {
                DWORD Reserved;
                BYTE  SchedulingClass;
            };

            DWORD64 AllocationTag;
        } CpuSet;
    } ;
};

typedef struct _SYSTEM_CPU_SET_INFORMATION SYSTEM_CPU_SET_INFORMATION, *PSYSTEM_CPU_SET_INFORMATION;



typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;






























































































































































typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {
    
    DWORD64 EnabledFeatures;

    
    DWORD64 EnabledVolatileFeatures;

    
    DWORD Size;

    
    union {
        DWORD ControlFlags;
        struct
        {
            DWORD OptimizedSave : 1;
            DWORD CompactionEnabled : 1;
        };
    };

    
    XSTATE_FEATURE Features[(64)];

    
    DWORD64 EnabledSupervisorFeatures;

    
    DWORD64 AlignedFeatures;

    
    DWORD AllFeatureSize;

    
    DWORD AllFeatures[(64)];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;



typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;



typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD     AllocationProtect;
    DWORD     __alignment1;
    ULONGLONG RegionSize;
    DWORD     State;
    DWORD     Protect;
    DWORD     Type;
    DWORD     __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;





























typedef struct _CFG_CALL_TARGET_INFO {
    ULONG_PTR Offset;
    ULONG_PTR Flags;
} CFG_CALL_TARGET_INFO, *PCFG_CALL_TARGET_INFO;
































































typedef struct MEM_ADDRESS_REQUIREMENTS {
    PVOID LowestStartingAddress;
    PVOID HighestEndingAddress;
    SIZE_T Alignment;
} MEM_ADDRESS_REQUIREMENTS, *PMEM_ADDRESS_REQUIREMENTS;

typedef enum MEM_EXTENDED_PARAMETER_TYPE {
    MemExtendedParameterInvalidType = 0,
    MemExtendedParameterAddressRequirements,
    MemExtendedParameterNumaNode,
    MemExtendedParameterPartitionHandle,
    MemExtendedParameterMax
} MEM_EXTENDED_PARAMETER_TYPE, *PMEM_EXTENDED_PARAMETER_TYPE;



typedef struct __declspec(align(8)) MEM_EXTENDED_PARAMETER {

    struct {
        DWORD64 Type : 8;
        DWORD64 Reserved : 64 - 8;
    } ;

    union {
        DWORD64 ULong64;
        PVOID Pointer;
        SIZE_T Size;
        HANDLE Handle;
        DWORD ULong;
    } ;

} MEM_EXTENDED_PARAMETER, *PMEM_EXTENDED_PARAMETER;




















typedef struct _ENCLAVE_CREATE_INFO_SGX {
    BYTE  Secs[4096];
} ENCLAVE_CREATE_INFO_SGX, *PENCLAVE_CREATE_INFO_SGX;

typedef struct _ENCLAVE_INIT_INFO_SGX {
    BYTE  SigStruct[1808];
    BYTE  Reserved1[240];
    BYTE  EInitToken[304];
    BYTE  Reserved2[1744];
} ENCLAVE_INIT_INFO_SGX, *PENCLAVE_INIT_INFO_SGX;



typedef struct _ENCLAVE_CREATE_INFO_VBS {
    DWORD Flags;
    BYTE  OwnerID[32];
} ENCLAVE_CREATE_INFO_VBS, *PENCLAVE_CREATE_INFO_VBS;




typedef struct _ENCLAVE_INIT_INFO_VBS {
    DWORD Length;
    DWORD ThreadCount;
} ENCLAVE_INIT_INFO_VBS, *PENCLAVE_INIT_INFO_VBS;



typedef PVOID (ENCLAVE_TARGET_FUNCTION)(PVOID);
typedef ENCLAVE_TARGET_FUNCTION (*PENCLAVE_TARGET_FUNCTION);
typedef PENCLAVE_TARGET_FUNCTION LPENCLAVE_TARGET_FUNCTION;

#line 12816 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"











































































































































typedef struct _FILE_ID_128 {                               
    BYTE  Identifier[16];                                   
} FILE_ID_128, *PFILE_ID_128;                               





typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;


typedef struct _FILE_NOTIFY_EXTENDED_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastModificationTime;
    LARGE_INTEGER LastChangeTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER AllocatedLength;
    LARGE_INTEGER FileSize;
    DWORD FileAttributes;
    DWORD ReparsePointTag;
    LARGE_INTEGER FileId;
    LARGE_INTEGER ParentFileId;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_EXTENDED_INFORMATION, *PFILE_NOTIFY_EXTENDED_INFORMATION;
#line 12988 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;













































#line 13044 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"













#line 13058 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"










typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD  ReparseTag;
    WORD   ReparseDataLength;
    WORD   Reserved;
    GUID   ReparseGuid;
    struct {
        BYTE   DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;










































































































































#line 13216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _SCRUB_DATA_INPUT {

    
    
    

    DWORD Size;

    
    
    
    
    
    

    DWORD Flags;

    
    
    
    
    

    DWORD MaximumIos;

    
    
    
    
    

    DWORD ObjectId[4];

    
    
    

    DWORD Reserved[13];

    
    
    
    
    

    BYTE  ResumeContext[816];

} SCRUB_DATA_INPUT, *PSCRUB_DATA_INPUT;



typedef struct _SCRUB_PARITY_EXTENT {

    LONGLONG Offset;

    ULONGLONG Length;

} SCRUB_PARITY_EXTENT, *PSCRUB_PARITY_EXTENT;

typedef struct _SCRUB_PARITY_EXTENT_DATA {

    
    
    

    WORD   Size;

    
    
    

    WORD   Flags;

    
    
    

    WORD   NumberOfParityExtents;

    
    
    

    WORD   MaximumNumberOfParityExtents;

    
    
    

    SCRUB_PARITY_EXTENT ParityExtents[1];

} SCRUB_PARITY_EXTENT_DATA, *PSCRUB_PARITY_EXTENT_DATA;

#line 13311 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _SCRUB_DATA_OUTPUT {

    
    
    

    DWORD Size;

    
    
    
    
    
    
    

    DWORD Flags;

    
    
    

    DWORD Status;

    
    
    
    

    ULONGLONG ErrorFileOffset;

    
    
    
    

    ULONGLONG ErrorLength;

    
    
    

    ULONGLONG NumberOfBytesRepaired;

    
    
    

    ULONGLONG NumberOfBytesFailed;

    
    
    

    ULONGLONG InternalFileReference;



    
    
    
    
    
    

    WORD   ResumeContextLength;

    
    
    
    
    

    WORD   ParityExtentDataOffset;

    
    
    

    DWORD Reserved[5];









#line 13402 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    
    
    
    
    
    
    
    
    
    
    
    

    BYTE  ResumeContext[816];

} SCRUB_DATA_OUTPUT, *PSCRUB_DATA_OUTPUT;

#line 13421 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









typedef enum _SharedVirtualDiskSupportType
{
    
    
    
    SharedVirtualDisksUnsupported = 0,

    
    
    
    SharedVirtualDisksSupported = 1,

    
    
    
    
    SharedVirtualDiskSnapshotsSupported = 3,

    
    
    
    
    SharedVirtualDiskCDPSnapshotsSupported = 7
} SharedVirtualDiskSupportType;

typedef enum _SharedVirtualDiskHandleState
{
    
    
    
    SharedVirtualDiskHandleStateNone = 0,

    
    
    
    
    SharedVirtualDiskHandleStateFileShared = 1,

    
    
    
    
    SharedVirtualDiskHandleStateHandleShared = 3
} SharedVirtualDiskHandleState;





typedef struct _SHARED_VIRTUAL_DISK_SUPPORT {
    
    
    
    
    SharedVirtualDiskSupportType SharedVirtualDiskSupport;

    
    
    
    
    SharedVirtualDiskHandleState HandleState;
} SHARED_VIRTUAL_DISK_SUPPORT, *PSHARED_VIRTUAL_DISK_SUPPORT;







#line 13500 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



















#line 13520 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





















#line 13542 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _NETWORK_APP_INSTANCE_EA {

    
    
    
    

    GUID AppInstanceID;

    
    
    

    DWORD CsvFlags;

} NETWORK_APP_INSTANCE_EA, *PNETWORK_APP_INSTANCE_EA;

#line 13561 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 13563 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






















extern "C" const GUID  GUID_MAX_POWER_SAVINGS;






extern "C" const GUID  GUID_MIN_POWER_SAVINGS;






extern "C" const GUID  GUID_TYPICAL_POWER_SAVINGS;







extern "C" const GUID  NO_SUBGROUP_GUID;







extern "C" const GUID  ALL_POWERSCHEMES_GUID;




































extern "C" const GUID  GUID_POWERSCHEME_PERSONALITY;








extern "C" const GUID  GUID_ACTIVE_POWERSCHEME;














extern "C" const GUID  GUID_IDLE_RESILIENCY_SUBGROUP;







extern "C" const GUID  GUID_IDLE_RESILIENCY_PERIOD;





extern "C" const GUID  GUID_DEEP_SLEEP_ENABLED;








extern "C" const GUID  GUID_DEEP_SLEEP_PLATFORM_STATE;






extern "C" const GUID  GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;












extern "C" const GUID  GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;










extern "C" const GUID  GUID_VIDEO_SUBGROUP;







extern "C" const GUID  GUID_VIDEO_POWERDOWN_TIMEOUT;








extern "C" const GUID  GUID_VIDEO_ANNOYANCE_TIMEOUT;








extern "C" const GUID  GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;







extern "C" const GUID  GUID_VIDEO_DIM_TIMEOUT;







extern "C" const GUID  GUID_VIDEO_ADAPTIVE_POWERDOWN;






extern "C" const GUID  GUID_MONITOR_POWER_ON;






extern "C" const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;






extern "C" const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;






extern "C" const GUID  GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;







extern "C" const GUID  GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;






extern "C" const GUID  GUID_CONSOLE_DISPLAY_STATE;







extern "C" const GUID  GUID_ALLOW_DISPLAY_REQUIRED;








extern "C" const GUID  GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;






extern "C" const GUID  GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;






extern "C" const GUID  GUID_NON_ADAPTIVE_INPUT_TIMEOUT;






extern "C" const GUID  GUID_ADAPTIVE_INPUT_CONTROLLER_STATE;







extern "C" const GUID  GUID_DISK_SUBGROUP;




extern "C" const GUID  GUID_DISK_MAX_POWER;





extern "C" const GUID  GUID_DISK_POWERDOWN_TIMEOUT;






extern "C" const GUID  GUID_DISK_IDLE_TIMEOUT;








extern "C" const GUID  GUID_DISK_BURST_IGNORE_THRESHOLD;





extern "C" const GUID  GUID_DISK_ADAPTIVE_POWERDOWN;








extern "C" const GUID  GUID_SLEEP_SUBGROUP;







extern "C" const GUID  GUID_SLEEP_IDLE_THRESHOLD;





extern "C" const GUID  GUID_STANDBY_TIMEOUT;








extern "C" const GUID  GUID_UNATTEND_SLEEP_TIMEOUT;





extern "C" const GUID  GUID_HIBERNATE_TIMEOUT;





extern "C" const GUID  GUID_HIBERNATE_FASTS4_POLICY;








extern "C" const GUID  GUID_CRITICAL_POWER_TRANSITION;





extern "C" const GUID  GUID_SYSTEM_AWAYMODE;






extern "C" const GUID  GUID_ALLOW_AWAYMODE;






extern "C" const GUID  GUID_USER_PRESENCE_PREDICTION;






extern "C" const GUID  GUID_STANDBY_BUDGET_GRACE_PERIOD;






extern "C" const GUID  GUID_STANDBY_BUDGET_PERCENT;






extern "C" const GUID  GUID_STANDBY_RESERVE_GRACE_PERIOD;






extern "C" const GUID  GUID_STANDBY_RESERVE_TIME;






extern "C" const GUID  GUID_STANDBY_RESET_PERCENT;







extern "C" const GUID  GUID_ALLOW_STANDBY_STATES;






extern "C" const GUID  GUID_ALLOW_RTC_WAKE;






extern "C" const GUID  GUID_LEGACY_RTC_MITIGATION;







extern "C" const GUID  GUID_ALLOW_SYSTEM_REQUIRED;








extern "C" const GUID  GUID_POWER_SAVING_STATUS;







extern "C" const GUID  GUID_ENERGY_SAVER_SUBGROUP;






extern "C" const GUID  GUID_ENERGY_SAVER_BATTERY_THRESHOLD;






extern "C" const GUID  GUID_ENERGY_SAVER_BRIGHTNESS;






extern "C" const GUID  GUID_ENERGY_SAVER_POLICY;








extern "C" const GUID  GUID_SYSTEM_BUTTON_SUBGROUP;




















extern "C" const GUID  GUID_POWERBUTTON_ACTION;





extern "C" const GUID  GUID_SLEEPBUTTON_ACTION;






extern "C" const GUID  GUID_USERINTERFACEBUTTON_ACTION;





extern "C" const GUID  GUID_LIDCLOSE_ACTION;
extern "C" const GUID  GUID_LIDOPEN_POWERSTATE;








extern "C" const GUID  GUID_BATTERY_SUBGROUP;











extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_0;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_0;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_0;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_1;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_1;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_1;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_2;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_2;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_2;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_3;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_3;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_3;










extern "C" const GUID  GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern "C" const GUID  GUID_PROCESSOR_THROTTLE_POLICY;

















extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM;









extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM_1;









extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM;









extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM_1;






extern "C" const GUID  GUID_PROCESSOR_FREQUENCY_LIMIT;
#line 14229 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  GUID_PROCESSOR_FREQUENCY_LIMIT_1;
#line 14233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







extern "C" const GUID  GUID_PROCESSOR_ALLOW_THROTTLING;









extern "C" const GUID  GUID_PROCESSOR_IDLESTATE_POLICY;





extern "C" const GUID  GUID_PROCESSOR_PERFSTATE_POLICY;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;








extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;








extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_POLICY;








extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_POLICY_1;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_POLICY;








extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_POLICY_1;








extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_TIME;








extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_TIME_1;








extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_TIME;








extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_TIME_1;







extern "C" const GUID  GUID_PROCESSOR_PERF_TIME_CHECK;







extern "C" const GUID  GUID_PROCESSOR_PERF_BOOST_POLICY;
#line 14378 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"










extern "C" const GUID  GUID_PROCESSOR_PERF_BOOST_MODE;
#line 14390 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
















extern "C" const GUID  GUID_PROCESSOR_PERF_AUTONOMOUS_MODE;
#line 14408 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









extern "C" const GUID  GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE;
#line 14419 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









extern "C" const GUID  GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW;
#line 14430 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








extern "C" const GUID  GUID_PROCESSOR_DUTY_CYCLING;
#line 14440 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"










extern "C" const GUID  GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern "C" const GUID  GUID_PROCESSOR_IDLE_DISABLE;








extern "C" const GUID  GUID_PROCESSOR_IDLE_STATE_MAXIMUM;








extern "C" const GUID  GUID_PROCESSOR_IDLE_TIME_CHECK;








extern "C" const GUID  GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;








extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;








extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;












extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MAX_CORES;







extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MIN_CORES;







extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern "C" const GUID  GUID_PROCESSOR_PARKING_PERF_STATE;







extern "C" const GUID  GUID_PROCESSOR_PARKING_PERF_STATE_1;







extern "C" const GUID  GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_PERF_HISTORY;







extern "C" const GUID  GUID_PROCESSOR_PERF_HISTORY_1;









extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_HISTORY;









extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_HISTORY;









extern "C" const GUID  GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;









extern "C" const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT;






extern "C" const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;







extern "C" const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1;







extern "C" const GUID  GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK;







extern "C" const GUID  GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1;







extern "C" const GUID  GUID_PROCESSOR_DISTRIBUTE_UTILITY;










extern "C" const GUID  GUID_PROCESSOR_HETEROGENEOUS_POLICY;







extern "C" const GUID  GUID_PROCESSOR_HETERO_DECREASE_TIME;







extern "C" const GUID  GUID_PROCESSOR_HETERO_INCREASE_TIME;








extern "C" const GUID  GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD;








extern "C" const GUID  GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD;








extern "C" const GUID  GUID_PROCESSOR_CLASS0_FLOOR_PERF;








extern "C" const GUID  GUID_PROCESSOR_CLASS1_INITIAL_PERF;






extern "C" const GUID  GUID_PROCESSOR_THREAD_SCHEDULING_POLICY;
#line 14837 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







extern "C" const GUID  GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY;
#line 14846 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







extern "C" const GUID  GUID_SYSTEM_COOLING_POLICY;









extern "C" const GUID  GUID_LOCK_CONSOLE_ON_WAKE;









extern "C" const GUID  GUID_DEVICE_IDLE_POLICY;








extern "C" const GUID  GUID_CONNECTIVITY_IN_STANDBY;









extern "C" const GUID  GUID_DISCONNECTED_STANDBY_MODE;




















extern "C" const GUID  GUID_ACDC_POWER_SOURCE;















extern "C" const GUID  GUID_LIDSWITCH_STATE_CHANGE;
















extern "C" const GUID  GUID_BATTERY_PERCENTAGE_REMAINING;












extern "C" const GUID  GUID_BATTERY_COUNT;






extern "C" const GUID  GUID_GLOBAL_USER_PRESENCE;










extern "C" const GUID  GUID_SESSION_DISPLAY_STATUS;









extern "C" const GUID  GUID_SESSION_USER_PRESENCE;






extern "C" const GUID  GUID_IDLE_BACKGROUND_TASK;






extern "C" const GUID  GUID_BACKGROUND_TASK_NOTIFICATION;







extern "C" const GUID  GUID_APPLAUNCH_BUTTON;










extern "C" const GUID  GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern "C" const GUID  GUID_PCIEXPRESS_ASPM_POLICY;











extern "C" const GUID  GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;






extern "C" const GUID  GUID_INTSTEER_SUBGROUP;
#line 15047 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  GUID_INTSTEER_MODE;
#line 15051 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
#line 15055 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  GUID_INTSTEER_TIME_UNPARK_TRIGGER;
#line 15059 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









extern "C" const GUID  GUID_GRAPHICS_SUBGROUP;





extern "C" const GUID  GUID_GPU_PREFERENCE_POLICY;










extern "C" const GUID  GUID_MIXED_REALITY_MODE;
#line 15087 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






extern "C" const GUID  GUID_SPR_ACTIVE_SESSION_CHANGE;
#line 15095 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking     = 1,
    PowerSystemSleeping1   = 2,
    PowerSystemSleeping2   = 3,
    PowerSystemSleeping3   = 4,
    PowerSystemHibernate   = 5,
    PowerSystemShutdown    = 6,
    PowerSystemMaximum     = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject,
    PowerActionDisplayOff
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;









typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;


















typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;




















typedef struct CM_Power_Data_s {
    DWORD               PD_Size;
    DEVICE_POWER_STATE  PD_MostRecentPowerState;
    DWORD               PD_Capabilities;
    DWORD               PD_D1Latency;
    DWORD               PD_D2Latency;
    DWORD               PD_D3Latency;
    DEVICE_POWER_STATE  PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE  PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;

#line 15215 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,                                   
    LastSleepTime,                                  
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerRequestActionInternal,
    BatteryDeviceState,
    PowerInformationInternal,
    ThermalStandby,
    SystemHiberFileType,
    PhysicalPowerButtonPress,
    QueryPotentialDripsConstraint,
    EnergyTrackerCreate,
    EnergyTrackerQuery,
    UpdateBlackBoxRecorder,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
    POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;




typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;  
    BOOLEAN Console;    
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;




typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;  
    DWORD LastInputTime; 
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;




typedef struct _POWER_SESSION_WINLOGON {
    DWORD SessionId; 
    BOOLEAN Console; 
    BOOLEAN Locked; 
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;




typedef struct _POWER_IDLE_RESILIENCY {
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;






typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonBatteryCountChange,
    MonitorRequestReasonGracePeriod,
    MonitorRequestReasonPnP,
    MonitorRequestReasonDP,
    MonitorRequestReasonSxTransition,
    MonitorRequestReasonSystemIdle,
    MonitorRequestReasonNearProximity,
    MonitorRequestReasonThermalStandby,
    MonitorRequestReasonResumePdc,
    MonitorRequestReasonResumeS4,
    MonitorRequestReasonTerminal,
    MonitorRequestReasonPdcSignal,
    MonitorRequestReasonAcDcDisplayBurstSuppressed,
    MonitorRequestReasonSystemStateEntered, 
                                            
                                            
    MonitorRequestReasonWinrt,
    MonitorRequestReasonUserInputKeyboard,
    MonitorRequestReasonUserInputMouse,
    MonitorRequestReasonUserInputTouch,
    MonitorRequestReasonUserInputPen,
    MonitorRequestReasonUserInputAccelerometer,
    MonitorRequestReasonUserInputHid,
    MonitorRequestReasonUserInputPoUserPresent,
    MonitorRequestReasonUserInputSessionSwitch,
    MonitorRequestReasonUserInputInitialization,
    MonitorRequestReasonPdcSignalWindowsMobilePwrNotif,         
    MonitorRequestReasonPdcSignalWindowsMobileShell,            
    MonitorRequestReasonPdcSignalHeyCortana,                    
    MonitorRequestReasonPdcSignalHolographicShell,              
    MonitorRequestReasonPdcSignalFingerprint,                   
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;

typedef enum _POWER_MONITOR_REQUEST_TYPE {
    MonitorRequestTypeOff,
    MonitorRequestTypeOnAndPresent,
    MonitorRequestTypeToggleOn
} POWER_MONITOR_REQUEST_TYPE;




typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;





typedef struct _RESUME_PERFORMANCE {
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {

    
    
    
    
    DWORD       Version;


    
    
    
    GUID        Guid;


    
    
    
    
    SYSTEM_POWER_CONDITION PowerCondition;

    
    
    
    DWORD       DataLength;

    
    
    
    BYTE    Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {

    
    
    
    
    LARGE_INTEGER       ActivationTime;

    
    
    
    DWORD               Flags;

    
    
    
    DWORD               ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer, 
    PlatformRoleSlate,             
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;

















#line 15558 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;






typedef struct {
    DWORD       Granularity;
    DWORD       Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;
#line 15573 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



typedef struct {
    DWORD   Frequency;
    DWORD   Flags;
    DWORD   PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE  PromotePercent;
    BYTE  DemotePercent;
    BYTE  StateType;
    BYTE  Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;            
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;          
    DWORD OldState;             
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;          
    DWORD OldState;             
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;            
    DWORD Power;                
    BYTE  PercentFrequency;
    BYTE  IncreaseLevel;        
    BYTE  DecreaseLevel;        
    BYTE  Type;                 
    DWORD IncreaseTime;         
    DWORD DecreaseTime;         
    DWORD64 Control;            
    DWORD64 Status;             
    DWORD HitCount;
    DWORD Reserved1;            
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;         
    DWORD MaxPerfState;         
    DWORD MinPerfState;         
    DWORD LowestPerfState;      
    DWORD ThermalConstraint;
    BYTE  BusyAdjThreshold;
    BYTE  PolicyType;           
    BYTE  Type;
    BYTE  Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;   
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;         
    DWORD MaxPerfState;         
    DWORD MinPerfState;         
    DWORD LowestPerfState;      
    DWORD ThermalConstraint;
    BYTE  BusyAdjThreshold;
    BYTE  PolicyType;           
    BYTE  Type;
    BYTE  Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;     
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;







typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;







typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;






























































extern "C" const GUID  PPM_PERFSTATE_CHANGE_GUID;
#line 15797 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
#line 15801 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  PPM_IDLESTATE_CHANGE_GUID;
#line 15805 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  PPM_PERFSTATES_DATA_GUID;
#line 15809 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  PPM_IDLESTATES_DATA_GUID;
#line 15813 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  PPM_IDLE_ACCOUNTING_GUID;
#line 15817 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  PPM_IDLE_ACCOUNTING_EX_GUID;
#line 15821 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  PPM_THERMALCONSTRAINT_GUID;
#line 15825 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  PPM_PERFMON_PERFSTATE_GUID;
#line 15829 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


extern "C" const GUID  PPM_THERMAL_POLICY_CHANGE_GUID;
#line 15833 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

#pragma warning(push)
#pragma warning(disable:4121)

typedef struct {
    BYTE  Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

#pragma warning(pop)




typedef struct {
    POWER_ACTION    Action;
    DWORD           Flags;
    DWORD           EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;





































typedef struct {
    BOOLEAN                 Enable;
    BYTE                    Spare[3];
    DWORD                   BatteryLevel;
    POWER_ACTION_POLICY     PowerPolicy;
    SYSTEM_POWER_STATE      MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;








typedef struct _SYSTEM_POWER_POLICY {
    DWORD                   Revision;       

    
    POWER_ACTION_POLICY     PowerButton;
    POWER_ACTION_POLICY     SleepButton;
    POWER_ACTION_POLICY     LidClose;
    SYSTEM_POWER_STATE      LidOpenWake;
    DWORD                   Reserved;

    
    POWER_ACTION_POLICY     Idle;
    DWORD                   IdleTimeout;
    BYTE                    IdleSensitivity;

    BYTE                    DynamicThrottle;
    BYTE                    Spare2[2];

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;
    SYSTEM_POWER_STATE      ReducedLatencySleep;
    DWORD                   WinLogonFlags;

    DWORD                   Spare3;

    
    
    DWORD                   DozeS4Timeout;

    
    DWORD                   BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL      DischargePolicy[4];

    
    DWORD                   VideoTimeout;
    BOOLEAN                 VideoDimDisplay;
    DWORD                   VideoReserved[3];

    
    DWORD                   SpindownTimeout;

    
    BOOLEAN                 OptimizeForPower;
    BYTE                    FanThrottleTolerance;
    BYTE                    ForcedThrottle;
    BYTE                    MinThrottle;
    POWER_ACTION_POLICY     OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;










typedef struct {
    DWORD TimeCheck;
    BYTE  DemotePercent;
    BYTE  PromotePercent;
    BYTE  Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD   Revision;
    union {
        WORD   AsWORD  ;
        struct {
            WORD   AllowScaling : 1;
            WORD   Disabled : 1;
            WORD   Reserved : 14;
        } ;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;














typedef struct _PROCESSOR_POWER_POLICY_INFO {

    
    DWORD                   TimeCheck;                      
    DWORD                   DemoteLimit;                    
    DWORD                   PromoteLimit;                   

    
    BYTE                    DemotePercent;
    BYTE                    PromotePercent;
    BYTE                    Spare[2];

    
    DWORD                   AllowDemotion:1;
    DWORD                   AllowPromotion:1;
    DWORD                   Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD                       Revision;       

    
    BYTE                        DynamicThrottle;
    BYTE                        Spare[3];

    
    DWORD                       DisableCStates:1;
    DWORD                       Reserved:31;

    
    
    
    DWORD                       PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;





typedef struct {
    DWORD Revision;
    BYTE  MaxThrottle;
    BYTE  MinThrottle;
    BYTE  BusyAdjThreshold;
    union {
        BYTE  Spare;
        union {
            BYTE  AsBYTE ;
            struct {
                BYTE  NoDomainAccounting : 1;
                BYTE  IncreasePolicy: 2;
                BYTE  DecreasePolicy: 2;
                BYTE  Reserved : 3;
            } ;
        } Flags;
    } ;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;

    
    DWORD                   MinVideoTimeout;
    DWORD                   MaxVideoTimeout;

    
    DWORD                   MinSpindownTimeout;
    DWORD                   MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef enum _HIBERFILE_BUCKET_SIZE {
    HiberFileBucket1GB = 0,
    HiberFileBucket2GB,
    HiberFileBucket4GB,
    HiberFileBucket8GB,
    HiberFileBucket16GB,
    HiberFileBucket32GB,
    HiberFileBucketUnlimited,
    HiberFileBucketMax
} HIBERFILE_BUCKET_SIZE, *PHIBERFILE_BUCKET_SIZE;






typedef struct _HIBERFILE_BUCKET {
    DWORD64 MaxPhysicalMemory;
    DWORD PhysicalMemoryPercent[0x03];
} HIBERFILE_BUCKET, *PHIBERFILE_BUCKET;

typedef struct {
    
    BOOLEAN             PowerButtonPresent;
    BOOLEAN             SleepButtonPresent;
    BOOLEAN             LidPresent;
    BOOLEAN             SystemS1;
    BOOLEAN             SystemS2;
    BOOLEAN             SystemS3;
    BOOLEAN             SystemS4;           
    BOOLEAN             SystemS5;           
    BOOLEAN             HiberFilePresent;
    BOOLEAN             FullWake;
    BOOLEAN             VideoDimPresent;
    BOOLEAN             ApmPresent;
    BOOLEAN             UpsPresent;

    
    BOOLEAN             ThermalControl;
    BOOLEAN             ProcessorThrottle;
    BYTE                ProcessorMinThrottle;




#line 16157 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
    BYTE                ProcessorMaxThrottle;
    BOOLEAN             FastSystemS4;
    BOOLEAN             Hiberboot;
    BOOLEAN             WakeAlarmPresent;
    BOOLEAN             AoAc;
#line 16163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    
    BOOLEAN             DiskSpinDown;



#line 16170 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
    
    BYTE                HiberFileType;
    BOOLEAN             AoAcConnectivitySupported;
    BYTE                spare3[6];
#line 16175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    
    BOOLEAN             SystemBatteriesPresent;
    BOOLEAN             BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];

    
    SYSTEM_POWER_STATE  AcOnLineWake;
    SYSTEM_POWER_STATE  SoftLidWake;
    SYSTEM_POWER_STATE  RtcWake;
    SYSTEM_POWER_STATE  MinDeviceWakeState; 
    SYSTEM_POWER_STATE  DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN             AcOnLine;
    BOOLEAN             BatteryPresent;
    BOOLEAN             Charging;
    BOOLEAN             Discharging;
    BOOLEAN             Spare1[3];

    BYTE                Tag;

    DWORD               MaxCapacity;
    DWORD               RemainingCapacity;
    DWORD               Rate;
    DWORD               EstimatedTime;

    DWORD               DefaultAlert1;
    DWORD               DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;










#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 16217 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 16225 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"









#line 16235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _IMAGE_DOS_HEADER {      
    WORD   e_magic;                     
    WORD   e_cblp;                      
    WORD   e_cp;                        
    WORD   e_crlc;                      
    WORD   e_cparhdr;                   
    WORD   e_minalloc;                  
    WORD   e_maxalloc;                  
    WORD   e_ss;                        
    WORD   e_sp;                        
    WORD   e_csum;                      
    WORD   e_ip;                        
    WORD   e_cs;                        
    WORD   e_lfarlc;                    
    WORD   e_ovno;                      
    WORD   e_res[4];                    
    WORD   e_oemid;                     
    WORD   e_oeminfo;                   
    WORD   e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    WORD   ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    WORD   ne_enttab;                   
    WORD   ne_cbenttab;                 
    LONG   ne_crc;                      
    WORD   ne_flags;                    
    WORD   ne_autodata;                 
    WORD   ne_heap;                     
    WORD   ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    WORD   ne_cseg;                     
    WORD   ne_cmod;                     
    WORD   ne_cbnrestab;                
    WORD   ne_segtab;                   
    WORD   ne_rsrctab;                  
    WORD   ne_restab;                   
    WORD   ne_modtab;                   
    WORD   ne_imptab;                   
    LONG   ne_nrestab;                  
    WORD   ne_cmovent;                  
    WORD   ne_align;                    
    WORD   ne_cres;                     
    BYTE   ne_exetyp;                   
    BYTE   ne_flagsothers;              
    WORD   ne_pretthunks;               
    WORD   ne_psegrefbytes;             
    WORD   ne_swaparea;                 
    WORD   ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    WORD   e32_magic;                   
    BYTE   e32_border;                  
    BYTE   e32_worder;                  
    DWORD  e32_level;                   
    WORD   e32_cpu;                     
    WORD   e32_os;                      
    DWORD  e32_ver;                     
    DWORD  e32_mflags;                  
    DWORD  e32_mpages;                  
    DWORD  e32_startobj;                
    DWORD  e32_eip;                     
    DWORD  e32_stackobj;                
    DWORD  e32_esp;                     
    DWORD  e32_pagesize;                
    DWORD  e32_lastpagesize;            
    DWORD  e32_fixupsize;               
    DWORD  e32_fixupsum;                
    DWORD  e32_ldrsize;                 
    DWORD  e32_ldrsum;                  
    DWORD  e32_objtab;                  
    DWORD  e32_objcnt;                  
    DWORD  e32_objmap;                  
    DWORD  e32_itermap;                 
    DWORD  e32_rsrctab;                 
    DWORD  e32_rsrccnt;                 
    DWORD  e32_restab;                  
    DWORD  e32_enttab;                  
    DWORD  e32_dirtab;                  
    DWORD  e32_dircnt;                  
    DWORD  e32_fpagetab;                
    DWORD  e32_frectab;                 
    DWORD  e32_impmod;                  
    DWORD  e32_impmodcnt;               
    DWORD  e32_impproc;                 
    DWORD  e32_pagesum;                 
    DWORD  e32_datapage;                
    DWORD  e32_preload;                 
    DWORD  e32_nrestab;                 
    DWORD  e32_cbnrestab;               
    DWORD  e32_nressum;                 
    DWORD  e32_autodata;                
    DWORD  e32_debuginfo;               
    DWORD  e32_debuglen;                
    DWORD  e32_instpreload;             
    DWORD  e32_instdemand;              
    DWORD  e32_heapsize;                
    BYTE   e32_res3[12];                
    DWORD  e32_winresoff;
    DWORD  e32_winreslen;
    WORD   e32_devid;                   
    WORD   e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 16347 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 16348 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;




















































 




typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;

    
    
    

    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD   Magic;
    BYTE   MajorLinkerVersion;
    BYTE   MinorLinkerVersion;
    DWORD  SizeOfCode;
    DWORD  SizeOfInitializedData;
    DWORD  SizeOfUninitializedData;
    DWORD  AddressOfEntryPoint;
    DWORD  BaseOfCode;
    DWORD  BaseOfData;
    DWORD  BaseOfBss;
    DWORD  GprMask;
    DWORD  CprMask[4];
    DWORD  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD        Magic;
    BYTE        MajorLinkerVersion;
    BYTE        MinorLinkerVersion;
    DWORD       SizeOfCode;
    DWORD       SizeOfInitializedData;
    DWORD       SizeOfUninitializedData;
    DWORD       AddressOfEntryPoint;
    DWORD       BaseOfCode;
    ULONGLONG   ImageBase;
    DWORD       SectionAlignment;
    DWORD       FileAlignment;
    WORD        MajorOperatingSystemVersion;
    WORD        MinorOperatingSystemVersion;
    WORD        MajorImageVersion;
    WORD        MinorImageVersion;
    WORD        MajorSubsystemVersion;
    WORD        MinorSubsystemVersion;
    DWORD       Win32VersionValue;
    DWORD       SizeOfImage;
    DWORD       SizeOfHeaders;
    DWORD       CheckSum;
    WORD        Subsystem;
    WORD        DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    DWORD       LoaderFlags;
    DWORD       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;










typedef IMAGE_OPTIONAL_HEADER32             IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32            PIMAGE_OPTIONAL_HEADER;

#line 16535 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;





typedef IMAGE_NT_HEADERS32                  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32                 PIMAGE_NT_HEADERS;
#line 16560 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




































































typedef struct ANON_OBJECT_HEADER {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
    DWORD   Flags;           
    DWORD   MetaDataSize;    
    DWORD   MetaDataOffset;  
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {
   
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;         
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
    DWORD   Flags;           
    DWORD   MetaDataSize;    
    DWORD   MetaDataOffset;  

    
    DWORD   NumberOfSections; 
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE    Name[8];
    union {
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

































































#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 16757 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 16758 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





typedef struct _IMAGE_SYMBOL {
    union {
        BYTE    ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    SHORT   SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL  *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE     ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    LONG    SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX  *PIMAGE_SYMBOL_EX;
































































































#line 16895 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 16900 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





#line 16906 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 16911 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 16915 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


#line 16918 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 16920 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE  bAuxType;                  
    BYTE  bReserved;                 
    DWORD SymbolTableIndex;
    BYTE  rgbReserved[12];           
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF  *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 16931 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD    TagIndex;                      
        union {
            struct {
                WORD    Linenumber;             
                WORD    Size;                   
            } LnSz;
           DWORD    TotalSize;
        } Misc;
        union {
            struct {                            
                DWORD    PointerToLinenumber;
                DWORD    PointerToNextFunction;
            } Function;
            struct {                            
                WORD     Dimension[4];
            } Array;
        } FcnAry;
        WORD    TvIndex;                        
    } Sym;
    struct {
        BYTE    Name[18];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
	BYTE    bReserved;
	SHORT   HighNumber;                     
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE  rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL  *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD   WeakDefaultSymIndex;                       
        DWORD   WeakSearchType;
        BYTE    rgbReserved[12];
    } Sym;
    struct {
        BYTE    Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
        BYTE    bReserved;
        SHORT   HighNumber;                     
        BYTE    rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE  rgbReserved[2];
    } ;
    struct {
        DWORD crc;
        BYTE  rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX  *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;























typedef struct _IMAGE_RELOCATION {
    union {
        DWORD   VirtualAddress;
        DWORD   RelocCount;             
    } ;
    DWORD   SymbolTableIndex;
    WORD    Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION  *PIMAGE_RELOCATION;




























































































































                                                
                                                
                                                
                                                









































































































































































































































































typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD   SymbolTableIndex;               
        DWORD   VirtualAddress;                 
    } Type;
    WORD    Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER  *PIMAGE_LINENUMBER;


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 17448 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 17449 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





typedef struct _IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION  * PIMAGE_BASE_RELOCATION;











































typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE     Name[16];                          
    BYTE     Date[12];                          
    BYTE     UserID[6];                         
    BYTE     GroupID[6];                        
    BYTE     Mode[8];                           
    BYTE     Size[10];                          
    BYTE     EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    DWORD   AddressOfFunctions;     
    DWORD   AddressOfNames;         
    DWORD   AddressOfNameOrdinals;  
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    CHAR   Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack8.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack8.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack8.h"
#line 17547 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;  
        ULONGLONG Function;         
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;    
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 17559 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;      
        DWORD Function;             
        DWORD Ordinal;
        DWORD AddressOfData;        
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;












typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;         
    ULONGLONG AddressOfCallBacks;     
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY64;

typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    DWORD   AddressOfIndex;             
    DWORD   AddressOfCallBacks;         
    DWORD   SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;












typedef IMAGE_THUNK_DATA32              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32             PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32          PIMAGE_TLS_DIRECTORY;
#line 17642 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;            
        DWORD   OriginalFirstThunk;         
    } ;
    DWORD   TimeDateStamp;                  
                                            
                                            
                                            

    DWORD   ForwarderChain;                 
    DWORD   Name;
    DWORD   FirstThunk;                     
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR  *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        DWORD AllAttributes;
        struct {
            DWORD RvaBased : 1;             
            DWORD ReservedAttributes : 31;
        } ;
    } Attributes;

    DWORD DllNameRVA;                       
    DWORD ModuleHandleRVA;                  
    DWORD ImportAddressTableRVA;            
    DWORD ImportNameTableRVA;               
    DWORD BoundImportAddressTableRVA;       
    DWORD UnloadInformationTableRVA;        
    DWORD TimeDateStamp;                    
                                            

} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;



















typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    WORD    NumberOfNamedEntries;
    WORD    NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;


















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } ;
        DWORD   Name;
        WORD    Id;
    } ;
    union {
        DWORD   OffsetToData;
        struct {
            DWORD   OffsetToDirectory:31;
            DWORD   DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD    Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD    Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD   OffsetToData;
    DWORD   Size;
    DWORD   CodePage;
    DWORD   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;







typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    WORD    Flags;          
    WORD    Catalog;        
    DWORD   CatalogOffset;
    DWORD   Reserved;       
} IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;





typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
    DWORD Version;
    DWORD Size;

} IMAGE_DYNAMIC_RELOCATION_TABLE, *PIMAGE_DYNAMIC_RELOCATION_TABLE;





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"
#line 17826 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _IMAGE_DYNAMIC_RELOCATION32 {
    DWORD      Symbol;
    DWORD      BaseRelocSize;

} IMAGE_DYNAMIC_RELOCATION32, *PIMAGE_DYNAMIC_RELOCATION32;

typedef struct _IMAGE_DYNAMIC_RELOCATION64 {
    ULONGLONG  Symbol;
    DWORD      BaseRelocSize;

} IMAGE_DYNAMIC_RELOCATION64, *PIMAGE_DYNAMIC_RELOCATION64;

typedef struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
    DWORD      HeaderSize;
    DWORD      FixupInfoSize;
    DWORD      Symbol;
    DWORD      SymbolGroup;
    DWORD      Flags;
    
    
} IMAGE_DYNAMIC_RELOCATION32_V2, *PIMAGE_DYNAMIC_RELOCATION32_V2;

typedef struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
    DWORD      HeaderSize;
    DWORD      FixupInfoSize;
    ULONGLONG  Symbol;
    DWORD      SymbolGroup;
    DWORD      Flags;
    
    
} IMAGE_DYNAMIC_RELOCATION64_V2, *PIMAGE_DYNAMIC_RELOCATION64_V2;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 17860 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







typedef IMAGE_DYNAMIC_RELOCATION32          IMAGE_DYNAMIC_RELOCATION;
typedef PIMAGE_DYNAMIC_RELOCATION32         PIMAGE_DYNAMIC_RELOCATION;
typedef IMAGE_DYNAMIC_RELOCATION32_V2       IMAGE_DYNAMIC_RELOCATION_V2;
typedef PIMAGE_DYNAMIC_RELOCATION32_V2      PIMAGE_DYNAMIC_RELOCATION_V2;
#line 17872 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"
#line 17881 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
    BYTE       PrologueByteCount;
    
} IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER  * PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;

typedef struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
    DWORD      EpilogueCount;
    BYTE       EpilogueByteCount;
    BYTE       BranchDescriptorElementSize;
    WORD       BranchDescriptorCount;
    
    
} IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER  * PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 17899 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    DWORD   Size;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   GlobalFlagsClear;
    DWORD   GlobalFlagsSet;
    DWORD   CriticalSectionDefaultTimeout;
    DWORD   DeCommitFreeBlockThreshold;
    DWORD   DeCommitTotalFreeThreshold;
    DWORD   LockPrefixTable;                
    DWORD   MaximumAllocationSize;
    DWORD   VirtualMemoryThreshold;
    DWORD   ProcessHeapFlags;
    DWORD   ProcessAffinityMask;
    WORD    CSDVersion;
    WORD    DependentLoadFlags;
    DWORD   EditList;                       
    DWORD   SecurityCookie;                 
    DWORD   SEHandlerTable;                 
    DWORD   SEHandlerCount;
    DWORD   GuardCFCheckFunctionPointer;    
    DWORD   GuardCFDispatchFunctionPointer; 
    DWORD   GuardCFFunctionTable;           
    DWORD   GuardCFFunctionCount;
    DWORD   GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    DWORD   GuardAddressTakenIatEntryTable; 
    DWORD   GuardAddressTakenIatEntryCount;
    DWORD   GuardLongJumpTargetTable;       
    DWORD   GuardLongJumpTargetCount;
    DWORD   DynamicValueRelocTable;         
    DWORD   CHPEMetadataPointer;
    DWORD   GuardRFFailureRoutine;          
    DWORD   GuardRFFailureRoutineFunctionPointer; 
    DWORD   DynamicValueRelocTableOffset;
    WORD    DynamicValueRelocTableSection;
    WORD    Reserved2;
    DWORD   GuardRFVerifyStackPointerFunctionPointer; 
    DWORD   HotPatchTableOffset;
    DWORD   Reserved3;
    DWORD   EnclaveConfigurationPointer;    
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    DWORD      Size;
    DWORD      TimeDateStamp;
    WORD       MajorVersion;
    WORD       MinorVersion;
    DWORD      GlobalFlagsClear;
    DWORD      GlobalFlagsSet;
    DWORD      CriticalSectionDefaultTimeout;
    ULONGLONG  DeCommitFreeBlockThreshold;
    ULONGLONG  DeCommitTotalFreeThreshold;
    ULONGLONG  LockPrefixTable;                
    ULONGLONG  MaximumAllocationSize;
    ULONGLONG  VirtualMemoryThreshold;
    ULONGLONG  ProcessAffinityMask;
    DWORD      ProcessHeapFlags;
    WORD       CSDVersion;
    WORD       DependentLoadFlags;
    ULONGLONG  EditList;                       
    ULONGLONG  SecurityCookie;                 
    ULONGLONG  SEHandlerTable;                 
    ULONGLONG  SEHandlerCount;
    ULONGLONG  GuardCFCheckFunctionPointer;    
    ULONGLONG  GuardCFDispatchFunctionPointer; 
    ULONGLONG  GuardCFFunctionTable;           
    ULONGLONG  GuardCFFunctionCount;
    DWORD      GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONGLONG  GuardAddressTakenIatEntryTable; 
    ULONGLONG  GuardAddressTakenIatEntryCount;
    ULONGLONG  GuardLongJumpTargetTable;       
    ULONGLONG  GuardLongJumpTargetCount;
    ULONGLONG  DynamicValueRelocTable;         
    ULONGLONG  CHPEMetadataPointer;            
    ULONGLONG  GuardRFFailureRoutine;          
    ULONGLONG  GuardRFFailureRoutineFunctionPointer; 
    DWORD      DynamicValueRelocTableOffset;
    WORD       DynamicValueRelocTableSection;
    WORD       Reserved2;
    ULONGLONG  GuardRFVerifyStackPointerFunctionPointer; 
    DWORD      HotPatchTableOffset;
    DWORD      Reserved3;
    ULONGLONG  EnclaveConfigurationPointer;     
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;








typedef IMAGE_LOAD_CONFIG_DIRECTORY32     IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32    PIMAGE_LOAD_CONFIG_DIRECTORY;
#line 18002 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



typedef struct _IMAGE_HOT_PATCH_INFO {
    DWORD Version;
    DWORD Size;
    DWORD SequenceNumber;
    DWORD BaseImageList;
    DWORD BaseImageCount;
    DWORD BufferOffset; 
} IMAGE_HOT_PATCH_INFO, *PIMAGE_HOT_PATCH_INFO;

typedef struct _IMAGE_HOT_PATCH_BASE {
    DWORD SequenceNumber;
    DWORD Flags;
    DWORD OriginalTimeDateStamp;
    DWORD OriginalCheckSum;
    DWORD CodeIntegrityInfo;
    DWORD CodeIntegritySize;
    DWORD PatchTable;
    DWORD BufferOffset; 
} IMAGE_HOT_PATCH_BASE, *PIMAGE_HOT_PATCH_BASE;

typedef struct _IMAGE_HOT_PATCH_HASHES {
    BYTE  SHA256[32];
    BYTE  SHA1[20];
} IMAGE_HOT_PATCH_HASHES, *PIMAGE_HOT_PATCH_HASHES;



























                                                                  
























typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD RegF : 3;
            DWORD RegI : 4;
            DWORD H : 1;
            DWORD CR : 2;
            DWORD FrameSize : 9;
        } ;
    } ;
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    union {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } ;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;








#line 18159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 18164 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 18169 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




#line 18174 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;

#line 18179 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








typedef struct _IMAGE_ENCLAVE_CONFIG32 {
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE  FamilyID[16];
    BYTE  ImageID[16];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    DWORD EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG32, *PIMAGE_ENCLAVE_CONFIG32;

typedef struct _IMAGE_ENCLAVE_CONFIG64 {
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE  FamilyID[16];
    BYTE  ImageID[16];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    ULONGLONG EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG64, *PIMAGE_ENCLAVE_CONFIG64;





typedef IMAGE_ENCLAVE_CONFIG32          IMAGE_ENCLAVE_CONFIG;
typedef PIMAGE_ENCLAVE_CONFIG32         PIMAGE_ENCLAVE_CONFIG;
#line 18226 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







typedef struct _IMAGE_ENCLAVE_IMPORT {
    DWORD MatchType;
    DWORD MinimumSecurityVersion;
    BYTE  UniqueOrAuthorID[32];
    BYTE  FamilyID[16];
    BYTE  ImageID[16];
    DWORD ImportName;
    DWORD Reserved;
} IMAGE_ENCLAVE_IMPORT, *PIMAGE_ENCLAVE_IMPORT;











typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Type;
    DWORD   SizeOfData;
    DWORD   AddressOfRawData;
    DWORD   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;




















typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD   NumberOfSymbols;
    DWORD   LvaToFirstSymbol;
    DWORD   NumberOfLinenumbers;
    DWORD   LvaToFirstLinenumber;
    DWORD   RvaToFirstByteOfCode;
    DWORD   RvaToLastByteOfCode;
    DWORD   RvaToFirstByteOfData;
    DWORD   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD       ulOffStart;             
    DWORD       cbProcSize;             
    DWORD       cdwLocals;              
    WORD        cdwParams;              
    WORD        cbProlog : 8;           
    WORD        cbRegs   : 3;           
    WORD        fHasSEH  : 1;           
    WORD        fUseBP   : 1;           
    WORD        reserved : 1;           
    WORD        cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD       DataType;               
    DWORD       Length;                 
                                        
    BOOLEAN     Unicode;                
    BYTE        Reserved[ 3 ];
    BYTE        Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;








typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD   StartingAddress;
    DWORD   EndingAddress;
    DWORD   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG   StartingAddress;
    ULONGLONG   EndingAddress;
    union {
        ULONGLONG   EndOfPrologue;
        ULONGLONG   UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD        Signature;
    WORD        Flags;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       ImageBase;
    DWORD       SizeOfImage;
    DWORD       NumberOfSections;
    DWORD       ExportedNamesSize;
    DWORD       DebugDirectorySize;
    DWORD       SectionAlignment;
    DWORD       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;



typedef struct _NON_PAGED_DEBUG_INFO {
    WORD        Signature;
    WORD        Flags;
    DWORD       Size;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       SizeOfImage;
    ULONGLONG   ImageBase;
    
    
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;









#line 18408 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



                                                









typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;                 
                                                
    int :7;                                     
    unsigned int AmaskShift: 8;                 
    int :16;                                    
    DWORD FirstEntryRVA;                        
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;                         
    DWORD NewInst;                              
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 18436 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








typedef struct IMPORT_OBJECT_HEADER {
    WORD    Sig1;                       
    WORD    Sig2;                       
    WORD    Version;
    WORD    Machine;
    DWORD   TimeDateStamp;              
    DWORD   SizeOfData;                 

    union {
        WORD    Ordinal;                
        WORD    Hint;
    } ;

    WORD    Type : 2;                   
    WORD    NameType : 3;               
    WORD    Reserved : 11;              
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,          
    IMPORT_OBJECT_NAME = 1,             
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,   
    IMPORT_OBJECT_NAME_UNDECORATE = 3,  
                                        
    IMPORT_OBJECT_NAME_EXPORTAS = 4,    
} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY               =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED        =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY           =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED     =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT    =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA       =0x00010000,
    COMIMAGE_FLAGS_32BITPREFERRED       =0x00020000,


    COR_VERSION_MAJOR_V2                =2,
    COR_VERSION_MAJOR                   =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR                   =5,
    COR_DELETED_NAME_LENGTH             =8,
    COR_VTABLEGAP_NAME_LENGTH           =8,


    NATIVE_TYPE_MAX_CB                  =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA             =0x01,
    IMAGE_COR_MIH_EHRVA                 =0x02,
    IMAGE_COR_MIH_BASICBLOCK            =0x08,


    COR_VTABLE_32BIT                    =0x01,          
    COR_VTABLE_64BIT                    =0x02,          
    COR_VTABLE_FROM_UNMANAGED           =0x04,          
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN  =0x08,  
    COR_VTABLE_CALL_MOST_DERIVED        =0x10,          


    IMAGE_COR_EATJ_THUNK_SIZE           =32,            


    
    MAX_CLASS_NAME                      =1024,
    MAX_PACKAGE_NAME                    =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{
    
    DWORD                   cb;
    WORD                    MajorRuntimeVersion;
    WORD                    MinorRuntimeVersion;

    
    IMAGE_DATA_DIRECTORY    MetaData;
    DWORD                   Flags;

    
    
    union {
        DWORD               EntryPointToken;
        DWORD               EntryPointRVA;
    } ;

    
    IMAGE_DATA_DIRECTORY    Resources;
    IMAGE_DATA_DIRECTORY    StrongNameSignature;

    
    IMAGE_DATA_DIRECTORY    CodeManagerTable;
    IMAGE_DATA_DIRECTORY    VTableFixups;
    IMAGE_DATA_DIRECTORY    ExportAddressTableJumps;

    
    IMAGE_DATA_DIRECTORY    ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

#line 18560 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apiset.h"





































#line 39 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apiset.h"





















































































#line 125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apiset.h"



#line 129 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apiset.h"

#line 131 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apiset.h"
#line 18566 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"







#pragma region Application or OneCore Family




__declspec(dllimport)
 
WORD  
__stdcall
RtlCaptureStackBackTrace(
      DWORD FramesToSkip,
      DWORD FramesToCapture,
      PVOID* BackTrace,
      PDWORD BackTraceHash
    );


#line 18591 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 18593 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
void
__stdcall
RtlCaptureContext(
      PCONTEXT ContextRecord
    );


#line 18609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 18611 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion



#pragma region Application or OneCore Family


__declspec(dllimport)
void
__stdcall
RtlUnwind(
      PVOID TargetFrame,
      PVOID TargetIp,
      PEXCEPTION_RECORD ExceptionRecord,
      PVOID ReturnValue
    );


#line 18630 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion
















































































































































#line 18776 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

















































































































































#line 18922 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

















































































































































#line 19068 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






































#line 19107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


#pragma region Application or OneCore Family


__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
      PVOID PcValue,
      PVOID* BaseOfImage
    );


#line 19122 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion


#pragma region Desktop Family or OneCore Family




 
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory(
      const void* Source1,
      const void* Source2,
      SIZE_T Length
    );


#line 19142 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 19144 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion










#line 19156 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

























#line 19182 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _SINGLE_LIST_ENTRY SLIST_ENTRY, *PSLIST_ENTRY;

#line 19186 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
















#line 19203 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"















#line 19219 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SLIST_ENTRY Next;
        WORD   Depth;
        WORD   CpuId;
    } ;
} SLIST_HEADER, *PSLIST_HEADER;












#line 19241 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 19243 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
      PSLIST_HEADER ListHead
    );

 
__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlFirstEntrySList (
      const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
      PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushListSListEx (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY List,
      PSLIST_ENTRY ListEnd,
      DWORD Count
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
      PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD  
__stdcall
RtlQueryDepthSList (
      PSLIST_HEADER ListHead
    );

#line 19303 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion


























typedef union _RTL_RUN_ONCE {       
    PVOID Ptr;                      
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;     

#line 19335 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _RTL_BARRIER {                       
            DWORD Reserved1;                        
            DWORD Reserved2;                        
            ULONG_PTR Reserved3[2];                 
            DWORD Reserved4;                        
            DWORD Reserved5;                        
} RTL_BARRIER, *PRTL_BARRIER;                       










































































__declspec(noreturn)
void
__fastfail(
      unsigned int Code
    );

#pragma intrinsic(__fastfail)

#line 19426 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

















#pragma region Desktop Family


__forceinline
DWORD
HEAP_MAKE_TAG_FLAGS (
      DWORD TagBase,
      DWORD Tag
    )

{
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}
#line 19457 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#line 19458 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion






















































#line 19514 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"











__forceinline
PVOID
RtlSecureZeroMemory(
      PVOID ptr,
      SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;





#line 19539 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    while (cnt) {





#line 19547 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

        *vptr = 0;

#line 19551 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

        vptr++;
        cnt--;
    }

#line 19557 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    return ptr;
}

#line 19562 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"























typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD   Length;
    WORD   Flags;
    BYTE  Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
#line 19630 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;





typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
#line 19666 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"















































#pragma region Desktop Family or OneCore Family


















__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
      ULONGLONG ConditionMask,
      DWORD TypeMask,
      BYTE  Condition
    );

#line 19742 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 19744 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 19746 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family






__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetProductInfo(
       DWORD  OSMajorVersion,
       DWORD  OSMinorVersion,
       DWORD  SpMajorVersion,
       DWORD  SpMinorVersion,
      PDWORD ReturnedProductType
    );

#line 19769 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



#line 19773 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion



typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,              
    UmsThreadAffinity,              
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef
 
void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
      RTL_UMS_SCHEDULER_REASON Reason,
      ULONG_PTR ActivationPayload,
      PVOID SchedulerParam
    );

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
































#line 19838 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 19840 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"











#line 19852 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"






#pragma region Desktop Family or OneCore Family








__declspec(dllimport)
DWORD
__stdcall
RtlCrc32(
      const void *Buffer,
      size_t Size,
      DWORD InitialCrc
    );

__declspec(dllimport)
ULONGLONG
__stdcall
RtlCrc64(
      const void *Buffer,
      size_t Size,
      ULONGLONG InitialCrc
    );



#line 19888 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion



#line 19893 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"












typedef enum _OS_DEPLOYEMENT_STATE_VALUES {
    OS_DEPLOYMENT_STANDARD = 1,
    OS_DEPLOYMENT_COMPACT
} OS_DEPLOYEMENT_STATE_VALUES;

__declspec(dllimport)
OS_DEPLOYEMENT_STATE_VALUES
__stdcall
RtlOsDeploymentState(
      DWORD Flags    
    );


#line 19919 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





















































































#line 20005 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




















typedef struct CORRELATION_VECTOR {
    CHAR Version;
    CHAR Vector[129];
} CORRELATION_VECTOR;

typedef CORRELATION_VECTOR *PCORRELATION_VECTOR;



__declspec(dllimport)
DWORD   
__stdcall
RtlInitializeCorrelationVector(
      PCORRELATION_VECTOR CorrelationVector,
       int Version,
       const GUID * Guid
    );


__declspec(dllimport)
DWORD   
__stdcall
RtlIncrementCorrelationVector(
      PCORRELATION_VECTOR CorrelationVector
    );

__declspec(dllimport)
DWORD   
__stdcall
RtlExtendCorrelationVector(
      PCORRELATION_VECTOR CorrelationVector
    );

__declspec(dllimport)
DWORD   
__stdcall
RtlValidateCorrelationVector(
      PCORRELATION_VECTOR Vector
    );

#line 20066 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"




typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
    
    
    
    DWORD Size;

    
    
    
    PCWSTR TriggerId;

} CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, *PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;


__forceinline
void
CUSTOM_SYSTEM_EVENT_TRIGGER_INIT(
         PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG Config,
      PCWSTR TriggerId
    )
{
    memset((Config),0,(sizeof(CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG)));

    Config->Size = sizeof(CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG);
    Config->TriggerId = TriggerId;
}
#line 20097 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

 
 
DWORD   
__stdcall
RtlRaiseCustomSystemEventTrigger(
      PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig
    );

#line 20107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"










typedef enum _IMAGE_POLICY_ENTRY_TYPE {
    ImagePolicyEntryTypeNone = 0,
    ImagePolicyEntryTypeBool,
    ImagePolicyEntryTypeInt8,
    ImagePolicyEntryTypeUInt8,
    ImagePolicyEntryTypeInt16,
    ImagePolicyEntryTypeUInt16,
    ImagePolicyEntryTypeInt32,
    ImagePolicyEntryTypeUInt32,
    ImagePolicyEntryTypeInt64,
    ImagePolicyEntryTypeUInt64,
    ImagePolicyEntryTypeAnsiString,
    ImagePolicyEntryTypeUnicodeString,
    ImagePolicyEntryTypeOverride,
    ImagePolicyEntryTypeMaximum
} IMAGE_POLICY_ENTRY_TYPE;

typedef enum _IMAGE_POLICY_ID {
    ImagePolicyIdNone = 0,
    ImagePolicyIdEtw,
    ImagePolicyIdDebug,
    ImagePolicyIdCrashDump,
    ImagePolicyIdCrashDumpKey,
    ImagePolicyIdCrashDumpKeyGuid,
    ImagePolicyIdParentSd,
    ImagePolicyIdParentSdRev,
    ImagePolicyIdSvn,
    ImagePolicyIdDeviceId,
    ImagePolicyIdCapability,
    ImagePolicyIdScenarioId,
    ImagePolicyIdMaximum
} IMAGE_POLICY_ID;

typedef struct _IMAGE_POLICY_ENTRY {
    IMAGE_POLICY_ENTRY_TYPE Type;
    IMAGE_POLICY_ID PolicyId;
    union {
        const void* None;
        BOOLEAN BoolValue;
        INT8 Int8Value;
        UINT8 UInt8Value;
        INT16 Int16Value;
        UINT16 UInt16Value;
        INT32 Int32Value;
        UINT32 UInt32Value;
        INT64 Int64Value;
        UINT64 UInt64Value;
        PCSTR AnsiStringValue;
        PCWSTR UnicodeStringValue;
    } u;
} IMAGE_POLICY_ENTRY;
typedef const IMAGE_POLICY_ENTRY* PCIMAGE_POLICY_ENTRY;

#pragma warning(push)
#pragma warning(disable:4200) 
typedef struct _IMAGE_POLICY_METADATA {
    BYTE  Version;
    BYTE  Reserved0[7];
    ULONGLONG ApplicationId;
    IMAGE_POLICY_ENTRY Policies[];
} IMAGE_POLICY_METADATA;
typedef const IMAGE_POLICY_METADATA* PCIMAGE_POLICY_METADATA;
#pragma warning(pop)





















































typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD   Type;
    WORD   CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD   CreatorBackTraceIndexHigh;
    WORD   SpareWORD  ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;

















#pragma pack(push, 8)

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    
    
    
    

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;        
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;        
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

#pragma pack(pop)

typedef struct _RTL_SRWLOCK {                            
        PVOID Ptr;                                       
} RTL_SRWLOCK, *PRTL_SRWLOCK;                            

typedef struct _RTL_CONDITION_VARIABLE {                    
        PVOID Ptr;                                       
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;      


typedef
void
(__stdcall *PAPCFUNC)(
      ULONG_PTR Parameter
    );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation = 0,
    HeapEnableTerminationOnCorruption = 1



    ,

    HeapOptimizeResources = 3

#line 20311 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


} HEAP_INFORMATION_CLASS;





typedef struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
    DWORD Version;
    DWORD Flags;
} HEAP_OPTIMIZE_RESOURCES_INFORMATION, *PHEAP_OPTIMIZE_RESOURCES_INFORMATION;

#line 20326 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"













typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );   
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );                 
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD   , PVOID, PVOID); 
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK; 
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
     PVOID lpFlsData
    );

typedef
BOOLEAN
(__stdcall *PSECURE_MEMORY_CACHE_CALLBACK) (
      PVOID Addr,
      SIZE_T Range
    );




typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation                       = 1,
    ActivationContextDetailedInformation                    = 2,
    AssemblyDetailedInformationInActivationContext          = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext  = 4,
    RunlevelInformationInActivationContext                  = 5,
    CompatibilityInformationInActivationContext             = 6,
    ActivationContextManifestResourceName                   = 7,
    MaxActivationContextInfoClass,

    
    
    
    AssemblyDetailedInformationInActivationContxt           = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt   = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;










typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;      
    DWORD ulManifestPathType;                   
    DWORD ulManifestPathLength;                 
    LARGE_INTEGER liManifestLastWriteTime;      
    DWORD ulPolicyPathType;                     
    DWORD ulPolicyPathLength;                   
    LARGE_INTEGER liPolicyLastWriteTime;        
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;               
    DWORD ulManifestVersionMinor;               
    DWORD ulPolicyVersionMajor;                 
    DWORD ulPolicyVersionMinor;                 
    DWORD ulAssemblyDirectoryNameLength;        

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD  ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL  RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;




#pragma warning(push)
#pragma warning(disable:4200) 
#line 20475 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;


#pragma warning(pop)
#line 20484 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

#line 20488 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

typedef struct _SUPPORTED_OS_INFO {
    WORD   MajorVersion;
    WORD   MinorVersion;
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;




typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;



typedef struct _PERFORMANCE_DATA {
    WORD   Size;
    BYTE  Version;
    BYTE  HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;




#pragma region Desktop Family



































































void
__stdcall
RtlGetDeviceFamilyInfoEnum(
      ULONGLONG *pullUAPInfo,
      DWORD *pulDeviceFamily,
      DWORD *pulDeviceForm
);

DWORD   
__stdcall
RtlConvertDeviceFamilyInfoToString(
      PDWORD pulDeviceFamilyBufferSize,
      PDWORD pulDeviceFormBufferSize,
      PWSTR DeviceFamily,
      PWSTR DeviceForm

);

DWORD   
__stdcall
RtlSwitchedVVI(
      PRTL_OSVERSIONINFOEXW VersionInfo,
      DWORD TypeMask,
      ULONGLONG  ConditionMask
    );


#line 20633 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 20635 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma endregion












































typedef struct _EVENTLOGRECORD {
    DWORD  Length;        
    DWORD  Reserved;      
    DWORD  RecordNumber;  
    DWORD  TimeGenerated; 
    DWORD  TimeWritten;   
    DWORD  EventID;
    WORD   EventType;
    WORD   NumStrings;
    WORD   EventCategory;
    WORD   ReservedFlags; 
    DWORD  ClosingRecordNumber; 
    DWORD  StringOffset;  
    DWORD  UserSidLength;
    DWORD  UserSidOffset;
    DWORD  DataLength;
    DWORD  DataOffset;    
    
    
    
    
    
    
    
    
    
    
    
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)
#line 20717 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
#pragma warning(disable : 4200) 

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;



struct _EVENTSFORLOGFILE
{
    DWORD           ulSize;
    WCHAR           szLogicalLogFile[256];        
    DWORD           ulNumRecords;
    EVENTLOGRECORD  pEventLogRecords[];
};

struct _PACKEDEVENTINFO
{
    DWORD               ulSize;  
    DWORD               ulNumEventsForLogFile; 
    DWORD               ulOffsets[];           
};

#line 20743 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


#pragma warning(pop)


#line 20749 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

























































                                                    


                                                    


                                                    


                                                    
                                                    




                                                    
                                                    
                                                    


































































                                                      


















                                            










































































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;

































































typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;












typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;










typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;









typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
















typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;























































































typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;









typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;











typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;

#line 21320 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"





extern "C" {
#line 21327 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\ktmtypes.h"






















extern "C" {
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\ktmtypes.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\ktmtypes.h"

typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;

















































typedef ULONG NOTIFICATION_MASK;






















































typedef struct _TRANSACTION_NOTIFICATION {
    PVOID         TransactionKey;
    ULONG         TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG         ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID   EnlistmentId;
    UOW    UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID  UOW;
    GUID  TmIdentity;
    ULONG BufferLength;
    
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID  UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG              VersionMajor;
    ULONG              VersionMinor;
    ULONG              NumProtocols;
    ULONG              Unused;        
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW                UOW;
    GUID               TmIdentity;
    ULONG              IsolationLevel;
    ULONG              IsolationFlags;
    ULONG              Timeout;
    WCHAR              Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID    ProtocolId;
      ULONG StaticInfoLength;
    ULONG              TransactionIdInfoLength; 
    ULONG              Unused1;        
    ULONG              Unused2;        
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;


#pragma warning(pop)
#line 210 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\ktmtypes.h"


}
#line 214 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\ktmtypes.h"

#line 216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\ktmtypes.h"
#line 21330 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 21335 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"











































































































































































typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID    TransactionId;
    DWORD   State;
    DWORD   Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID    TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID  LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
      WCHAR LogPath[1]; 

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG  LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;



typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;



typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD              IsolationLevel;
    DWORD              IsolationFlags;
    LARGE_INTEGER      Timeout;
    DWORD              Outcome;
    DWORD              DescriptionLength;
    WCHAR              Description[1];            

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID   EnlistmentId;
    GUID   ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD                       NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1]; 
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID    ResourceManagerId;
    DWORD   DescriptionLength;
    WCHAR   Description[1];            
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE    IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;




typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation

    ,


    TransactionBindInformation, 
    TransactionDTCPrivateInformation 
    ,

} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

    ,



    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5



} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID    EnlistmentId;
    GUID    TransactionId;
    GUID    ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID   CrmTransactionManagerId;
    GUID   CrmResourceManagerId;
    GUID   CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW    UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD   NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1]; 
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;









typedef struct _KTMOBJECT_CURSOR {

    
    
    

    GUID    LastQuery;

    
    
    

    DWORD   ObjectIdCount;

    
    
    

    GUID    ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;




#pragma warning(pop)
#line 21718 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


}
#line 21722 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 21724 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
typedef DWORD TP_VERSION, *PTP_VERSION; 

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context
    );

typedef struct _TP_POOL TP_POOL, *PTP_POOL; 

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP; 

typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
      PVOID ObjectContext,
      PVOID CleanupContext
    );








typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION                         Version;
    PTP_POOL                           Pool;
    PTP_CLEANUP_GROUP                  CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK  CleanupGroupCancelCallback;
    PVOID                              RaceDll;
    struct _ACTIVATION_CONTEXT        *ActivationContext;
    PTP_SIMPLE_CALLBACK                FinalizationCallback;
    union {
        DWORD                          Flags;
        struct {
            DWORD                      LongFunction :  1;
            DWORD                      Persistent   :  1;
            DWORD                      Private      : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY               CallbackPriority;
    DWORD                              Size;
} TP_CALLBACK_ENVIRON_V3;

typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;























#line 21807 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"



__forceinline
void
TpInitializeCallbackEnviron(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{



    CallbackEnviron->Version = 3;





#line 21826 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

    CallbackEnviron->Pool = 0;
    CallbackEnviron->CleanupGroup = 0;
    CallbackEnviron->CleanupGroupCancelCallback = 0;
    CallbackEnviron->RaceDll = 0;
    CallbackEnviron->ActivationContext = 0;
    CallbackEnviron->FinalizationCallback = 0;
    CallbackEnviron->u.Flags = 0;



    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);

#line 21841 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

}

__forceinline
void
TpSetCallbackThreadpool(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PTP_POOL             Pool
    )
{
    CallbackEnviron->Pool = Pool;
}

__forceinline
void
TpSetCallbackCleanupGroup(
       PTP_CALLBACK_ENVIRON              CallbackEnviron,
          PTP_CLEANUP_GROUP                 CleanupGroup,
      PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

__forceinline
void
TpSetCallbackActivationContext(
       PTP_CALLBACK_ENVIRON CallbackEnviron,
      struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}

__forceinline
void
TpSetCallbackNoActivationContext(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1; 
}

__forceinline
void
TpSetCallbackLongFunction(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

__forceinline
void
TpSetCallbackRaceWithDll(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PVOID                DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}

__forceinline
void
TpSetCallbackFinalizationCallback(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PTP_SIMPLE_CALLBACK  FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}



__forceinline
void
TpSetCallbackPriority(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         TP_CALLBACK_PRIORITY Priority
    )
{
    CallbackEnviron->CallbackPriority = Priority;
}

#line 21927 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

__forceinline
void
TpSetCallbackPersistent(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}


__forceinline
void
TpDestroyCallbackEnviron(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    
    
    
    
    

    (CallbackEnviron);
}

#line 21954 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef void (__stdcall *PTP_WORK_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_WORK              Work
    );

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (__stdcall *PTP_TIMER_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_TIMER             Timer
    );

typedef DWORD    TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (__stdcall *PTP_WAIT_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_WAIT              Wait,
             TP_WAIT_RESULT        WaitResult
    );

typedef struct _TP_IO TP_IO, *PTP_IO;



































#line 22020 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
































#line 22053 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"
































#line 22086 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"








__inline struct _TEB * NtCurrentTeb( void ) { return (struct _TEB *) (ULONG_PTR) __readfsdword (0x18); }

#line 22097 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 22099 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"













#line 22113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


}
#line 22117 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"


#pragma warning(pop)




#line 22125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 22127 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnt.h"

#line 183 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"
#line 184 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"


typedef UINT_PTR            WPARAM;
typedef LONG_PTR            LPARAM;
typedef LONG_PTR            LRESULT;




















typedef HANDLE          *SPHANDLE;
typedef HANDLE           *LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;



#pragma warning(push)
#pragma warning(disable:4255) 
#line 221 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"






typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();
#line 231 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"




#line 236 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"

#pragma warning(pop)
#line 239 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"




#line 244 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"

typedef WORD                ATOM;   

struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;      
struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;


typedef int HFILE;


#line 266 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"





typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;



}
#line 280 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"

#line 282 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"
#pragma endregion

#line 285 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\minwindef.h"

#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"







#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"



#pragma region Application Family or OneCore Family


struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;

#line 43 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
#pragma endregion












#line 57 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

#pragma region Application Family




typedef void * HGDIOBJ;


#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
#line 68 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"


struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;
#line 72 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;
#line 76 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;
#line 79 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

struct HDC__{int unused;}; typedef struct HDC__ *HDC;
#line 82 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC;          
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;
#line 88 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
struct HICON__{int unused;}; typedef struct HICON__ *HICON;

struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;
#line 92 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;
#line 96 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"


struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
#line 100 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

#line 102 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
#pragma endregion




#pragma region Application Family


struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;

#line 113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
#pragma endregion

#line 116 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

#pragma region Desktop Family


struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;

#line 123 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
#pragma endregion

#line 126 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

#pragma region Application Family



typedef HICON HCURSOR;      


#line 135 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

typedef DWORD   COLORREF;

#line 139 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
#pragma endregion

#pragma region Desktop Family


typedef DWORD   *LPCOLORREF;



#line 149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
#pragma endregion

#pragma region Application Family


typedef struct tagRECT
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECT, *PRECT,  *NPRECT,  *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL       
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

typedef struct _POINTL      
{
    LONG  x;
    LONG  y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG        cx;
    LONG        cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE               SIZEL;
typedef SIZE               *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT   x;
    SHORT   y;



#line 204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
} POINTS, *PPOINTS, *LPPOINTS;

#line 207 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"
#pragma endregion

































}
#line 243 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

#pragma region Desktop Family





struct DPI_AWARENESS_CONTEXT__{int unused;}; typedef struct DPI_AWARENESS_CONTEXT__ *DPI_AWARENESS_CONTEXT;

typedef enum DPI_AWARENESS {
    DPI_AWARENESS_INVALID           = -1,
    DPI_AWARENESS_UNAWARE           = 0,
    DPI_AWARENESS_SYSTEM_AWARE      = 1,
    DPI_AWARENESS_PER_MONITOR_AWARE = 2
} DPI_AWARENESS;







typedef enum DPI_HOSTING_BEHAVIOR {
    DPI_HOSTING_BEHAVIOR_INVALID     = -1,
    DPI_HOSTING_BEHAVIOR_DEFAULT     = 0,
    DPI_HOSTING_BEHAVIOR_MIXED       = 1
} DPI_HOSTING_BEHAVIOR;

#line 272 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

#line 274 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\windef.h"

#line 172 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

















#pragma once
#line 20 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma warning(push)
#pragma warning(disable:4820) 
#pragma warning(disable:4668) 
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma warning(disable:4001) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 
#line 29 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
















#line 18 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 19 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"






#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 27 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"






#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 35 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"








#line 44 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 45 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"







#line 53 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"






#line 60 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 61 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"






#line 68 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 69 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"






#line 76 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 77 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"






#line 84 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 85 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"






#line 92 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 93 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"

#line 95 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\apisetcconv.h"
#line 35 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"







#pragma once




#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 17 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"

#pragma warning(push)
#pragma warning(disable:4820) 
#line 21 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"





extern "C" {
#line 32 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"














typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } ;
        PVOID Pointer;
    } ;

    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;


















typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
      CHAR   cFileName[ 260 ];
      CHAR   cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
      WCHAR  cFileName[ 260 ];
      WCHAR  cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
#line 145 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"



typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;





#line 159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"

typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;
#line 167 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"



typedef enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS {
    ReadDirectoryNotifyInformation         = 1,
    ReadDirectoryNotifyExtendedInformation 
} READ_DIRECTORY_NOTIFY_INFORMATION_CLASS, *PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS;
#line 175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"
#line 176 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"

typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;


typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,

    FileStorageInfo,
    FileAlignmentInfo,
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,
#line 207 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"

    FileDispositionInfoEx,
    FileRenameInfoEx,
#line 211 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"
    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;
#line 214 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"

typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
         DWORD dwErrorCode,
         DWORD dwNumberOfBytesTransfered,
      LPOVERLAPPED lpOverlapped
    );




typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;








typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;














typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef LPVOID (__stdcall *PENCLAVE_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PENCLAVE_ROUTINE LPENCLAVE_ROUTINE;

typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;







typedef PCONTEXT LPCONTEXT;
#line 382 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"






























































}
#line 446 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"





#pragma warning(pop)





#line 458 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"
#line 459 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"

#line 461 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\minwinbase.h"

#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"











extern "C" {
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsW(
         LPWCH NewEnvironment
    );





#line 41 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"
#pragma endregion

#pragma region PC Family or OneCore Family


__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
      DWORD nStdHandle
    );


__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
      DWORD nStdHandle,
      HANDLE hHandle
    );




__declspec(dllimport)
BOOL
__stdcall
SetStdHandleEx(
      DWORD nStdHandle,
      HANDLE hHandle,
      PHANDLE phPrevValue
    );


#line 76 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

#line 78 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );





#line 102 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

__declspec(dllimport)
 
LPCH
__stdcall
GetEnvironmentStrings(
    void
    );


__declspec(dllimport)
 
LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );






#line 126 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
         LPCH penv
    );

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
         LPWCH penv
    );





#line 146 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetEnvironmentVariableA(
      LPCSTR lpName,
      LPSTR lpBuffer,
      DWORD nSize
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetEnvironmentVariableW(
      LPCWSTR lpName,
      LPWSTR lpBuffer,
      DWORD nSize
    );





#line 172 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpValue
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpValue
    );





#line 194 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

__declspec(dllimport)
 
DWORD
__stdcall
ExpandEnvironmentStringsA(
      LPCSTR lpSrc,
      LPSTR lpDst,
      DWORD nSize
    );

__declspec(dllimport)
 
DWORD
__stdcall
ExpandEnvironmentStringsW(
      LPCWSTR lpSrc,
      LPWSTR lpDst,
      DWORD nSize
    );





#line 220 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
      LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
      LPCWSTR lpPathName
    );





#line 240 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetCurrentDirectoryA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetCurrentDirectoryW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );





#line 264 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

#line 266 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
      LPCWSTR lpPath,
      LPCWSTR lpFileName,
      LPCWSTR lpExtension,
      DWORD nBufferLength,
      LPWSTR lpBuffer,
      LPWSTR* lpFilePart
    );






#line 289 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
      LPCSTR lpPath,
      LPCSTR lpFileName,
      LPCSTR lpExtension,
      DWORD nBufferLength,
      LPSTR lpBuffer,
      LPSTR* lpFilePart
    );




__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathA(
      LPCSTR ExeName
    );

__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathW(
      LPCWSTR ExeName
    );





#line 324 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

#line 326 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

#line 328 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"
#pragma endregion


}
#line 333 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"

#line 335 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processenv.h"
#line 42 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#pragma region Application Family or OneCore Family















#line 42 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
      const FILETIME* lpFileTime1,
      const FILETIME* lpFileTime2
    );


__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
      LPCSTR lpPathName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
      LPCWSTR lpPathName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );





#line 77 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 79 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
      LPCSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD dwCreationDisposition,
      DWORD dwFlagsAndAttributes,
      HANDLE hTemplateFile
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
      LPCWSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD dwCreationDisposition,
      DWORD dwFlagsAndAttributes,
      HANDLE hTemplateFile
    );





#line 115 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
      DWORD dwFlags,
      LPCWSTR lpDeviceName,
      LPCWSTR lpTargetPath
    );






#line 131 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
      LPCSTR lpFileName
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
      LPCWSTR lpFileName
    );





#line 155 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint
    );






__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
      const FILETIME* lpFileTime,
      LPFILETIME lpLocalFileTime
    );



__declspec(dllimport)
BOOL
__stdcall
FindClose(
      HANDLE hFindFile
    );


#line 187 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
      HANDLE hChangeHandle
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
      LPCSTR lpPathName,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
      LPCWSTR lpPathName,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter
    );





#line 223 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 225 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
      LPCSTR lpFileName,
      LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
      LPCWSTR lpFileName,
      LPWIN32_FIND_DATAW lpFindFileData
    );





#line 251 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"



__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExA(
      LPCSTR lpFileName,
      FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
      FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
      DWORD dwAdditionalFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExW(
      LPCWSTR lpFileName,
      FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
      FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
      DWORD dwAdditionalFlags
    );





#line 283 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 285 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 287 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeW(
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
      HANDLE hChangeHandle
    );


#line 314 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
      HANDLE hFindFile,
      LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
      HANDLE hFindFile,
      LPWIN32_FIND_DATAW lpFindFileData
    );





#line 340 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 342 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeW(
      HANDLE hFindVolume,
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeClose(
      HANDLE hFindVolume
    );


#line 370 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
      HANDLE hFile
    );


#line 384 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
      LPCSTR lpRootPathName,
      LPDWORD lpSectorsPerCluster,
      LPDWORD lpBytesPerSector,
      LPDWORD lpNumberOfFreeClusters,
      LPDWORD lpTotalNumberOfClusters
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
      LPCWSTR lpRootPathName,
      LPDWORD lpSectorsPerCluster,
      LPDWORD lpBytesPerSector,
      LPDWORD lpNumberOfFreeClusters,
      LPDWORD lpTotalNumberOfClusters
    );





#line 416 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
    
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
      LPCSTR lpDirectoryName,
      PULARGE_INTEGER lpFreeBytesAvailableToCaller,
      PULARGE_INTEGER lpTotalNumberOfBytes,
      PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
      LPCWSTR lpDirectoryName,
      PULARGE_INTEGER lpFreeBytesAvailableToCaller,
      PULARGE_INTEGER lpTotalNumberOfBytes,
      PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );





#line 442 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
      LPCSTR lpRootPathName
    );

__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
      LPCWSTR lpRootPathName
    );





#line 462 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 464 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
      LPCSTR lpFileName
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
      LPCWSTR lpFileName
    );





#line 497 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
      LPCSTR lpFileName,
      GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
      LPCWSTR lpFileName,
      GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation
    );





#line 521 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 523 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
      HANDLE hFile,
      LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
      HANDLE hFile,
      LPDWORD lpFileSizeHigh
    );


#line 560 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
      HANDLE hFile,
      PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileType(
      HANDLE hFile
    );




__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleA(
      HANDLE hFile,
      LPSTR lpszFilePath,
      DWORD cchFilePath,
      DWORD dwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleW(
      HANDLE hFile,
      LPWSTR lpszFilePath,
      DWORD cchFilePath,
      DWORD dwFlags
    );





#line 609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 611 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
      HANDLE hFile,
      LPFILETIME lpCreationTime,
      LPFILETIME lpLastAccessTime,
      LPFILETIME lpLastWriteTime
    );


__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameW(
      LPCWSTR lpFileName,
      DWORD nBufferLength,
      LPWSTR lpBuffer,
     LPWSTR* lpFilePart
    );






__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameA(
      LPCSTR lpFileName,
      DWORD nBufferLength,
      LPSTR lpBuffer,
     LPSTR* lpFilePart
    );




#line 654 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );


#line 664 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );






__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameA(
      LPCSTR lpszShortPath,
      LPSTR lpszLongPath,
      DWORD cchBuffer
    );




#line 696 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 698 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameW(
      LPCWSTR lpszShortPath,
      LPWSTR lpszLongPath,
      DWORD cchBuffer
    );






#line 719 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
DWORD
__stdcall
GetShortPathNameW(
      LPCWSTR lpszLongPath,
      LPWSTR lpszShortPath,
      DWORD cchBuffer
    );






#line 740 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
      LPCWSTR lpPathName,
      LPCWSTR lpPrefixString,
      UINT uUnique,
      LPWSTR lpTempFileName
    );






#line 761 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationByHandleW(
      HANDLE hFile,
      LPWSTR lpVolumeNameBuffer,
      DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPWSTR lpFileSystemNameBuffer,
      DWORD nFileSystemNameSize
    );


#line 784 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#line 785 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
      LPCWSTR lpRootPathName,
      LPWSTR lpVolumeNameBuffer,
      DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPWSTR lpFileSystemNameBuffer,
      DWORD nFileSystemNameSize
    );






#line 810 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameW(
      LPCWSTR lpszFileName,
      LPWSTR lpszVolumePathName,
      DWORD cchBufferLength
    );






#line 830 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
      const FILETIME* lpLocalFileTime,
      LPFILETIME lpFileTime
    );


__declspec(dllimport)
BOOL
__stdcall
LockFile(
      HANDLE hFile,
      DWORD dwFileOffsetLow,
      DWORD dwFileOffsetHigh,
      DWORD nNumberOfBytesToLockLow,
      DWORD nNumberOfBytesToLockHigh
    );


__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
      HANDLE hFile,
      DWORD dwFlags,
      DWORD dwReserved,
      DWORD nNumberOfBytesToLockLow,
      DWORD nNumberOfBytesToLockHigh,
      LPOVERLAPPED lpOverlapped
    );


#line 870 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
      LPCWSTR lpDeviceName,
      LPWSTR lpTargetPath,
      DWORD ucchMax
    );






#line 890 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
BOOL
__stdcall
ReadFile(
      HANDLE hFile,
       LPVOID lpBuffer,
      DWORD nNumberOfBytesToRead,
      LPDWORD lpNumberOfBytesRead,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
 
BOOL
__stdcall
ReadFileEx(
      HANDLE hFile,
       LPVOID lpBuffer,
      DWORD nNumberOfBytesToRead,
      LPOVERLAPPED lpOverlapped,
      LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

    
#line 922 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
BOOL
__stdcall
ReadFileScatter(
      HANDLE hFile,
      FILE_SEGMENT_ELEMENT aSegmentArray[],
      DWORD nNumberOfBytesToRead,
      LPDWORD lpReserved,
      LPOVERLAPPED lpOverlapped
    );


#line 941 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
      LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
      LPCWSTR lpPathName
    );





#line 965 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
      HANDLE hFile
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
      LPCSTR lpFileName,
      DWORD dwFileAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
      LPCWSTR lpFileName,
      DWORD dwFileAttributes
    );





#line 995 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"



__declspec(dllimport)
BOOL
__stdcall
SetFileInformationByHandle(
      HANDLE hFile,
      FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
      LPVOID lpFileInformation,
      DWORD dwBufferSize
    );


#line 1010 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
      HANDLE hFile,
      LONG lDistanceToMove,
      PLONG lpDistanceToMoveHigh,
      DWORD dwMoveMethod
    );


__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
      HANDLE hFile,
      LARGE_INTEGER liDistanceToMove,
      PLARGE_INTEGER lpNewFilePointer,
      DWORD dwMoveMethod
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
      HANDLE hFile,
      const FILETIME* lpCreationTime,
      const FILETIME* lpLastAccessTime,
      const FILETIME* lpLastWriteTime
    );


#line 1045 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
      HANDLE hFile,
      LONGLONG ValidDataLength
    );


#line 1062 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 1064 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
      HANDLE hFile,
      DWORD dwFileOffsetLow,
      DWORD dwFileOffsetHigh,
      DWORD nNumberOfBytesToUnlockLow,
      DWORD nNumberOfBytesToUnlockHigh
    );


__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
      HANDLE hFile,
      DWORD dwReserved,
      DWORD nNumberOfBytesToUnlockLow,
      DWORD nNumberOfBytesToUnlockHigh,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFile(
      HANDLE hFile,
      LPCVOID lpBuffer,
      DWORD nNumberOfBytesToWrite,
      LPDWORD lpNumberOfBytesWritten,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
      HANDLE hFile,
      LPCVOID lpBuffer,
      DWORD nNumberOfBytesToWrite,
      LPOVERLAPPED lpOverlapped,
      LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

    
#line 1118 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
      HANDLE hFile,
      FILE_SEGMENT_ELEMENT aSegmentArray[],
      DWORD nNumberOfBytesToWrite,
      LPDWORD lpReserved,
      LPOVERLAPPED lpOverlapped
    );


#line 1136 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );






#line 1155 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint,
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );








__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
      LPCWSTR lpszVolumeName,
         LPWCH lpszVolumePathNames,
      DWORD cchBufferLength,
      PDWORD lpcchReturnLength
    );






#line 1192 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 1194 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




typedef struct _CREATEFILE2_EXTENDED_PARAMETERS {
    DWORD dwSize;   
    DWORD dwFileAttributes;
    DWORD dwFileFlags;   
    DWORD dwSecurityQosFlags;	
    LPSECURITY_ATTRIBUTES lpSecurityAttributes; 
    HANDLE hTemplateFile;      
} CREATEFILE2_EXTENDED_PARAMETERS, *PCREATEFILE2_EXTENDED_PARAMETERS, *LPCREATEFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HANDLE
__stdcall
CreateFile2(
      LPCWSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      DWORD dwCreationDisposition,
      LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
    );


#line 1223 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 1225 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
SetFileIoOverlappedRange(
      HANDLE FileHandle,
      PUCHAR OverlappedRangeStart,
      ULONG Length
    );


#line 1243 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 1245 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
      LPCSTR lpFileName,
      LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
      LPCWSTR lpFileName,
      LPDWORD lpFileSizeHigh
    );





#line 1273 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 1275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 1277 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




typedef enum _STREAM_INFO_LEVELS {

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;

__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamW(
      LPCWSTR lpFileName,
      STREAM_INFO_LEVELS InfoLevel,
      LPVOID lpFindStreamData,
      DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
FindNextStreamW(
      HANDLE hFindStream,
      LPVOID lpFindStreamData
    );


#line 1319 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI(
    void
    );


#line 1329 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );




#line 1346 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 1348 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameW(
      LPCWSTR lpFileName,
      DWORD dwFlags,
      LPDWORD StringLength,
      PWSTR LinkName
    );


__declspec(dllimport)
BOOL
__stdcall
FindNextFileNameW(
      HANDLE hFindStream,
      LPDWORD StringLength,
      PWSTR LinkName
    );


#line 1377 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 1379 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
      LPCSTR lpRootPathName,
      LPSTR lpVolumeNameBuffer,
      DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPSTR lpFileSystemNameBuffer,
      DWORD nFileSystemNameSize
    );




#line 1402 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
      LPCSTR lpPathName,
      LPCSTR lpPrefixString,
      UINT uUnique,
      LPSTR lpTempFileName
    );




#line 1417 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#line 1418 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
void
__stdcall
SetFileApisToOEM(
    void
    );


__declspec(dllimport)
void
__stdcall
SetFileApisToANSI(
    void
    );


#line 1440 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#pragma endregion


}
#line 1445 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"

#line 1447 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fileapi.h"
#line 43 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"

#pragma region Application Family or OneCore Family



__declspec(dllimport)
BOOL
__stdcall
IsDebuggerPresent(
    void
    );

#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"

#line 39 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );


__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
      LPCSTR lpOutputString
    );

__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
      LPCWSTR lpOutputString
    );





#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"

#line 73 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
      DWORD dwProcessId,
      DWORD dwThreadId,
      DWORD dwContinueStatus
    );


__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
      LPDEBUG_EVENT lpDebugEvent,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
      DWORD dwProcessId
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
      DWORD dwProcessId
    );




__declspec(dllimport)
BOOL
__stdcall
CheckRemoteDebuggerPresent(
      HANDLE hProcess,
      PBOOL pbDebuggerPresent
    );


#line 125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"

#line 127 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEventEx(
      LPDEBUG_EVENT lpDebugEvent,
      DWORD dwMilliseconds
    );


#line 142 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"
#pragma endregion


}
#line 147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"

#line 149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\debugapi.h"
#line 44 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\utilapiset.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\utilapiset.h"









extern "C" {
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\utilapiset.h"

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
PVOID
__stdcall
EncodePointer(
      PVOID Ptr
    );


__declspec(dllimport)
 
PVOID
__stdcall
DecodePointer(
      PVOID Ptr
    );


#line 46 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\utilapiset.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
PVOID
__stdcall
EncodeSystemPointer(
      PVOID Ptr
    );


__declspec(dllimport)
 
PVOID
__stdcall
DecodeSystemPointer(
      PVOID Ptr
    );


__declspec(dllimport)
HRESULT
__stdcall
EncodeRemotePointer(
      HANDLE ProcessHandle,
      PVOID Ptr,
      PVOID* EncodedPtr
    );


__declspec(dllimport)
HRESULT
__stdcall
DecodeRemotePointer(
      HANDLE ProcessHandle,
      PVOID Ptr,
      PVOID* DecodedPtr
    );


#line 90 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\utilapiset.h"
#pragma endregion

#pragma region PC Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
Beep(
      DWORD dwFreq,
      DWORD dwDuration
    );


#line 105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\utilapiset.h"
#pragma endregion


}
#line 110 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\utilapiset.h"

#line 112 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\utilapiset.h"
#line 45 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\handleapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\handleapi.h"









extern "C" {
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\handleapi.h"






#pragma region Application Family or OneCore Family





__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
        HANDLE hObject
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
      HANDLE hSourceProcessHandle,
      HANDLE hSourceHandle,
      HANDLE hTargetProcessHandle,
     LPHANDLE lpTargetHandle,
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwOptions
    );


__declspec(dllimport)
BOOL
__stdcall
CompareObjectHandles(
      HANDLE hFirstObjectHandle,
      HANDLE hSecondObjectHandle
    );


#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\handleapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
      HANDLE hObject,
      LPDWORD lpdwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
      HANDLE hObject,
      DWORD dwMask,
      DWORD dwFlags
    );


#line 92 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\handleapi.h"
#pragma endregion


}
#line 97 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\handleapi.h"

#line 99 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\handleapi.h"
#line 46 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"









extern "C" {
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"

#pragma region Application Family or OneCore Family






typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
      struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;





__declspec(dllimport)

void
__stdcall
RaiseException(
      DWORD dwExceptionCode,
      DWORD dwExceptionFlags,
      DWORD nNumberOfArguments,
      const ULONG_PTR* lpArguments
    );


#line 54 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family



__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
      struct _EXCEPTION_POINTERS* ExceptionInfo
    );


#line 69 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
      LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );




__declspec(dllimport)
 
 
DWORD
__stdcall
GetLastError(
    void
    );


#line 95 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"

__declspec(dllimport)
void
__stdcall
SetLastError(
      DWORD dwErrCode
    );


#line 105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
UINT
__stdcall
GetErrorMode(
    void
    );


#line 121 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"

#line 123 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
      UINT uMode
    );


#line 137 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
 
PVOID
__stdcall
AddVectoredExceptionHandler(
      ULONG First,
      PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredExceptionHandler(
      PVOID Handle
    );


__declspec(dllimport)
 
PVOID
__stdcall
AddVectoredContinueHandler(
      ULONG First,
      PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredContinueHandler(
      PVOID Handle
    );


#line 181 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"



















#line 201 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#line 202 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"

#line 204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
void
__stdcall
RaiseFailFastException(
      PEXCEPTION_RECORD pExceptionRecord,
      PCONTEXT pContextRecord,
      DWORD dwFlags
    );


#line 220 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
void
__stdcall
FatalAppExitA(
      UINT uAction,
      LPCSTR lpMessageText
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitW(
      UINT uAction,
      LPCWSTR lpMessageText
    );





#line 246 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"

#line 248 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
GetThreadErrorMode(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadErrorMode(
      DWORD dwNewMode,
      LPDWORD lpOldMode
    );


#line 271 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
void
__stdcall
TerminateProcessOnMemoryExhaustion(
      SIZE_T FailedAllocationSize
    );


#line 285 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#pragma endregion


}
#line 290 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"

#line 292 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\errhandlingapi.h"
#line 47 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"









extern "C" {
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"

#pragma region Application Family or OneCore Family






#line 32 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"

__declspec(dllimport)
DWORD
__stdcall
FlsAlloc(
      PFLS_CALLBACK_FUNCTION lpCallback
    );


__declspec(dllimport)
PVOID
__stdcall
FlsGetValue(
      DWORD dwFlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
FlsSetValue(
      DWORD dwFlsIndex,
      PVOID lpFlsData
    );


__declspec(dllimport)
BOOL
__stdcall
FlsFree(
      DWORD dwFlsIndex
    );


#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"

#line 69 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
IsThreadAFiber(
    void
    );


#line 85 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"

#line 87 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"
#pragma endregion


}
#line 92 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"

#line 94 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\fibersapi.h"
#line 48 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namedpipeapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namedpipeapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namedpipeapi.h"



__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
      PHANDLE hReadPipe,
      PHANDLE hWritePipe,
      LPSECURITY_ATTRIBUTES lpPipeAttributes,
      DWORD nSize
    );


__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
      HANDLE hNamedPipe,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
      HANDLE hNamedPipe
    );


__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
      HANDLE hNamedPipe,
      LPDWORD lpMode,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout
    );


__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
      HANDLE hNamedPipe,
      LPVOID lpBuffer,
      DWORD nBufferSize,
      LPDWORD lpBytesRead,
      LPDWORD lpTotalBytesAvail,
      LPDWORD lpBytesLeftThisMessage
    );


__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
      HANDLE hNamedPipe,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
      LPCWSTR lpName,
      DWORD dwOpenMode,
      DWORD dwPipeMode,
      DWORD nMaxInstances,
      DWORD nOutBufferSize,
      DWORD nInBufferSize,
      DWORD nDefaultTimeOut,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
      LPCWSTR lpNamedPipeName,
      DWORD nTimeOut
    );








__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameW(
      HANDLE Pipe,
      LPWSTR ClientComputerName,
      ULONG ClientComputerNameLength
    );


#line 138 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namedpipeapi.h"





__declspec(dllimport)
 
BOOL
__stdcall
ImpersonateNamedPipeClient(
      HANDLE hNamedPipe
    );
                               

#line 153 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namedpipeapi.h"


#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
      HANDLE hNamedPipe,
      LPDWORD lpFlags,
      LPDWORD lpOutBufferSize,
      LPDWORD lpInBufferSize,
      LPDWORD lpMaxInstances
    );


__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
      HANDLE hNamedPipe,
      LPDWORD lpState,
      LPDWORD lpCurInstances,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout,
      LPWSTR lpUserName,
      DWORD nMaxUserNameSize
    );





#line 188 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namedpipeapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
      LPCWSTR lpNamedPipeName,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
      DWORD nTimeOut
    );






#line 212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namedpipeapi.h"
#pragma endregion


}
#line 217 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namedpipeapi.h"

#line 219 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namedpipeapi.h"

#line 49 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\profileapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\profileapi.h"









extern "C" {
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\profileapi.h"

#pragma region Application Family or OneCore Family






__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
      LARGE_INTEGER* lpPerformanceCount
    );


__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
      LARGE_INTEGER* lpFrequency
    );


#line 48 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\profileapi.h"
#pragma endregion


}
#line 53 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\profileapi.h"

#line 55 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\profileapi.h"
#line 50 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"











#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"

#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"


extern "C" {
#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 35 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"

#pragma region Desktop Family or OneCore Family






typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;

#line 53 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family






__declspec(dllimport)
 
HANDLE
__stdcall
HeapCreate(
      DWORD flOptions,
      SIZE_T dwInitialSize,
      SIZE_T dwMaximumSize
    );


__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
      HANDLE hHeap
    );

    
__declspec(dllimport)
 
 
__declspec(allocator)
LPVOID
__stdcall
HeapAlloc(
      HANDLE hHeap,
      DWORD dwFlags,
      SIZE_T dwBytes
    );


__declspec(dllimport)
 
 
 
__declspec(allocator)
LPVOID
__stdcall
HeapReAlloc(
      HANDLE hHeap,
      DWORD dwFlags,
      LPVOID lpMem,
      SIZE_T dwBytes
    );


__declspec(dllimport)
 
BOOL
__stdcall
HeapFree(
      HANDLE hHeap,
      DWORD dwFlags,
        LPVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
      HANDLE hHeap,
      DWORD dwFlags,
      LPCVOID lpMem
    );


__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap(
    void
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
      HANDLE hHeap,
      DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation(
      HANDLE HeapHandle,
      HEAP_INFORMATION_CLASS HeapInformationClass,
      PVOID HeapInformation,
      SIZE_T HeapInformationLength
    );


#line 159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
      HANDLE hHeap,
      DWORD dwFlags,
      LPCVOID lpMem
    );


#line 175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"
#pragma endregion

#pragma region Desktop Family


BOOL
__stdcall
HeapSummary(
      HANDLE hHeap,
      DWORD dwFlags,
      LPHEAP_SUMMARY lpSummary
    );


#line 190 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
      DWORD NumberOfHeaps,
      PHANDLE ProcessHeaps
    );


__declspec(dllimport)
BOOL
__stdcall
HeapLock(
      HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
      HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
      HANDLE hHeap,
      LPPROCESS_HEAP_ENTRY lpEntry
    );


__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation(
      HANDLE HeapHandle,
      HEAP_INFORMATION_CLASS HeapInformationClass,
      PVOID HeapInformation,
      SIZE_T HeapInformationLength,
      PSIZE_T ReturnLength
    );

    
#line 242 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"
#pragma endregion






#pragma warning(pop)
#line 251 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"


}
#line 255 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"

#line 257 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\heapapi.h"
#line 51 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
HANDLE
__stdcall
CreateIoCompletionPort(
      HANDLE FileHandle,
      HANDLE ExistingCompletionPort,
      ULONG_PTR CompletionKey,
      DWORD NumberOfConcurrentThreads
    );


__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
      HANDLE CompletionPort,
      LPDWORD lpNumberOfBytesTransferred,
      PULONG_PTR lpCompletionKey,
      LPOVERLAPPED* lpOverlapped,
      DWORD dwMilliseconds
    );




__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatusEx(
      HANDLE CompletionPort,
      LPOVERLAPPED_ENTRY lpCompletionPortEntries,
      ULONG ulCount,
      PULONG ulNumEntriesRemoved,
      DWORD dwMilliseconds,
      BOOL fAlertable
    );


#line 68 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"

__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
      HANDLE CompletionPort,
      DWORD dwNumberOfBytesTransferred,
      ULONG_PTR dwCompletionKey,
      LPOVERLAPPED lpOverlapped
    );


#line 81 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
      HANDLE hDevice,
      DWORD dwIoControlCode,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped
    );


#line 102 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped,
      LPDWORD lpNumberOfBytesTransferred,
      BOOL bWait
    );




__declspec(dllimport)
BOOL
__stdcall
CancelIoEx(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped
    );


#line 130 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"

#line 132 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
CancelIo(
      HANDLE hFile
    );


__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResultEx(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped,
      LPDWORD lpNumberOfBytesTransferred,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


#line 158 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
CancelSynchronousIo(
      HANDLE hThread
    );


#line 174 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"

#line 176 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"
#pragma endregion


}
#line 181 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"

#line 183 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ioapiset.h"
#line 52 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

#pragma region Application or OneCore Family








typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;

#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"
#pragma endregion

#pragma region Application or OneCore Family




__declspec(dllimport)
void
__stdcall
InitializeSRWLock(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockShared(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockShared(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockShared(
      PSRWLOCK SRWLock
    );


#line 107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"











#line 119 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


#line 129 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
 
BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount
    );




__declspec(dllimport)
BOOL
__stdcall
InitializeCriticalSectionEx(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount,
      DWORD Flags
    );


#line 169 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
DWORD
__stdcall
SetCriticalSectionSpinCount(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount
    );




__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


#line 190 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );






typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;


















typedef
BOOL
(__stdcall *PINIT_ONCE_FN) (
      PINIT_ONCE InitOnce,
      PVOID Parameter,
     PVOID *Context
    );



__declspec(dllimport)
void
__stdcall
InitOnceInitialize(
      PINIT_ONCE InitOnce
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceExecuteOnce(
      PINIT_ONCE InitOnce,
       PINIT_ONCE_FN InitFn,
      PVOID Parameter,
     LPVOID* Context
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceBeginInitialize(
      LPINIT_ONCE lpInitOnce,
      DWORD dwFlags,
      PBOOL fPending,
     LPVOID* lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceComplete(
      LPINIT_ONCE lpInitOnce,
      DWORD dwFlags,
      LPVOID lpContext
    );


#line 275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"





typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;















__declspec(dllimport)
void
__stdcall
InitializeConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeAllConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableCS(
      PCONDITION_VARIABLE ConditionVariable,
      PCRITICAL_SECTION CriticalSection,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableSRW(
      PCONDITION_VARIABLE ConditionVariable,
      PSRWLOCK SRWLock,
      DWORD dwMilliseconds,
      ULONG Flags
    );


#line 342 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetEvent(
      HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
      HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
      HANDLE hSemaphore,
      LONG lReleaseCount,
      LPLONG lpPreviousCount
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
      HANDLE hMutex
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
      HANDLE hHandle,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
DWORD
__stdcall
SleepEx(
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
      HANDLE hHandle,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
      DWORD nCount,
      const HANDLE* lpHandles,
      BOOL bWaitAll,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );









__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexA(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      BOOL bInitialOwner,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexW(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      BOOL bInitialOwner,
      LPCWSTR lpName
    );





#line 449 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenMutexW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL bManualReset,
      BOOL bInitialState,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventW(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL bManualReset,
      BOOL bInitialState,
      LPCWSTR lpName
    );





#line 492 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenEventA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
OpenEventW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );





#line 518 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenSemaphoreW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );








typedef
void
(__stdcall *PTIMERAPCROUTINE)(
      LPVOID lpArgToCompletionRoutine,
          DWORD dwTimerLowValue,
          DWORD dwTimerHighValue
    );

__declspec(dllimport)
 
HANDLE
__stdcall
OpenWaitableTimerW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpTimerName
    );








BOOL
__stdcall
SetWaitableTimerEx(
      HANDLE hTimer,
      const LARGE_INTEGER* lpDueTime,
      LONG lPeriod,
      PTIMERAPCROUTINE pfnCompletionRoutine,
      LPVOID lpArgToCompletionRoutine,
      PREASON_CONTEXT WakeContext,
      ULONG TolerableDelay
    );


#line 575 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
      HANDLE hTimer,
      const LARGE_INTEGER* lpDueTime,
      LONG lPeriod,
      PTIMERAPCROUTINE pfnCompletionRoutine,
      LPVOID lpArgToCompletionRoutine,
      BOOL fResume
    );


__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
      HANDLE hTimer
    );






__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexExA(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      LPCSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexExW(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );





#line 628 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"




__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventExA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      LPCSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventExW(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );





#line 659 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreExW(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
      LONG lInitialCount,
      LONG lMaximumCount,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );









#line 682 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerExW(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
      LPCWSTR lpTimerName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );






#line 700 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

#line 702 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

#line 704 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop or OneCore Family


typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





BOOL
__stdcall
EnterSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier,
      DWORD dwFlags
    );


BOOL
__stdcall
InitializeSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier,
      LONG lTotalThreads,
      LONG lSpinCount
    );


BOOL
__stdcall
DeleteSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier
    );


#line 742 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"
#pragma endregion

#pragma region Application or OneCore Family


__declspec(dllimport)
void
__stdcall
Sleep(
      DWORD dwMilliseconds
    );


BOOL
__stdcall
WaitOnAddress(
      volatile void* Address,
      PVOID CompareAddress,
      SIZE_T AddressSize,
      DWORD dwMilliseconds
    );


void
__stdcall
WakeByAddressSingle(
      PVOID Address
    );


void
__stdcall
WakeByAddressAll(
      PVOID Address
    );


#line 780 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop or OneCore Family




__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
      HANDLE hObjectToSignal,
      HANDLE hObjectToWaitOn,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


#line 799 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

#line 801 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"
#pragma endregion

#pragma region Application or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
      DWORD nCount,
      const HANDLE* lpHandles,
      BOOL bWaitAll,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateSemaphoreW(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
      LONG lInitialCount,
      LONG lMaximumCount,
      LPCWSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerW(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
      BOOL bManualReset,
      LPCWSTR lpTimerName
    );






#line 848 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"
#pragma endregion


}
#line 853 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"

#line 855 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\synchapi.h"
#line 53 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"
 










#pragma once
#line 14 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"
















extern "C" {
#line 32 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"

#pragma region Application Family or OneCore Family










__declspec(dllimport)
void
__stdcall
InitializeSListHead(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPopEntrySList(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushEntrySList(
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY ListEntry
    );







__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushListSListEx(
      PSLIST_HEADER ListHead,
      PSLIST_ENTRY List,
      PSLIST_ENTRY ListEnd,
      ULONG Count
    );


 

#line 88 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedFlushSList(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList(
      PSLIST_HEADER ListHead
    );


#line 106 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"

#line 108 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"

#line 110 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"




#line 115 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"
#pragma endregion


}
#line 120 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"

#line 122 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\interlockedapi.h"

#line 54 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#pragma region Application Family or OneCore Family


typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD   cb;
    LPSTR   lpReserved;
    LPSTR   lpDesktop;
    LPSTR   lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD   cb;
    LPWSTR  lpReserved;
    LPWSTR  lpDesktop;
    LPWSTR  lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
#line 82 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 84 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
      PAPCFUNC pfnAPC,
      HANDLE hThread,
      ULONG_PTR dwData
    );


#line 102 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
      HANDLE hProcess,
      LPFILETIME lpCreationTime,
      LPFILETIME lpExitTime,
      LPFILETIME lpKernelTime,
      LPFILETIME lpUserTime
    );


__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );


#line 132 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
      UINT uExitCode
    );


#line 147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
      HANDLE hProcess,
      UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
      HANDLE hProcess,
      LPDWORD lpExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateThread(
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
        LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPDWORD lpThreadId
    );

#line 192 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family

__declspec(dllimport)
 
HANDLE
__stdcall
CreateRemoteThread(
      HANDLE hProcess,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
      LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPDWORD lpThreadId
    );


#line 212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );


__declspec(dllimport)
 
HANDLE
__stdcall
OpenThread(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwThreadId
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
      HANDLE hThread,
      int nPriority
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
      HANDLE hThread,
      BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
      HANDLE hThread,
      PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
int
__stdcall
GetThreadPriority(
      HANDLE hThread
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
      DWORD dwExitCode
    );

#line 288 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family

__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
      HANDLE hThread,
      DWORD dwExitCode
    );

#line 301 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
BOOL
__stdcall
GetExitCodeThread(
      HANDLE hThread,
      LPDWORD lpExitCode
    );


__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
      HANDLE hThread
    );


__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
      HANDLE hThread
    );




#line 335 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

 
__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );


__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
      DWORD dwTlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
      DWORD dwTlsIndex,
      LPVOID lpTlsValue
    );


__declspec(dllimport)
BOOL
__stdcall
TlsFree(
      DWORD dwTlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
      LPCSTR lpApplicationName,
      LPSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCSTR lpCurrentDirectory,
      LPSTARTUPINFOA lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
      LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCWSTR lpCurrentDirectory,
      LPSTARTUPINFOW lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );





#line 407 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 409 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
      DWORD dwLevel,
      DWORD dwFlags
    );


__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
      DWORD ProcessId
    );


__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
      LPSTARTUPINFOW lpStartupInfo
    );





__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW(
      HANDLE hToken,
      LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCWSTR lpCurrentDirectory,
      LPSTARTUPINFOW lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );




















__forceinline
HANDLE
GetCurrentProcessToken (
    void
    )
{
    return (HANDLE)(LONG_PTR) -4;
}

__forceinline
HANDLE
GetCurrentThreadToken (
    void
    )
{
    return (HANDLE)(LONG_PTR) -5;
}

__forceinline
HANDLE
GetCurrentThreadEffectiveToken (
    void
    )
{
    return (HANDLE)(LONG_PTR) -6;
}

#line 506 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#line 507 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 509 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
BOOL
__stdcall
SetThreadToken(
      PHANDLE Thread,
      HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken(
      HANDLE ProcessHandle,
      DWORD DesiredAccess,
     PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken(
      HANDLE ThreadHandle,
      DWORD DesiredAccess,
      BOOL OpenAsSelf,
     PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
      HANDLE hProcess,
      DWORD dwPriorityClass
    );


__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
      HANDLE hProcess
    );


#line 563 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetThreadStackGuarantee(
      PULONG StackSizeInBytes
    );


__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
      DWORD dwProcessId,
      DWORD* pSessionId
    );


typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

#line 588 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
DWORD
__stdcall
GetProcessId(
      HANDLE Process
    );


#line 604 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"



__declspec(dllimport)
DWORD
__stdcall
GetThreadId(
      HANDLE Thread
    );


#line 616 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"



__declspec(dllimport)
void
__stdcall
FlushProcessWriteBuffers(
    void
    );


#line 628 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 630 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
GetProcessIdOfThread(
      HANDLE Thread
    );


__declspec(dllimport)
 
BOOL
__stdcall
InitializeProcThreadAttributeList(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      DWORD dwAttributeCount,
      DWORD dwFlags,
      PSIZE_T lpSize
    );


__declspec(dllimport)
void
__stdcall
DeleteProcThreadAttributeList(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );




__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityUpdateMode(
      HANDLE hProcess,
      DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessAffinityUpdateMode(
      HANDLE hProcess,
      LPDWORD lpdwFlags
    );




__declspec(dllimport)
BOOL
__stdcall
UpdateProcThreadAttribute(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      DWORD dwFlags,
      DWORD_PTR Attribute,
      PVOID lpValue,
      SIZE_T cbSize,
      PVOID lpPreviousValue,
      PSIZE_T lpReturnSize
    );


#line 702 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#line 705 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
HANDLE
__stdcall
CreateRemoteThreadEx(
      HANDLE hProcess,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
      LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      LPDWORD lpThreadId
    );


#line 726 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion



#pragma region Application Family or OneCore Family




__declspec(dllimport)
void
__stdcall
GetCurrentThreadStackLimits(
      PULONG_PTR LowLimit,
      PULONG_PTR HighLimit
    );


#line 745 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
      HANDLE hThread,
      LPCONTEXT lpContext
    );




__declspec(dllimport)
BOOL
__stdcall
GetProcessMitigationPolicy(
      HANDLE hProcess,
      PROCESS_MITIGATION_POLICY MitigationPolicy,
      PVOID lpBuffer,
      SIZE_T dwLength
    );


#line 769 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 771 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
      HANDLE hThread,
      const CONTEXT* lpContext
    );




__declspec(dllimport)
BOOL
__stdcall
SetProcessMitigationPolicy(
      PROCESS_MITIGATION_POLICY MitigationPolicy,
      PVOID lpBuffer,
      SIZE_T dwLength
    );


#line 798 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 800 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#line 803 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
      HANDLE hProcess,
      LPCVOID lpBaseAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
      HANDLE hThread,
      LPFILETIME lpCreationTime,
      LPFILETIME lpExitTime,
      LPFILETIME lpKernelTime,
      LPFILETIME lpUserTime
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwProcessId
    );


__declspec(dllimport)
BOOL
__stdcall
IsProcessorFeaturePresent(
      DWORD ProcessorFeature
    );


#line 848 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetProcessHandleCount(
      HANDLE hProcess,
      PDWORD pdwHandleCount
    );


#line 865 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#line 868 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"



#pragma region Application Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessorNumber(
    void
    );


#line 883 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#line 886 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"



#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetThreadIdealProcessorEx(
      HANDLE hThread,
      PPROCESSOR_NUMBER lpIdealProcessor,
      PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadIdealProcessorEx(
      HANDLE hThread,
      PPROCESSOR_NUMBER lpIdealProcessor
    );


__declspec(dllimport)
void
__stdcall
GetCurrentProcessorNumberEx(
      PPROCESSOR_NUMBER ProcNumber
    );


#line 920 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#line 923 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#pragma region Application Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
      HANDLE hProcess,
      PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
      HANDLE hProcess,
      BOOL bDisablePriorityBoost
    );


#line 948 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 950 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
GetThreadIOPendingFlag(
      HANDLE hThread,
      PBOOL lpIOIsPending
    );


__declspec(dllimport)
BOOL
__stdcall
GetSystemTimes(
      PFILETIME lpIdleTime,
      PFILETIME lpKernelTime,
      PFILETIME lpUserTime
    );


#line 977 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 979 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family






typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadDynamicCodePolicy,
    ThreadPowerThrottling,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;



typedef struct _MEMORY_PRIORITY_INFORMATION {
    ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetThreadInformation(
      HANDLE hThread,
      THREAD_INFORMATION_CLASS ThreadInformationClass,
      LPVOID ThreadInformation,
      DWORD ThreadInformationSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadInformation(
      HANDLE hThread,
      THREAD_INFORMATION_CLASS ThreadInformationClass,
      LPVOID ThreadInformation,
      DWORD ThreadInformationSize
    );


#line 1025 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"









typedef struct _THREAD_POWER_THROTTLING_STATE {
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
} THREAD_POWER_THROTTLING_STATE;

#line 1041 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 1043 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
IsProcessCritical(
      HANDLE hProcess,
      PBOOL Critical
    );


#line 1060 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"



__declspec(dllimport)
BOOL
__stdcall
SetProtectedPolicy(
      LPCGUID PolicyGuid,
      ULONG_PTR PolicyValue,
      PULONG_PTR OldPolicyValue
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProtectedPolicy(
      LPCGUID PolicyGuid,
      PULONG_PTR PolicyValue
    );


#line 1083 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 1085 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
      HANDLE hThread,
      DWORD dwIdealProcessor
    );


#line 1100 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessMemoryExhaustionInfo,
    ProcessAppMemoryInfo,
    ProcessInPrivateInfo,
    ProcessPowerThrottling,
    ProcessReservedValue1,           
    ProcessTelemetryCoverageInfo,
    ProcessProtectionLevelInfo,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;

typedef struct _APP_MEMORY_INFORMATION {
    ULONG64 AvailableCommit;
    ULONG64 PrivateCommitUsage;
    ULONG64 PeakPrivateCommitUsage;
    ULONG64 TotalCommitUsage;
} APP_MEMORY_INFORMATION, *PAPP_MEMORY_INFORMATION;








typedef enum _PROCESS_MEMORY_EXHAUSTION_TYPE {
    PMETypeFailFastOnCommitFailure,
    PMETypeMax
} PROCESS_MEMORY_EXHAUSTION_TYPE, *PPROCESS_MEMORY_EXHAUSTION_TYPE;




typedef struct _PROCESS_MEMORY_EXHAUSTION_INFO {
    USHORT Version;
    USHORT Reserved;
    PROCESS_MEMORY_EXHAUSTION_TYPE Type;
    ULONG_PTR Value;
} PROCESS_MEMORY_EXHAUSTION_INFO, *PPROCESS_MEMORY_EXHAUSTION_INFO;







typedef struct _PROCESS_POWER_THROTTLING_STATE {
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
} PROCESS_POWER_THROTTLING_STATE, *PPROCESS_POWER_THROTTLING_STATE;

typedef struct PROCESS_PROTECTION_LEVEL_INFORMATION {
    DWORD ProtectionLevel;
} PROCESS_PROTECTION_LEVEL_INFORMATION;



__declspec(dllimport)
BOOL
__stdcall
SetProcessInformation(
      HANDLE hProcess,
      PROCESS_INFORMATION_CLASS ProcessInformationClass,
      LPVOID ProcessInformation,
      DWORD ProcessInformationSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessInformation(
      HANDLE hProcess,
      PROCESS_INFORMATION_CLASS ProcessInformationClass,
      LPVOID ProcessInformation,
      DWORD ProcessInformationSize
    );


#line 1187 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"



 
BOOL
__stdcall
GetSystemCpuSetInformation(
      PSYSTEM_CPU_SET_INFORMATION Information,
      ULONG BufferLength,
     PULONG ReturnedLength,
      HANDLE Process,
      ULONG Flags
    );


 
BOOL
__stdcall
GetProcessDefaultCpuSets(
      HANDLE Process,
      PULONG CpuSetIds,
      ULONG CpuSetIdCount,
     PULONG RequiredIdCount
    );


 
BOOL
__stdcall
SetProcessDefaultCpuSets(
      HANDLE Process,
      const ULONG* CpuSetIds,
      ULONG CpuSetIdCount
    );


 
BOOL
__stdcall
GetThreadSelectedCpuSets(
      HANDLE Thread,
      PULONG CpuSetIds,
      ULONG CpuSetIdCount,
     PULONG RequiredIdCount
    );


 
BOOL
__stdcall
SetThreadSelectedCpuSets(
      HANDLE Thread,
      const ULONG* CpuSetIds,
      ULONG CpuSetIdCount
    );


#line 1245 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 1247 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA(
      HANDLE hToken,
      LPCSTR lpApplicationName,
      LPSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCSTR lpCurrentDirectory,
      LPSTARTUPINFOA lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );




#line 1273 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
      LPDWORD lpdwLevel,
      LPDWORD lpdwFlags
    );


#line 1284 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#pragma endregion

__declspec(dllimport)
HRESULT
__stdcall
SetThreadDescription(
      HANDLE hThread,
      PCWSTR lpThreadDescription
    );

 
__declspec(dllimport)
HRESULT
__stdcall
GetThreadDescription(
      HANDLE hThread,
     PWSTR* ppszThreadDescription
    );



}
#line 1307 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"

#line 1309 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processthreadsapi.h"
#line 55 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"










#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#pragma warning(push)
#line 29 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"



#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 39 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"


extern "C" {
#line 43 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#pragma region Application Family or OneCore Family


typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;          
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;

#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
      LPMEMORYSTATUSEX lpBuffer
    );


__declspec(dllimport)
void
__stdcall
GetSystemInfo(
      LPSYSTEM_INFO lpSystemInfo
    );


__declspec(dllimport)
void
__stdcall
GetSystemTime(
      LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
      LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
void
__stdcall
GetLocalTime(
      LPSYSTEMTIME lpSystemTime
    );


#line 125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(deprecated)
__declspec(dllimport)
 
DWORD
__stdcall
GetVersion(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
      const SYSTEMTIME* lpSystemTime
    );


#line 149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion


#pragma region Application Family or OneCore Family


 
__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );




__declspec(dllimport)
ULONGLONG
__stdcall
GetTickCount64(
    void
    );


#line 175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 177 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
BOOL
__stdcall
GetSystemTimeAdjustment(
      PDWORD lpTimeAdjustment,
      PDWORD lpTimeIncrement,
      PBOOL lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetSystemTimeAdjustmentPrecise(
      PDWORD64 lpTimeAdjustment,
      PDWORD64 lpTimeIncrement,
      PBOOL lpTimeAdjustmentDisabled
    );


#line 205 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
UINT
__stdcall
GetSystemDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
UINT
__stdcall
GetSystemDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
 
UINT
__stdcall
GetWindowsDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
 
UINT
__stdcall
GetWindowsDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 265 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

__declspec(dllimport)
 
UINT
__stdcall
GetSystemWindowsDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
UINT
__stdcall
GetSystemWindowsDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 289 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 291 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;

#line 309 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameExA(
      COMPUTER_NAME_FORMAT NameType,
      LPSTR lpBuffer,
      LPDWORD nSize
    );

__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameExW(
      COMPUTER_NAME_FORMAT NameType,
      LPWSTR lpBuffer,
      LPDWORD nSize
    );





#line 339 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 341 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExW(
      COMPUTER_NAME_FORMAT NameType,
      LPCWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
      const SYSTEMTIME* lpSystemTime
    );


#line 368 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(deprecated)
__declspec(dllimport)
 
BOOL
__stdcall
GetVersionExA(
      LPOSVERSIONINFOA lpVersionInformation
    );

__declspec(deprecated)
__declspec(dllimport)
 
BOOL
__stdcall
GetVersionExW(
      LPOSVERSIONINFOW lpVersionInformation
    );





#line 396 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformation(
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
      PDWORD ReturnedLength
    );




__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformationEx(
      LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
      PDWORD ReturnedLength
    );


#line 419 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 421 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
void
__stdcall
GetNativeSystemInfo(
      LPSYSTEM_INFO lpSystemInfo
    );


#line 437 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"



__declspec(dllimport)
void
__stdcall
GetSystemTimePreciseAsFileTime(
      LPFILETIME lpSystemTimeAsFileTime
    );


#line 449 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 451 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
GetProductInfo(
      DWORD dwOSMajorVersion,
      DWORD dwOSMinorVersion,
      DWORD dwSpMajorVersion,
      DWORD dwSpMinorVersion,
      PDWORD pdwReturnedProductType
    );


#line 471 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"



__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
      ULONGLONG ConditionMask,
      ULONG TypeMask,
      UCHAR Condition
    );


#line 485 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"



__declspec(dllimport)
BOOL
__stdcall
GetOsSafeBootMode(
      PDWORD Flags
    );


#line 497 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 499 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region OneCore Family or App Family


__declspec(dllimport)
UINT
__stdcall
EnumSystemFirmwareTables(
      DWORD FirmwareTableProviderSignature,
      PVOID pFirmwareTableEnumBuffer,
      DWORD BufferSize
    );


__declspec(dllimport)
UINT
__stdcall
GetSystemFirmwareTable(
      DWORD FirmwareTableProviderSignature,
      DWORD FirmwareTableID,
      PVOID pFirmwareTableBuffer,
      DWORD BufferSize
    );


#line 526 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameExW(
      LPCWSTR Hostname,
      LPWSTR ComputerName,
      LPDWORD nSize
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
      PULONGLONG TotalMemoryInKilobytes
    );




__declspec(dllimport)
BOOL
__stdcall
SetComputerNameEx2W(
      COMPUTER_NAME_FORMAT NameType,
      DWORD Flags,
      LPCWSTR lpBuffer
    );






__declspec(dllimport)
 
BOOL
__stdcall
SetSystemTimeAdjustment(
      DWORD dwTimeAdjustment,
      BOOL bTimeAdjustmentDisabled
    );


__declspec(dllimport)
 
BOOL
__stdcall
SetSystemTimeAdjustmentPrecise(
      DWORD64 dwTimeAdjustment,
      BOOL bTimeAdjustmentDisabled
    );


__declspec(dllimport)
BOOL
__stdcall
InstallELAMCertificateInfo(
      HANDLE ELAMFile
    );


#line 596 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion



__declspec(dllimport)
BOOL
__stdcall
GetProcessorSystemCycleTime(
      USHORT Group,
      PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
      PDWORD ReturnedLength
    );


#line 611 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
GetOsManufacturingMode(
      PBOOL pbEnabled
    );

#line 625 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 627 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region App Family or OneCore Family




__declspec(dllimport)
HRESULT
__stdcall
GetIntegratedDisplaySize(
      double* sizeInInches
    );


#line 643 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 645 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA(
      LPCSTR lpComputerName
    );

__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW(
      LPCWSTR lpComputerName
    );





#line 669 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExA(
      COMPUTER_NAME_FORMAT NameType,
      LPCSTR lpBuffer
    );




#line 682 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 684 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#pragma endregion


}
#line 689 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"



#pragma warning(pop)





#line 699 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"
#line 700 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 702 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\sysinfoapi.h"

#line 56 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"


#pragma warning(push)
#pragma warning(disable:4668) 
#line 29 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#pragma region Application Family or OneCore Family














#line 46 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
 
LPVOID
__stdcall
VirtualAlloc(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect
    );


__declspec(dllimport)
 
BOOL
__stdcall
VirtualProtect(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
      PDWORD lpflOldProtect
    );


#line 77 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family



#line 84 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"


#line 87 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"


#line 90 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
 
__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
        LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD dwFreeType
    );


__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
      LPCVOID lpAddress,
      PMEMORY_BASIC_INFORMATION lpBuffer,
      SIZE_T dwLength
    );


#line 112 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
 
LPVOID
__stdcall
VirtualAllocEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect
    );


__declspec(dllimport)
 
BOOL
__stdcall
VirtualProtectEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
      PDWORD lpflOldProtect
    );


__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
      HANDLE hProcess,
      LPCVOID lpAddress,
      PMEMORY_BASIC_INFORMATION lpBuffer,
      SIZE_T dwLength
    );


__declspec(dllimport)
 
BOOL
__stdcall
ReadProcessMemory(
      HANDLE hProcess,
      LPCVOID lpBaseAddress,
      LPVOID lpBuffer,
      SIZE_T nSize,
      SIZE_T* lpNumberOfBytesRead
    );


__declspec(dllimport)
 
BOOL
__stdcall
WriteProcessMemory(
      HANDLE hProcess,
      LPVOID lpBaseAddress,
      LPCVOID lpBuffer,
      SIZE_T nSize,
      SIZE_T* lpNumberOfBytesWritten
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingW(
      HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
      DWORD flProtect,
      DWORD dwMaximumSizeHigh,
      DWORD dwMaximumSizeLow,
      LPCWSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
OpenFileMappingW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






__declspec(dllimport)
   
LPVOID
__stdcall
MapViewOfFile(
      HANDLE hFileMappingObject,
      DWORD dwDesiredAccess,
      DWORD dwFileOffsetHigh,
      DWORD dwFileOffsetLow,
      SIZE_T dwNumberOfBytesToMap
    );


__declspec(dllimport)
   
LPVOID
__stdcall
MapViewOfFileEx(
      HANDLE hFileMappingObject,
      DWORD dwDesiredAccess,
      DWORD dwFileOffsetHigh,
      DWORD dwFileOffsetLow,
      SIZE_T dwNumberOfBytesToMap,
      LPVOID lpBaseAddress
    );


#line 242 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family



#line 249 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"


#line 252 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"


#line 255 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"


#line 258 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
 
__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
      HANDLE hProcess,
        LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD dwFreeType
    );


__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
      LPCVOID lpBaseAddress,
      SIZE_T dwNumberOfBytesToFlush
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
      LPCVOID lpBaseAddress
    );


#line 288 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetProcessWorkingSetSizeEx(
      HANDLE hProcess,
      PSIZE_T lpMinimumWorkingSetSize,
      PSIZE_T lpMaximumWorkingSetSize,
      PDWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSizeEx(
      HANDLE hProcess,
      SIZE_T dwMinimumWorkingSetSize,
      SIZE_T dwMaximumWorkingSetSize,
      DWORD Flags
    );


#line 325 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
      LPVOID lpAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
      LPVOID lpAddress,
      SIZE_T dwSize
    );


#line 349 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
UINT
__stdcall
GetWriteWatch(
      DWORD dwFlags,
      PVOID lpBaseAddress,
      SIZE_T dwRegionSize,
      PVOID* lpAddresses,
      ULONG_PTR* lpdwCount,
      LPDWORD lpdwGranularity
    );


__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
      LPVOID lpBaseAddress,
      SIZE_T dwRegionSize
    );


#line 378 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMemoryResourceNotification(
      MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );


__declspec(dllimport)
 
BOOL
__stdcall
QueryMemoryResourceNotification(
      HANDLE ResourceNotificationHandle,
      PBOOL ResourceState
    );


#line 410 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"









__declspec(dllimport)
 
BOOL
__stdcall
GetSystemFileCacheSize(
      PSIZE_T lpMinimumFileCacheSize,
      PSIZE_T lpMaximumFileCacheSize,
      PDWORD lpFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetSystemFileCacheSize(
      SIZE_T MinimumFileCacheSize,
      SIZE_T MaximumFileCacheSize,
      DWORD Flags
    );


#line 441 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"



__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingNumaW(
      HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
      DWORD flProtect,
      DWORD dwMaximumSizeHigh,
      DWORD dwMaximumSizeLow,
      LPCWSTR lpName,
      DWORD nndPreferred
    );






#line 464 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"



typedef struct _WIN32_MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY;

__declspec(dllimport)
BOOL
__stdcall
PrefetchVirtualMemory(
      HANDLE hProcess,
      ULONG_PTR NumberOfEntries,
      PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,
      ULONG Flags
    );


#line 484 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 486 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingFromApp(
      HANDLE hFile,
      PSECURITY_ATTRIBUTES SecurityAttributes,
      ULONG PageProtection,
      ULONG64 MaximumSize,
      PCWSTR Name
    );


__declspec(dllimport)
   
PVOID
__stdcall
MapViewOfFileFromApp(
      HANDLE hFileMappingObject,
      ULONG DesiredAccess,
      ULONG64 FileOffset,
      SIZE_T NumberOfBytesToMap
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFileEx(
      PVOID BaseAddress,
      ULONG UnmapFlags
    );


#line 528 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 530 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
 
BOOL
__stdcall
AllocateUserPhysicalPages(
      HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );


__declspec(dllimport)
 
BOOL
__stdcall
FreeUserPhysicalPages(
      HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );


__declspec(dllimport)
 
BOOL
__stdcall
MapUserPhysicalPages(
      PVOID VirtualAddress,
      ULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );


#line 571 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"



__declspec(dllimport)
 
BOOL
__stdcall
AllocateUserPhysicalPagesNuma(
      HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray,
      DWORD nndPreferred
    );


__declspec(dllimport)
 
LPVOID
__stdcall
VirtualAllocExNuma(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect,
      DWORD nndPreferred
    );


#line 601 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"





__declspec(dllimport)
 
BOOL
__stdcall
GetMemoryErrorHandlingCapabilities(
      PULONG Capabilities
    );


 
typedef
void
__stdcall
BAD_MEMORY_CALLBACK_ROUTINE(
    void
    );

typedef BAD_MEMORY_CALLBACK_ROUTINE *PBAD_MEMORY_CALLBACK_ROUTINE;

__declspec(dllimport)
 
PVOID
__stdcall
RegisterBadMemoryNotification(
      PBAD_MEMORY_CALLBACK_ROUTINE Callback
    );


__declspec(dllimport)
 
BOOL
__stdcall
UnregisterBadMemoryNotification(
      PVOID RegistrationHandle
    );


#line 644 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 646 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family












typedef enum OFFER_PRIORITY {
    VmOfferPriorityVeryLow = 1,
    VmOfferPriorityLow,
    VmOfferPriorityBelowNormal,
    VmOfferPriorityNormal
} OFFER_PRIORITY;

DWORD
__stdcall
OfferVirtualMemory(
      PVOID VirtualAddress,
      SIZE_T Size,
      OFFER_PRIORITY Priority
    );


DWORD
__stdcall
ReclaimVirtualMemory(
      void const* VirtualAddress,
      SIZE_T Size
    );


DWORD
__stdcall
DiscardVirtualMemory(
      PVOID VirtualAddress,
      SIZE_T Size
    );


#line 694 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 696 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 698 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
SetProcessValidCallTargets(
      HANDLE hProcess,
      PVOID VirtualAddress,
      SIZE_T RegionSize,
      ULONG NumberOfOffsets,
      PCFG_CALL_TARGET_INFO OffsetInformation
    );


__declspec(dllimport)
 
 
PVOID
__stdcall
VirtualAllocFromApp(
      PVOID BaseAddress,
      SIZE_T Size,
      ULONG AllocationType,
      ULONG Protection
    );


__declspec(dllimport)
 
BOOL
__stdcall
VirtualProtectFromApp(
      PVOID Address,
      SIZE_T Size,
      ULONG NewProtection,
      PULONG OldProtection
    );


__declspec(dllimport)
 
HANDLE
__stdcall
OpenFileMappingFromApp(
      ULONG DesiredAccess,
      BOOL InheritHandle,
      PCWSTR Name
    );


#line 754 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 756 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family





























































































#line 853 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




typedef enum WIN32_MEMORY_INFORMATION_CLASS {
    MemoryRegionInfo
} WIN32_MEMORY_INFORMATION_CLASS;


#pragma warning(push)
#pragma warning(disable:4201)   
#pragma warning(disable:4214)   
#line 869 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

typedef struct WIN32_MEMORY_REGION_INFORMATION {
    PVOID AllocationBase;
    ULONG AllocationProtect;

    union {
        ULONG Flags;

        struct {
            ULONG Private : 1;
            ULONG MappedDataFile : 1;
            ULONG MappedImage : 1;
            ULONG MappedPageFile : 1;
            ULONG MappedPhysical : 1;
            ULONG DirectMapped : 1;
            ULONG Reserved : 26;
        } ;
    } ;

    SIZE_T RegionSize;
    SIZE_T CommitSize;
} WIN32_MEMORY_REGION_INFORMATION;


#pragma warning(pop)
#line 895 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

__declspec(dllimport)
 
BOOL
__stdcall
QueryVirtualMemoryInformation(
      HANDLE Process,
      const void* VirtualAddress,
      WIN32_MEMORY_INFORMATION_CLASS MemoryInformationClass,
      PVOID MemoryInformation,
      SIZE_T MemoryInformationSize,
      PSIZE_T ReturnSize
    );


#line 911 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 913 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
   
PVOID
__stdcall
MapViewOfFileNuma2(
      HANDLE FileMappingHandle,
      HANDLE ProcessHandle,
      ULONG64 Offset,
      PVOID BaseAddress,
      SIZE_T ViewSize,
      ULONG AllocationType,
      ULONG PageProtection,
      ULONG PreferredNode
    );




__forceinline
   
PVOID
MapViewOfFile2(
      HANDLE FileMappingHandle,
      HANDLE ProcessHandle,
      ULONG64 Offset,
      PVOID BaseAddress,
      SIZE_T ViewSize,
      ULONG AllocationType,
      ULONG PageProtection
    )
{
    return MapViewOfFileNuma2(FileMappingHandle,
                              ProcessHandle,
                              Offset,
                              BaseAddress,
                              ViewSize,
                              AllocationType,
                              PageProtection,
                              ((DWORD) -1));
}

#line 962 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 964 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 966 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile2(
      HANDLE Process,
      PVOID BaseAddress,
      ULONG UnmapFlags
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualUnlockEx(
      HANDLE Process,
      LPVOID Address,
      SIZE_T Size
    );


#line 992 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
 
PVOID
__stdcall
VirtualAlloc2(
      HANDLE Process,
      PVOID BaseAddress,
      SIZE_T Size,
      ULONG AllocationType,
      ULONG PageProtection,
      MEM_EXTENDED_PARAMETER* ExtendedParameters,
      ULONG ParameterCount
    );


__declspec(dllimport)
   
PVOID
__stdcall
MapViewOfFile3(
      HANDLE FileMapping,
      HANDLE Process,
      PVOID BaseAddress,
      ULONG64 Offset,
      SIZE_T ViewSize,
      ULONG AllocationType,
      ULONG PageProtection,
      MEM_EXTENDED_PARAMETER* ExtendedParameters,
      ULONG ParameterCount
    );


#line 1033 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
 
PVOID
__stdcall
VirtualAlloc2FromApp(
      HANDLE Process,
      PVOID BaseAddress,
      SIZE_T Size,
      ULONG AllocationType,
      ULONG PageProtection,
      MEM_EXTENDED_PARAMETER* ExtendedParameters,
      ULONG ParameterCount
    );


__declspec(dllimport)
   
PVOID
__stdcall
MapViewOfFile3FromApp(
      HANDLE FileMapping,
      HANDLE Process,
      PVOID BaseAddress,
      ULONG64 Offset,
      SIZE_T ViewSize,
      ULONG AllocationType,
      ULONG PageProtection,
      MEM_EXTENDED_PARAMETER* ExtendedParameters,
      ULONG ParameterCount
    );


#line 1072 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#pragma endregion

#line 1075 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"


#pragma warning(pop)
#line 1079 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"


}
#line 1083 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"

#line 1085 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\memoryapi.h"
#line 57 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\enclaveapi.h"











#pragma once
#line 14 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\enclaveapi.h"










extern "C" {
#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\enclaveapi.h"





#pragma region Desktop Family or OneCore Or App Family


__declspec(dllimport)
 
BOOL
__stdcall
IsEnclaveTypeSupported(
      DWORD flEnclaveType
    );


__declspec(dllimport)
 
 
LPVOID
__stdcall
CreateEnclave(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      SIZE_T dwInitialCommitment,
      DWORD flEnclaveType,
      LPCVOID lpEnclaveInformation,
      DWORD dwInfoLength,
      LPDWORD lpEnclaveError
    );


__declspec(dllimport)
 
BOOL
__stdcall
LoadEnclaveData(
      HANDLE hProcess,
      LPVOID lpAddress,
      LPCVOID lpBuffer,
      SIZE_T nSize,
      DWORD flProtect,
      LPCVOID lpPageInformation,
      DWORD dwInfoLength,
      PSIZE_T lpNumberOfBytesWritten,
      LPDWORD lpEnclaveError
    );


__declspec(dllimport)
 
BOOL
__stdcall
InitializeEnclave(
      HANDLE hProcess,
      LPVOID lpAddress,
      LPCVOID lpEnclaveInformation,
      DWORD dwInfoLength,
      LPDWORD lpEnclaveError
    );


#line 91 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\enclaveapi.h"
#pragma endregion




#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
BOOL
__stdcall
LoadEnclaveImageA(
      LPVOID lpEnclaveAddress,
      LPCSTR lpImageName
    );

__declspec(dllimport)
 
BOOL
__stdcall
LoadEnclaveImageW(
      LPVOID lpEnclaveAddress,
      LPCWSTR lpImageName
    );





#line 122 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\enclaveapi.h"

__declspec(dllimport)
 
BOOL
__stdcall
CallEnclave(
      LPENCLAVE_ROUTINE lpRoutine,
      LPVOID lpParameter,
      BOOL fWaitForThread,
      LPVOID* lpReturnValue
    );


__declspec(dllimport)
 
BOOL
__stdcall
TerminateEnclave(
      LPVOID lpAddress,
      BOOL fWait
    );


__declspec(dllimport)
 
BOOL
__stdcall
DeleteEnclave(
      LPVOID lpAddress
    );


#line 155 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\enclaveapi.h"
#pragma endregion






}
#line 164 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\enclaveapi.h"

#line 166 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\enclaveapi.h"


#line 58 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoollegacyapiset.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoollegacyapiset.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoollegacyapiset.h"





#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
QueueUserWorkItem(
      LPTHREAD_START_ROUTINE Function,
      PVOID Context,
      ULONG Flags
    );


__declspec(dllimport)
 
BOOL
__stdcall
UnregisterWaitEx(
      HANDLE WaitHandle,
      HANDLE CompletionEvent
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateTimerQueue(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
CreateTimerQueueTimer(
     PHANDLE phNewTimer,
      HANDLE TimerQueue,
      WAITORTIMERCALLBACK Callback,
      PVOID Parameter,
      DWORD DueTime,
      DWORD Period,
      ULONG Flags
    );


__declspec(dllimport)
 
BOOL
__stdcall
ChangeTimerQueueTimer(
      HANDLE TimerQueue,
      HANDLE Timer,
      ULONG DueTime,
      ULONG Period
    );


__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueueTimer(
      HANDLE TimerQueue,
      HANDLE Timer,
      HANDLE CompletionEvent
    );


__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueueEx(
      HANDLE TimerQueue,
      HANDLE CompletionEvent
    );


#line 109 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoollegacyapiset.h"
#pragma endregion


}
#line 114 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoollegacyapiset.h"

#line 116 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoollegacyapiset.h"
#line 59 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoolapiset.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoolapiset.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoolapiset.h"





#pragma region Application Family or OneCore Family


typedef
void
(__stdcall *PTP_WIN32_IO_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
      PVOID                 Overlapped,
             ULONG                 IoResult,
             ULONG_PTR             NumberOfBytesTransferred,
          PTP_IO                Io
    );



__declspec(dllimport)
 
PTP_POOL
__stdcall
CreateThreadpool(
      PVOID reserved
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolThreadMaximum(
      PTP_POOL ptpp,
      DWORD cthrdMost
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolThreadMinimum(
      PTP_POOL ptpp,
      DWORD cthrdMic
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolStackInformation(
      PTP_POOL ptpp,
      PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
BOOL
__stdcall
QueryThreadpoolStackInformation(
      PTP_POOL ptpp,
      PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpool(
      PTP_POOL ptpp
    );


__declspec(dllimport)
 
PTP_CLEANUP_GROUP
__stdcall
CreateThreadpoolCleanupGroup(
    void
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroupMembers(
      PTP_CLEANUP_GROUP ptpcg,
      BOOL fCancelPendingCallbacks,
      PVOID pvCleanupContext
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroup(
      PTP_CLEANUP_GROUP ptpcg
    );


__declspec(dllimport)
void
__stdcall
SetEventWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE evt
    );


__declspec(dllimport)
void
__stdcall
ReleaseSemaphoreWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE sem,
      DWORD crel
    );


__declspec(dllimport)
void
__stdcall
ReleaseMutexWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE mut
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSectionWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      PCRITICAL_SECTION pcs
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HMODULE mod
    );


__declspec(dllimport)
BOOL
__stdcall
CallbackMayRunLong(
      PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
void
__stdcall
DisassociateCurrentThreadFromCallback(
      PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
 
BOOL
__stdcall
TrySubmitThreadpoolCallback(
      PTP_SIMPLE_CALLBACK pfns,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
 
PTP_WORK
__stdcall
CreateThreadpoolWork(
      PTP_WORK_CALLBACK pfnwk,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SubmitThreadpoolWork(
      PTP_WORK pwk
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWorkCallbacks(
      PTP_WORK pwk,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWork(
      PTP_WORK pwk
    );


__declspec(dllimport)
 
PTP_TIMER
__stdcall
CreateThreadpoolTimer(
      PTP_TIMER_CALLBACK pfnti,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolTimer(
      PTP_TIMER pti,
      PFILETIME pftDueTime,
      DWORD msPeriod,
      DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
IsThreadpoolTimerSet(
      PTP_TIMER pti
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolTimerCallbacks(
      PTP_TIMER pti,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolTimer(
      PTP_TIMER pti
    );


__declspec(dllimport)
 
PTP_WAIT
__stdcall
CreateThreadpoolWait(
      PTP_WAIT_CALLBACK pfnwa,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolWait(
      PTP_WAIT pwa,
      HANDLE h,
      PFILETIME pftTimeout
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWaitCallbacks(
      PTP_WAIT pwa,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWait(
      PTP_WAIT pwa
    );


__declspec(dllimport)
 
PTP_IO
__stdcall
CreateThreadpoolIo(
      HANDLE fl,
      PTP_WIN32_IO_CALLBACK pfnio,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
StartThreadpoolIo(
      PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
CancelThreadpoolIo(
      PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolIoCallbacks(
      PTP_IO pio,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolIo(
      PTP_IO pio
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolTimerEx(
      PTP_TIMER pti,
      PFILETIME pftDueTime,
      DWORD msPeriod,
      DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolWaitEx(
      PTP_WAIT pwa,
      HANDLE h,
      PFILETIME pftTimeout,
      PVOID Reserved
    );


#line 387 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoolapiset.h"

#line 389 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoolapiset.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




#line 397 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoolapiset.h"

#line 399 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoolapiset.h"
#pragma endregion


}
#line 404 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoolapiset.h"

#line 406 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\threadpoolapiset.h"
#line 60 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi.h"

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
IsProcessInJob(
      HANDLE ProcessHandle,
      HANDLE JobHandle,
      PBOOL Result
    );


#line 41 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi.h"

#line 43 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi.h"
#pragma endregion


}
#line 48 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi.h"

#line 50 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi.h"
#line 61 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi2.h"










#pragma once









extern "C" {
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi2.h"

#pragma region Desktop Family or OneCore Family



typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION {
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PCWSTR VolumeName;
    ULONG BaseIoSize;
    ULONG ControlFlags;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION;

__declspec(dllimport)
HANDLE
__stdcall
CreateJobObjectW(
      LPSECURITY_ATTRIBUTES lpJobAttributes,
      LPCWSTR lpName
    );


__declspec(dllimport)
void
__stdcall
FreeMemoryJobObject(
        void* Buffer
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenJobObjectW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );


__declspec(dllimport)
BOOL
__stdcall
AssignProcessToJobObject(
      HANDLE hJob,
      HANDLE hProcess
    );


__declspec(dllimport)
BOOL
__stdcall
TerminateJobObject(
      HANDLE hJob,
      UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
SetInformationJobObject(
      HANDLE hJob,
      JOBOBJECTINFOCLASS JobObjectInformationClass,
      LPVOID lpJobObjectInformation,
      DWORD cbJobObjectInformationLength
    );


__declspec(dllimport)
DWORD
__stdcall
SetIoRateControlInformationJobObject(
      HANDLE hJob,
      JOBOBJECT_IO_RATE_CONTROL_INFORMATION* IoRateControlInfo
    );

__declspec(dllimport)
BOOL
__stdcall
QueryInformationJobObject(
      HANDLE hJob,
      JOBOBJECTINFOCLASS JobObjectInformationClass,
      LPVOID lpJobObjectInformation,
      DWORD cbJobObjectInformationLength,
      LPDWORD lpReturnLength
    );


__declspec(dllimport)
DWORD
__stdcall
QueryIoRateControlInformationJobObject(
      HANDLE hJob,
      PCWSTR VolumeName,
     JOBOBJECT_IO_RATE_CONTROL_INFORMATION** InfoBlocks,
      ULONG* InfoBlockCount
    );

#line 123 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi2.h"

#pragma endregion


}
#line 129 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi2.h"

#line 131 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\jobapi2.h"
#line 62 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"

#pragma region Desktop Family or OneCore Family






__declspec(dllimport)
BOOL
__stdcall
Wow64DisableWow64FsRedirection(
      PVOID* OldValue
    );


__declspec(dllimport)
BOOL
__stdcall
Wow64RevertWow64FsRedirection(
      PVOID OlValue
    );


#line 49 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"
#line 50 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"

#line 52 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
IsWow64Process(
      HANDLE hProcess,
      PBOOL Wow64Process
    );


#line 69 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"

#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family






__declspec(dllimport)
 
 
UINT
__stdcall
GetSystemWow64DirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
 
UINT
__stdcall
GetSystemWow64DirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"

#line 107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"
#line 108 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"



__declspec(dllimport)
USHORT
__stdcall
Wow64SetThreadDefaultGuestMachine(
      USHORT Machine
    );


#line 120 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"

#line 122 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
IsWow64Process2(
      HANDLE hProcess,
      USHORT* pProcessMachine,
      USHORT* pNativeMachine
    );


#line 140 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"

#line 142 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
 
 
UINT
__stdcall
GetSystemWow64Directory2A(
      LPSTR lpBuffer,
      UINT uSize,
      WORD ImageFileMachineType
    );

__declspec(dllimport)
 
 
UINT
__stdcall
GetSystemWow64Directory2W(
      LPWSTR lpBuffer,
      UINT uSize,
      WORD ImageFileMachineType
    );





#line 176 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"

#line 178 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"



__declspec(dllimport)
 
HRESULT
__stdcall
IsWow64GuestMachineSupported(
      USHORT WowGuestMachine,
      BOOL* MachineIsSupported
    );


#line 192 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"

#line 194 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"
#pragma endregion


}
#line 199 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"

#line 201 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wow64apiset.h"
#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#pragma region Desktop Family or OneCore Family














typedef struct tagENUMUILANG {
    ULONG  NumOfEnumUILang;    
    ULONG  SizeOfEnumUIBuffer; 
    LANGID *pEnumUIBuffer;
} ENUMUILANG, *PENUMUILANG;



typedef BOOL (__stdcall* ENUMRESLANGPROCA)(
      HMODULE hModule,
      LPCSTR lpType,
      LPCSTR lpName,
      WORD wLanguage,
      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage,
      LONG_PTR lParam);




#line 65 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(
      HMODULE hModule,
      LPCSTR lpType,
      LPSTR lpName,
      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(
      HMODULE hModule,
      LPCWSTR lpType,
      LPWSTR lpName,
      LONG_PTR lParam);




#line 81 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(
      HMODULE hModule,
      LPSTR lpType,
      LONG_PTR lParam
    );
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(
      HMODULE hModule,
      LPWSTR lpType,
      LONG_PTR lParam
    );




#line 97 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

























#line 123 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
      HMODULE hLibModule
    );


#line 139 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceExW(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage
    );






#line 161 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
int
__stdcall
FindStringOrdinal(
      DWORD dwFindStringOrdinalFlags,
      LPCWSTR lpStringSource,
      int cchSource,
      LPCWSTR lpStringValue,
      int cchValue,
      BOOL bIgnoreCase
    );


#line 182 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
      HMODULE hLibModule
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread(
      HMODULE hLibModule,
      DWORD dwExitCode
    );

    
#line 202 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
FreeResource(
      HGLOBAL hResData
    );

    
#line 216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
 
DWORD
__stdcall
GetModuleFileNameA(
      HMODULE hModule,
      LPSTR lpFilename,
      DWORD nSize
    );

__declspec(dllimport)
 
 
DWORD
__stdcall
GetModuleFileNameW(
      HMODULE hModule,
      LPWSTR lpFilename,
      DWORD nSize
    );





#line 248 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 250 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleA(
      LPCSTR lpModuleName
    );

__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleW(
      LPCWSTR lpModuleName
    );





#line 278 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"







typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXA)(
             DWORD        dwFlags,
         LPCSTR     lpModuleName,
     HMODULE*    phModule
    );
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXW)(
             DWORD        dwFlags,
         LPCWSTR     lpModuleName,
     HMODULE*    phModule
    );




#line 306 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExA(
      DWORD dwFlags,
      LPCSTR lpModuleName,
      HMODULE* phModule
    );

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExW(
      DWORD dwFlags,
      LPCWSTR lpModuleName,
      HMODULE* phModule
    );





#line 330 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 332 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 334 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
      HMODULE hModule,
      LPCSTR lpProcName
    );


#line 349 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryExA(
      LPCSTR lpLibFileName,
      HANDLE hFile,
      DWORD dwFlags
    );

__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryExW(
      LPCWSTR lpLibFileName,
      HANDLE hFile,
      DWORD dwFlags
    );





#line 379 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"






























#line 410 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"





#line 416 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

__declspec(dllimport)
 
HGLOBAL
__stdcall
LoadResource(
      HMODULE hModule,
      HRSRC hResInfo
    );


#line 428 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
int
__stdcall
LoadStringA(
      HINSTANCE hInstance,
      UINT uID,
      LPSTR lpBuffer,
      int cchBufferMax
    );

__declspec(dllimport)
int
__stdcall
LoadStringW(
      HINSTANCE hInstance,
      UINT uID,
      LPWSTR lpBuffer,
      int cchBufferMax
    );





#line 458 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 460 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
LPVOID
__stdcall
LockResource(
      HGLOBAL hResData
    );


__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
      HMODULE hModule,
      HRSRC hResInfo
    );


#line 483 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;

__declspec(dllimport)
DLL_DIRECTORY_COOKIE
__stdcall
AddDllDirectory(
      PCWSTR NewDirectory
    );


__declspec(dllimport)
BOOL
__stdcall
RemoveDllDirectory(
      DLL_DIRECTORY_COOKIE Cookie
    );


__declspec(dllimport)
BOOL
__stdcall
SetDefaultDllDirectories(
      DWORD DirectoryFlags
    );


#line 515 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExA(
      HMODULE hModule,
      LPCSTR lpType,
      LPCSTR lpName,
      ENUMRESLANGPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExW(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      ENUMRESLANGPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );





#line 553 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExA(
      HMODULE hModule,
      LPCSTR lpType,
      ENUMRESNAMEPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExW(
      HMODULE hModule,
      LPCWSTR lpType,
      ENUMRESNAMEPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );





#line 583 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExA(
      HMODULE hModule,
      ENUMRESTYPEPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExW(
      HMODULE hModule,
      ENUMRESTYPEPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );





#line 611 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 613 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 615 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceW(
      HMODULE hModule,
      LPCWSTR lpName,
      LPCWSTR lpType
    );






__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryA(
      LPCSTR lpLibFileName
    );

__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryW(
      LPCWSTR lpLibFileName
    );





#line 656 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 658 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
      HMODULE hModule,
      LPCWSTR lpType,
      ENUMRESNAMEPROCW lpEnumFunc,
      LONG_PTR lParam
    );






#line 679 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"
#pragma endregion


}
#line 684 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 686 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\libloaderapi.h"

#line 64 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"






#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
AccessCheck(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPWSTR ObjectTypeName,
      LPWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      DWORD DesiredAccess,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByType(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID PrincipalSelfSid,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultList(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID PrincipalSelfSid,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList,
      LPBOOL pfGenerateOnClose
    );






#line 189 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


#line 218 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID* ObjectTypeGuid,
      GUID* InheritedObjectTypeGuid,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID* ObjectTypeGuid,
      GUID* InheritedObjectTypeGuid,
      PSID pSid
    );


#line 275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
AddAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD dwStartingAceIndex,
      LPVOID pAceList,
      DWORD nAceListLength
    );


#line 293 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD dwAccessMask,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD dwAccessMask,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID* ObjectTypeGuid,
      GUID* InheritedObjectTypeGuid,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );


#line 342 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
AddMandatoryAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD MandatoryPolicy,
      PSID pLabelSid
    );


#line 362 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"

#line 364 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
AddResourceAttributeAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid,
      PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,
      PDWORD pReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddScopedPolicyIDAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


#line 398 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#line 401 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups(
      HANDLE TokenHandle,
      BOOL ResetToDefault,
      PTOKEN_GROUPS NewState,
      DWORD BufferLength,
      PTOKEN_GROUPS PreviousState,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges(
      HANDLE TokenHandle,
      BOOL DisableAllPrivileges,
      PTOKEN_PRIVILEGES NewState,
      DWORD BufferLength,
      PTOKEN_PRIVILEGES PreviousState,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid(
      PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
      BYTE nSubAuthorityCount,
      DWORD nSubAuthority0,
      DWORD nSubAuthority1,
      DWORD nSubAuthority2,
      DWORD nSubAuthority3,
      DWORD nSubAuthority4,
      DWORD nSubAuthority5,
      DWORD nSubAuthority6,
      DWORD nSubAuthority7,
     PSID* pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
      PLUID Luid
    );


#line 458 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted(
      DWORD GrantedAccess,
      DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted(
      DWORD GrantedAccess,
      DWORD DesiredAccess
    );


#line 482 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembership(
      HANDLE TokenHandle,
      PSID SidToCheck,
      PBOOL IsMember
    );


#line 498 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
CheckTokenCapability(
      HANDLE TokenHandle,
      PSID CapabilitySidToCheck,
      PBOOL HasCapability
    );


__declspec(dllimport)
BOOL
__stdcall
GetAppContainerAce(
      PACL Acl,
      DWORD StartingAceIndex,
     PVOID* AppContainerAce,
      DWORD* AppContainerAceIndex
    );


#line 527 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembershipEx(
      HANDLE TokenHandle,
      PSID SidToCheck,
      DWORD Flags,
      PBOOL IsMember
    );


#line 544 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#line 547 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
     PSECURITY_DESCRIPTOR* NewSecurityDescriptor,
      GUID* ObjectType,
      BOOLEAN IsDirectoryObject,
      PGENERIC_MAPPING GenericMapping
    );


#line 565 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
CopySid(
      DWORD nDestinationSidLength,
      PSID pDestinationSid,
      PSID pSourceSid
    );


#line 581 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR* NewDescriptor,
      BOOL IsDirectoryObject,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityEx(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR* NewDescriptor,
      GUID* ObjectType,
      BOOL IsContainerObject,
      ULONG AutoInheritFlags,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR* NewDescriptor,
      GUID** ObjectTypes,
      ULONG GuidCount,
      BOOL IsContainerObject,
      ULONG AutoInheritFlags,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
      HANDLE ExistingTokenHandle,
      DWORD Flags,
      DWORD DisableSidCount,
      PSID_AND_ATTRIBUTES SidsToDisable,
      DWORD DeletePrivilegeCount,
      PLUID_AND_ATTRIBUTES PrivilegesToDelete,
      DWORD RestrictedSidCount,
      PSID_AND_ATTRIBUTES SidsToRestrict,
     PHANDLE NewTokenHandle
    );


#line 647 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
 
BOOL
__stdcall
CreateWellKnownSid(
      WELL_KNOWN_SID_TYPE WellKnownSidType,
      PSID DomainSid,
      PSID pSid,
      DWORD* cbSid
    );


__declspec(dllimport)
 
BOOL
__stdcall
EqualDomainSid(
      PSID pSid1,
      PSID pSid2,
      BOOL* pfEqual
    );


#line 678 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteAce(
      PACL pAcl,
      DWORD dwAceIndex
    );


#line 689 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity(
        PSECURITY_DESCRIPTOR* ObjectDescriptor
    );


#line 703 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
      HANDLE ExistingTokenHandle,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
     PHANDLE DuplicateTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
      HANDLE hExistingToken,
      DWORD dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpTokenAttributes,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
      TOKEN_TYPE TokenType,
     PHANDLE phNewToken
    );


#line 732 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid(
      PSID pSid1,
      PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid(
      PSID pSid1,
      PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce(
      PACL pAcl,
     LPVOID* pAce
    );


#line 765 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
PVOID
__stdcall
FreeSid(
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce(
      PACL pAcl,
      DWORD dwAceIndex,
     LPVOID* pAce
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation(
      PACL pAcl,
      LPVOID pAclInformation,
      DWORD nAclInformationLength,
      ACL_INFORMATION_CLASS dwAclInformationClass
    );


#line 800 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW(
      LPCWSTR lpFileName,
      SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD nLength,
      LPDWORD lpnLengthNeeded
    );






#line 822 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity(
      HANDLE Handle,
      SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD nLength,
      LPDWORD lpnLengthNeeded
    );


__declspec(dllimport)
 
 
DWORD
__stdcall
GetLengthSid(
        PSID pSid
    );


#line 850 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
BOOL
__stdcall
GetPrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ObjectDescriptor,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ResultantDescriptor,
      DWORD DescriptorLength,
      PDWORD ReturnLength
    );


#line 869 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSECURITY_DESCRIPTOR_CONTROL pControl,
      LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPBOOL lpbDaclPresent,
     PACL* pDacl,
      LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID* pGroup,
      LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength(
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID* pOwner,
      LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPBOOL lpbSaclPresent,
     PACL* pSacl,
      LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority(
      PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired(
      UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority(
      PSID pSid,
      DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount(
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation(
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      LPVOID TokenInformation,
      DWORD TokenInformationLength,
      PDWORD ReturnLength
    );




__declspec(dllimport)
 
BOOL
__stdcall
GetWindowsAccountDomainSid(
      PSID pSid,
      PSID pDomainSid,
      DWORD* cbDomainSid
    );


#line 1002 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"

#line 1004 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
      HANDLE ThreadHandle
    );


 
__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
      HANDLE hToken
    );


 
__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


#line 1036 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl(
      PACL pAcl,
      DWORD nAclLength,
      DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSid(
      PSID Sid,
      PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
      BYTE nSubAuthorityCount
    );


#line 1071 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
      HANDLE TokenHandle
    );


#line 1085 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl(
      PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor(
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSid(
      PSID pSid
    );




__declspec(dllimport)
BOOL
__stdcall
IsWellKnownSid(
      PSID pSid,
      WELL_KNOWN_SID_TYPE WellKnownSidType
    );


#line 1126 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"

__declspec(dllimport)
 
BOOL
__stdcall
MakeAbsoluteSD(
      PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
      PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
      LPDWORD lpdwAbsoluteSecurityDescriptorSize,
      PACL pDacl,
      LPDWORD lpdwDaclSize,
      PACL pSacl,
      LPDWORD lpdwSaclSize,
      PSID pOwner,
      LPDWORD lpdwOwnerSize,
      PSID pPrimaryGroup,
      LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
 
BOOL
__stdcall
MakeSelfRelativeSD(
      PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
      PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
      LPDWORD lpdwBufferLength
    );


#line 1158 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
void
__stdcall
MapGenericMask(
      PDWORD AccessMask,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPWSTR ObjectTypeName,
      LPWSTR ObjectName,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      DWORD GrantedAccess,
      PPRIVILEGE_SET Privileges,
      BOOL ObjectCreation,
      BOOL AccessGranted,
      LPBOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );






__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck(
      HANDLE ClientToken,
      PPRIVILEGE_SET RequiredPrivileges,
      LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW(
      LPCWSTR SubsystemName,
      LPCWSTR ServiceName,
      HANDLE ClientToken,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );








__declspec(dllimport)
void
__stdcall
QuerySecurityAccessMask(
      SECURITY_INFORMATION SecurityInformation,
      LPDWORD DesiredAccess
    );


#line 1278 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
RevertToSelf(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation(
      PACL pAcl,
      LPVOID pAclInformation,
      DWORD nAclInformationLength,
      ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW(
      LPCWSTR lpFileName,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );





#line 1312 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity(
      HANDLE Handle,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );


#line 1328 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity(
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor,
      PGENERIC_MAPPING GenericMapping,
      HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurityEx(
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor,
      ULONG AutoInheritFlags,
      PGENERIC_MAPPING GenericMapping,
      HANDLE Token
    );




__declspec(dllimport)
void
__stdcall
SetSecurityAccessMask(
      SECURITY_INFORMATION SecurityInformation,
      LPDWORD DesiredAccess
    );


#line 1370 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"

#line 1372 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorControl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
      SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      BOOL bDaclPresent,
      PACL pDacl,
      BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID pGroup,
      BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID pOwner,
      BOOL bOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      BOOL bSaclPresent,
      PACL pSacl,
      BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation(
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      LPVOID TokenInformation,
      DWORD TokenInformationLength
    );


#line 1450 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetCachedSigningLevel(
      PHANDLE SourceFiles,
      ULONG SourceFileCount,
      ULONG Flags,
      HANDLE TargetFile
    );


__declspec(dllimport)
BOOL
__stdcall
GetCachedSigningLevel(
      HANDLE File,
      PULONG Flags,
      PULONG SigningLevel,
      PUCHAR Thumbprint,
      PULONG ThumbprintSize,
      PULONG ThumbprintAlgorithm
    );


#line 1482 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#line 1485 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
 

#pragma region Application Family or OneCore Family


__declspec(dllimport)
LONG
__stdcall
CveEventWrite(
      PCWSTR CveId,
      PCWSTR AdditionalDetails
    );


#line 1500 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#line 1503 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
 

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
DeriveCapabilitySidsFromName(
      LPCWSTR CapName,
     PSID** CapabilityGroupSids,
      DWORD* CapabilityGroupSidCount,
     PSID** CapabilitySids,
      DWORD* CapabilitySidCount
    );


#line 1521 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#pragma endregion

#line 1524 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
 

}
#line 1528 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"

#line 1530 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securitybaseapi.h"
#line 65 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namespaceapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namespaceapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namespaceapi.h"

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
HANDLE
__stdcall
CreatePrivateNamespaceW(
      LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
      LPVOID lpBoundaryDescriptor,
      LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenPrivateNamespaceW(
      LPVOID lpBoundaryDescriptor,
      LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
BOOLEAN
__stdcall
ClosePrivateNamespace(
      HANDLE Handle,
      ULONG Flags
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateBoundaryDescriptorW(
      LPCWSTR Name,
      ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
AddSIDToBoundaryDescriptor(
      HANDLE* BoundaryDescriptor,
      PSID RequiredSid
    );


__declspec(dllimport)
void
__stdcall
DeleteBoundaryDescriptor(
      HANDLE BoundaryDescriptor
    );


#line 85 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namespaceapi.h"
#pragma endregion


}
#line 90 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namespaceapi.h"

#line 92 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\namespaceapi.h"
#line 66 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\systemtopologyapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\systemtopologyapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\systemtopologyapi.h"

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
      PULONG HighestNodeNumber
    );




__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMaskEx(
      USHORT Node,
      PGROUP_AFFINITY ProcessorMask
    );


#line 48 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\systemtopologyapi.h"



__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNodeEx(
      ULONG ProximityId,
      PUSHORT NodeNumber
    );


#line 61 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\systemtopologyapi.h"

#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\systemtopologyapi.h"
#pragma endregion


}
#line 68 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\systemtopologyapi.h"

#line 70 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\systemtopologyapi.h"
#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processtopologyapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processtopologyapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processtopologyapi.h"

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
GetProcessGroupAffinity(
      HANDLE hProcess,
      PUSHORT GroupCount,
      PUSHORT GroupArray
    );


#line 41 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processtopologyapi.h"

#line 43 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processtopologyapi.h"
#pragma endregion


#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
GetThreadGroupAffinity(
      HANDLE hThread,
      PGROUP_AFFINITY GroupAffinity
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadGroupAffinity(
      HANDLE hThread,
      const GROUP_AFFINITY* GroupAffinity,
      PGROUP_AFFINITY PreviousGroupAffinity
    );


#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processtopologyapi.h"

#line 73 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processtopologyapi.h"
#pragma endregion


}
#line 78 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processtopologyapi.h"

#line 80 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\processtopologyapi.h"
#line 68 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securityappcontainer.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securityappcontainer.h"











#pragma region Desktop Family or OneCore Family



extern "C" {
#line 29 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securityappcontainer.h"







BOOL
__stdcall
GetAppContainerNamedObjectPath(
      HANDLE Token,
      PSID AppContainerSid,
      ULONG ObjectPathLength,
      LPWSTR ObjectPath,
      PULONG ReturnLength
    );


#line 48 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securityappcontainer.h"


}
#line 52 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securityappcontainer.h"

#line 54 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securityappcontainer.h"
#pragma endregion

#line 57 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\securityappcontainer.h"
#line 69 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"









extern "C" {
#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
QueryThreadCycleTime(
      HANDLE ThreadHandle,
      PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessCycleTime(
      HANDLE ProcessHandle,
      PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTime(
      PULONG BufferLength,
      PULONG64 ProcessorIdleCycleTime
    );


#line 57 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"



__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTimeEx(
      USHORT Group,
      PULONG BufferLength,
      PULONG64 ProcessorIdleCycleTime
    );

    
#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"

#line 73 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
void
__stdcall
QueryInterruptTimePrecise(
      PULONGLONG lpInterruptTimePrecise
    );


__declspec(dllimport)
void
__stdcall
QueryUnbiasedInterruptTimePrecise(
      PULONGLONG lpUnbiasedInterruptTimePrecise
    );


__declspec(dllimport)
void
__stdcall
QueryInterruptTime(
      PULONGLONG lpInterruptTime
    );




__declspec(dllimport)
BOOL
__stdcall
QueryUnbiasedInterruptTime(
      PULONGLONG UnbiasedTime
    );


#line 113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"

__declspec(dllimport)
HRESULT
__stdcall
QueryAuxiliaryCounterFrequency(
      PULONGLONG lpAuxiliaryCounterFrequency
    );


__declspec(dllimport)
HRESULT
__stdcall
ConvertAuxiliaryCounterToPerformanceCounter(
      ULONGLONG ullAuxiliaryCounterValue,
      PULONGLONG lpPerformanceCounterValue,
      PULONGLONG lpConversionError
    );


__declspec(dllimport)
HRESULT
__stdcall
ConvertPerformanceCounterToAuxiliaryCounter(
      ULONGLONG ullPerformanceCounterValue,
      PULONGLONG lpAuxiliaryCounterValue,
      PULONGLONG lpConversionError
    );


#line 143 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"
#pragma endregion


}
#line 148 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"

#line 150 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\realtimeapiset.h"
#line 70 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


extern "C" {
#line 74 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Application Family












#line 89 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




#line 97 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family






















































#line 155 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"




































#line 192 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"














#line 207 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"






#line 214 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"











#line 228 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 230 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"






























































typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;

typedef LPVOID (__stdcall *PFIBER_CALLOUT_ROUTINE)(
    LPVOID lpParameter
    );
#line 301 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"









typedef PLDT_ENTRY LPLDT_ENTRY;


#line 314 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





































































































typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
















typedef struct _DCB {
    DWORD DCBlength;      
    DWORD BaudRate;       
    DWORD fBinary: 1;     
    DWORD fParity: 1;     
    DWORD fOutxCtsFlow:1; 
    DWORD fOutxDsrFlow:1; 
    DWORD fDtrControl:2;  
    DWORD fDsrSensitivity:1; 
    DWORD fTXContinueOnXoff: 1; 
    DWORD fOutX: 1;       
    DWORD fInX: 1;        
    DWORD fErrorChar: 1;  
    DWORD fNull: 1;       
    DWORD fRtsControl:2;  
    DWORD fAbortOnError:1; 
    DWORD fDummy2:17;     
    WORD wReserved;       
    WORD XonLim;          
    WORD XoffLim;         
    BYTE ByteSize;        
    BYTE Parity;          
    BYTE StopBits;        
    char XonChar;         
    char XoffChar;        
    char ErrorChar;       
    char EofChar;         
    char EvtChar;         
    WORD wReserved1;      
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;          
    DWORD ReadTotalTimeoutMultiplier;   
    DWORD ReadTotalTimeoutConstant;     
    DWORD WriteTotalTimeoutMultiplier;  
    DWORD WriteTotalTimeoutConstant;    
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;               
    WORD wVersion;              
    WORD wReserved;             
    DCB dcb;                    
    DWORD dwProviderSubType;    

    DWORD dwProviderOffset;     

    DWORD dwProviderSize;       
    WCHAR wcProviderData[1];    
} COMMCONFIG,*LPCOMMCONFIG;




































typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;






















































































typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 670 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"














#line 685 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





































































































































































































typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;






#line 897 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


int



#line 907 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
__stdcall
#line 909 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


#line 912 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
WinMain (
      HINSTANCE hInstance,
      HINSTANCE hPrevInstance,
      LPSTR lpCmdLine,
      int nShowCmd
    );

int


#line 923 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
__stdcall
#line 925 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
wWinMain(
      HINSTANCE hInstance,
      HINSTANCE hPrevInstance,
      LPWSTR lpCmdLine,
      int nShowCmd
    );

#line 933 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
 
__declspec(allocator)
HGLOBAL
__stdcall
GlobalAlloc(
      UINT uFlags,
      SIZE_T dwBytes
    );

#line 950 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
   
__declspec(allocator)
HGLOBAL
__stdcall
GlobalReAlloc (
      HGLOBAL hMem,
      SIZE_T dwBytes,
      UINT uFlags
    );

#line 967 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize (
      HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
      HGLOBAL hMem
    );

__declspec(dllimport)
 
LPVOID
__stdcall
GlobalLock (
      HGLOBAL hMem
    );

#line 995 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GlobalFlags (
      HGLOBAL hMem
    );

__declspec(dllimport)
 
HGLOBAL
__stdcall
GlobalHandle (
      LPCVOID pMem
    );

#line 1016 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
 
HGLOBAL
__stdcall
GlobalFree(
      HGLOBAL hMem
    );

#line 1031 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
      DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
      HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
      HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
      HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
      HGLOBAL hMem
    );

 
__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
      LPMEMORYSTATUS lpBuffer
    );

#line 1080 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
 
__declspec(allocator)
HLOCAL
__stdcall
LocalAlloc(
      UINT uFlags,
      SIZE_T uBytes
    );

__declspec(dllimport)
   
__declspec(allocator)
HLOCAL
__stdcall
LocalReAlloc(
      HLOCAL hMem,
      SIZE_T uBytes,
      UINT uFlags
    );

#line 1108 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
LPVOID
__stdcall
LocalLock(
      HLOCAL hMem
    );

#line 1122 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
HLOCAL
__stdcall
LocalHandle(
      LPCVOID pMem
    );

#line 1136 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
      HLOCAL hMem
    );

#line 1149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
      HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
      HLOCAL hMem
    );

#line 1169 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
 
HLOCAL
__stdcall
LocalFree(
      HLOCAL hMem
    );

#line 1184 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
      HLOCAL hMem,
      UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
      UINT uMinFree
    );













#line 1217 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 1219 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
       LPCSTR lpApplicationName,
      LPDWORD  lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
       LPCWSTR lpApplicationName,
      LPDWORD  lpBinaryType
    );




#line 1239 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetShortPathNameA(
      LPCSTR lpszLongPath,
      LPSTR  lpszShortPath,
      DWORD cchBuffer
    );


#line 1252 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameTransactedA(
          LPCSTR lpszShortPath,
      LPSTR  lpszLongPath,
          DWORD cchBuffer,
          HANDLE hTransaction
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameTransactedW(
          LPCWSTR lpszShortPath,
      LPWSTR  lpszLongPath,
          DWORD cchBuffer,
          HANDLE hTransaction
    );




#line 1280 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 1282 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 1284 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
       HANDLE hProcess,
      PDWORD_PTR lpProcessAffinityMask,
      PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
      HANDLE hProcess,
      DWORD_PTR dwProcessAffinityMask
    );

#line 1307 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
       HANDLE hProcess,
      PIO_COUNTERS lpIoCounters
    );

#line 1321 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
       HANDLE hProcess,
      PSIZE_T lpMinimumWorkingSetSize,
      PSIZE_T lpMaximumWorkingSetSize
    );

#line 1336 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
      HANDLE hProcess,
      SIZE_T dwMinimumWorkingSetSize,
      SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)

void
__stdcall
FatalExit(
      int ExitCode
    );

#line 1359 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsA(
         LPCH NewEnvironment
    );


#line 1373 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 1375 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion







#pragma region Application Family or OneCore Family




__declspec(dllimport)
void
__stdcall
SwitchToFiber(
      LPVOID lpFiber
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
      LPVOID lpFiber
    );



__declspec(dllimport)
BOOL
__stdcall
ConvertFiberToThread(
    void
    );

#line 1412 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
LPVOID
__stdcall
CreateFiberEx(
          SIZE_T dwStackCommitSize,
          SIZE_T dwStackReserveSize,
          DWORD dwFlags,
          LPFIBER_START_ROUTINE lpStartAddress,
      LPVOID lpParameter
    );

__declspec(dllimport)
 
LPVOID
__stdcall
ConvertThreadToFiberEx(
      LPVOID lpParameter,
          DWORD dwFlags
    );

#line 1435 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
LPVOID
__stdcall
CreateFiber(
          SIZE_T dwStackSize,
          LPFIBER_START_ROUTINE lpStartAddress,
      LPVOID lpParameter
    );

__declspec(dllimport)
 
LPVOID
__stdcall
ConvertThreadToFiber(
      LPVOID lpParameter
    );

#line 1459 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion









#pragma region Desktop Family






typedef void *PUMS_CONTEXT;

typedef void *PUMS_COMPLETION_LIST;

typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;

typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;

typedef struct _UMS_SCHEDULER_STARTUP_INFO {

    
    
    
    ULONG UmsVersion;

    
    
    
    PUMS_COMPLETION_LIST CompletionList;

    
    
    
    
    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;

    
    
    
    PVOID SchedulerParam;

} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

typedef struct _UMS_SYSTEM_THREAD_INFORMATION {
    ULONG UmsVersion;
    union {
        struct {
            ULONG IsUmsSchedulerThread : 1;
            ULONG IsUmsWorkerThread : 1;
        } ;
        ULONG ThreadUmsFlags;
    } ;
} UMS_SYSTEM_THREAD_INFORMATION, *PUMS_SYSTEM_THREAD_INFORMATION;

 
__declspec(dllimport)
BOOL
__stdcall
CreateUmsCompletionList(
     PUMS_COMPLETION_LIST* UmsCompletionList
    );

__declspec(dllimport)
BOOL
__stdcall
DequeueUmsCompletionListItems(
      PUMS_COMPLETION_LIST UmsCompletionList,
      DWORD WaitTimeOut,
      PUMS_CONTEXT* UmsThreadList
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsCompletionListEvent(
      PUMS_COMPLETION_LIST UmsCompletionList,
      PHANDLE UmsCompletionEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ExecuteUmsThread(
      PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
UmsThreadYield(
      PVOID SchedulerParam
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsCompletionList(
      PUMS_COMPLETION_LIST UmsCompletionList
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetCurrentUmsThread(
    void
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetNextUmsListItem(
      PUMS_CONTEXT UmsContext
    );

__declspec(dllimport)
BOOL
__stdcall
QueryUmsThreadInformation(
      PUMS_CONTEXT UmsThread,
      UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
      PVOID UmsThreadInformation,
      ULONG UmsThreadInformationLength,
      PULONG ReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetUmsThreadInformation(
      PUMS_CONTEXT UmsThread,
      UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
      PVOID UmsThreadInformation,
      ULONG UmsThreadInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsThreadContext(
      PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
CreateUmsThreadContext(
     PUMS_CONTEXT *lpUmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
EnterUmsSchedulingMode(
      PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsSystemThreadInformation(
      HANDLE ThreadHandle,
      PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
    );

#line 1633 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 1635 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion





#line 1642 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Application Family or OneCore Family


__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
      HANDLE hThread,
      DWORD_PTR dwThreadAffinityMask
    );

#line 1655 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family







__declspec(dllimport)
BOOL
__stdcall
SetProcessDEPPolicy(
      DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessDEPPolicy(
      HANDLE hProcess,
      LPDWORD lpFlags,
      PBOOL lpPermanent
    );

#line 1682 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
      LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
       HANDLE hThread,
       DWORD dwSelector,
      LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
      EXECUTION_STATE esFlags
    );







typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

__declspec(dllimport)
HANDLE
__stdcall
PowerCreateRequest (
      PREASON_CONTEXT Context
    );

__declspec(dllimport)
BOOL
__stdcall
PowerSetRequest (
      HANDLE PowerRequest,
      POWER_REQUEST_TYPE RequestType
    );

__declspec(dllimport)
BOOL
__stdcall
PowerClearRequest (
      HANDLE PowerRequest,
      POWER_REQUEST_TYPE RequestType
    );

#line 1745 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 1747 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family






#line 1757 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


















#line 1779 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1780 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



#line 1784 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family




















__declspec(dllimport)
BOOL
__stdcall
SetFileCompletionNotificationModes(
      HANDLE FileHandle,
      UCHAR Flags
    );

#line 1816 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 1818 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family











__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadContext(
         HANDLE hThread,
      PWOW64_CONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64SetThreadContext(
      HANDLE hThread,
      const WOW64_CONTEXT *lpContext
    );

#line 1849 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadSelectorEntry(
      HANDLE hThread,
      DWORD dwSelector,
      PWOW64_LDT_ENTRY lpSelectorEntry
    );

#line 1862 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 1864 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
DWORD
__stdcall
Wow64SuspendThread(
      HANDLE hThread
    );

#line 1875 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
      BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
      HANDLE Process
    );

#line 1891 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family




#line 1899 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 1901 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
      HANDLE hEvent
    );

__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
      ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
      DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
      ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
      UINT uNumber
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
      HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
      HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
       HANDLE hDevice,
      BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
      HANDLE hMsgIndicator,
      ULONG ulMsgCount
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
      HANDLE hFile,
      LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
      HANDLE hFile,
      LPCWSTR lpShortName
    );




#line 1991 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"






__declspec(dllimport)
DWORD
__stdcall
LoadModule(
      LPCSTR lpModuleName,
      LPVOID lpParameterBlock
    );


 
__declspec(dllimport)
UINT
__stdcall
WinExec(
      LPCSTR lpCmdLine,
      UINT uCmdShow
    );


#line 2017 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore or App Family


__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
      HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
           HANDLE hFile,
      LPDWORD lpErrors,
      LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
      HANDLE hFile,
      DWORD dwInQueue,
      DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
      HANDLE hFile,
      DWORD dwFunc
    );

__declspec(dllimport)
 
BOOL
__stdcall
GetCommConfig(
           HANDLE hCommDev,
      LPCOMMCONFIG lpCC,
        LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
       HANDLE hFile,
      LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
         HANDLE hFile,
      LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
       HANDLE hFile,
      LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
       HANDLE hFile,
      LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
       HANDLE hFile,
      LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
      HANDLE hFile,
      DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
      HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
      HANDLE hCommDev,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
      HANDLE hFile,
      DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
      HANDLE hFile,
      LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
      HANDLE hFile,
      LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
      HANDLE hFile,
      char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
             HANDLE hFile,
          LPDWORD lpEvtMask,
      LPOVERLAPPED lpOverlapped
    );




__declspec(dllimport)
HANDLE
__stdcall
OpenCommPort(
      ULONG uPortNumber,
      DWORD dwDesiredAccess,
      DWORD dwFlagsAndAttributes
    );

#line 2183 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
ULONG
__stdcall
GetCommPorts(
      PULONG lpPortNumbers,
                                 ULONG uPortNumbersCount,
                                PULONG puPortNumbersFound
    );

#line 2196 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 2198 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
      HANDLE hDevice,
      DWORD dwPositionMethod,
      DWORD dwPartition,
      DWORD dwOffsetLow,
      DWORD dwOffsetHigh,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
       HANDLE hDevice,
       DWORD dwPositionType,
      LPDWORD lpdwPartition,
      LPDWORD lpdwOffsetLow,
      LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
      HANDLE hDevice,
      DWORD dwOperation,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
      HANDLE hDevice,
      DWORD dwEraseType,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
      HANDLE hDevice,
      DWORD dwPartitionMethod,
      DWORD dwCount,
      DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
      HANDLE hDevice,
      DWORD dwTapemarkType,
      DWORD dwTapemarkCount,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
      HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
      LPDWORD lpdwSize,
      LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
      HANDLE hDevice,
      DWORD dwOperation,
      LPVOID lpTapeInformation
    );




#line 2297 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
int
__stdcall
MulDiv(
      int nNumber,
      int nNumerator,
      int nDenominator
    );

#line 2312 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;



__declspec(dllimport)
DEP_SYSTEM_POLICY_TYPE
__stdcall
GetSystemDEPPolicy(
    void
    );

#line 2335 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetSystemRegistryQuota(
      PDWORD pdwQuotaAllowed,
      PDWORD pdwQuotaUsed
    );

#line 2347 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
       const FILETIME *lpFileTime,
      LPWORD lpFatDate,
      LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
       WORD wFatDate,
       WORD wFatTime,
      LPFILETIME lpFileTime
    );

#line 2371 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family









__declspec(dllimport)
 
DWORD
__stdcall
FormatMessageA(
          DWORD dwFlags,
      LPCVOID lpSource,
          DWORD dwMessageId,
          DWORD dwLanguageId,
    
    
             LPSTR lpBuffer,
          DWORD nSize,
      va_list *Arguments
    );
__declspec(dllimport)
 
DWORD
__stdcall
FormatMessageW(
          DWORD dwFlags,
      LPCVOID lpSource,
          DWORD dwMessageId,
          DWORD dwLanguageId,
    
    
             LPWSTR lpBuffer,
          DWORD nSize,
      va_list *Arguments
    );




#line 2418 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





























#line 2448 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 2449 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"








#line 2458 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
          LPCSTR lpName,
          DWORD nMaxMessageSize,
          DWORD lReadTimeout,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
          LPCWSTR lpName,
          DWORD nMaxMessageSize,
          DWORD lReadTimeout,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 2487 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
           HANDLE hMailslot,
      LPDWORD lpMaxMessageSize,
      LPDWORD lpNextSize,
      LPDWORD lpMessageCount,
      LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
      HANDLE hMailslot,
      DWORD lReadTimeout
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
      LPCWSTR lpFileName
    );




#line 2528 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
            LPCSTR lpFileName,
      DWORD dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
            LPCWSTR lpFileName,
      DWORD dwReserved
    );




#line 2548 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
















__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
       LPCSTR lpFileName,
      LPDWORD  lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
       LPCWSTR lpFileName,
      LPDWORD  lpStatus
    );




#line 2583 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"







typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
      PBYTE pbData,
      PVOID pvCallbackContext,
          ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
      PBYTE pbData,
      PVOID pvCallbackContext,
       PULONG ulLength
    );













__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
             LPCSTR lpFileName,
             ULONG    ulFlags,
     PVOID   *pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
             LPCWSTR lpFileName,
             ULONG    ulFlags,
     PVOID   *pvContext
    );




#line 2639 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
          PFE_EXPORT_FUNC pfExportCallback,
      PVOID           pvCallbackContext,
          PVOID           pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
          PFE_IMPORT_FUNC pfImportCallback,
      PVOID           pvCallbackContext,
          PVOID           pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
      PVOID           pvContext
    );

#line 2666 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion





#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
int
__stdcall
lstrcmpA(
      LPCSTR lpString1,
      LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
      LPCWSTR lpString1,
      LPCWSTR lpString2
    );




#line 2694 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrcmpiA(
      LPCSTR lpString1,
      LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
      LPCWSTR lpString1,
      LPCWSTR lpString2
    );




#line 2714 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


#pragma warning(push)
#pragma warning(disable:4995)
#line 2719 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
 
 
 
LPSTR
__stdcall
lstrcpynA(
      LPSTR lpString1,
      LPCSTR lpString2,
      int iMaxLength
    );
__declspec(dllimport)
 
 
 
 
LPWSTR
__stdcall
lstrcpynW(
      LPWSTR lpString1,
      LPCWSTR lpString2,
      int iMaxLength
    );




#line 2749 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
      LPSTR lpString1, 
       LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
      LPWSTR lpString1, 
       LPCWSTR lpString2
    );




#line 2769 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
      LPSTR lpString1, 
         LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
      LPWSTR lpString1, 
         LPCWSTR lpString2
    );




#line 2789 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


#pragma warning(pop)
#line 2793 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrlenA(
      LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
      LPCWSTR lpString
    );




#line 2811 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 2813 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
HFILE
__stdcall
OpenFile(
         LPCSTR lpFileName,
      LPOFSTRUCT lpReOpenBuff,
         UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
      LPCSTR lpPathName,
      int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
      LPCSTR lpPathName,
      int  iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
      HFILE hFile,
      LPVOID lpBuffer,
      UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
      HFILE hFile,
      LPCCH lpBuffer,
      UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
      HFILE hFile,
      LPVOID lpBuffer,
      long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
      HFILE hFile,
      LPCCH lpBuffer,
      long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
      HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
      HFILE hFile,
      LONG lOffset,
      int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
      const void* lpv,
             int iSize,
      LPINT lpiResult
    );

#line 2905 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family



__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
      HANDLE hObjectToSignal,
      HANDLE hObjectToWaitOn,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );
#line 2921 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 2923 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
BackupRead(
         HANDLE hFile,
      LPBYTE lpBuffer,
         DWORD nNumberOfBytesToRead,
        LPDWORD lpNumberOfBytesRead,
         BOOL bAbort,
         BOOL bProcessSecurity,
      LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
         HANDLE hFile,
         DWORD  dwLowBytesToSeek,
         DWORD  dwHighBytesToSeek,
        LPDWORD lpdwLowByteSeeked,
        LPDWORD lpdwHighByteSeeked,
      LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
         HANDLE hFile,
      LPBYTE lpBuffer,
         DWORD nNumberOfBytesToWrite,
        LPDWORD lpNumberOfBytesWritten,
         BOOL bAbort,
         BOOL bProcessSecurity,
      LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD          dwStreamId ;
        DWORD          dwStreamAttributes ;
        LARGE_INTEGER  Size ;
        DWORD          dwStreamNameSize ;
        WCHAR          cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;

















































#line 3026 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



#line 3030 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;




typedef STARTUPINFOEXA STARTUPINFOEX;
typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;
#line 3048 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3050 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



#line 3054 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
 
HANDLE
__stdcall
OpenMutexA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );


#line 3071 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreA(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
          LONG lInitialCount,
          LONG lMaximumCount,
      LPCSTR lpName
    );


#line 3085 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3087 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
HANDLE
__stdcall
OpenSemaphoreA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );


#line 3104 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3106 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerA(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
          BOOL bManualReset,
      LPCSTR lpTimerName
    );


#line 3125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenWaitableTimerA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpTimerName
    );


#line 3138 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreExA(
         LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
         LPCSTR lpName,
       DWORD dwFlags,
             DWORD dwDesiredAccess
    );


#line 3156 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerExA(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
      LPCSTR lpTimerName,
          DWORD dwFlags,
          DWORD dwDesiredAccess
    );


#line 3170 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3172 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3174 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3176 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingA(
          HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
          DWORD flProtect,
          DWORD dwMaximumSizeHigh,
          DWORD dwMaximumSizeLow,
      LPCSTR lpName
    );


#line 3197 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingNumaA(
          HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
          DWORD flProtect,
          DWORD dwMaximumSizeHigh,
          DWORD dwMaximumSizeLow,
      LPCSTR lpName,
          DWORD nndPreferred
    );



#line 3217 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3219 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );


#line 3231 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
 
DWORD
__stdcall
GetLogicalDriveStringsA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );


#line 3249 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3251 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family



#line 3258 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
 
HMODULE
__stdcall
LoadPackagedLibrary (
            LPCWSTR lpwLibFileName,
      DWORD Reserved
    );

#line 3275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3277 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion































#line 3310 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Desktop Family or OneCore Family






__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameA(
      HANDLE hProcess,
      DWORD dwFlags,
      LPSTR lpExeName,
      PDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameW(
      HANDLE hProcess,
      DWORD dwFlags,
      LPWSTR lpExeName,
      PDWORD lpdwSize
    );




#line 3341 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3343 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"














typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess                = 0,
    ProcThreadAttributeHandleList                   = 2,

    ProcThreadAttributeGroupAffinity                = 3,
    ProcThreadAttributePreferredNode                = 4,
    ProcThreadAttributeIdealProcessor               = 5,
    ProcThreadAttributeUmsThread                    = 6,
    ProcThreadAttributeMitigationPolicy             = 7,
#line 3367 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

    ProcThreadAttributeSecurityCapabilities         = 9,
#line 3370 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
    ProcThreadAttributeProtectionLevel              = 11,

#line 3373 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

    ProcThreadAttributeJobList                      = 13,
    ProcThreadAttributeChildProcessPolicy           = 14,
    ProcThreadAttributeAllApplicationPackagesPolicy = 15,
    ProcThreadAttributeWin32kFilter                 = 16,
#line 3379 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

    ProcThreadAttributeSafeOpenPromptOriginClaim    = 17,
#line 3382 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

    ProcThreadAttributeDesktopAppPolicy = 18,
#line 3385 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
} PROC_THREAD_ATTRIBUTE_NUM;
#line 3387 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"












#line 3400 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"












#line 3413 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"




#line 3418 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





#line 3424 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"










#line 3435 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





















































































































































































































#line 3649 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 3650 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 3651 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





























#line 3681 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"




#line 3686 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"















#line 3702 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3704 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
      LPSTARTUPINFOA lpStartupInfo
    );


#line 3719 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

































#line 3753 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



















#line 3773 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3775 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region OneCore Family or App Family


__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize
    );




#line 3803 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize,
      PDWORD pdwAttribubutes
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize,
      PDWORD pdwAttribubutes
    );




#line 3831 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3833 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pValue,
      DWORD    nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pValue,
      DWORD    nSize
    );




#line 3857 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pValue,
      DWORD    nSize,
      DWORD    dwAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pValue,
      DWORD    nSize,
      DWORD    dwAttributes
    );




#line 3885 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3887 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 3889 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
GetFirmwareType (
      PFIRMWARE_TYPE FirmwareType
    );


__declspec(dllimport)
BOOL
__stdcall
IsNativeVhdBoot (
      PBOOL NativeVhdBoot
    );

#line 3912 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceA(
      HMODULE hModule,
          LPCSTR lpName,
          LPCSTR lpType
    );


#line 3925 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceExA(
      HMODULE hModule,
          LPCSTR lpType,
          LPCSTR lpName,
          WORD    wLanguage
    );


#line 3939 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
      HMODULE hModule,
          ENUMRESTYPEPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
      HMODULE hModule,
          ENUMRESTYPEPROCW lpEnumFunc,
          LONG_PTR lParam
    );




#line 3961 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
      HMODULE hModule,
          LPCSTR lpType,
          ENUMRESNAMEPROCA lpEnumFunc,
          LONG_PTR lParam
    );



#line 3975 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
      HMODULE hModule,
          LPCSTR lpType,
          LPCSTR lpName,
          ENUMRESLANGPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
      HMODULE hModule,
          LPCWSTR lpType,
          LPCWSTR lpName,
          ENUMRESLANGPROCW lpEnumFunc,
          LONG_PTR lParam
    );




#line 4001 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
      LPCSTR pFileName,
      BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
      LPCWSTR pFileName,
      BOOL bDeleteExistingResources
    );




#line 4021 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
      HANDLE hUpdate,
      LPCSTR lpType,
      LPCSTR lpName,
      WORD wLanguage,
      LPVOID lpData,
      DWORD cb
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
      HANDLE hUpdate,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage,
      LPVOID lpData,
      DWORD cb
    );




#line 4049 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
      HANDLE hUpdate,
      BOOL   fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
      HANDLE hUpdate,
      BOOL   fDiscard
    );




#line 4069 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
      LPCWSTR lpString
    );




#line 4089 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExA(
      LPCSTR lpString,
      DWORD Flags
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExW(
      LPCWSTR lpString,
      DWORD Flags
    );




#line 4109 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
      LPCWSTR lpString
    );




#line 4127 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
      ATOM nAtom,
      LPSTR lpBuffer,
      int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
      ATOM nAtom,
      LPWSTR lpBuffer,
      int nSize
    );




#line 4149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
      LPCWSTR lpString
    );




#line 4167 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
      LPCWSTR lpString
    );




#line 4185 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
      ATOM nAtom,
      LPSTR lpBuffer,
      int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
      ATOM nAtom,
      LPWSTR lpBuffer,
      int nSize
    );




#line 4207 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4209 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      INT nDefault
    );




#line 4235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpDefault,
      LPSTR lpReturnedString,
          DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpDefault,
      LPWSTR lpReturnedString,
          DWORD nSize
    );




#line 4261 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4263 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpString
    );




#line 4289 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4291 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
      LPCSTR lpAppName,
      LPSTR lpReturnedString,
      DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
      LPCWSTR lpAppName,
      LPWSTR lpReturnedString,
      DWORD nSize
    );




#line 4317 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4319 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
      LPCSTR lpAppName,
      LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
      LPCWSTR lpAppName,
      LPCWSTR lpString
    );




#line 4343 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4345 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
          LPCSTR lpAppName,
          LPCSTR lpKeyName,
          INT nDefault,
      LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
          LPCWSTR lpAppName,
          LPCWSTR lpKeyName,
          INT nDefault,
      LPCWSTR lpFileName
    );




#line 4373 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"























#line 4397 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpDefault,
      LPSTR lpReturnedString,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpDefault,
      LPWSTR lpReturnedString,
          DWORD nSize,
      LPCWSTR lpFileName
    );




#line 4425 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



























#line 4453 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpString,
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpString,
      LPCWSTR lpFileName
    );




#line 4477 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
          LPCSTR lpAppName,
      LPSTR lpReturnedString,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
          LPCWSTR lpAppName,
      LPWSTR lpReturnedString,
          DWORD nSize,
      LPCWSTR lpFileName
    );




#line 4501 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"























#line 4525 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
      LPCSTR lpAppName,
      LPCSTR lpString,
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
      LPCWSTR lpAppName,
      LPCWSTR lpString,
      LPCWSTR lpFileName
    );




#line 4547 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4549 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
      LPSTR lpszReturnBuffer,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
      LPWSTR lpszReturnBuffer,
          DWORD nSize,
      LPCWSTR lpFileName
    );




#line 4575 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





















#line 4597 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
          LPCSTR lpszSection,
          LPCSTR lpszKey,
      LPVOID   lpStruct,
          UINT     uSizeStruct,
      LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
          LPCWSTR lpszSection,
          LPCWSTR lpszKey,
      LPVOID   lpStruct,
          UINT     uSizeStruct,
      LPCWSTR szFile
    );




#line 4623 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

























#line 4649 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
          LPCSTR lpszSection,
          LPCSTR lpszKey,
      LPVOID lpStruct,
          UINT     uSizeStruct,
      LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
          LPCWSTR lpszSection,
          LPCWSTR lpszKey,
      LPVOID lpStruct,
          UINT     uSizeStruct,
      LPCWSTR szFile
    );




#line 4675 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"























#line 4699 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"




__declspec(dllimport)
BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection (
      BOOLEAN Wow64FsEnableRedirection
    );




typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)(  LPSTR lpBuffer,   UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)(  LPWSTR lpBuffer,   UINT uSize);





















#line 4737 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4739 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 4740 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

















#line 4758 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



















#line 4778 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryA(
      LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryW(
      LPCWSTR lpPathName
    );




#line 4798 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetDllDirectoryA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetDllDirectoryW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );




#line 4820 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4822 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
SetSearchPathMode (
      DWORD Flags
    );

#line 4836 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family




















#line 4860 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4862 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
          LPCSTR lpTemplateDirectory,
          LPCSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
          LPCWSTR lpTemplateDirectory,
          LPCWSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 4888 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4890 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedA(
      LPCSTR lpTemplateDirectory,
          LPCSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedW(
      LPCWSTR lpTemplateDirectory,
          LPCWSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          HANDLE hTransaction
    );




#line 4920 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedA(
      LPCSTR lpPathName,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedW(
      LPCWSTR lpPathName,
          HANDLE hTransaction
    );




#line 4940 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameTransactedA(
                 LPCSTR lpFileName,
                 DWORD nBufferLength,
      LPSTR lpBuffer,
     LPSTR *lpFilePart,
                 HANDLE hTransaction
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameTransactedW(
                 LPCWSTR lpFileName,
                 DWORD nBufferLength,
      LPWSTR lpBuffer,
     LPWSTR *lpFilePart,
                 HANDLE hTransaction
    );




#line 4968 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4970 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 4972 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family








__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
          DWORD dwFlags,
          LPCSTR lpDeviceName,
      LPCSTR lpTargetPath
    );


#line 4994 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
      LPCSTR lpDeviceName,
      LPSTR lpTargetPath,
          DWORD ucchMax
    );


#line 5006 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5008 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedA(
            LPCSTR lpFileName,
            DWORD dwDesiredAccess,
            DWORD dwShareMode,
        LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            DWORD dwCreationDisposition,
            DWORD dwFlagsAndAttributes,
        HANDLE hTemplateFile,
            HANDLE hTransaction,
        PUSHORT pusMiniVersion,
      PVOID  lpExtendedParameter
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedW(
            LPCWSTR lpFileName,
            DWORD dwDesiredAccess,
            DWORD dwShareMode,
        LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            DWORD dwCreationDisposition,
            DWORD dwFlagsAndAttributes,
        HANDLE hTemplateFile,
            HANDLE hTransaction,
        PUSHORT pusMiniVersion,
      PVOID  lpExtendedParameter
    );




#line 5052 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5054 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5056 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
HANDLE
__stdcall
ReOpenFile(
      HANDLE  hOriginalFile,
      DWORD   dwDesiredAccess,
      DWORD   dwShareMode,
      DWORD   dwFlagsAndAttributes
    );

#line 5074 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5076 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion


#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedA(
          LPCSTR lpFileName,
          DWORD dwFileAttributes,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedW(
          LPCWSTR lpFileName,
          DWORD dwFileAttributes,
          HANDLE hTransaction
    );




#line 5105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedA(
       LPCSTR lpFileName,
       GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedW(
       LPCWSTR lpFileName,
       GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation,
          HANDLE hTransaction
    );




#line 5129 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedA(
           LPCSTR lpFileName,
      LPDWORD  lpFileSizeHigh,
           HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedW(
           LPCWSTR lpFileName,
      LPDWORD  lpFileSizeHigh,
           HANDLE hTransaction
    );




#line 5151 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedA(
          LPCSTR lpFileName,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedW(
          LPCWSTR lpFileName,
          HANDLE hTransaction
    );




#line 5171 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5173 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


















#line 5197 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5199 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
           LPCSTR lpName,
      LPSTR lpOemName,
           DWORD OemNameSize,
      PBOOL pbNameContainsSpaces ,
          PBOOL pbNameLegal
    );
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
           LPCWSTR lpName,
      LPSTR lpOemName,
           DWORD OemNameSize,
      PBOOL pbNameContainsSpaces ,
          PBOOL pbNameLegal
    );




#line 5231 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family




__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedA(
            LPCSTR lpFileName,
            FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
            FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
            DWORD dwAdditionalFlags,
            HANDLE hTransaction
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedW(
            LPCWSTR lpFileName,
            FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
            FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
            DWORD dwAdditionalFlags,
            HANDLE hTransaction
    );




#line 5273 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5277 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#line 5280 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Application Family or OneCore Family



__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
      LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
      LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      BOOL bFailIfExists
    );




#line 5306 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





















#line 5328 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5330 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion



#pragma region Application Family or OneCore Family


typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
          LARGE_INTEGER TotalFileSize,
          LARGE_INTEGER TotalBytesTransferred,
          LARGE_INTEGER StreamSize,
          LARGE_INTEGER StreamBytesTransferred,
          DWORD dwStreamNumber,
          DWORD dwCallbackReason,
          HANDLE hSourceFile,
          HANDLE hDestinationFile,
      LPVOID lpData
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
         LPPROGRESS_ROUTINE lpProgressRoutine,
         LPVOID lpData,
    
      LPBOOL pbCancel,
             DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
         LPPROGRESS_ROUTINE lpProgressRoutine,
         LPVOID lpData,
    
      LPBOOL pbCancel,
             DWORD dwCopyFlags
    );




#line 5380 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5382 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedA(
          LPCSTR lpExistingFileName,
          LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
      LPBOOL pbCancel,
          DWORD dwCopyFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedW(
          LPCWSTR lpExistingFileName,
          LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
      LPBOOL pbCancel,
          DWORD dwCopyFlags,
          HANDLE hTransaction
    );




#line 5418 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5420 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5422 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family








typedef enum _COPYFILE2_MESSAGE_TYPE {
     COPYFILE2_CALLBACK_NONE = 0,
     COPYFILE2_CALLBACK_CHUNK_STARTED,
     COPYFILE2_CALLBACK_CHUNK_FINISHED,
     COPYFILE2_CALLBACK_STREAM_STARTED,
     COPYFILE2_CALLBACK_STREAM_FINISHED,
     COPYFILE2_CALLBACK_POLL_CONTINUE,
     COPYFILE2_CALLBACK_ERROR,
     COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;

typedef enum _COPYFILE2_MESSAGE_ACTION {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL,
    COPYFILE2_PROGRESS_STOP,
    COPYFILE2_PROGRESS_QUIET,
    COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;

typedef enum _COPYFILE2_COPY_PHASE {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE,
    COPYFILE2_PHASE_PREPARE_DEST,
    COPYFILE2_PHASE_READ_SOURCE,
    COPYFILE2_PHASE_WRITE_DESTINATION,
    COPYFILE2_PHASE_SERVER_COPY,
    COPYFILE2_PHASE_NAMEGRAFT_COPY,
    
    COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;



typedef struct COPYFILE2_MESSAGE {

    COPYFILE2_MESSAGE_TYPE  Type;
    DWORD                   dwPadding;

    union {

        struct {
            DWORD           dwStreamNumber; 
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliChunkNumber; 
            ULARGE_INTEGER  uliChunkSize;  
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliTotalFileSize; 
        } ChunkStarted;

        struct {
            DWORD           dwStreamNumber; 
            DWORD           dwFlags;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliChunkNumber; 
            ULARGE_INTEGER  uliChunkSize;  
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliStreamBytesTransferred; 
            ULARGE_INTEGER  uliTotalFileSize; 
            ULARGE_INTEGER  uliTotalBytesTransferred; 
        } ChunkFinished;

        struct {
            DWORD           dwStreamNumber;
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliTotalFileSize; 
        } StreamStarted;

        struct {
            DWORD           dwStreamNumber;
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliStreamSize;
            ULARGE_INTEGER  uliStreamBytesTransferred;
            ULARGE_INTEGER  uliTotalFileSize;
            ULARGE_INTEGER  uliTotalBytesTransferred;
        } StreamFinished;

        struct {
            DWORD           dwReserved;
        } PollContinue;

        struct {
            COPYFILE2_COPY_PHASE    CopyPhase;
            DWORD                   dwStreamNumber;
            HRESULT                 hrFailure;
            DWORD                   dwReserved;
            ULARGE_INTEGER          uliChunkNumber;
            ULARGE_INTEGER          uliStreamSize;
            ULARGE_INTEGER          uliStreamBytesTransferred;
            ULARGE_INTEGER          uliTotalFileSize;
            ULARGE_INTEGER          uliTotalBytesTransferred;
        } Error;

    } Info;

} COPYFILE2_MESSAGE;

typedef
COPYFILE2_MESSAGE_ACTION (__stdcall *PCOPYFILE2_PROGRESS_ROUTINE)(
         const COPYFILE2_MESSAGE     *pMessage,
     PVOID                       pvCallbackContext
);

typedef struct COPYFILE2_EXTENDED_PARAMETERS {
  DWORD                         dwSize;
  DWORD                         dwCopyFlags;
  BOOL                          *pfCancel;
  PCOPYFILE2_PROGRESS_ROUTINE   pProgressRoutine;
  PVOID                         pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HRESULT
__stdcall
CopyFile2(
         PCWSTR                          pwszExistingFileName,
         PCWSTR                          pwszNewFileName,
     COPYFILE2_EXTENDED_PARAMETERS   *pExtendedParameters
);

#line 5561 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5563 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#line 5566 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
      LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
      LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName
    );




#line 5589 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



















#line 5609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5611 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
          DWORD    dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
          DWORD    dwFlags
    );




#line 5637 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5639 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family



__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags
    );




#line 5670 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 5671 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5673 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags,
          HANDLE hTransaction
    );




#line 5706 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 5707 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5709 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family









#line 5722 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5724 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family



#line 5731 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family




__declspec(dllimport)
BOOL
__stdcall
ReplaceFileA(
            LPCSTR lpReplacedFileName,
            LPCSTR lpReplacementFileName,
        LPCSTR lpBackupFileName,
            DWORD    dwReplaceFlags,
      LPVOID   lpExclude,
      LPVOID  lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileW(
            LPCWSTR lpReplacedFileName,
            LPCWSTR lpReplacementFileName,
        LPCWSTR lpBackupFileName,
            DWORD    dwReplaceFlags,
      LPVOID   lpExclude,
      LPVOID  lpReserved
    );




#line 5765 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 5766 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5768 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family







__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkA(
            LPCSTR lpFileName,
            LPCSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkW(
            LPCWSTR lpFileName,
            LPCWSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5799 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5801 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5803 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family







__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedA(
            LPCSTR lpFileName,
            LPCSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedW(
            LPCWSTR lpFileName,
            LPCWSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            HANDLE hTransaction
    );




#line 5836 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5838 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamTransactedW (
            LPCWSTR lpFileName,
            STREAM_INFO_LEVELS InfoLevel,
      LPVOID lpFindStreamData,
      DWORD dwFlags,
            HANDLE hTransaction
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameTransactedW (
          LPCWSTR lpFileName,
          DWORD dwFlags,
       LPDWORD StringLength,
      PWSTR LinkName,
      HANDLE hTransaction
    );

#line 5864 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5866 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
          LPCSTR lpName,
          DWORD dwOpenMode,
          DWORD dwPipeMode,
          DWORD nMaxInstances,
          DWORD nOutBufferSize,
          DWORD nInBufferSize,
          DWORD nDefaultTimeOut,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );


#line 5887 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5889 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
           HANDLE hNamedPipe,
      LPDWORD lpState,
      LPDWORD lpCurInstances,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout,
      LPSTR lpUserName,
           DWORD nMaxUserNameSize
    );


#line 5909 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
       LPCSTR lpNamedPipeName,
      LPVOID lpInBuffer,
       DWORD nInBufferSize,
      LPVOID lpOutBuffer,
       DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
       DWORD nTimeOut
    );



#line 5926 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
      LPCSTR lpNamedPipeName,
      DWORD nTimeOut
    );


#line 5937 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5939 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family



#line 5948 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameA(
      HANDLE Pipe,
       LPSTR ClientComputerName,
      ULONG ClientComputerNameLength
    );



#line 5965 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 5967 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientProcessId(
      HANDLE Pipe,
      PULONG ClientProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientSessionId(
      HANDLE Pipe,
      PULONG ClientSessionId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerProcessId(
      HANDLE Pipe,
      PULONG ServerProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerSessionId(
      HANDLE Pipe,
      PULONG ServerSessionId
    );

#line 6005 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#line 6008 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Application Family or Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
      LPCSTR lpRootPathName,
      LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
      LPCWSTR lpRootPathName,
      LPCWSTR lpVolumeName
    );




#line 6031 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 6033 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
BOOL
__stdcall
SetFileBandwidthReservation(
       HANDLE  hFile,
       DWORD   nPeriodMilliseconds,
       DWORD   nBytesPerPeriod,
       BOOL    bDiscardable,
      LPDWORD lpTransferSize,
      LPDWORD lpNumOutstandingRequests
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileBandwidthReservation(
       HANDLE  hFile,
      LPDWORD lpPeriodMilliseconds,
      LPDWORD lpBytesPerPeriod,
      LPBOOL  pDiscardable,
      LPDWORD lpTransferSize,
      LPDWORD lpNumOutstandingRequests
    );

#line 6066 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
          HANDLE hEventLog,
      LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
          HANDLE hEventLog,
      LPCWSTR lpBackupFileName
    );




#line 6090 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
      HANDLE hEventLog,
      LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
      HANDLE hEventLog,
      LPCWSTR lpBackupFileName
    );




#line 6110 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
      HANDLE  hEventLog,
      HANDLE  hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
       HANDLE hEventLog,
      PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
       HANDLE hEventLog,
      PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
      LPCSTR lpUNCServerName,
          LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpSourceName
    );




#line 6168 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
      LPCSTR lpUNCServerName,
          LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpSourceName
    );




#line 6188 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
      LPCSTR lpUNCServerName,
          LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpFileName
    );




#line 6208 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
       HANDLE     hEventLog,
       DWORD      dwReadFlags,
       DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
       DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
       HANDLE     hEventLog,
       DWORD      dwReadFlags,
       DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
       DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );




#line 6238 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
          HANDLE     hEventLog,
          WORD       wType,
          WORD       wCategory,
          DWORD      dwEventID,
      PSID       lpUserSid,
          WORD       wNumStrings,
          DWORD      dwDataSize,
      LPCSTR *lpStrings,
      LPVOID lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
          HANDLE     hEventLog,
          WORD       wType,
          WORD       wCategory,
          DWORD      dwEventID,
      PSID       lpUserSid,
          WORD       wNumStrings,
          DWORD      dwDataSize,
      LPCWSTR *lpStrings,
      LPVOID lpRawData
    );




#line 6272 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"




typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD    dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
       HANDLE     hEventLog,
       DWORD      dwInfoLevel,
      LPVOID lpBuffer,
       DWORD      cbBufSize,
      LPDWORD    pcbBytesNeeded
    );








typedef ULONG OPERATION_ID;





typedef struct _OPERATION_START_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_START_PARAMETERS, *POPERATION_START_PARAMETERS;







typedef struct _OPERATION_END_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_END_PARAMETERS, *POPERATION_END_PARAMETERS;



__declspec(dllimport)
BOOL
__stdcall
OperationStart (
      OPERATION_START_PARAMETERS* OperationStartParams
    );

__declspec(dllimport)
BOOL
__stdcall
OperationEnd (
      OPERATION_END_PARAMETERS* OperationEndParams
    );

#line 6341 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
          LPCSTR SubsystemName,
      LPVOID HandleId,
          LPSTR ObjectTypeName,
      LPSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
          DWORD DesiredAccess,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
         LPDWORD GrantedAccess,
         LPBOOL AccessStatus,
         LPBOOL pfGenerateOnClose
    );


#line 6367 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
         LPDWORD GrantedAccess,
         LPBOOL AccessStatus,
         LPBOOL pfGenerateOnClose
    );


#line 6394 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPDWORD AccessStatusList,
         LPBOOL pfGenerateOnClose
    );


#line 6419 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          HANDLE ClientToken,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPDWORD AccessStatusList,
         LPBOOL pfGenerateOnClose
    );


#line 6445 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 6446 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPSTR ObjectTypeName,
      LPSTR ObjectName,
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
          HANDLE ClientToken,
          DWORD DesiredAccess,
          DWORD GrantedAccess,
      PPRIVILEGE_SET Privileges,
          BOOL ObjectCreation,
          BOOL AccessGranted,
         LPBOOL GenerateOnClose
    );


#line 6467 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );


#line 6482 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );


#line 6494 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );


#line 6506 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
      LPCSTR SubsystemName,
      LPCSTR ServiceName,
      HANDLE ClientToken,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );


#line 6520 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
AddConditionalAce (
      PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         UCHAR AceType,
         DWORD AccessMask,
         PSID pSid,
        PWCHAR ConditionStr,
      DWORD *ReturnLength
    );
#line 6536 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 6538 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
      LPCSTR lpFileName,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


#line 6554 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
       LPCSTR lpFileName,
       SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
       DWORD nLength,
      LPDWORD lpnLengthNeeded
    );


#line 6568 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 6570 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family



__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
             HANDLE hDirectory,
      LPVOID lpBuffer,
             DWORD nBufferLength,
             BOOL bWatchSubtree,
             DWORD dwNotifyFilter,
        LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesExW(
             HANDLE hDirectory,
      LPVOID lpBuffer,
             DWORD nBufferLength,
             BOOL bWatchSubtree,
             DWORD dwNotifyFilter,
        LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
             READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass
    );
#line 6606 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 6607 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 6609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
  
LPVOID
__stdcall
MapViewOfFileExNuma(
          HANDLE hFileMappingObject,
          DWORD dwDesiredAccess,
          DWORD dwFileOffsetHigh,
          DWORD dwFileOffsetLow,
          SIZE_T dwNumberOfBytesToMap,
      LPVOID lpBaseAddress,
          DWORD nndPreferred
    );

#line 6631 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
      const void *lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
      LPVOID lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
      const void *lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
      LPVOID lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
      FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
      LPCSTR lpsz,
          UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
      LPCWSTR lpsz,
          UINT_PTR ucchMax
    );




#line 6690 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 6692 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidA(
      LPCSTR lpSystemName,
      PSID Sid,
      LPSTR Name,
       LPDWORD cchName,
      LPSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidW(
      LPCWSTR lpSystemName,
      PSID Sid,
      LPWSTR Name,
       LPDWORD cchName,
      LPWSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );




#line 6726 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameA(
      LPCSTR lpSystemName,
          LPCSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameW(
      LPCWSTR lpSystemName,
          LPCWSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPWSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );




#line 6756 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 6758 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameLocalA(
          LPCSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameLocalW(
          LPCWSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPWSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );




#line 6792 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidLocalA(
      PSID Sid,
      LPSTR Name,
       LPDWORD cchName,
      LPSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidLocalW(
      PSID Sid,
      LPWSTR Name,
       LPDWORD cchName,
      LPWSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );




#line 6820 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"























#line 6844 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 6846 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
      LPCSTR lpSystemName,
          LPCSTR lpName,
         PLUID   lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
      LPCWSTR lpSystemName,
          LPCWSTR lpName,
         PLUID   lpLuid
    );




#line 6872 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeNameA(
      LPCSTR lpSystemName,
          PLUID   lpLuid,
      LPSTR lpName,
       LPDWORD cchName
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeNameW(
      LPCWSTR lpSystemName,
          PLUID   lpLuid,
      LPWSTR lpName,
       LPDWORD cchName
    );




#line 6896 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeDisplayNameA(
      LPCSTR lpSystemName,
          LPCSTR lpName,
      LPSTR lpDisplayName,
       LPDWORD cchDisplayName,
         LPDWORD lpLanguageId
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeDisplayNameW(
      LPCWSTR lpSystemName,
          LPCWSTR lpName,
      LPWSTR lpDisplayName,
       LPDWORD cchDisplayName,
         LPDWORD lpLanguageId
    );




#line 6922 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 6924 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
       LPCSTR lpDef,
      LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
       LPCWSTR lpDef,
      LPDCB lpDCB
    );




#line 6948 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
       LPCSTR lpDef,
      LPDCB lpDCB,
      LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
       LPCWSTR lpDef,
      LPDCB lpDCB,
      LPCOMMTIMEOUTS lpCommTimeouts
    );




#line 6970 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
          LPCSTR lpszName,
      HWND hWnd,
       LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
          LPCWSTR lpszName,
      HWND hWnd,
       LPCOMMCONFIG lpCC
    );




#line 6992 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
         LPCSTR lpszName,
      LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
         LPCWSTR lpszName,
      LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );




#line 7014 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
      LPCSTR lpszName,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
      LPCWSTR lpszName,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );




#line 7036 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7038 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family






#line 7048 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameA (
      LPSTR lpBuffer,
      LPDWORD nSize
    );
__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameW (
      LPWSTR lpBuffer,
      LPDWORD nSize
    );




#line 7070 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7072 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameA (
         LPCSTR Hostname,
      LPSTR ComputerName,
      LPDWORD nSize
    );
__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameW (
         LPCWSTR Hostname,
      LPWSTR ComputerName,
      LPDWORD nSize
    );




#line 7103 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
      LPSTR lpBuffer,
      LPDWORD pcbBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
      LPWSTR lpBuffer,
      LPDWORD pcbBuffer
    );




#line 7125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"













#line 7139 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





#line 7145 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


#line 7148 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


#line 7151 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
             LPCSTR lpszUsername,
         LPCSTR lpszDomain,
         LPCSTR lpszPassword,
             DWORD dwLogonType,
             DWORD dwLogonProvider,
     PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
             LPCWSTR lpszUsername,
         LPCWSTR lpszDomain,
         LPCWSTR lpszPassword,
             DWORD dwLogonType,
             DWORD dwLogonProvider,
     PHANDLE phToken
    );




#line 7181 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
                 LPCSTR lpszUsername,
             LPCSTR lpszDomain,
             LPCSTR lpszPassword,
                 DWORD dwLogonType,
                 DWORD dwLogonProvider,
     PHANDLE phToken,
     PSID  *ppLogonSid,
     PVOID *ppProfileBuffer,
            LPDWORD pdwProfileLength,
            PQUOTA_LIMITS pQuotaLimits
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
                 LPCWSTR lpszUsername,
             LPCWSTR lpszDomain,
             LPCWSTR lpszPassword,
                 DWORD dwLogonType,
                 DWORD dwLogonProvider,
     PHANDLE phToken,
     PSID  *ppLogonSid,
     PVOID *ppProfileBuffer,
            LPDWORD pdwProfileLength,
            PQUOTA_LIMITS pQuotaLimits
    );




#line 7217 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7219 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion




#line 7225 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Desktop Family












__declspec(dllimport)
  BOOL
__stdcall
CreateProcessWithLogonW(
             LPCWSTR lpUsername,
         LPCWSTR lpDomain,
             LPCWSTR lpPassword,
             DWORD dwLogonFlags,
         LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCWSTR lpCurrentDirectory,
             LPSTARTUPINFOW lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
      );

__declspec(dllimport)
  BOOL
__stdcall
CreateProcessWithTokenW(
             HANDLE hToken,
             DWORD dwLogonFlags,
         LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCWSTR lpCurrentDirectory,
             LPSTARTUPINFOW lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
      );

#line 7272 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
      HANDLE TokenHandle
    );







__declspec(dllimport)
BOOL
__stdcall
RegisterWaitForSingleObject(
     PHANDLE phNewWaitObject,
             HANDLE hObject,
             WAITORTIMERCALLBACK Callback,
         PVOID Context,
             ULONG dwMilliseconds,
             ULONG dwFlags
    );

__declspec(dllimport)
 
BOOL
__stdcall
UnregisterWait(
      HANDLE WaitHandle
    );

__declspec(dllimport)
BOOL
__stdcall
BindIoCompletionCallback (
      HANDLE FileHandle,
      LPOVERLAPPED_COMPLETION_ROUTINE Function,
      ULONG Flags
    );

__declspec(dllimport)
HANDLE
__stdcall
SetTimerQueueTimer(
      HANDLE TimerQueue,
          WAITORTIMERCALLBACK Callback,
      PVOID Parameter,
          DWORD DueTime,
          DWORD Period,
          BOOL PreferIo
    );

__declspec(dllimport)
 
BOOL
__stdcall
CancelTimerQueueTimer(
      HANDLE TimerQueue,
          HANDLE Timer
    );

__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueue(
      HANDLE TimerQueue
    );

#line 7345 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7347 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"









__forceinline
void
InitializeThreadpoolEnvironment(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}

__forceinline
void
SetThreadpoolCallbackPool(
      PTP_CALLBACK_ENVIRON pcbe,
         PTP_POOL             ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}

__forceinline
void
SetThreadpoolCallbackCleanupGroup(
       PTP_CALLBACK_ENVIRON              pcbe,
          PTP_CLEANUP_GROUP                 ptpcg,
      PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

__forceinline
void
SetThreadpoolCallbackRunsLong(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}

__forceinline
void
SetThreadpoolCallbackLibrary(
      PTP_CALLBACK_ENVIRON pcbe,
         PVOID                mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}



__forceinline
void
SetThreadpoolCallbackPriority(
      PTP_CALLBACK_ENVIRON pcbe,
         TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}

#line 7418 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__forceinline
void
DestroyThreadpoolEnvironment(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}

#line 7429 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7431 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7433 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7435 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



#pragma region Desktop Family




__forceinline
void
SetThreadpoolCallbackPersistent(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}

#line 7453 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7455 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family






__declspec(dllimport)
 
HANDLE
__stdcall
CreatePrivateNamespaceA(
      LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
          LPVOID lpBoundaryDescriptor,
          LPCSTR lpAliasPrefix
    );





#line 7479 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenPrivateNamespaceA(
          LPVOID lpBoundaryDescriptor,
          LPCSTR lpAliasPrefix
    );





#line 7494 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"






__declspec(dllimport)
 
HANDLE
__stdcall
CreateBoundaryDescriptorA(
      LPCSTR Name,
      ULONG Flags
    );





#line 7514 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7516 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
AddIntegrityLabelToBoundaryDescriptor(
      HANDLE * BoundaryDescriptor,
      PSID IntegrityLabel
    );

#line 7530 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#line 7533 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Desktop Family
















typedef struct tagHW_PROFILE_INFOA {
    DWORD  dwDockInfo;
    CHAR   szHwProfileGuid[39];
    CHAR   szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD  dwDockInfo;
    WCHAR  szHwProfileGuid[39];
    WCHAR  szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;




typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
#line 7568 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
      LPHW_PROFILE_INFOA  lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
      LPHW_PROFILE_INFOW  lpHwProfileInfo
    );




#line 7587 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 7588 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
      LPOSVERSIONINFOEXA lpVersionInformation,
         DWORD dwTypeMask,
         DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
      LPOSVERSIONINFOEXW lpVersionInformation,
         DWORD dwTypeMask,
         DWORDLONG dwlConditionMask
    );




#line 7610 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


#line 7613 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"












#pragma once
#line 15 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 24086 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 28499 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"



constexpr
#line 28504 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"
__forceinline   HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}


#line 28508 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"










































#line 28551 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"


























































































































































































#line 28738 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 49056 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 61041 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\winerror.h"
#line 7620 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"










#pragma once
#line 13 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"










extern "C" {
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"



#pragma region Application Family or OneCore Family






typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
      const TIME_ZONE_INFORMATION* lpTimeZoneInformation,
      const SYSTEMTIME* lpUniversalTime,
      LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
      const TIME_ZONE_INFORMATION* lpTimeZoneInformation,
      const SYSTEMTIME* lpLocalTime,
      LPSYSTEMTIME lpUniversalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
FileTimeToSystemTime(
      const FILETIME* lpFileTime,
      LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToFileTime(
      const SYSTEMTIME* lpSystemTime,
      LPFILETIME lpFileTime
    );


__declspec(dllimport)
 
DWORD
__stdcall
GetTimeZoneInformation(
      LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );


#line 109 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
      const TIME_ZONE_INFORMATION* lpTimeZoneInformation
    );




__declspec(dllimport)
BOOL
__stdcall
SetDynamicTimeZoneInformation(
      const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation
    );


#line 133 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"

#line 135 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family




__declspec(dllimport)
 
DWORD
__stdcall
GetDynamicTimeZoneInformation(
      PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );


#line 152 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"



 
BOOL
__stdcall
GetTimeZoneInformationForYear(
      USHORT wYear,
      PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
      LPTIME_ZONE_INFORMATION ptzi
    );


#line 166 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"





__declspec(dllimport)
 
DWORD
__stdcall
EnumDynamicTimeZoneInformation(
      const DWORD dwIndex,
      PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation
    );


__declspec(dllimport)
 
DWORD
__stdcall
GetDynamicTimeZoneInformationEffectiveYears(
      const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
      LPDWORD FirstYear,
      LPDWORD LastYear
    );


__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToTzSpecificLocalTimeEx(
      const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation,
      const SYSTEMTIME* lpUniversalTime,
      LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
TzSpecificLocalTimeToSystemTimeEx(
      const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation,
      const SYSTEMTIME* lpLocalTime,
      LPSYSTEMTIME lpUniversalTime
    );


#line 215 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"

#line 217 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"
#pragma endregion




}
#line 224 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"

#line 226 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\timezoneapi.h"

#line 7621 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Desktop Family














__declspec(dllimport)
BOOL
__stdcall
SetSystemPowerState(
      BOOL fSuspend,
      BOOL fForce
    );

#line 7646 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7648 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region  Desktop or PC Family

























typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE SystemStatusFlag;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

__declspec(dllimport)
BOOL
__stdcall
GetSystemPowerStatus(
      LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

#line 7693 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7695 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion






#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPagesScatter(
      PVOID *VirtualAddresses,
      ULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );

#line 7715 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
HANDLE
__stdcall
CreateJobObjectA(
      LPSECURITY_ATTRIBUTES lpJobAttributes,
      LPCSTR lpName
    );





#line 7734 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenJobObjectA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );





#line 7750 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7752 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
CreateJobSet (
      ULONG NumJob,
      PJOB_SET_ARRAY UserJobSet,
      ULONG Flags);

#line 7766 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeA(
      LPSTR lpszVolumeName,
      DWORD cchBufferLength
    );


#line 7781 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeA(
      HANDLE hFindVolume,
      LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );


#line 7793 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7795 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointA(
      LPCSTR lpszRootPathName,
      LPSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointW(
      LPCWSTR lpszRootPathName,
      LPWSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );




#line 7821 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointA(
      HANDLE hFindVolumeMountPoint,
      LPSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointW(
      HANDLE hFindVolumeMountPoint,
      LPWSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );




#line 7843 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindVolumeMountPointClose(
      HANDLE hFindVolumeMountPoint
    );

__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint,
      LPCSTR lpszVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint,
      LPCWSTR lpszVolumeName
    );




#line 7870 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7872 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint
    );


#line 7886 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7888 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




#line 7896 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint,
      LPSTR lpszVolumeName,
      DWORD cchBufferLength
);

__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameA(
      LPCSTR lpszFileName,
      LPSTR lpszVolumePathName,
      DWORD cchBufferLength
    );


#line 7917 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7919 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#line 7922 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
       LPCSTR lpszVolumeName,
         LPCH lpszVolumePathNames,
       DWORD cchBufferLength,
      PDWORD lpcchReturnLength
    );



#line 7941 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 7943 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"












typedef struct tagACTCTXA {
    ULONG       cbSize;
    DWORD       dwFlags;
    LPCSTR      lpSource;
    USHORT      wProcessorArchitecture;
    LANGID      wLangId;
    LPCSTR      lpAssemblyDirectory;
    LPCSTR      lpResourceName;
    LPCSTR      lpApplicationName;
    HMODULE     hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG       cbSize;
    DWORD       dwFlags;
    LPCWSTR     lpSource;
    USHORT      wProcessorArchitecture;
    LANGID      wLangId;
    LPCWSTR     lpAssemblyDirectory;
    LPCWSTR     lpResourceName;
    LPCWSTR     lpApplicationName;
    HMODULE     hModule;
} ACTCTXW, *PACTCTXW;




typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;
#line 7984 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;



typedef PCACTCTXA PCACTCTX;
#line 7992 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxA(
      PCACTCTXA pActCtx
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxW(
      PCACTCTXW pActCtx
    );




#line 8012 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
void
__stdcall
AddRefActCtx(
      HANDLE hActCtx
    );


__declspec(dllimport)
void
__stdcall
ReleaseActCtx(
      HANDLE hActCtx
    );

__declspec(dllimport)
BOOL
__stdcall
ZombifyActCtx(
      HANDLE hActCtx
    );


 
__declspec(dllimport)
BOOL
__stdcall
ActivateActCtx(
      HANDLE hActCtx,
        ULONG_PTR *lpCookie
    );




 
__declspec(dllimport)
BOOL
__stdcall
DeactivateActCtx(
      DWORD dwFlags,
      ULONG_PTR ulCookie
    );

__declspec(dllimport)
BOOL
__stdcall
GetCurrentActCtx(
     HANDLE *lphActCtx);


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;







 
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringA(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
            LPCSTR lpStringToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
 
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringW(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
            LPCWSTR lpStringToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );




#line 8137 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionGuid(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
        const GUID *lpGuidToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );





typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE  hActCtx;
    DWORD   dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;



#line 8163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 8164 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"




































 
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxW(
           DWORD dwFlags,
           HANDLE hActCtx,
       PVOID pvSubInstance,
           ULONG ulInfoClass,
      PVOID pvBuffer,
           SIZE_T cbBuffer,
      SIZE_T *pcbWrittenOrRequired
    );

typedef   BOOL (__stdcall * PQUERYACTCTXW_FUNC)(
           DWORD dwFlags,
           HANDLE hActCtx,
       PVOID pvSubInstance,
           ULONG ulInfoClass,
      PVOID pvBuffer,
           SIZE_T cbBuffer,
      SIZE_T *pcbWrittenOrRequired
    );

#line 8225 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 8227 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
DWORD
__stdcall
WTSGetActiveConsoleSessionId(
    void
    );

#line 8243 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
DWORD
__stdcall
WTSGetServiceSessionId(
    void
    );

__declspec(dllimport)
BOOLEAN
__stdcall
WTSIsServerContainer(
    void
    );

#line 8261 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
WORD
__stdcall
GetActiveProcessorGroupCount(
    void
    );

__declspec(dllimport)
WORD
__stdcall
GetMaximumProcessorGroupCount(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetActiveProcessorCount(
      WORD GroupNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetMaximumProcessorCount(
      WORD GroupNumber
    );

#line 8293 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
       UCHAR Processor,
      PUCHAR NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeNumberFromHandle(
       HANDLE hFile,
      PUSHORT NodeNumber
    );

#line 8317 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNodeEx(
       PPROCESSOR_NUMBER Processor,
      PUSHORT NodeNumber
    );

#line 8329 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
       UCHAR Node,
      PULONGLONG ProcessorMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
       UCHAR Node,
      PULONGLONG AvailableBytes
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNodeEx(
       USHORT Node,
      PULONGLONG AvailableBytes
    );

#line 8357 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNode(
       ULONG ProximityId,
      PUCHAR NodeNumber
    );

#line 8369 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 8371 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family





typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);





























#line 8410 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRecoveryCallback(
       APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
       PVOID pvParameter,
      DWORD dwPingInterval,
      DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRecoveryCallback(void);

__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRestart(
      PCWSTR pwzCommandline,
      DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRestart(void);

#line 8446 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 8448 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRecoveryCallback(
       HANDLE hProcess,
      APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
     PVOID* ppvParameter,
      PDWORD pdwPingInterval,
      PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRestartSettings(
      HANDLE hProcess,
      PWSTR pwzCommandline,
      PDWORD pcchSize,
      PDWORD pdwFlags
    );

#line 8477 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 8479 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
HRESULT
__stdcall
ApplicationRecoveryInProgress(
      PBOOL pbCancelled
    );

__declspec(dllimport)
void
__stdcall
ApplicationRecoveryFinished(
      BOOL bSuccess
    );

#line 8501 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 8503 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion



#pragma region Application Family or OneCore Family


typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;




#line 8535 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



#line 8539 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

typedef struct _FILE_RENAME_INFO {

    union {
        BOOLEAN ReplaceIfExists;  
        DWORD Flags;              
    } ;


#line 8549 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileA;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;








typedef struct _FILE_DISPOSITION_INFO_EX {
    DWORD Flags;
} FILE_DISPOSITION_INFO_EX, *PFILE_DISPOSITION_INFO_EX;
#line 8599 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_FULL_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO;

typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;





typedef struct _FILE_ALIGNMENT_INFO {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFO, *PFILE_ALIGNMENT_INFO;




















typedef struct _FILE_STORAGE_INFO {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
} FILE_STORAGE_INFO, *PFILE_STORAGE_INFO;




typedef struct _FILE_ID_INFO {
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFO, *PFILE_ID_INFO;




typedef struct _FILE_ID_EXTD_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFO, *PFILE_ID_EXTD_DIR_INFO;

#line 8710 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"












#line 8723 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"









#line 8733 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"










#line 8744 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

typedef struct _FILE_REMOTE_PROTOCOL_INFO
{
    
    USHORT StructureVersion;     
    USHORT StructureSize;        

    ULONG  Protocol;             

    
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;

    
    ULONG  Flags;

    struct {
        ULONG Reserved[8];
    } GenericReserved;

    





#line 8774 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


    union {

        struct {

            struct {
                ULONG Capabilities;
            } Server;

            struct {
                ULONG Capabilities;
                ULONG CachingFlags;
            } Share;

        } Smb2;

        ULONG Reserved[16];

    } ProtocolSpecific;

#line 8796 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandleEx(
       HANDLE hFile,
       FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
      LPVOID lpFileInformation,
       DWORD dwBufferSize
);

#line 8810 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      ExtendedFileIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize;  
    FILE_ID_TYPE Type; 
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;

        FILE_ID_128 ExtendedFileId;
#line 8831 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
    } ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

__declspec(dllimport)
HANDLE
__stdcall
OpenFileById (
          HANDLE hVolumeHint,
          LPFILE_ID_DESCRIPTOR lpFileId,
          DWORD dwDesiredAccess,
          DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          DWORD dwFlagsAndAttributes
    );

#line 8847 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#line 8850 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#pragma region Desktop Family or OneCore Family























__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkA (
      LPCSTR lpSymlinkFileName,
      LPCSTR lpTargetFileName,
      DWORD dwFlags
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkW (
      LPCWSTR lpSymlinkFileName,
      LPCWSTR lpTargetFileName,
      DWORD dwFlags
    );




#line 8896 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 8898 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
QueryActCtxSettingsW(
           DWORD dwFlags,
           HANDLE hActCtx,
           PCWSTR settingsNameSpace,
               PCWSTR settingName,
      PWSTR pvBuffer,
           SIZE_T dwBuffer,
      SIZE_T *pdwWrittenOrRequired
    );

#line 8915 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 8917 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA (
          LPCSTR lpSymlinkFileName,
          LPCSTR lpTargetFileName,
          DWORD dwFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW (
          LPCWSTR lpSymlinkFileName,
          LPCWSTR lpTargetFileName,
          DWORD dwFlags,
          HANDLE hTransaction
    );




#line 8947 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 8949 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
ReplacePartitionUnit (
      PWSTR TargetPartition,
      PWSTR SparePartition,
      ULONG Flags
    );

#line 8962 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
AddSecureMemoryCacheCallback(
       PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveSecureMemoryCacheCallback(
       PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

#line 8981 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 8983 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family or OneCore Family


 
__declspec(dllimport)
BOOL
__stdcall
CopyContext(
      PCONTEXT Destination,
      DWORD ContextFlags,
      PCONTEXT Source
    );

#line 9001 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Application Family or OneCore Family


 
__declspec(dllimport)
BOOL
__stdcall
InitializeContext(
      PVOID Buffer,
      DWORD ContextFlags,
      PCONTEXT* Context,
      PDWORD ContextLength
    );
#line 9017 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion



#pragma region Application Family or OneCore Family


__declspec(dllimport)
DWORD64
__stdcall
GetEnabledXStateFeatures(
    void
    );

 
__declspec(dllimport)
BOOL
__stdcall
GetXStateFeaturesMask(
      PCONTEXT Context,
      PDWORD64 FeatureMask
    );

 
__declspec(dllimport)
PVOID
__stdcall
LocateXStateFeature(
      PCONTEXT Context,
      DWORD FeatureId,
      PDWORD Length
    );

#line 9051 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


 
__declspec(dllimport)
BOOL
__stdcall
SetXStateFeaturesMask(
      PCONTEXT Context,
      DWORD64 FeatureMask
    );

#line 9066 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#line 9069 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 9071 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
EnableThreadProfiling(
      HANDLE ThreadHandle,
      DWORD Flags,
      DWORD64 HardwareCounters,
      HANDLE *PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
DisableThreadProfiling(
      HANDLE PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
QueryThreadProfiling(
      HANDLE ThreadHandle,
      PBOOLEAN Enabled
    );

__declspec(dllimport)
DWORD
__stdcall
ReadThreadProfilingData(
      HANDLE PerformanceDataHandle,
      DWORD Flags,
      PPERFORMANCE_DATA PerformanceData
    );

#line 9112 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#line 9115 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
DWORD
__stdcall
RaiseCustomSystemEventTrigger(
      PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG CustomSystemEventTriggerConfig
    );

#line 9129 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#pragma endregion

#line 9132 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"






#line 9139 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 9140 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"


}
#line 9144 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



#pragma warning(pop)




#line 9153 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 9154 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



#line 9158 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"




























#pragma once
#line 9188 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"










#line 9199 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"





extern "C++" {

__forceinline
unsigned
_InterlockedIncrement(
       unsigned volatile *Addend
    )
{
    return (unsigned) _InterlockedIncrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedIncrement(
       unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedIncrement((volatile long*) Addend);
}




__forceinline
unsigned __int64
_InterlockedIncrement(
       unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) (_InlineInterlockedIncrement64)((volatile __int64*) Addend);
}

#line 9237 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__forceinline
unsigned
_InterlockedDecrement(
       unsigned volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedDecrement(
       unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}




__forceinline
unsigned __int64
_InterlockedDecrement(
       unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) (_InlineInterlockedDecrement64)((volatile __int64*) Addend);
}

#line 9269 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"



__forceinline
unsigned
_InterlockedExchange(
       unsigned volatile *Target,
      unsigned Value
    )
{
    return (unsigned) _InterlockedExchange((volatile long*) Target, (long) Value);
}

__forceinline
unsigned long
_InterlockedExchange(
       unsigned long volatile *Target,
      unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchange((volatile long*) Target, (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchange(
       unsigned __int64 volatile *Target,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedExchange64((volatile __int64*) Target, (__int64) Value);
}

#line 9305 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__forceinline
unsigned
_InterlockedExchangeAdd(
       unsigned volatile *Addend,
      unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned
InterlockedExchangeSubtract(
       unsigned volatile *Addend,
      unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend,  - (long) Value);
}

__forceinline
unsigned long
_InterlockedExchangeAdd(
       unsigned long volatile *Addend,
      unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeSubtract(
       unsigned long volatile *Addend,
      unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend,  - (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchangeAdd(
       unsigned __int64 volatile *Addend,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedExchangeAdd64((volatile __int64*) Addend,  (__int64) Value);
}

__forceinline
unsigned __int64
InterlockedExchangeSubtract(
       unsigned __int64 volatile *Addend,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedExchangeAdd64((volatile __int64*) Addend,  - (__int64) Value);
}

#line 9369 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

__forceinline
unsigned
_InterlockedCompareExchange(
       unsigned volatile *Destination,
      unsigned Exchange,
      unsigned Comperand
    )
{
    return (unsigned) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}

__forceinline
unsigned long
_InterlockedCompareExchange(
       unsigned long volatile *Destination,
      unsigned long Exchange,
      unsigned long Comperand
    )
{
    return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}



__forceinline
unsigned __int64
_InterlockedCompareExchange(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Exchange,
      unsigned __int64 Comperand
    )
{
    return (unsigned __int64) _InterlockedCompareExchange64((volatile __int64*) Destination, (__int64) Exchange, (__int64) Comperand);
}

__forceinline
unsigned __int64
_InterlockedAnd(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedAnd64((volatile __int64*) Destination, (__int64) Value);
}

__forceinline
unsigned __int64
_InterlockedOr(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedOr64((volatile __int64*) Destination, (__int64) Value);
}

__forceinline
unsigned __int64
_InterlockedXor(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) _InlineInterlockedXor64((volatile __int64*) Destination, (__int64) Value);
}

#line 9436 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 9438 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

} 
#line 9441 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"

#line 9443 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"




#line 9448 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 9449 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 9450 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 9451 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 9452 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 9453 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winbase.h"
#line 173 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"














#pragma once


#pragma warning(push)
#pragma warning(disable: 4201)      



#pragma warning(disable: 4820)      
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"














#line 40 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"









#line 50 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


extern "C" {
#line 54 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
















































#line 103 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





#line 109 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"






#line 116 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"






























#line 147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"













#line 161 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

















#line 179 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
















#line 196 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


#line 199 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


#line 202 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"














































































#line 281 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"








#pragma region Desktop Family



typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
#line 300 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 302 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 305 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





































































































#line 407 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"











#pragma region Desktop Family






typedef struct _PSINJECTDATA {

    DWORD   DataBytes;      
    WORD    InjectionPoint; 
    WORD    PageNumber;     

    

} PSINJECTDATA, *PPSINJECTDATA;

#line 436 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion



































































#line 505 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family






typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;

#line 535 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion



















































#pragma region Application Family


typedef struct  tagXFORM
  {
    FLOAT   eM11;
    FLOAT   eM12;
    FLOAT   eM21;
    FLOAT   eM22;
    FLOAT   eDx;
    FLOAT   eDy;
  } XFORM, *PXFORM,  *LPXFORM;


typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;

#line 613 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack1.h"
#line 616 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagRGBTRIPLE {
        BYTE    rgbtBlue;
        BYTE    rgbtGreen;
        BYTE    rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE,  *NPRGBTRIPLE,  *LPRGBTRIPLE;

#line 627 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 630 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;

#line 642 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef RGBQUAD * LPRGBQUAD;

#line 650 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion


















#pragma region Application Family


typedef LONG   LCSCSTYPE;



typedef LONG    LCSGAMUTMATCH;



























typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;

#line 718 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef CIEXYZ   *LPCIEXYZ;

#line 726 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagICEXYZTRIPLE
{
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;

#line 739 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;

#line 747 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family







typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR   lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
#line 788 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 790 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 793 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family



typedef struct tagBITMAPCOREHEADER {
        DWORD   bcSize;                 
        WORD    bcWidth;
        WORD    bcHeight;
        WORD    bcPlanes;
        WORD    bcBitCount;
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

#line 807 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;

#line 827 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


typedef struct {
        DWORD        bV4Size;
        LONG         bV4Width;
        LONG         bV4Height;
        WORD         bV4Planes;
        WORD         bV4BitCount;
        DWORD        bV4V4Compression;
        DWORD        bV4SizeImage;
        LONG         bV4XPelsPerMeter;
        LONG         bV4YPelsPerMeter;
        DWORD        bV4ClrUsed;
        DWORD        bV4ClrImportant;
        DWORD        bV4RedMask;
        DWORD        bV4GreenMask;
        DWORD        bV4BlueMask;
        DWORD        bV4AlphaMask;
        DWORD        bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD        bV4GammaRed;
        DWORD        bV4GammaGreen;
        DWORD        bV4GammaBlue;
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;

#line 858 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion
#line 860 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



#pragma region Desktop Family

typedef struct {
        DWORD        bV5Size;
        LONG         bV5Width;
        LONG         bV5Height;
        WORD         bV5Planes;
        WORD         bV5BitCount;
        DWORD        bV5Compression;
        DWORD        bV5SizeImage;
        LONG         bV5XPelsPerMeter;
        LONG         bV5YPelsPerMeter;
        DWORD        bV5ClrUsed;
        DWORD        bV5ClrImportant;
        DWORD        bV5RedMask;
        DWORD        bV5GreenMask;
        DWORD        bV5BlueMask;
        DWORD        bV5AlphaMask;
        DWORD        bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD        bV5GammaRed;
        DWORD        bV5GammaGreen;
        DWORD        bV5GammaBlue;
        DWORD        bV5Intent;
        DWORD        bV5ProfileData;
        DWORD        bV5ProfileSize;
        DWORD        bV5Reserved;
} BITMAPV5HEADER,  *LPBITMAPV5HEADER, *PBITMAPV5HEADER;

#line 893 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion




#line 899 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"









#line 909 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;

#line 919 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

#line 930 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 933 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;

#line 946 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 949 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"






#pragma region Application Family


typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

#line 965 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;

#line 978 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion






#line 986 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;

#line 998 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1001 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#line 1002 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



#pragma region Application Family




typedef struct tagHANDLETABLE
  {
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD       rdSize;
    WORD        rdFunction;
    WORD        rdParm[1];
  } METARECORD;

#line 1023 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagMETARECORD  *PMETARECORD;

#line 1031 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagMETARECORD   *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG        mm;
    LONG        xExt;
    LONG        yExt;
    HMETAFILE   hMF;
  } METAFILEPICT,  *LPMETAFILEPICT;

#line 1047 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 1050 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct tagMETAHEADER
{
    WORD        mtType;
    WORD        mtHeaderSize;
    WORD        mtVersion;
    DWORD       mtSize;
    WORD        mtNoObjects;
    DWORD       mtMaxRecord;
    WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER  *PMETAHEADER;
typedef struct tagMETAHEADER   *LPMETAHEADER;

#line 1068 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 1071 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Application Family



typedef struct tagENHMETARECORD
{
    DWORD   iType;              
    DWORD   nSize;              
    DWORD   dParm[1];           
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD   iType;              
    DWORD   nSize;              
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     

    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                
#line 1112 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

    SIZEL   szlMicrometers;     
#line 1115 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

#line 1119 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1122 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"









#pragma region Desktop Family








    typedef BYTE BCHAR;
#line 1142 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 1144 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion



#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 1149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
#line 1210 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 1212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 1215 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#line 1216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"















#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack4.h"
#line 1232 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
#line 1301 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 1303 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 1306 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
#line 1327 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 1329 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion
#line 1331 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 1333 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



#pragma region Desktop Family


typedef struct tagPELARRAY
  {
    LONG        paXCount;
    LONG        paYCount;
    LONG        paXExt;
    LONG        paYExt;
    BYTE        paRGBs;
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;

#line 1349 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family



typedef struct tagLOGBRUSH
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG_PTR   lbHatch;
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG       lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32,  *NPLOGBRUSH32,  *LPLOGBRUSH32;

#line 1370 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;

#line 1381 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family



typedef struct tagLOGPEN
  {
    UINT        lopnStyle;
    POINT       lopnWidth;
    COLORREF    lopnColor;
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;

#line 1395 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagEXTLOGPEN {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG_PTR   elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;

#line 1411 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagEXTLOGPEN32 {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG       elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32,  *NPEXTLOGPEN32,  *LPEXTLOGPEN32;



typedef struct tagPALETTEENTRY {
    BYTE        peRed;
    BYTE        peGreen;
    BYTE        peBlue;
    BYTE        peFlags;
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;
#line 1435 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




typedef struct tagLOGPALETTE {
    WORD        palVersion;
    WORD        palNumEntries;
      PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;
#line 1445 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





typedef struct tagLOGFONTA
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    CHAR      lfFaceName[32];
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    WCHAR     lfFaceName[32];
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
#line 1495 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 1497 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family



typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE     elfFullName[64];
    BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR    elfFullName[64];
    WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
#line 1525 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    BYTE        elfScript[32];
} ENUMLOGFONTEXA,  *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    WCHAR       elfScript[32];
} ENUMLOGFONTEXW,  *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
#line 1548 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#line 1549 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 1551 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion





















#line 1574 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"








#line 1583 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




#line 1588 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"






#line 1595 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"








































#line 1636 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




                                    

                                    

                                    



































#pragma region Application Family


typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE, * LPPANOSE;

















































































































typedef struct tagEXTLOGFONTA {
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
#line 1844 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 1846 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion
















































































#line 1928 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




#line 1933 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"







#line 1941 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


































































































                             

                             

                             





#line 2050 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"










































































#line 2125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





































#line 2163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




























#pragma region Application Family



typedef struct _devicemodeA {
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      } ;
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
      } ;
    } ;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    } ;
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 2247 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#line 2248 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      } ;
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
      } ;
    } ;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    } ;
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 2301 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#line 2302 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
#line 2314 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"












































































































#line 2423 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 2425 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion








#line 2435 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"










#line 2446 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


#line 2449 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"






















#line 2472 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


#line 2475 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"













































































#line 2553 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




















































#line 2606 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"







#line 2614 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"












































#line 2659 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
















#line 2676 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

















































#line 2726 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Application Family


typedef struct _DISPLAY_DEVICEA {
    DWORD  cb;
    CHAR   DeviceName[32];
    CHAR   DeviceString[128];
    DWORD  StateFlags;
    CHAR   DeviceID[128];
    CHAR   DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD  cb;
    WCHAR  DeviceName[32];
    WCHAR  DeviceString[128];
    DWORD  StateFlags;
    WCHAR  DeviceID[128];
    WCHAR  DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;





typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
#line 2755 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 2757 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion








#line 2767 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


#line 2770 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





#line 2776 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



#line 2780 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





#line 2786 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




                                          
                                          

#pragma region Application Family


typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32    Numerator;
    UINT32    Denominator;
} DISPLAYCONFIG_RATIONAL;

typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER                   = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15                    =  0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO                  =  1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO         =  2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO         =  3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI                     =  4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI                    =  5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS                    =  6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN                   =  8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI                     =  9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL    = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED    = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL            = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED            = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE              = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST                = 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED          = 16,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL                = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32            = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED                 = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE                 = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED                  = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST  = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST  = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32                = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;

typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64                          pixelRate;
    DISPLAYCONFIG_RATIONAL          hSyncFreq;
    DISPLAYCONFIG_RATIONAL          vSyncFreq;
    DISPLAYCONFIG_2DREGION          activeSize;
    DISPLAYCONFIG_2DREGION          totalSize;

    union
    {
        struct
        {
            UINT32 videoStandard : 16;

            
            UINT32 vSyncFreqDivider : 6;

            UINT32 reserved : 10;
        } AdditionalSignalInfo;

        UINT32 videoStandard;
    } ;

    
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY                  = 1,
    DISPLAYCONFIG_SCALING_CENTERED                  = 2,
    DISPLAYCONFIG_SCALING_STRETCHED                 = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX    = 4,
    DISPLAYCONFIG_SCALING_CUSTOM                    = 5,
    DISPLAYCONFIG_SCALING_PREFERRED                 = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32              = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;

typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY     = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90     = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180    = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270    = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;

typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE        = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET        = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP          = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP         = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP         = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP         = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI        = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32  = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;

typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32                      width;
    UINT32                      height;
    DISPLAYCONFIG_PIXELFORMAT   pixelFormat;
    POINTL                      position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO   targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO
{
    POINTL PathSourceSize;
    RECTL DesktopImageRegion;
    RECTL DesktopImageClip;
} DISPLAYCONFIG_DESKTOP_IMAGE_INFO;

typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE    infoType;
    UINT32                          id;
    LUID                            adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE   targetMode;
        DISPLAYCONFIG_SOURCE_MODE   sourceMode;
        DISPLAYCONFIG_DESKTOP_IMAGE_INFO    desktopImageInfo;
    } ;
} DISPLAYCONFIG_MODE_INFO;







typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID    adapterId;
    UINT32  id;
    union
    {
        UINT32 modeInfoIdx;
        struct
        {
            UINT32 cloneGroupId       : 16;
            UINT32 sourceModeInfoIdx  : 16;
        } ;
    } ;

    UINT32  statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;







typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID                                    adapterId;
    UINT32                                  id;
    union
    {
        UINT32                                  modeInfoIdx;
        struct
        {
            UINT32 desktopModeInfoIdx : 16;
            UINT32 targetModeInfoIdx  : 16;
        } ;
    } ;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY   outputTechnology;
    DISPLAYCONFIG_ROTATION                  rotation;
    DISPLAYCONFIG_SCALING                   scaling;
    DISPLAYCONFIG_RATIONAL                  refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING         scanLineOrdering;
    BOOL                                    targetAvailable;
    UINT32                                  statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;











typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO  sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO  targetInfo;
    UINT32                          flags;
} DISPLAYCONFIG_PATH_INFO;










typedef enum DISPLAYCONFIG_TOPOLOGY_ID
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL       = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE          = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND         = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL       = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32   = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;


typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME                 = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME                 = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE       = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME                = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE          = 5,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE            = 6,
      DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION  = 7,
      DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION  = 8,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO         = 9,
      DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE        = 10,
      DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL             = 11,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32                = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;

#line 3043 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion


#pragma region Application Family


typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE  type;
    UINT32                          size;
    LUID                            adapterId;
    UINT32                          id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;

#line 3058 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
    WCHAR                                       viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32  friendlyNameFromEdid : 1;
            UINT32  friendlyNameForced : 1;
            UINT32  edidIdsValid : 1;
            UINT32  reserved : 29;
        } ;
        UINT32  value;
    } ;
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS      flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY       outputTechnology;
    UINT16                                      edidManufactureId;
    UINT16                                      edidProductCodeId;
    UINT32                                      connectorInstance;
    WCHAR                                       monitorFriendlyDeviceName[64];
    WCHAR                                       monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    UINT32                              width;
    UINT32                              height;
    DISPLAYCONFIG_TARGET_MODE           targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;

typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    WCHAR                               adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;

typedef struct DISPLAYCONFIG_TARGET_BASE_TYPE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER      header;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
} DISPLAYCONFIG_TARGET_BASE_TYPE;

typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn    : 1;
            UINT32 reserved             : 31;
        } ;
        UINT32 value;
    } ;
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;

typedef struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    union
    {
        struct
        {
            UINT32 disableMonitorVirtualResolution  : 1;
            UINT32 reserved                         : 31;
        } ;
        UINT32 value;
    } ;
} DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION;

typedef enum _DISPLAYCONFIG_COLOR_ENCODING
{
    DISPLAYCONFIG_COLOR_ENCODING_RGB           = 0,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR444      = 1,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR422      = 2,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR420      = 3,
    DISPLAYCONFIG_COLOR_ENCODING_INTENSITY     = 4,
    DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32  = 0xFFFFFFFF
} DISPLAYCONFIG_COLOR_ENCODING;

typedef struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
          UINT32 advancedColorSupported  :1;    
          UINT32 advancedColorEnabled    :1;    
          UINT32 wideColorEnforced       :1;    
          UINT32 reserved                :29;
        } ;

        UINT32 value;
    } ;

    DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
    UINT32 bitsPerColorChannel;
} DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;

typedef struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
          UINT32 enableAdvancedColor  :1;
          UINT32 reserved  :31;
        } ;

        UINT32 value;
    };
} DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;

typedef struct _DISPLAYCONFIG_SDR_WHITE_LEVEL
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;

    
    
    
    
    ULONG SDRWhiteLevel;
} DISPLAYCONFIG_SDR_WHITE_LEVEL;

#line 3200 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion



































#line 3237 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





#pragma region Application Family


typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;

#line 3259 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion






#pragma region Desktop Family


typedef struct _ABC {
    int     abcA;
    UINT    abcB;
    int     abcC;
} ABC, *PABC,  *NPABC,  *LPABC;

typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;

#line 3282 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion







#pragma region Desktop Family


typedef struct _OUTLINETEXTMETRICA {
    UINT    otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT    otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
#line 3372 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 3374 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion





#line 3381 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagPOLYTEXTA
{
    int       x;
    int       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int       x;
    int       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
#line 3416 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 3418 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct _FIXED {

    WORD    fract;
    short   value;



#line 3431 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
} FIXED;


typedef struct _MAT2 {
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2,  *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    short   gmCellIncX;
    short   gmCellIncY;
} GLYPHMETRICS,  *LPGLYPHMETRICS;

#line 3452 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion













#line 3467 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



#line 3471 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"







#pragma region Desktop Family


typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD    wType;
    WORD    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;

#line 3502 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion













































#pragma region Desktop Family


typedef struct tagGCP_RESULTSA
    {
    DWORD   lStructSize;
    LPSTR     lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD   lStructSize;
    LPWSTR    lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
#line 3582 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 3584 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion
#line 3586 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct _RASTERIZER_STATUS {
    short   nSize;
    short   wFlags;
    short   nLanguageID;
} RASTERIZER_STATUS,  *LPRASTERIZER_STATUS;

#line 3597 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion





#pragma region Application Family



typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;

#line 3638 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion


































#pragma region Desktop Family





typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);




#line 3686 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"








#line 3695 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;
#line 3703 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);











#line 3718 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 3720 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


__declspec(dllimport) int __stdcall AddFontResourceA(  LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW(  LPCWSTR);




#line 3734 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

 __declspec(dllimport) BOOL  __stdcall AnimatePalette(   HPALETTE hPal,   UINT iStartIndex,    UINT cEntries,   const PALETTEENTRY * ppe);
 __declspec(dllimport) BOOL  __stdcall Arc(   HDC hdc,   int x1,   int y1,   int x2,   int y2,   int x3,   int y3,   int x4,   int y4);
 __declspec(dllimport) BOOL  __stdcall BitBlt(   HDC hdc,   int x,   int y,   int cx,   int cy,   HDC hdcSrc,   int x1,   int y1,   DWORD rop);
__declspec(dllimport) BOOL  __stdcall CancelDC(   HDC hdc);
 __declspec(dllimport) BOOL  __stdcall Chord(   HDC hdc,   int x1,   int y1,   int x2,   int y2,   int x3,   int y3,   int x4,   int y4);
__declspec(dllimport) int   __stdcall ChoosePixelFormat(   HDC hdc,   const PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) HMETAFILE  __stdcall CloseMetaFile(   HDC hdc);
__declspec(dllimport) int     __stdcall CombineRgn(   HRGN hrgnDst,   HRGN hrgnSrc1,   HRGN hrgnSrc2,   int iMode);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(   HMETAFILE,   LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(   HMETAFILE,   LPCWSTR);




#line 3750 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
 __declspec(dllimport) HBITMAP __stdcall CreateBitmap(   int nWidth,   int nHeight,   UINT nPlanes,   UINT nBitCount,   const void *lpBits);
 __declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(   const BITMAP *pbm);
 __declspec(dllimport) HBRUSH  __stdcall CreateBrushIndirect(   const LOGBRUSH *plbrush);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(   HDC hdc,   int cx,   int cy);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(   HDC hdc,   int cx,   int cy);
__declspec(dllimport) HDC     __stdcall CreateCompatibleDC(   HDC hdc);
__declspec(dllimport) HDC     __stdcall CreateDCA(   LPCSTR pwszDriver,   LPCSTR pwszDevice,   LPCSTR pszPort,   const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateDCW(   LPCWSTR pwszDriver,   LPCWSTR pwszDevice,   LPCWSTR pszPort,   const DEVMODEW * pdm);




#line 3763 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(   HDC hdc,   const BITMAPINFOHEADER *pbmih,   DWORD flInit,   const void *pjBits,   const BITMAPINFO *pbmi,   UINT iUsage);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrush(   HGLOBAL h,   UINT iUsage);
 __declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrushPt(   const void *lpPackedDIB,   UINT iUsage);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgn(   int x1,   int y1,   int x2,   int y2);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgnIndirect(   const RECT *lprect);
 __declspec(dllimport) HFONT   __stdcall CreateFontIndirectA(   const LOGFONTA *lplf);
 __declspec(dllimport) HFONT   __stdcall CreateFontIndirectW(   const LOGFONTW *lplf);




#line 3775 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) HFONT   __stdcall CreateFontA(   int cHeight,   int cWidth,   int cEscapement,   int cOrientation,   int cWeight,   DWORD bItalic,
                               DWORD bUnderline,   DWORD bStrikeOut,   DWORD iCharSet,   DWORD iOutPrecision,   DWORD iClipPrecision,
                               DWORD iQuality,   DWORD iPitchAndFamily,   LPCSTR pszFaceName);
__declspec(dllimport) HFONT   __stdcall CreateFontW(   int cHeight,   int cWidth,   int cEscapement,   int cOrientation,   int cWeight,   DWORD bItalic,
                               DWORD bUnderline,   DWORD bStrikeOut,   DWORD iCharSet,   DWORD iOutPrecision,   DWORD iClipPrecision,
                               DWORD iQuality,   DWORD iPitchAndFamily,   LPCWSTR pszFaceName);




#line 3786 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) HBRUSH  __stdcall CreateHatchBrush(   int iHatch,   COLORREF color);
__declspec(dllimport) HDC     __stdcall CreateICA(   LPCSTR pszDriver,   LPCSTR pszDevice,   LPCSTR pszPort,   const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateICW(   LPCWSTR pszDriver,   LPCWSTR pszDevice,   LPCWSTR pszPort,   const DEVMODEW * pdm);




#line 3795 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) HDC     __stdcall CreateMetaFileA(   LPCSTR pszFile);
__declspec(dllimport) HDC     __stdcall CreateMetaFileW(   LPCWSTR pszFile);




#line 3802 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
 __declspec(dllimport) HPALETTE __stdcall CreatePalette(   const LOGPALETTE * plpal);
__declspec(dllimport) HPEN    __stdcall CreatePen(   int iStyle,   int cWidth,   COLORREF color);
 __declspec(dllimport) HPEN    __stdcall CreatePenIndirect(   const LOGPEN *plpen);
__declspec(dllimport) HRGN    __stdcall CreatePolyPolygonRgn(    const POINT *pptl,
                                                  const INT  *pc,
                                                  int cPoly,
                                                  int iMode);
 __declspec(dllimport) HBRUSH  __stdcall CreatePatternBrush(   HBITMAP hbm);
__declspec(dllimport) HRGN    __stdcall CreateRectRgn(   int x1,   int y1,   int x2,   int y2);
__declspec(dllimport) HRGN    __stdcall CreateRectRgnIndirect(   const RECT *lprect);
__declspec(dllimport) HRGN    __stdcall CreateRoundRectRgn(   int x1,   int y1,   int x2,   int y2,   int w,   int h);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceA(   DWORD fdwHidden,   LPCSTR lpszFont,   LPCSTR lpszFile,   LPCSTR lpszPath);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceW(   DWORD fdwHidden,   LPCWSTR lpszFont,   LPCWSTR lpszFile,   LPCWSTR lpszPath);




#line 3820 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) HBRUSH  __stdcall CreateSolidBrush(   COLORREF color);

__declspec(dllimport) BOOL __stdcall DeleteDC(   HDC hdc);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(   HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall DeleteObject(   HGDIOBJ ho);
__declspec(dllimport) int  __stdcall DescribePixelFormat(    HDC hdc,
                                              int iPixelFormat,
                                              UINT nBytes,
                                              LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);

#line 3839 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion






































#line 3879 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


















#line 3898 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#line 3899 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

















#line 3917 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesA(
                     LPCSTR         pDevice,
                 LPCSTR         pPort,
                     WORD             fwCapability,
      LPSTR          pOutput,
                 const DEVMODEA   *pDevMode
    );
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesW(
                     LPCWSTR         pDevice,
                 LPCWSTR         pPort,
                     WORD             fwCapability,
      LPWSTR          pOutput,
                 const DEVMODEW   *pDevMode
    );




#line 3946 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) int  __stdcall DrawEscape(     HDC    hdc,
                                      int    iEscape,
                                      int    cjIn,
                                      LPCSTR lpIn);

 __declspec(dllimport) BOOL __stdcall Ellipse(   HDC hdc,   int left,   int top,    int right,   int bottom);


__declspec(dllimport) int  __stdcall EnumFontFamiliesExA(   HDC hdc,   LPLOGFONTA lpLogfont,   FONTENUMPROCA lpProc,   LPARAM lParam,   DWORD dwFlags);
__declspec(dllimport) int  __stdcall EnumFontFamiliesExW(   HDC hdc,   LPLOGFONTW lpLogfont,   FONTENUMPROCW lpProc,   LPARAM lParam,   DWORD dwFlags);




#line 3962 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#line 3963 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) int  __stdcall EnumFontFamiliesA(   HDC hdc,   LPCSTR lpLogfont,   FONTENUMPROCA lpProc,   LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontFamiliesW(   HDC hdc,   LPCWSTR lpLogfont,   FONTENUMPROCW lpProc,   LPARAM lParam);




#line 3971 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) int  __stdcall EnumFontsA(   HDC hdc,   LPCSTR lpLogfont,    FONTENUMPROCA lpProc,   LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontsW(   HDC hdc,   LPCWSTR lpLogfont,    FONTENUMPROCW lpProc,   LPARAM lParam);




#line 3978 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


__declspec(dllimport) int  __stdcall EnumObjects(   HDC hdc,   int nType,   GOBJENUMPROC lpFunc,   LPARAM lParam);


#line 3984 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


__declspec(dllimport) BOOL __stdcall EqualRgn(   HRGN hrgn1,   HRGN hrgn2);
 __declspec(dllimport) int  __stdcall Escape(     HDC hdc,
                                  int iEscape,
                                  int cjIn,
                                  LPCSTR pvIn,
                                  LPVOID pvOut);
__declspec(dllimport) int  __stdcall ExtEscape(      HDC hdc,
                                      int iEscape,
                                      int cjInput,
                                      LPCSTR lpInData,
                                      int cjOutput,
                                      LPSTR lpOutData);
 __declspec(dllimport) int  __stdcall ExcludeClipRect(   HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) HRGN __stdcall ExtCreateRegion(   const XFORM * lpx,   DWORD nCount,   const RGNDATA * lpData);
 __declspec(dllimport) BOOL __stdcall ExtFloodFill(   HDC hdc,   int x,   int y,   COLORREF color,   UINT type);
 __declspec(dllimport) BOOL __stdcall FillRgn(   HDC hdc,   HRGN hrgn,   HBRUSH hbr);
 __declspec(dllimport) BOOL __stdcall FloodFill(   HDC hdc,   int x,   int y,   COLORREF color);
 __declspec(dllimport) BOOL __stdcall FrameRgn(   HDC hdc,   HRGN hrgn,   HBRUSH hbr,   int w,   int h);
__declspec(dllimport) int  __stdcall GetROP2(   HDC hdc);
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) COLORREF __stdcall GetBkColor(   HDC hdc);


__declspec(dllimport) COLORREF __stdcall GetDCBrushColor(   HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetDCPenColor(   HDC hdc);
#line 4012 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport)
int
__stdcall
GetBkMode(
      HDC hdc
    );

__declspec(dllimport)
LONG
__stdcall
GetBitmapBits(
      HBITMAP hbit,
      LONG cb,
      LPVOID lpvBits
    );

__declspec(dllimport) BOOL  __stdcall GetBitmapDimensionEx(   HBITMAP hbit,   LPSIZE lpsize);
__declspec(dllimport) UINT  __stdcall GetBoundsRect(   HDC hdc,   LPRECT lprect,   UINT flags);

__declspec(dllimport) BOOL  __stdcall GetBrushOrgEx(   HDC hdc,   LPPOINT lppt);

__declspec(dllimport) BOOL  __stdcall GetCharWidthA(   HDC hdc,   UINT iFirst,   UINT iLast,   LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthW(   HDC hdc,   UINT iFirst,   UINT iLast,   LPINT lpBuffer);




#line 4041 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidth32A(   HDC hdc,   UINT iFirst,   UINT iLast,    LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidth32W(   HDC hdc,   UINT iFirst,   UINT iLast,    LPINT lpBuffer);




#line 4048 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatA(   HDC hdc,   UINT iFirst,   UINT iLast,   PFLOAT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatW(   HDC hdc,   UINT iFirst,   UINT iLast,   PFLOAT lpBuffer);




#line 4055 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsA(   HDC hdc,
                                              UINT wFirst,
                                              UINT wLast,
                                              LPABC lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsW(   HDC hdc,
                                              UINT wFirst,
                                              UINT wLast,
                                              LPABC lpABC);




#line 4069 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatA(   HDC hdc,   UINT iFirst,   UINT iLast,   LPABCFLOAT lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatW(   HDC hdc,   UINT iFirst,   UINT iLast,   LPABCFLOAT lpABC);




#line 4077 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) int   __stdcall GetClipBox(   HDC hdc,    LPRECT lprect);
__declspec(dllimport) int   __stdcall GetClipRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) int   __stdcall GetMetaRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(   HDC hdc,   UINT type);
__declspec(dllimport) BOOL  __stdcall GetCurrentPositionEx(   HDC hdc,    LPPOINT lppt);
__declspec(dllimport) int   __stdcall GetDeviceCaps(   HDC hdc,   int index);
__declspec(dllimport) int   __stdcall GetDIBits(   HDC hdc,   HBITMAP hbm,   UINT start,   UINT cLines,
      LPVOID lpvBits,  LPBITMAPINFO lpbmi,   UINT usage);  

 
__declspec(dllimport) DWORD __stdcall GetFontData (      HDC     hdc,
                                          DWORD   dwTable,
                                          DWORD   dwOffset,
                                          PVOID pvBuffer,
                                          DWORD   cjBuffer
                                        );

__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(      HDC hdc,
                                              UINT uChar,
                                              UINT fuFormat,
                                              LPGLYPHMETRICS lpgm,
                                              DWORD cjBuffer,
                                              LPVOID pvBuffer,
                                              const MAT2 *lpmat2
                                        );
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(      HDC hdc,
                                              UINT uChar,
                                              UINT fuFormat,
                                              LPGLYPHMETRICS lpgm,
                                              DWORD cjBuffer,
                                              LPVOID pvBuffer,
                                              const MAT2 *lpmat2
                                        );




#line 4115 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) int   __stdcall GetGraphicsMode(   HDC hdc);
__declspec(dllimport) int   __stdcall GetMapMode(   HDC hdc);
__declspec(dllimport) UINT  __stdcall GetMetaFileBitsEx(  HMETAFILE hMF,   UINT cbBuffer,   LPVOID lpData);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileA(   LPCSTR lpName);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileW(   LPCWSTR lpName);




#line 4126 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) COLORREF __stdcall GetNearestColor(   HDC hdc,   COLORREF color);
__declspec(dllimport) UINT  __stdcall GetNearestPaletteIndex(   HPALETTE h,   COLORREF color);
__declspec(dllimport) DWORD __stdcall GetObjectType(   HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(   HDC hdc,
                                                  UINT cjCopy,
                                                  LPOUTLINETEXTMETRICA potm);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(   HDC hdc,
                                                  UINT cjCopy,
                                                  LPOUTLINETEXTMETRICW potm);




#line 4143 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 4145 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

 
__declspec(dllimport) UINT  __stdcall GetPaletteEntries(     HPALETTE hpal,
                                              UINT iStart,
                                              UINT cEntries,
                                              LPPALETTEENTRY pPalEntries);
__declspec(dllimport) COLORREF __stdcall GetPixel(   HDC hdc,   int x,   int y);
__declspec(dllimport) int   __stdcall GetPixelFormat(   HDC hdc);
__declspec(dllimport) int   __stdcall GetPolyFillMode(   HDC hdc);
__declspec(dllimport) BOOL  __stdcall GetRasterizerCaps(     LPRASTERIZER_STATUS lpraststat,
                                              UINT cjBytes);

__declspec(dllimport) int   __stdcall GetRandomRgn (  HDC hdc,   HRGN hrgn,   INT i);
__declspec(dllimport) DWORD __stdcall GetRegionData(     HRGN hrgn,
                                          DWORD nCount,
                                          LPRGNDATA lpRgnData);
__declspec(dllimport) int   __stdcall GetRgnBox(   HRGN hrgn,    LPRECT lprc);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(   int i);
__declspec(dllimport) int   __stdcall GetStretchBltMode(  HDC hdc);
__declspec(dllimport)
UINT
__stdcall
GetSystemPaletteEntries(
      HDC  hdc,
      UINT iStart,
      UINT cEntries,
      LPPALETTEENTRY pPalEntries
    );

__declspec(dllimport) UINT  __stdcall GetSystemPaletteUse(  HDC hdc);
__declspec(dllimport) int   __stdcall GetTextCharacterExtra(  HDC hdc);
__declspec(dllimport) UINT  __stdcall GetTextAlign(  HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetTextColor(  HDC hdc);

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointA(
      HDC hdc,
      LPCSTR lpString,
      int c,
      LPSIZE lpsz
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointW(
      HDC hdc,
      LPCWSTR lpString,
      int c,
      LPSIZE lpsz
    );




#line 4202 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32A(
      HDC hdc,
      LPCSTR lpString,
      int c,
      LPSIZE psizl
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32W(
      HDC hdc,
      LPCWSTR lpString,
      int c,
      LPSIZE psizl
    );




#line 4226 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointA(
      HDC hdc,
      LPCSTR lpszString,
      int cchString,
      int nMaxExtent,
      LPINT lpnFit,
      LPINT lpnDx,
      LPSIZE lpSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointW(
      HDC hdc,
      LPCWSTR lpszString,
      int cchString,
      int nMaxExtent,
      LPINT lpnFit,
      LPINT lpnDx,
      LPSIZE lpSize
    );




#line 4256 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


__declspec(dllimport) int __stdcall GetTextCharset(   HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo(   HDC hdc,   LPFONTSIGNATURE lpSig,   DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo(   DWORD  *lpSrc,    LPCHARSETINFO lpCs,   DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo(   HDC hdc);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(    HDC hdc,   LPCSTR lpString,   int nCount,   int nMexExtent,   LPGCP_RESULTSA lpResults,   DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(    HDC hdc,   LPCWSTR lpString,   int nCount,   int nMexExtent,   LPGCP_RESULTSW lpResults,   DWORD dwFlags);




#line 4269 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#line 4270 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 4272 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagWCRANGE
{
    WCHAR  wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;


typedef struct tagGLYPHSET
{
    DWORD    cbThis;
    DWORD    flAccel;
    DWORD    cGlyphsSupported;
    DWORD    cRanges;
    WCRANGE  ranges[1];
} GLYPHSET, *PGLYPHSET,  *LPGLYPHSET;









__declspec(dllimport) DWORD __stdcall GetFontUnicodeRanges(   HDC hdc,   LPGLYPHSET lpgs);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesA(   HDC hdc,   LPCSTR lpstr,   int c,   LPWORD pgi,   DWORD fl);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesW(   HDC hdc,   LPCWSTR lpstr,   int c,   LPWORD pgi,   DWORD fl);




#line 4311 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetTextExtentPointI(  HDC hdc,   LPWORD pgiIn,   int cgi,   LPSIZE psize);
__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointI (    HDC hdc,
                                                  LPWORD lpwszString,
                                                  int cwchString,
                                                  int nMaxExtent,
                                                  LPINT lpnFit,
                                                  LPINT lpnDx,
                                                  LPSIZE lpSize
                                                );

__declspec(dllimport) BOOL  __stdcall GetCharWidthI(     HDC hdc,
                                          UINT giFirst,
                                          UINT cgi,
                                          LPWORD pgi,
                                          LPINT piWidths
                                        );

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsI(     HDC    hdc,
                                              UINT   giFirst,
                                              UINT   cgi,
                                              LPWORD pgi,
                                              LPABC  pabc
                                        );










typedef struct tagDESIGNVECTOR
{
    DWORD  dvReserved;
    DWORD  dvNumAxes;
    LONG   dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR,  *LPDESIGNVECTOR;

__declspec(dllimport) int  __stdcall AddFontResourceExA(   LPCSTR name,   DWORD fl,   PVOID res);
__declspec(dllimport) int  __stdcall AddFontResourceExW(   LPCWSTR name,   DWORD fl,   PVOID res);




#line 4358 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExA(   LPCSTR name,   DWORD fl,   PVOID pdv);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExW(   LPCWSTR name,   DWORD fl,   PVOID pdv);




#line 4365 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) HANDLE __stdcall AddFontMemResourceEx(     PVOID pFileView,
                                                  DWORD cjSize,
                                                  PVOID pvResrved,
                                                  DWORD* pNumFonts);

__declspec(dllimport) BOOL __stdcall RemoveFontMemResourceEx(   HANDLE h);









typedef struct tagAXISINFOA
{
    LONG   axMinValue;
    LONG   axMaxValue;
    BYTE   axAxisName[16];
} AXISINFOA, *PAXISINFOA,  *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG   axMinValue;
    LONG   axMaxValue;
    WCHAR  axAxisName[16];
} AXISINFOW, *PAXISINFOW,  *LPAXISINFOW;





typedef AXISINFOA AXISINFO;
typedef PAXISINFOA PAXISINFO;
typedef LPAXISINFOA LPAXISINFO;
#line 4401 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

typedef struct tagAXESLISTA
{
    DWORD     axlReserved;
    DWORD     axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA,  *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD     axlReserved;
    DWORD     axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW,  *LPAXESLISTW;





typedef AXESLISTA AXESLIST;
typedef PAXESLISTA PAXESLIST;
typedef LPAXESLISTA LPAXESLIST;
#line 4423 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA,  *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW,  *LPENUMLOGFONTEXDVW;





typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
#line 4447 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) HFONT  __stdcall CreateFontIndirectExA(   const ENUMLOGFONTEXDVA *);
__declspec(dllimport) HFONT  __stdcall CreateFontIndirectExW(   const ENUMLOGFONTEXDVW *);




#line 4455 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA        etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA,  *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW        etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW,  *LPENUMTEXTMETRICW;





typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
#line 4476 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#line 4477 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 4479 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 4482 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family


__declspec(dllimport) BOOL  __stdcall GetViewportExtEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetViewportOrgEx(   HDC hdc,   LPPOINT lppoint);
__declspec(dllimport) BOOL  __stdcall GetWindowExtEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetWindowOrgEx(   HDC hdc,   LPPOINT lppoint);

 __declspec(dllimport) int  __stdcall IntersectClipRect(   HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) BOOL __stdcall InvertRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) BOOL __stdcall LineDDA(   int xStart,   int yStart,   int xEnd,   int yEnd,   LINEDDAPROC lpProc,   LPARAM data);
 __declspec(dllimport) BOOL __stdcall LineTo(   HDC hdc,   int x,   int y);
__declspec(dllimport) BOOL __stdcall MaskBlt(   HDC hdcDest,   int xDest,   int yDest,   int width,   int height,
                HDC hdcSrc,   int xSrc,   int ySrc,   HBITMAP hbmMask,   int xMask,   int yMask,   DWORD rop);
__declspec(dllimport) BOOL __stdcall PlgBlt(   HDC hdcDest,   const POINT * lpPoint,   HDC hdcSrc,   int xSrc,   int ySrc,   int width,
                       int height,   HBITMAP hbmMask,   int xMask,   int yMask);

 __declspec(dllimport) int  __stdcall OffsetClipRgn(  HDC hdc,   int x,   int y);
__declspec(dllimport) int  __stdcall OffsetRgn(  HRGN hrgn,   int x,   int y);
 __declspec(dllimport) BOOL __stdcall PatBlt(  HDC hdc,   int x,   int y,   int w,   int h,   DWORD rop);
 __declspec(dllimport) BOOL __stdcall Pie(  HDC hdc,   int left,   int top,   int right,   int bottom,   int xr1,   int yr1,   int xr2,   int yr2);
__declspec(dllimport) BOOL __stdcall PlayMetaFile(  HDC hdc,   HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall PaintRgn(  HDC hdc,   HRGN hrgn);
 __declspec(dllimport) BOOL __stdcall PolyPolygon(  HDC hdc,    const POINT *apt,    const INT *asz,    int csz);
__declspec(dllimport) BOOL __stdcall PtInRegion(  HRGN hrgn,   int x,   int y);
__declspec(dllimport) BOOL __stdcall PtVisible(  HDC hdc,   int x,   int y);
__declspec(dllimport) BOOL __stdcall RectInRegion(  HRGN hrgn,   const RECT * lprect);
__declspec(dllimport) BOOL __stdcall RectVisible(  HDC hdc,   const RECT * lprect);
 __declspec(dllimport) BOOL __stdcall Rectangle(  HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) BOOL __stdcall RestoreDC(  HDC hdc,   int nSavedDC);
 __declspec(dllimport) HDC  __stdcall ResetDCA(  HDC hdc,   const DEVMODEA * lpdm);
 __declspec(dllimport) HDC  __stdcall ResetDCW(  HDC hdc,   const DEVMODEW * lpdm);




#line 4520 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
 __declspec(dllimport) UINT __stdcall RealizePalette(  HDC hdc);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA(  LPCSTR lpFileName);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW(  LPCWSTR lpFileName);




#line 4528 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
 __declspec(dllimport) BOOL  __stdcall RoundRect(  HDC hdc,   int left,   int top,   int right,   int bottom,   int width,   int height);
 __declspec(dllimport) BOOL __stdcall ResizePalette(  HPALETTE hpal,   UINT n);

 __declspec(dllimport) int  __stdcall SaveDC(  HDC hdc);
 __declspec(dllimport) int  __stdcall SelectClipRgn(  HDC hdc,   HRGN hrgn);
__declspec(dllimport) int  __stdcall ExtSelectClipRgn(  HDC hdc,   HRGN hrgn,   int mode);
__declspec(dllimport) int  __stdcall SetMetaRgn(  HDC hdc);
 __declspec(dllimport) HGDIOBJ __stdcall SelectObject(  HDC hdc,   HGDIOBJ h);
 __declspec(dllimport) HPALETTE __stdcall SelectPalette(  HDC hdc,   HPALETTE hPal,   BOOL bForceBkgd);
 __declspec(dllimport) COLORREF __stdcall SetBkColor(  HDC hdc,   COLORREF color);


__declspec(dllimport) COLORREF __stdcall SetDCBrushColor(  HDC hdc,   COLORREF color);
__declspec(dllimport) COLORREF __stdcall SetDCPenColor(  HDC hdc,   COLORREF color);
#line 4543 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

 __declspec(dllimport) int   __stdcall SetBkMode(  HDC hdc,   int mode);

__declspec(dllimport)
LONG __stdcall
SetBitmapBits(
      HBITMAP hbm,
      DWORD cb,
      const void *pvBits);

__declspec(dllimport) UINT  __stdcall SetBoundsRect(  HDC hdc,   const RECT * lprect,   UINT flags);
__declspec(dllimport) int   __stdcall SetDIBits(  HDC hdc,   HBITMAP hbm,   UINT start,   UINT cLines,   const void *lpBits,   const BITMAPINFO * lpbmi,   UINT ColorUse);
 __declspec(dllimport) int   __stdcall SetDIBitsToDevice(  HDC hdc,   int xDest,   int yDest,   DWORD w,   DWORD h,   int xSrc,
          int ySrc,   UINT StartScan,   UINT cLines,   const void * lpvBits,   const BITMAPINFO * lpbmi,   UINT ColorUse);
 __declspec(dllimport) DWORD __stdcall SetMapperFlags(  HDC hdc,   DWORD flags);
__declspec(dllimport) int   __stdcall SetGraphicsMode(  HDC hdc,   int iMode);
 __declspec(dllimport) int   __stdcall SetMapMode(  HDC hdc,   int iMode);


 __declspec(dllimport) DWORD __stdcall SetLayout(  HDC hdc,   DWORD l);
__declspec(dllimport) DWORD __stdcall GetLayout(  HDC hdc);
#line 4565 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) HMETAFILE   __stdcall SetMetaFileBitsEx(  UINT cbBuffer,   const BYTE *lpData);
 __declspec(dllimport) UINT  __stdcall SetPaletteEntries(     HPALETTE hpal,
                                              UINT iStart,
                                              UINT cEntries,
                                              const PALETTEENTRY *pPalEntries);
 __declspec(dllimport) COLORREF __stdcall SetPixel(  HDC hdc,   int x,   int y,   COLORREF color);
__declspec(dllimport) BOOL   __stdcall SetPixelV(  HDC hdc,   int x,   int y,   COLORREF color);
__declspec(dllimport) BOOL  __stdcall SetPixelFormat(  HDC hdc,   int format,   const PIXELFORMATDESCRIPTOR * ppfd);
 __declspec(dllimport) int   __stdcall SetPolyFillMode(  HDC hdc,   int mode);
 __declspec(dllimport) BOOL  __stdcall StretchBlt(  HDC hdcDest,   int xDest,   int yDest,   int wDest,   int hDest,   HDC hdcSrc,   int xSrc,   int ySrc,   int wSrc,   int hSrc,   DWORD rop);
__declspec(dllimport) BOOL   __stdcall SetRectRgn(  HRGN hrgn,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) int   __stdcall StretchDIBits(  HDC hdc,   int xDest,   int yDest,   int DestWidth,   int DestHeight,   int xSrc,   int ySrc,   int SrcWidth,   int SrcHeight,
          const void * lpBits,   const BITMAPINFO * lpbmi,   UINT iUsage,   DWORD rop);
 __declspec(dllimport) int   __stdcall SetROP2(  HDC hdc,   int rop2);
 __declspec(dllimport) int   __stdcall SetStretchBltMode(  HDC hdc,   int mode);
__declspec(dllimport) UINT  __stdcall SetSystemPaletteUse(  HDC hdc,   UINT use);
 __declspec(dllimport) int   __stdcall SetTextCharacterExtra(  HDC hdc,   int extra);
 __declspec(dllimport) COLORREF __stdcall SetTextColor(  HDC hdc,   COLORREF color);
 __declspec(dllimport) UINT  __stdcall SetTextAlign(  HDC hdc,   UINT align);
 __declspec(dllimport) BOOL  __stdcall SetTextJustification(  HDC hdc,   int extra,   int count);
__declspec(dllimport) BOOL  __stdcall UpdateColors(  HDC hdc);

#line 4589 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion












































#pragma region Application Family


typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG    x;
    LONG    y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;

#line 4650 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;

#line 4669 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct _BLENDFUNCTION
{
    BYTE   BlendOp;
    BYTE   BlendFlags;
    BYTE   SourceConstantAlpha;
    BYTE   AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;

#line 4683 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family















__declspec(dllimport) BOOL __stdcall AlphaBlend(
      HDC hdcDest,
      int xoriginDest,
      int yoriginDest,
      int wDest,
      int hDest,
      HDC hdcSrc,
      int xoriginSrc,
      int yoriginSrc,
      int wSrc,
      int hSrc,
      BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall TransparentBlt(
      HDC hdcDest,
      int xoriginDest,
      int yoriginDest,
      int wDest,
      int hDest,
      HDC hdcSrc,
      int xoriginSrc,
      int yoriginSrc,
      int wSrc,
      int hSrc,
      UINT crTransparent);











__declspec(dllimport)
BOOL
__stdcall
GradientFill(
      HDC hdc,
      PTRIVERTEX pVertex,
      ULONG nVertex,
      PVOID pMesh,
      ULONG nMesh,
      ULONG ulMode
    );

#line 4750 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 4753 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family





__declspec(dllimport) BOOL  __stdcall GdiAlphaBlend(  HDC hdcDest,   int xoriginDest,   int yoriginDest,   int wDest,   int hDest,   HDC hdcSrc,   int xoriginSrc,   int yoriginSrc,   int wSrc,   int hSrc,   BLENDFUNCTION ftn);

__declspec(dllimport) BOOL  __stdcall GdiTransparentBlt(  HDC hdcDest,  int xoriginDest,   int yoriginDest,   int wDest,   int hDest,   HDC hdcSrc,
                                             int xoriginSrc,   int yoriginSrc,   int wSrc,   int hSrc,   UINT crTransparent);

__declspec(dllimport) BOOL  __stdcall GdiGradientFill(   HDC hdc,
                                          PTRIVERTEX pVertex,
                                          ULONG nVertex,
                                          PVOID pMesh,
                                          ULONG nCount,
                                          ULONG ulMode);

#line 4773 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





__declspec(dllimport) BOOL  __stdcall PlayMetaFileRecord(    HDC hdc,
                                              LPHANDLETABLE lpHandleTable,
                                              LPMETARECORD lpMR,
                                              UINT noObjs);

typedef int (__stdcall* MFENUMPROC)(   HDC hdc,   HANDLETABLE * lpht,   METARECORD * lpMR,   int nObj,   LPARAM param);
__declspec(dllimport) BOOL  __stdcall EnumMetaFile(   HDC hdc,   HMETAFILE hmf,   MFENUMPROC proc,   LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)(  HDC hdc,   HANDLETABLE * lpht,   const ENHMETARECORD * lpmr,   int nHandles,   LPARAM data);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(   HDC hdc);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(   HENHMETAFILE hEnh,   LPCSTR lpFileName);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(   HENHMETAFILE hEnh,   LPCWSTR lpFileName);




#line 4798 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileA(   HDC hdc,   LPCSTR lpFilename,   const RECT *lprc,   LPCSTR lpDesc);
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileW(   HDC hdc,   LPCWSTR lpFilename,   const RECT *lprc,   LPCWSTR lpDesc);




#line 4805 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall DeleteEnhMetaFile(   HENHMETAFILE hmf);
__declspec(dllimport) BOOL  __stdcall EnumEnhMetaFile(   HDC hdc,   HENHMETAFILE hmf,   ENHMFENUMPROC proc,
                                          LPVOID param,   const RECT * lpRect);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileA(   LPCSTR lpName);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileW(   LPCWSTR lpName);




#line 4815 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileBits(    HENHMETAFILE hEMF,
                                              UINT nSize,
                                              LPBYTE lpData);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionA(    HENHMETAFILE hemf,
                                                      UINT cchBuffer,
                                                      LPSTR lpDescription);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionW(    HENHMETAFILE hemf,
                                                      UINT cchBuffer,
                                                      LPWSTR lpDescription);




#line 4829 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileHeader(      HENHMETAFILE hemf,
                                                  UINT nSize,
                                                  LPENHMETAHEADER lpEnhMetaHeader);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePaletteEntries(  HENHMETAFILE hemf,
                                                      UINT nNumEntries,
                                                      LPPALETTEENTRY lpPaletteEntries);

__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePixelFormat(     HENHMETAFILE hemf,
                                                      UINT cbBuffer,
                                                      PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) UINT  __stdcall GetWinMetaFileBits(    HENHMETAFILE hemf,
                                              UINT cbData16,
                                              LPBYTE pData16,
                                              INT iMapMode,
                                              HDC hdcRef);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFile(   HDC hdc,   HENHMETAFILE hmf,   const RECT * lprect);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFileRecord(     HDC hdc,
                                                  LPHANDLETABLE pht,
                                                  const ENHMETARECORD *pmr,
                                                  UINT cht);

__declspec(dllimport) HENHMETAFILE  __stdcall SetEnhMetaFileBits(    UINT nSize,
                                                      const BYTE * pb);

__declspec(dllimport) HENHMETAFILE  __stdcall SetWinMetaFileBits(    UINT nSize,
                                                      const BYTE *lpMeta16Data,
                                                      HDC hdcRef,
                                                      const METAFILEPICT *lpMFP);
__declspec(dllimport) BOOL  __stdcall GdiComment(  HDC hdc,   UINT nSize,   const BYTE *lpData);

#line 4860 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



__declspec(dllimport) BOOL __stdcall GetTextMetricsA(   HDC hdc,   LPTEXTMETRICA lptm);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(   HDC hdc,   LPTEXTMETRICW lptm);




#line 4870 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



















#line 4890 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 4892 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



typedef struct tagDIBSECTION {
    BITMAP       dsBm;
    BITMAPINFOHEADER    dsBmih;
    DWORD               dsBitfields[3];
    HANDLE              dshSection;
    DWORD               dsOffset;
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;


__declspec(dllimport) BOOL __stdcall AngleArc(   HDC hdc,   int x,   int y,   DWORD r,   FLOAT StartAngle,   FLOAT SweepAngle);
__declspec(dllimport) BOOL __stdcall PolyPolyline(  HDC hdc,   const POINT *apt,   const DWORD *asz,   DWORD csz);
__declspec(dllimport) BOOL __stdcall GetWorldTransform(   HDC hdc,   LPXFORM lpxf);
__declspec(dllimport) BOOL __stdcall SetWorldTransform(   HDC hdc,   const XFORM * lpxf);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(   HDC hdc,   const XFORM * lpxf,   DWORD mode);
__declspec(dllimport) BOOL __stdcall CombineTransform(   LPXFORM lpxfOut,   const XFORM *lpxf1,   const XFORM *lpxf2);






__declspec(dllimport)   HBITMAP __stdcall CreateDIBSection(
             HDC               hdc,
                 const BITMAPINFO *pbmi,
                 UINT              usage,
    
    
                    void            **ppvBits,
             HANDLE            hSection,
                 DWORD             offset);


 
__declspec(dllimport) UINT __stdcall GetDIBColorTable(   HDC  hdc,
                                          UINT iStart,
                                          UINT cEntries,
                                          RGBQUAD *prgbq);
__declspec(dllimport) UINT __stdcall SetDIBColorTable(   HDC  hdc,
                                          UINT iStart,
                                          UINT cEntries,
                                          const RGBQUAD *prgbq);




































typedef struct  tagCOLORADJUSTMENT {
    WORD   caSize;
    WORD   caFlags;
    WORD   caIlluminantIndex;
    WORD   caRedGamma;
    WORD   caGreenGamma;
    WORD   caBlueGamma;
    WORD   caReferenceBlack;
    WORD   caReferenceWhite;
    SHORT  caContrast;
    SHORT  caBrightness;
    SHORT  caColorfulness;
    SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment(   HDC hdc,   const COLORADJUSTMENT *lpca);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(   HDC hdc,   LPCOLORADJUSTMENT lpca);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(   HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)(   HDC,   int);


#line 4996 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

typedef struct _DOCINFOA {
    int     cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;

    LPCSTR   lpszDatatype;
    DWORD    fwType;
#line 5005 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int     cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;

    LPCWSTR  lpszDatatype;
    DWORD    fwType;
#line 5014 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
#line 5022 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




#line 5027 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

 __declspec(dllimport) int __stdcall StartDocA(  HDC hdc,   const DOCINFOA *lpdi);
 __declspec(dllimport) int __stdcall StartDocW(  HDC hdc,   const DOCINFOW *lpdi);




#line 5035 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
 __declspec(dllimport) int __stdcall EndDoc(  HDC hdc);
 __declspec(dllimport) int __stdcall StartPage(  HDC hdc);
 __declspec(dllimport) int __stdcall EndPage(  HDC hdc);
 __declspec(dllimport) int __stdcall AbortDoc(  HDC hdc);
__declspec(dllimport) int __stdcall SetAbortProc(  HDC hdc,   ABORTPROC proc);

__declspec(dllimport) BOOL __stdcall AbortPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall ArcTo(  HDC hdc,   int left,   int top,   int right,   int bottom,   int xr1,   int yr1,   int xr2,   int yr2);
__declspec(dllimport) BOOL __stdcall BeginPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall CloseFigure(  HDC hdc);
__declspec(dllimport) BOOL __stdcall EndPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall FillPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall FlattenPath(  HDC hdc);
__declspec(dllimport) int  __stdcall GetPath(  HDC hdc,   LPPOINT apt,   LPBYTE aj, int cpt);
__declspec(dllimport) HRGN __stdcall PathToRegion(  HDC hdc);
__declspec(dllimport) BOOL __stdcall PolyDraw(  HDC hdc,   const POINT * apt,   const BYTE * aj,   int cpt);
__declspec(dllimport) BOOL __stdcall SelectClipPath(  HDC hdc,   int mode);
__declspec(dllimport) int  __stdcall SetArcDirection(  HDC hdc,   int dir);
__declspec(dllimport) BOOL __stdcall SetMiterLimit(  HDC hdc,   FLOAT limit,   PFLOAT old);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall StrokePath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall WidenPath(  HDC hdc);
__declspec(dllimport) HPEN __stdcall ExtCreatePen(   DWORD iPenStyle,
                                      DWORD cWidth,
                                      const LOGBRUSH *plbrush,
                                      DWORD cStyle,
                                      const DWORD *pstyle);
__declspec(dllimport) BOOL __stdcall GetMiterLimit(  HDC hdc,   PFLOAT plimit);
__declspec(dllimport) int  __stdcall GetArcDirection(  HDC hdc);

__declspec(dllimport) int   __stdcall GetObjectA(  HANDLE h,   int c,   LPVOID pv);
__declspec(dllimport) int   __stdcall GetObjectW(  HANDLE h,   int c,   LPVOID pv);




#line 5072 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




















#line 5093 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


 __declspec(dllimport) BOOL  __stdcall MoveToEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall TextOutA(   HDC hdc,   int x,   int y,   LPCSTR lpString,   int c);
 __declspec(dllimport) BOOL  __stdcall TextOutW(   HDC hdc,   int x,   int y,   LPCWSTR lpString,   int c);




#line 5103 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
 __declspec(dllimport) BOOL  __stdcall ExtTextOutA(   HDC hdc,   int x,   int y,   UINT options,   const RECT * lprect,   LPCSTR lpString,   UINT c,   const INT * lpDx);
 __declspec(dllimport) BOOL  __stdcall ExtTextOutW(   HDC hdc,   int x,   int y,   UINT options,   const RECT * lprect,   LPCWSTR lpString,   UINT c,   const INT * lpDx);




#line 5110 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall PolyTextOutA(  HDC hdc,   const POLYTEXTA * ppt,   int nstrings);
__declspec(dllimport) BOOL  __stdcall PolyTextOutW(  HDC hdc,   const POLYTEXTW * ppt,   int nstrings);




#line 5117 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) HRGN  __stdcall CreatePolygonRgn(      const POINT *pptl,
                                              int cPoint,
                                              int iMode);
__declspec(dllimport) BOOL  __stdcall DPtoLP(   HDC hdc,   LPPOINT lppt,   int c);
__declspec(dllimport) BOOL  __stdcall LPtoDP(   HDC hdc,   LPPOINT lppt,   int c);
 __declspec(dllimport) BOOL  __stdcall Polygon(  HDC hdc,   const POINT *apt,   int cpt);
 __declspec(dllimport) BOOL  __stdcall Polyline(  HDC hdc,   const POINT *apt,   int cpt);

__declspec(dllimport) BOOL  __stdcall PolyBezier(  HDC hdc,   const POINT * apt,   DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolyBezierTo(  HDC hdc,   const POINT * apt,   DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolylineTo(  HDC hdc,   const POINT * apt,   DWORD cpt);

 __declspec(dllimport) BOOL  __stdcall SetViewportExtEx(   HDC hdc,   int x,   int y,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall SetViewportOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall SetWindowExtEx(   HDC hdc,   int x,   int y,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall SetWindowOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);

 __declspec(dllimport) BOOL  __stdcall OffsetViewportOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall OffsetWindowOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall ScaleViewportExtEx(   HDC hdc,   int xn,   int dx,   int yn,   int yd,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall ScaleWindowExtEx(   HDC hdc,   int xn,   int xd,   int yn,   int yd,   LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBitmapDimensionEx(   HBITMAP hbm,   int w,   int h,   LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBrushOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);

__declspec(dllimport) int   __stdcall GetTextFaceA(   HDC hdc,   int c,    LPSTR lpName);
__declspec(dllimport) int   __stdcall GetTextFaceW(   HDC hdc,   int c,    LPWSTR lpName);




#line 5149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA(      HDC hdc,
                                              DWORD nPairs,
                                              LPKERNINGPAIR   lpKernPair);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(      HDC hdc,
                                              DWORD nPairs,
                                              LPKERNINGPAIR   lpKernPair);




#line 5169 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


__declspec(dllimport) BOOL  __stdcall GetDCOrgEx(   HDC hdc,   LPPOINT lppt);
__declspec(dllimport) BOOL  __stdcall FixBrushOrgEx(   HDC hdc,   int x,   int y,    LPPOINT ptl);
__declspec(dllimport) BOOL  __stdcall UnrealizeObject(   HGDIOBJ h);

__declspec(dllimport) BOOL  __stdcall GdiFlush(void);
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(   DWORD dw);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit(void);








typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);




#line 5193 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) int         __stdcall SetICMMode(   HDC hdc,   int mode);
__declspec(dllimport) BOOL        __stdcall CheckColorsInGamut(      HDC hdc,
                                                      LPRGBTRIPLE lpRGBTriple,
                                                      LPVOID dlpBuffer,
                                                      DWORD nCount);

__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace(   HDC hdc);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceA(   HCOLORSPACE hColorSpace,
                                                  LPLOGCOLORSPACEA lpBuffer,
                                                  DWORD nSize);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceW(   HCOLORSPACE hColorSpace,
                                                  LPLOGCOLORSPACEW lpBuffer,
                                                  DWORD nSize);




#line 5212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA(   LPLOGCOLORSPACEA lplcs);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW(   LPLOGCOLORSPACEW lplcs);




#line 5220 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace(   HDC hdc,   HCOLORSPACE hcs);
__declspec(dllimport) BOOL        __stdcall DeleteColorSpace(   HCOLORSPACE hcs);
__declspec(dllimport) BOOL        __stdcall GetICMProfileA(      HDC hdc,
                                                  LPDWORD pBufSize,
                                                  LPSTR pszFilename);
__declspec(dllimport) BOOL        __stdcall GetICMProfileW(      HDC hdc,
                                                  LPDWORD pBufSize,
                                                  LPWSTR pszFilename);




#line 5233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) BOOL        __stdcall SetICMProfileA(   HDC hdc,   LPSTR lpFileName);
__declspec(dllimport) BOOL        __stdcall SetICMProfileW(   HDC hdc,   LPWSTR lpFileName);




#line 5241 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall GetDeviceGammaRamp(   HDC hdc,   LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall SetDeviceGammaRamp(   HDC hdc,    LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall ColorMatchToTarget(   HDC hdc,   HDC hdcTarget,   DWORD action);
__declspec(dllimport) int         __stdcall EnumICMProfilesA(   HDC hdc,   ICMENUMPROCA proc,   LPARAM param);
__declspec(dllimport) int         __stdcall EnumICMProfilesW(   HDC hdc,   ICMENUMPROCW proc,   LPARAM param);




#line 5251 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyA(   DWORD reserved,   LPSTR lpszCMID,   LPSTR lpszFileName,   UINT command);

__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyW(   DWORD reserved,   LPWSTR lpszCMID,   LPWSTR lpszFileName,   UINT command);




#line 5260 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)
#line 5265 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 5267 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


__declspec(dllimport) BOOL        __stdcall ColorCorrectPalette(   HDC hdc,   HPALETTE hPal,   DWORD deFirst,   DWORD num);
#line 5271 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"









#line 5281 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




















































































































#line 5398 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
















#line 5415 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"





#line 5421 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"









#line 5431 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



typedef struct tagEMR
{
    DWORD   iType;              
    DWORD   nSize;              
                                
} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL  ptlReference;
    DWORD   nChars;
    DWORD   offString;          
    DWORD   fOptions;
    RECTL   rcl;
    DWORD   offDx;              
                                
} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR     emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR     emr;
    DWORD   iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,

  EMRSETLAYOUT,         *PEMRSETLAYOUT,
#line 5479 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR     emr;
    FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR     emr;
    LONG    iRelative;          
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR     emr;
    DWORD   iArcDirection;      
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR     emr;
    DWORD   dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR     emr;
    DWORD   ihObject;           
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   iStart;
    DWORD   cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR     emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR     emr;
    DWORD   nPalEntries;        
    DWORD   offPalEntries;      
    DWORD   nSizeLast;          
                                
                                
} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR     emr;
    POINTL  ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR     emr;
    POINTL  ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR     emr;
    RECTL   rclBounds;          
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR     emr;
    RECTL   rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR     emr;
    POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR     emr;
    SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR     emr;
    LONG    xNum;
    LONG    xDenom;
    LONG    yNum;
    LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
    DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR     emr;
    POINTL  ptlStart;
    COLORREF crColor;
    DWORD   iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR     emr;
    RECTL   rclBox;             
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR     emr;
    RECTL   rclBox;             
    SIZEL   szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR     emr;
    RECTL   rclBox;             
    POINTL  ptlStart;
    POINTL  ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR     emr;
    POINTL  ptlCenter;
    DWORD   nRadius;
    FLOAT   eStartAngle;
    FLOAT   eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;
    POINTL  aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;
    POINTS  apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;               
    POINTL  aptl[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;               
    POINTS  apts[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cptl;               
    DWORD   aPolyCounts[1];     
    POINTL  aptl[1];            
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cpts;               
    DWORD   aPolyCounts[1];     
    POINTS  apts[1];            
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    BYTE    RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    BYTE    RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    SIZEL   szlStroke;
    BYTE    RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR     emr;
    DWORD   cbRgnData;          
    DWORD   iMode;
    BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    EMRTEXT emrtext;            
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    LONG    cStrings;
    EMRTEXT aemrtext[1];        
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    POINTL  aptlDest[3];
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   iStartScan;
    DWORD   cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   dwRop;
    LONG    cxDest;
    LONG    cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR     emr;
    DWORD   ihFont;             
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    LOGPALETTE lgpl;            
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    LOGPEN  lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN32 elp;            
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR        emr;
    DWORD      ihBrush;          
    LOGBRUSH32 lb;               
                                 
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   cbData;             
    DWORD   offData;            
                                
} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR     emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEA  lcs;        
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR     emr;
    DWORD   ihCS;               
} EMRSETCOLORSPACE,    *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;

#line 6062 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"



typedef struct tagEMREXTESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMREXTESCAPE,  *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbDriver;           
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR     emr;
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRSETICMPROFILE,  *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEW  lcs;        
    DWORD           dwFlags;    
    DWORD           cbData;     
    BYTE            Data[1];    
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR     emr;
    DWORD   dwAction;           
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR     emr;
    DWORD   ihPalette;          
    DWORD   nFirstEntry;        
    DWORD   nPalEntries;        
    DWORD   nReserved;          
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR       emr;
    RECTL     rclBounds;          
    DWORD     nVer;
    DWORD     nTri;
    ULONG     ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;


#line 6187 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"










#line 6198 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL  __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC   __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC  __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);




#line 6218 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT   x;
    FLOAT   y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT       gmfBlackBoxX;
    FLOAT       gmfBlackBoxY;
    POINTFLOAT  gmfptGlyphOrigin;
    FLOAT       gmfCellIncX;
    FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);




#line 6244 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


typedef struct tagLAYERPLANEDESCRIPTOR { 
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerPlane;
    BYTE  bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

















































__declspec(dllimport) BOOL  __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int   __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int   __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL  __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL  __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP,  *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);

#line 6343 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 6345 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion

#line 6348 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#pragma region Desktop Family



#line 6354 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"
#pragma endregion


}
#line 6359 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"


#pragma warning(pop)
#line 6363 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 6365 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wingdi.h"

#line 174 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

















#pragma once










#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 38 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






extern "C" {
#line 46 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma warning(push)



#pragma warning(disable:4820) 
#line 53 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family


typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;
#line 77 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
#line 84 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);

#line 88 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



#pragma region Application Family or OneCore Family


typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);

#line 98 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
#line 121 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 124 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion





































#line 163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family







typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;
#line 176 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;












#line 199 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;

#line 210 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








#line 222 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




























#line 251 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"















#line 267 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 270 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family



#pragma warning(push)
#pragma warning(disable:4995)
#line 278 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
wvsprintfA(
      LPSTR,
        LPCSTR,
      va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
      LPWSTR,
        LPCWSTR,
      va_list arglist);




#line 298 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__cdecl
wsprintfA(
      LPSTR,
        LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
      LPWSTR,
        LPCWSTR,
    ...);




#line 318 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma warning(pop)
#line 322 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 324 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




































#line 362 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










































#line 405 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"















#line 421 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


























#line 448 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"











































































































































#line 588 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"























































#line 644 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
















































#line 693 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






















#line 716 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 723 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





































#line 761 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


















#line 780 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 786 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 791 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 798 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 801 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





























#pragma region Desktop Family





typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
#line 856 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;

#line 867 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family





typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;

#line 885 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

















#line 904 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



























#line 932 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 936 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 941 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 947 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 949 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





























































#line 1011 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 1015 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"











#line 1027 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


typedef struct
{
    HWND    hwnd;
    RECT    rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD    time;
    HWND     hwnd;
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;

#line 1073 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 1075 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion
















#pragma region Desktop Family





typedef struct tagKBDLLHOOKSTRUCT {
    DWORD   vkCode;
    DWORD   scanCode;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT,  *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT   pt;
    DWORD   mouseData;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT,  *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;

#line 1118 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 1121 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagDEBUGHOOKINFO
{
    DWORD   idThread;
    DWORD   idThreadInstaller;
    LPARAM  lParam;
    WPARAM  wParam;
    int     code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;



typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT
{
    DWORD   mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;






#line 1160 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 1161 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





typedef struct tagHARDWAREHOOKSTRUCT {
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
#line 1173 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 1175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 1178 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"














#line 1193 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 1198 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 1208 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#pragma region Desktop Family


__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
      LPCSTR pwszKLID,
      UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
      LPCWSTR pwszKLID,
      UINT Flags);




#line 1234 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
      HKL hkl,
      UINT Flags);







#line 1251 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
      UINT wVirtKey,
      UINT wScanCode,
      const BYTE *lpKeyState,
      LPWSTR pwszBuff,
      int cchBuff,
      UINT wFlags,
      HKL dwhkl);
#line 1265 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
      HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
      LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
      LPWSTR pwszKLID);




#line 1287 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
      int nBuff,
      HKL  *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
      DWORD idThread);

#line 1303 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 1306 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagMOUSEMOVEPOINT {
    int   x;
    int   y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;

#line 1321 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
      UINT cbSize,
      LPMOUSEMOVEPOINT lppt,
      LPMOUSEMOVEPOINT lpptBuf,
      int nBufPoints,
      DWORD resolution);

#line 1343 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 1346 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"























#pragma region Desktop Family


__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
      LPCSTR lpszDesktop,
      LPCSTR lpszDevice,
      DEVMODEA* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
      LPCWSTR lpszDesktop,
      LPCWSTR lpszDevice,
      DEVMODEW* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);




#line 1397 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExA(
      LPCSTR lpszDesktop,
      LPCSTR lpszDevice,
      DEVMODEA* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa,
      ULONG ulHeapSize,
      PVOID pvoid);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExW(
      LPCWSTR lpszDesktop,
      LPCWSTR lpszDevice,
      DEVMODEW* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa,
      ULONG ulHeapSize,
      PVOID pvoid);




#line 1427 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 1429 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 1432 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 1433 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
      LPCSTR lpszDesktop,
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
      LPCWSTR lpszDesktop,
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);




#line 1458 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
      HWINSTA hwinsta,
      DESKTOPENUMPROCA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
      HWINSTA hwinsta,
      DESKTOPENUMPROCW lpEnumFunc,
      LPARAM lParam);




#line 1487 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
      HDESK hDesktop,
      WNDENUMPROC lpfn,
      LPARAM lParam);


__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
      HDESK hDesktop);


__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
       HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
      HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
      DWORD dwThreadId);

#line 1523 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 1526 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





























#pragma region Desktop Family


__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
      LPCSTR lpwinsta,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
      LPCWSTR lpwinsta,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);




#line 1579 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
      LPCSTR lpszWinSta,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
      LPCWSTR lpszWinSta,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);




#line 1599 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
      WINSTAENUMPROCA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
      WINSTAENUMPROCW lpEnumFunc,
      LPARAM lParam);




#line 1617 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
      HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
      HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);

#line 1637 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 1640 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
      HANDLE hObj,
      PSECURITY_INFORMATION pSIRequested,
      PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
      HANDLE hObj,
      PSECURITY_INFORMATION pSIRequested,
      PSECURITY_DESCRIPTOR pSID,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);

#line 1665 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








#line 1675 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family


typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);




#line 1709 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength);




#line 1731 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 1733 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 1736 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family



typedef struct tagWNDCLASSEXA {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
#line 1784 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 1785 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

typedef struct tagWNDCLASSA {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
#line 1821 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsHungAppWindow(
      HWND hwnd);



__declspec(dllimport)
void
__stdcall
DisableProcessWindowsGhosting(
    void);
#line 1836 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 1838 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




#pragma region Application Family or OneCore Family





typedef struct tagMSG {
    HWND        hwnd;
    UINT        message;
    WPARAM      wParam;
    LPARAM      lParam;
    DWORD       time;
    POINT       pt;



} MSG, *PMSG,  *NPMSG,  *LPMSG;

#line 1862 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion











#line 1875 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"













































#line 1921 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





















#line 1943 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



































#line 1979 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 1987 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"














#pragma region Desktop Family





typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;

#line 2016 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



















#line 2037 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 2038 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



















#pragma region Desktop Family





typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
      PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU   hmenuIn;
    HMENU   hmenuNext;
    HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;
#line 2077 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 2079 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion






















#line 2103 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










#line 2114 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

















#line 2132 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2137 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2141 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
















#line 2158 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 2165 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"












#line 2178 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"































#line 2210 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 2211 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 2212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 2214 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 2215 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"























#line 2239 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2244 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 2247 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 2257 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 2267 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










#line 2278 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










#line 2289 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

































#pragma region Desktop Family


typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;


#line 2333 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 2336 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 2338 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 2339 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 2341 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2345 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"























#line 2369 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2374 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



















#line 2394 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 2404 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 2407 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2411 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2416 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2420 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 2427 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2431 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2436 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

























#line 2462 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2466 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2470 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2475 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 2482 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2487 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2492 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 2495 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"








#line 2504 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 2512 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




















#line 2533 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




































#line 2570 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










#line 2581 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 2584 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 2586 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 2588 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
















#line 2605 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
      LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
      LPCWSTR lpString);




#line 2625 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 2627 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion





















#pragma region Desktop Family





typedef struct tagWINDOWPOS {
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;

#line 2674 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




























#line 2704 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 2706 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 2716 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 2722 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family


typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND  hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

__declspec(dllimport)
BOOL
__stdcall
TrackMouseEvent(
      LPTRACKMOUSEEVENT lpEventTrack);

#line 2742 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 2745 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2749 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 2750 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 2753 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


































































#line 2820 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

















#line 2838 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2843 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 2848 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2852 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2856 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2860 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 2863 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




















#line 2884 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 2888 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"























































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
      HDC hdc,
      LPRECT qrc,
      UINT edge,
      UINT grfFlags);

#line 2956 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion









#line 2967 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

































#line 3001 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
      HDC,
      LPRECT,
      UINT,
      UINT);


#line 3020 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion










#line 3032 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 3035 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawCaption(
      HWND hwnd,
      HDC hdc,
      const RECT * lprect,
      UINT flags);


#line 3050 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
      HWND hwnd,
      int idAni,
      const RECT *lprcFrom,
      const RECT *lprcTo);

#line 3068 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 3071 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
























#line 3096 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 3099 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 3107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




















#line 3128 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










#pragma region Desktop Family


typedef struct tagACCEL {

    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;




#line 3151 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
#line 3197 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

typedef struct tagWINDOWPLACEMENT {
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;





#line 3216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 3218 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



#pragma region Application Family or OneCore Family


typedef struct tagNMHDR
{
    HWND      hwndFrom;
    UINT_PTR  idFrom;
    UINT      code;         
}   NMHDR;

#line 3233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


typedef NMHDR  * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;

#line 3247 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion
#line 3249 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"











#line 3261 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



















#line 3281 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 3288 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 3289 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagMEASUREITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    ULONG_PTR  itemData;
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND        hwndItem;
    HDC         hDC;
    RECT        rcItem;
    ULONG_PTR   itemData;
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    ULONG_PTR  itemData;
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    HWND        hwndItem;
    UINT        itemID1;
    ULONG_PTR   itemData1;
    UINT        itemID2;
    ULONG_PTR   itemData2;
    DWORD       dwLocaleId;
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;

#line 3346 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax);




#line 3378 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"























#line 3402 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
      const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
      const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
      const MSG *lpMsg);




#line 3425 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

















#line 3443 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
      int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax,
      UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax,
      UINT wRemoveMsg);




#line 3473 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 3475 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion












#line 3489 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 3492 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
      HWND hWnd,
      int id,
      UINT fsModifiers,
      UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
      HWND hWnd,
      int id);

#line 3513 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion







#line 3522 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"















#line 3538 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 3542 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 3545 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 3548 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"








#line 3557 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 3561 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family





#line 3572 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
      UINT uFlags,
      DWORD dwReason);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
      BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
DWORD
__stdcall
GetUnpredictedMessagePos(
    void);
#line 3610 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
IsWow64Message(
    void);
#line 3618 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
      LPARAM lParam);
#line 3626 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
      HWND hWnd,
      UINT Msg,
        WPARAM wParam,
        LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
      HWND hWnd,
      UINT Msg,
        WPARAM wParam,
        LPARAM lParam);




#line 3648 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"























#line 3672 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      UINT fuFlags,
      UINT uTimeout,
      PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      UINT fuFlags,
      UINT uTimeout,
      PDWORD_PTR lpdwResult);




#line 3702 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3724 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      SENDASYNCPROC lpResultCallBack,
      ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      SENDASYNCPROC lpResultCallBack,
      ULONG_PTR dwData);




#line 3750 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


typedef struct {
    UINT  cbSize;
    HDESK hdesk;
    HWND  hwnd;
    LUID  luid;
} BSMINFO, *PBSMINFO;

__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExA(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      PBSMINFO pbsmInfo);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExW(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      PBSMINFO pbsmInfo);




#line 3784 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 3785 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 3787 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageA(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageW(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3818 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"












#line 3831 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 3833 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




















#line 3855 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 3859 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 3862 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family



typedef  PVOID           HDEVNOTIFY;
typedef  HDEVNOTIFY     *PHDEVNOTIFY;





#line 3877 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
      HANDLE hRecipient,
      LPVOID NotificationFilter,
      DWORD Flags);
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
      HANDLE hRecipient,
      LPVOID NotificationFilter,
      DWORD Flags);




#line 3897 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
      HDEVNOTIFY Handle
    );







typedef  PVOID           HPOWERNOTIFY;
typedef  HPOWERNOTIFY   *PHPOWERNOTIFY;

#line 3915 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterPowerSettingNotification(
     HANDLE hRecipient,
     LPCGUID PowerSettingGuid,
     DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterPowerSettingNotification(
     HPOWERNOTIFY Handle
    );

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterSuspendResumeNotification (
     HANDLE hRecipient,
     DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterSuspendResumeNotification (
     HPOWERNOTIFY Handle
    );


#line 3949 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 3950 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 3952 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3978 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
      DWORD idThread,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
      DWORD idThread,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 4000 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 4002 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion









#line 4013 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"








#line 4022 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
      DWORD idAttach,
      DWORD idAttachTo,
      BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
      LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);


#line 4049 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
      HANDLE hProcess,
      DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall



#line 4066 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
DefWindowProcA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 4079 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
DefWindowProcW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 4089 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
void
__stdcall
PostQuitMessage(
      int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
      WNDPROC lpPrevWndFunc,
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
      WNDPROC lpPrevWndFunc,
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 4121 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



























#line 4149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);

#line 4157 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
      LPVOID lpReserved);

#line 4171 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion









#line 4182 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
      UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
      const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
      const WNDCLASSW *lpWndClass);




#line 4214 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
      LPCSTR lpClassName,
      HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
      LPCWSTR lpClassName,
      HINSTANCE hInstance);




#line 4232 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
      HINSTANCE hInstance,
      LPCSTR lpClassName,
      LPWNDCLASSA lpWndClass);
 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
      HINSTANCE hInstance,
      LPCWSTR lpClassName,
      LPWNDCLASSW lpWndClass);




#line 4254 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
      const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
      const WNDCLASSEXW *);




#line 4271 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
      HINSTANCE hInstance,
      LPCSTR lpszClass,
      LPWNDCLASSEXA lpwcx);
 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
      HINSTANCE hInstance,
      LPCWSTR lpszClass,
      LPWNDCLASSEXW lpwcx);




#line 4293 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 4295 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 4297 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family



typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);
#line 4312 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
      DWORD dwExStyle,
      LPCSTR lpClassName,
      LPCSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HMENU hMenu,
      HINSTANCE hInstance,
      LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
      DWORD dwExStyle,
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HMENU hMenu,
      HINSTANCE hInstance,
      LPVOID lpParam);




#line 4350 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 4352 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion













#line 4367 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
IsWindow(
      HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
IsMenu(
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
      HWND hWndParent,
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
      HWND hWnd,
      int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
      HWND hWnd,
      DWORD dwTime,
      DWORD dwFlags);
#line 4414 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 4416 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindow(
      HWND hWnd,
      HDC hdcDst,
      POINT* pptDst,
      SIZE* psize,
      HDC hdcSrc,
      POINT* pptSrc,
      COLORREF crKey,
      BLENDFUNCTION* pblend,
      DWORD dwFlags);




typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;




#line 4459 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindowIndirect(
      HWND hWnd,
      const UPDATELAYEREDWINDOWINFO* pULWInfo);

#line 4467 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 4470 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetLayeredWindowAttributes(
      HWND hwnd,
      COLORREF* pcrKey,
      BYTE* pbAlpha,
      DWORD* pdwFlags);





#line 4490 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
PrintWindow(
      HWND hwnd,
      HDC hdcBlt,
      UINT nFlags);

#line 4501 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 4504 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetLayeredWindowAttributes(
      HWND hwnd,
      COLORREF crKey,
      BYTE bAlpha,
      DWORD dwFlags);

#line 4518 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion











#line 4531 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
       HWND hWnd,
       int nCmdShow);
#line 4545 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
       HWND hWnd,
       BOOL bInvert);


typedef struct {
    UINT  cbSize;
    HWND  hwnd;
    DWORD dwFlags;
    UINT  uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
      PFLASHWINFO pfwi);








#line 4576 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
       HWND hWnd,
       BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
       HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
       HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
      HWND hWnd,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
      HWND hWnd,
      HWND hWndInsertAfter,
      int X,
      int Y,
      int cx,
      int cy,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
      HWND hWnd,
      WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
      HWND hWnd,
      const WINDOWPLACEMENT *lpwndpl);






__declspec(dllimport)
BOOL
__stdcall
GetWindowDisplayAffinity(
      HWND hWnd,
      DWORD* pdwAffinity);

__declspec(dllimport)
BOOL
__stdcall
SetWindowDisplayAffinity(
      HWND hWnd,
      DWORD dwAffinity);

#line 4653 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 4655 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
      int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
      HDWP hWinPosInfo,
      HWND hWnd,
      HWND hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);


__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
      HDWP hWinPosInfo);

#line 4689 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 4692 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
      HWND hWnd);

#line 4727 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion






















#line 4751 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"














#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\pshpack2.h"
#line 4766 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Application Family or OneCore Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;

#line 4784 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
#line 4796 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 4798 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Application Family or OneCore Family


typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
#line 4810 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 4812 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
#line 4837 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
#line 4844 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 4846 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\poppack.h"
#line 4850 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
      HINSTANCE hInstance,
      LPCSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
      HINSTANCE hInstance,
      LPCWSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4877 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEA lpTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEW lpTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4901 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 4911 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 4921 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
      HINSTANCE hInstance,
      LPCSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
      HINSTANCE hInstance,
      LPCWSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4945 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEA hDialogTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEW hDialogTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4969 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 4979 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 4989 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EndDialog(
      HWND hDlg,
      INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
      HWND hDlg,
      int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
      HWND hDlg,
      int nIDDlgItem,
      UINT uValue,
      BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
      HWND hDlg,
      int nIDDlgItem,
      BOOL *lpTranslated,
      BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
      HWND hDlg,
      int nIDDlgItem,
      LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
      HWND hDlg,
      int nIDDlgItem,
      LPCWSTR lpString);




#line 5041 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

 
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
      HWND hDlg,
      int nIDDlgItem,
      LPSTR lpString,
      int cchMax);
 
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
      HWND hDlg,
      int nIDDlgItem,
      LPWSTR lpString,
      int cchMax);




#line 5065 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
      HWND hDlg,
      int nIDButton,
      UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
      HWND hDlg,
      int nIDFirstButton,
      int nIDLastButton,
      int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
      HWND hDlg,
      int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
      HWND hDlg,
      int nIDDlgItem,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
      HWND hDlg,
      int nIDDlgItem,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 5113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
      HWND hDlg,
      HWND hCtl,
      BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
      HWND hDlg,
      HWND hCtl,
      BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
      HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);


__declspec(dllimport)

LRESULT
__stdcall



#line 5150 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
DefDlgProcA(
      HWND hDlg,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 5163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
DefDlgProcW(
      HWND hDlg,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 5173 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


typedef enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS {
     DCDC_DEFAULT                  = 0x0000,
     DCDC_DISABLE_FONT_UPDATE      = 0x0001,
     DCDC_DISABLE_RELAYOUT         = 0x0002,
} DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;


extern "C++" { inline constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator | (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &operator |= (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator & (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &operator &= (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator ~ (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a) throw() { return DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS(~((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)a)); } inline constexpr DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS operator ^ (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &operator ^= (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &a, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS>::type)b)); } };
#line 5184 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

BOOL
__stdcall
SetDialogControlDpiChangeBehavior(
      HWND hWnd,
      DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask,
      DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values);

DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
__stdcall
GetDialogControlDpiChangeBehavior(
      HWND hWnd);

typedef enum DIALOG_DPI_CHANGE_BEHAVIORS {
    DDC_DEFAULT                     = 0x0000,
    DDC_DISABLE_ALL                 = 0x0001,
    DDC_DISABLE_RESIZE              = 0x0002,
    DDC_DISABLE_CONTROL_RELAYOUT    = 0x0004,
} DIALOG_DPI_CHANGE_BEHAVIORS;


extern "C++" { inline constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator | (DIALOG_DPI_CHANGE_BEHAVIORS a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_DPI_CHANGE_BEHAVIORS &operator |= (DIALOG_DPI_CHANGE_BEHAVIORS &a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator & (DIALOG_DPI_CHANGE_BEHAVIORS a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_DPI_CHANGE_BEHAVIORS &operator &= (DIALOG_DPI_CHANGE_BEHAVIORS &a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator ~ (DIALOG_DPI_CHANGE_BEHAVIORS a) throw() { return DIALOG_DPI_CHANGE_BEHAVIORS(~((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)a)); } inline constexpr DIALOG_DPI_CHANGE_BEHAVIORS operator ^ (DIALOG_DPI_CHANGE_BEHAVIORS a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return DIALOG_DPI_CHANGE_BEHAVIORS(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } inline DIALOG_DPI_CHANGE_BEHAVIORS &operator ^= (DIALOG_DPI_CHANGE_BEHAVIORS &a, DIALOG_DPI_CHANGE_BEHAVIORS b) throw() { return (DIALOG_DPI_CHANGE_BEHAVIORS &)(((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<DIALOG_DPI_CHANGE_BEHAVIORS>::type)b)); } };
#line 5207 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

BOOL
__stdcall
SetDialogDpiChangeBehavior(
      HWND hDlg,
      DIALOG_DPI_CHANGE_BEHAVIORS mask,
      DIALOG_DPI_CHANGE_BEHAVIORS values);

DIALOG_DPI_CHANGE_BEHAVIORS
__stdcall
GetDialogDpiChangeBehavior(
      HWND hDlg);

#line 5221 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








#line 5231 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 5233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
      LPMSG lpMsg,
      int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
      LPMSG lpMsg,
      int nCode);




#line 5256 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 5258 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
      HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);

#line 5287 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
      HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
      HWND hWndRemove,
      HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
      UINT uFormat,
      HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
      UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
      LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
      LPCWSTR lpszFormat);




#line 5341 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
      UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
      UINT format,
      LPSTR lpszFormatName,
      int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
      UINT format,
      LPWSTR lpszFormatName,
      int cchMaxCount);




#line 5373 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
      UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
      UINT *paFormatPriorityList,
      int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
AddClipboardFormatListener(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
RemoveClipboardFormatListener(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
GetUpdatedClipboardFormats(
      PUINT lpuiFormats,
      UINT cFormats,
      PUINT pcFormatsOut);
#line 5420 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 5422 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
      LPCSTR pSrc,
      LPSTR pDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
      LPCWSTR pSrc,
      LPSTR pDst);




#line 5444 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

 
__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
      LPCSTR pSrc,
      LPSTR pDst);
 
__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
      LPCSTR pSrc,
      LPWSTR pDst);




#line 5464 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
      LPCSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
      LPCWSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);




#line 5484 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
      LPCSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
      LPCSTR lpszSrc,
      LPWSTR lpszDst,
      DWORD cchDstLength);




#line 5504 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 5506 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
      LPWSTR lpsz);




#line 5526 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
      LPSTR lpsz,
      DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
      LPWSTR lpsz,
      DWORD cchLength);




#line 5544 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
      LPWSTR lpsz);




#line 5560 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
      LPSTR lpsz,
      DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
      LPWSTR lpsz,
      DWORD cchLength);




#line 5578 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
      LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
      LPCWSTR lpsz);




#line 5594 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
      LPCSTR lpszStart,
      LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
      LPCWSTR lpszStart,
      LPCWSTR lpszCurrent);




#line 5612 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
       WORD CodePage,
       LPCSTR lpCurrentChar,
       DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
       WORD CodePage,
       LPCSTR lpStart,
       LPCSTR lpCurrentChar,
       DWORD dwFlags);
#line 5631 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 5633 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion















#pragma region Desktop or OneCore Family







__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
      WCHAR ch);




#line 5672 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
      WCHAR ch);




#line 5688 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
      WCHAR ch);




#line 5704 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
      WCHAR ch);




#line 5720 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 5722 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 5724 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
SetFocus(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
      int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
      int vKey);

__declspec(dllimport)
 
BOOL
__stdcall
GetKeyboardState(
      PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
      LPBYTE lpKeyState);


#line 5780 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region  Desktop or PC Family


__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
      LONG lParam,
      LPSTR lpString,
      int cchSize);
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
      LONG lParam,
      LPWSTR lpString,
      int cchSize);




#line 5804 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 5806 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
GetKeyboardType(
      int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
      UINT uVirtKey,
      UINT uScanCode,
      const BYTE *lpKeyState,
      LPWORD lpChar,
      UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
      UINT uVirtKey,
      UINT uScanCode,
      const BYTE *lpKeyState,
      LPWORD lpChar,
      UINT uFlags,
      HKL dwhkl);
#line 5840 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
ToUnicode(
      UINT wVirtKey,
      UINT wScanCode,
      const BYTE *lpKeyState,
      LPWSTR pwszBuff,
      int cchBuff,
      UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
      WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
      CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
      WCHAR ch);




#line 5873 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
      CHAR ch,
      HKL dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
      WCHAR ch,
      HKL dwhkl);




#line 5892 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 5893 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 5899 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
void
__stdcall
keybd_event(
      BYTE bVk,
      BYTE bScan,
      DWORD dwFlags,
      ULONG_PTR dwExtraInfo);

#line 5910 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion













#line 5925 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 5928 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
mouse_event(
      DWORD dwFlags,
      DWORD dx,
      DWORD dy,
      DWORD dwData,
      ULONG_PTR dwExtraInfo);

#line 5945 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



typedef struct tagMOUSEINPUT {
    LONG    dx;
    LONG    dy;
    DWORD   mouseData;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD    wVk;
    WORD    wScan;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

#pragma region Desktop Family


typedef struct tagHARDWAREINPUT {
    DWORD   uMsg;
    WORD    wParamL;
    WORD    wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD   type;

    union
    {
        MOUSEINPUT      mi;
        KEYBDINPUT      ki;
        HARDWAREINPUT   hi;
    } ;
} INPUT, *PINPUT, * LPINPUT;

__declspec(dllimport)
UINT
__stdcall
SendInput(
      UINT cInputs,                     
      LPINPUT pInputs,  
      int cbSize);                      

#line 5999 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 6002 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family









struct HTOUCHINPUT__{int unused;}; typedef struct HTOUCHINPUT__ *HTOUCHINPUT;

typedef struct tagTOUCHINPUT {
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;


#line 6033 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

























#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetTouchInputInfo(
      HTOUCHINPUT hTouchInput,               
      UINT cInputs,                          
      PTOUCHINPUT pInputs,  
      int cbSize);                           

__declspec(dllimport)
BOOL
__stdcall
CloseTouchInputHandle(
      HTOUCHINPUT hTouchInput);                   


#line 6079 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterTouchWindow(
      HWND hwnd,
      ULONG ulFlags);

__declspec(dllimport)
BOOL
__stdcall
UnregisterTouchWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
IsTouchWindow(
      HWND hwnd,
      PULONG pulFlags);

#line 6112 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 6115 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family




enum tagPOINTER_INPUT_TYPE {
    PT_POINTER  = 1,   
    PT_TOUCH    = 2,   
    PT_PEN      = 3,   
    PT_MOUSE    = 4,   

    PT_TOUCHPAD = 5,   
#line 6131 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
};


typedef DWORD POINTER_INPUT_TYPE;

typedef UINT32 POINTER_FLAGS;

#line 6139 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




























#pragma region Desktop Family


typedef enum tagPOINTER_BUTTON_CHANGE_TYPE {
    POINTER_CHANGE_NONE,
    POINTER_CHANGE_FIRSTBUTTON_DOWN,
    POINTER_CHANGE_FIRSTBUTTON_UP,
    POINTER_CHANGE_SECONDBUTTON_DOWN,
    POINTER_CHANGE_SECONDBUTTON_UP,
    POINTER_CHANGE_THIRDBUTTON_DOWN,
    POINTER_CHANGE_THIRDBUTTON_UP,
    POINTER_CHANGE_FOURTHBUTTON_DOWN,
    POINTER_CHANGE_FOURTHBUTTON_UP,
    POINTER_CHANGE_FIFTHBUTTON_DOWN,
    POINTER_CHANGE_FIFTHBUTTON_UP,
} POINTER_BUTTON_CHANGE_TYPE;

typedef struct tagPOINTER_INFO {
    POINTER_INPUT_TYPE    pointerType;
    UINT32          pointerId;
    UINT32          frameId;
    POINTER_FLAGS   pointerFlags;
    HANDLE          sourceDevice;
    HWND            hwndTarget;
    POINT           ptPixelLocation;
    POINT           ptHimetricLocation;
    POINT           ptPixelLocationRaw;
    POINT           ptHimetricLocationRaw;
    DWORD           dwTime;
    UINT32          historyCount;
    INT32           InputData;
    DWORD           dwKeyStates;
    UINT64          PerformanceCount;
    POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
} POINTER_INFO;


typedef UINT32 TOUCH_FLAGS;


typedef UINT32 TOUCH_MASK;





typedef struct tagPOINTER_TOUCH_INFO {
    POINTER_INFO    pointerInfo;
    TOUCH_FLAGS     touchFlags;
    TOUCH_MASK      touchMask;
    RECT            rcContact;
    RECT            rcContactRaw;
    UINT32          orientation;
    UINT32          pressure;
} POINTER_TOUCH_INFO;

typedef UINT32 PEN_FLAGS;





typedef UINT32 PEN_MASK;






typedef struct tagPOINTER_PEN_INFO {
    POINTER_INFO    pointerInfo;
    PEN_FLAGS       penFlags;
    PEN_MASK        penMask;
    UINT32          pressure;
    UINT32          rotation;
    INT32           tiltX;
    INT32           tiltY;
} POINTER_PEN_INFO;

#line 6248 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion














































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
InitializeTouchInjection(
      UINT32 maxCount,
      DWORD dwMode);

__declspec(dllimport)
BOOL
__stdcall
InjectTouchInput(
      UINT32 count,
      const POINTER_TOUCH_INFO *contacts);

typedef struct tagUSAGE_PROPERTIES {
    USHORT level;
    USHORT page;
    USHORT usage;
    INT32 logicalMinimum;
    INT32 logicalMaximum;
    USHORT unit;
    USHORT exponent;
    BYTE   count;
    INT32 physicalMinimum;
    INT32 physicalMaximum;
}USAGE_PROPERTIES, *PUSAGE_PROPERTIES;

typedef struct tagPOINTER_TYPE_INFO {
    POINTER_INPUT_TYPE  type;
    union{
        POINTER_TOUCH_INFO touchInfo;
        POINTER_PEN_INFO   penInfo;
    } ;
}POINTER_TYPE_INFO, *PPOINTER_TYPE_INFO;

typedef struct tagINPUT_INJECTION_VALUE {
    USHORT page;
    USHORT usage;
    INT32  value;
    USHORT index;
}INPUT_INJECTION_VALUE, *PINPUT_INJECTION_VALUE;

__declspec(dllimport)
BOOL
__stdcall
GetPointerType(
      UINT32 pointerId,
      POINTER_INPUT_TYPE *pointerType);

__declspec(dllimport)
BOOL
__stdcall
GetPointerCursorId(
      UINT32 pointerId,
      UINT32 *cursorId);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfo(
      UINT32 pointerId,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfo(
      UINT32 pointerId,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfo(
      UINT32 pointerId,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
SkipPointerFrameMessages(
      UINT32 pointerId);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerInputTarget(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType);

__declspec(dllimport)
BOOL
__stdcall
UnregisterPointerInputTarget(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerInputTargetEx(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType,
      BOOL fObserve);

__declspec(dllimport)
BOOL
__stdcall
UnregisterPointerInputTargetEx(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType);


__declspec(dllimport)
BOOL
__stdcall
EnableMouseInPointer(
      BOOL fEnable);

__declspec(dllimport)
BOOL
__stdcall
IsMouseInPointerEnabled(
    void);


__declspec(dllimport)
BOOL
__stdcall
EnableMouseInPointerForThread();
#line 6504 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
RegisterTouchHitTestingWindow(
      HWND hwnd,
      ULONG value);

typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    UINT16 score;
    POINT adjustedPoint;
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;





typedef struct tagTOUCH_HIT_TESTING_INPUT
{
    UINT32 pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    UINT32 orientation;
} TOUCH_HIT_TESTING_INPUT, *PTOUCH_HIT_TESTING_INPUT;





__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToRect(
      const RECT *controlBoundingBox,
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToPolygon(
    UINT32 numVertices,
      const POINT *controlPolygon,
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
LRESULT
__stdcall
PackTouchHitTestingProximityEvaluation(
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);


typedef enum tagFEEDBACK_TYPE {
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION    = 2,
    FEEDBACK_PEN_TAP                    = 3,
    FEEDBACK_PEN_DOUBLETAP              = 4,
    FEEDBACK_PEN_PRESSANDHOLD           = 5,
    FEEDBACK_PEN_RIGHTTAP               = 6,
    FEEDBACK_TOUCH_TAP                  = 7,
    FEEDBACK_TOUCH_DOUBLETAP            = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD         = 9,
    FEEDBACK_TOUCH_RIGHTTAP             = 10,
    FEEDBACK_GESTURE_PRESSANDTAP        = 11,
    FEEDBACK_MAX                        = 0xFFFFFFFF
} FEEDBACK_TYPE;





__declspec(dllimport)
BOOL
__stdcall
GetWindowFeedbackSetting(
      HWND hwnd,
      FEEDBACK_TYPE feedback,
      DWORD dwFlags,
      UINT32* pSize,
      void* config);

__declspec(dllimport)
BOOL
__stdcall
SetWindowFeedbackSetting(
      HWND hwnd,
      FEEDBACK_TYPE feedback,
      DWORD dwFlags,
      UINT32 size,
      const void* configuration);


#line 6605 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 6608 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family




#pragma warning(push)
#line 6618 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma warning(disable : 4201)

typedef struct tagINPUT_TRANSFORM {
    union {
        struct {
            float        _11, _12, _13, _14;
            float        _21, _22, _23, _24;
            float        _31, _32, _33, _34;
            float        _41, _42, _43, _44;
        } ;
        float m[4][4];
    } ;
} INPUT_TRANSFORM;


#pragma warning(pop)
#line 6635 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetPointerInputTransform(
      UINT32 pointerId,
      UINT32 historyCount,
      INPUT_TRANSFORM *inputTransform);

#line 6646 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 6649 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


#line 6654 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family



typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;

__declspec(dllimport)
BOOL
__stdcall
GetLastInputInfo(
      PLASTINPUTINFO plii);
#line 6671 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 6673 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop or PC Family


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
      UINT uCode,
      UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
      UINT uCode,
      UINT uMapType);




#line 6695 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
      UINT uCode,
      UINT uMapType,
      HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
      UINT uCode,
      UINT uMapType,
      HKL dwhkl);




#line 6716 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 6718 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family






#line 6728 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 6731 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
      UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
      DWORD nCount,
      const HANDLE *pHandles,
      BOOL fWaitAll,
      DWORD dwMilliseconds,
      DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
      DWORD nCount,
      const HANDLE *pHandles,
      DWORD dwMilliseconds,
      DWORD dwWakeMask,
      DWORD dwFlags);


#line 6785 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




















#line 6807 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 6813 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





















#line 6835 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


















#pragma region Desktop Family






__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
      HWND hWnd,
      UINT_PTR nIDEvent,
      UINT uElapse,
      TIMERPROC lpTimerFunc);









__declspec(dllimport)
UINT_PTR
__stdcall
SetCoalescableTimer(
      HWND hWnd,
      UINT_PTR nIDEvent,
      UINT uElapse,
      TIMERPROC lpTimerFunc,
      ULONG uToleranceDelay);

#line 6888 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
KillTimer(
      HWND hWnd,
      UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
      HWND hWnd,
      BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
      HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
      HINSTANCE hInstance,
      LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
      HINSTANCE hInstance,
      LPCWSTR lpTableName);




#line 6932 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
      LPACCEL paccel,
      int cAccel);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
      LPACCEL paccel,
      int cAccel);




#line 6950 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
      HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
      HACCEL hAccelSrc,
      LPACCEL lpAccelDst,
      int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
      HACCEL hAccelSrc,
      LPACCEL lpAccelDst,
      int cAccelEntries);




#line 6976 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
      HWND hWnd,
      HACCEL hAccTable,
      LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
      HWND hWnd,
      HACCEL hAccTable,
      LPMSG lpMsg);




#line 6998 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 7000 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 7002 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

















































































#line 7085 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 7092 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 7096 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 7104 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 7107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 7111 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 7118 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 7123 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 7129 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 7133 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 7135 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 7137 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 7139 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 7141 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 7149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 7153 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 7157 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 7162 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 7164 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
      int nIndex);



__declspec(dllimport)
int
__stdcall
GetSystemMetricsForDpi(
      int nIndex,
      UINT dpi);

#line 7185 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 7187 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 7190 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
      HINSTANCE hInstance,
      LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
      HINSTANCE hInstance,
      LPCWSTR lpMenuName);




#line 7213 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
      const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
      const MENUTEMPLATEW *lpMenuTemplate);




#line 7229 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
GetMenu(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
      HWND hWnd,
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
      HMENU hMenu,
      UINT cmd,
      LPCSTR lpszNewItem,
      UINT cmdInsert,
      UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
      HMENU hMenu,
      UINT cmd,
      LPCWSTR lpszNewItem,
      UINT cmdInsert,
      UINT flags);




#line 7266 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
      HWND hWnd,
      HMENU hMenu,
      UINT uIDHiliteItem,
      UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
      HMENU hMenu,
      UINT uIDItem,
      LPSTR lpString,
      int cchMax,
      UINT flags);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
      HMENU hMenu,
      UINT uIDItem,
      LPWSTR lpString,
      int cchMax,
      UINT flags);




#line 7299 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetMenuState(
      HMENU hMenu,
      UINT uId,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
      HWND hWnd);




#line 7318 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
      HWND hWnd,
      BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
      HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
      HMENU hMenu,
      UINT uIDCheckItem,
      UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
      HMENU hMenu,
      UINT uIDEnableItem,
      UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
      HMENU hMenu,
      int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
      HMENU hMenu,
      int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);




#line 7405 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
      HMENU hMenu,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
      HMENU hMenu,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);




#line 7427 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
      HMENU hMnu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
      HMENU hMnu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);




#line 7451 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      HBITMAP hBitmapUnchecked,
      HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
      HMENU hMenu,
      UINT uFlags,
      int x,
      int y,
      int nReserved,
      HWND hWnd,
      const RECT *prcRect);








typedef struct tagTPMPARAMS
{
    UINT    cbSize;     
    RECT    rcExclude;  
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
      HMENU hMenu,
      UINT uFlags,
      int x,
      int y,
      HWND hwnd,
      LPTPMPARAMS lptpm);
#line 7520 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
CalculatePopupWindowPosition(
      const POINT *anchorPoint,
      const SIZE *windowSize,
      UINT  flags,
      RECT *excludeRect,
      RECT *popupWindowPosition);

#line 7533 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

















typedef struct tagMENUINFO
{
    DWORD   cbSize;
    DWORD   fMask;
    DWORD   dwStyle;
    UINT    cyMax;
    HBRUSH  hbrBack;
    DWORD   dwContextHelpID;
    ULONG_PTR dwMenuData;
}   MENUINFO,  *LPMENUINFO;
typedef MENUINFO const  *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
      HMENU,
      LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
      HMENU,
      LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;












#line 7609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"








#line 7618 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

















#line 7636 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


typedef struct tagMENUITEMINFOA
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPSTR    dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 7654 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
}   MENUITEMINFOA,  *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPWSTR   dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 7671 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
}   MENUITEMINFOW,  *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
#line 7679 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
#line 7686 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPCMENUITEMINFOA lpmi);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPCMENUITEMINFOW lpmi);




#line 7709 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPMENUITEMINFOW lpmii);




#line 7731 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
      HMENU hmenu,
      UINT item,
      BOOL fByPositon,
      LPCMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
      HMENU hmenu,
      UINT item,
      BOOL fByPositon,
      LPCMENUITEMINFOW lpmii);




#line 7753 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





__declspec(dllimport)
UINT
__stdcall
GetMenuDefaultItem(
      HMENU hMenu,
      UINT fByPos,
      UINT gmdiFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuDefaultItem(
      HMENU hMenu,
      UINT uItem,
      UINT fByPos);

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemRect(
      HWND hWnd,
      HMENU hMenu,
      UINT uItem,
      LPRECT lprcItem);

__declspec(dllimport)
int
__stdcall
MenuItemFromPoint(
      HWND hWnd,
      HMENU hMenu,
      POINT ptScreen);
#line 7791 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


















#line 7810 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"








#line 7819 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 7822 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 7823 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 7826 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 7829 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 7831 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family






typedef struct tagDROPSTRUCT
{
    HWND    hwndSource;
    HWND    hwndSink;
    DWORD   wFmt;
    ULONG_PTR dwData;
    POINT   ptDrop;
    DWORD   dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;

#line 7854 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion











#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
DragObject(
      HWND hwndParent,
      HWND hwndFrom,
      UINT fmt,
      ULONG_PTR data,
      HCURSOR hcur);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
      HWND hwnd,
      POINT pt);

#line 7887 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 7890 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
      HDC hDC,
      int X,
      int Y,
      HICON hIcon);

#line 7904 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


































#line 7940 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 7941 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagDRAWTEXTPARAMS
{
    UINT    cbSize;
    int     iTabLength;
    int     iLeftMargin;
    int     iRightMargin;
    UINT    uiLengthDrawn;
} DRAWTEXTPARAMS,  *LPDRAWTEXTPARAMS;

#line 7955 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 7958 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family










__declspec(dllimport)
 
int
__stdcall
DrawTextA(
      HDC hdc,
    
    
    LPCSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format);
__declspec(dllimport)
 
int
__stdcall
DrawTextW(
      HDC hdc,
    
    
    LPCWSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format);




#line 8000 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

























#line 8026 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
 
int
__stdcall
DrawTextExA(
      HDC hdc,
    
    
    
    LPSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format,
      LPDRAWTEXTPARAMS lpdtp);
__declspec(dllimport)
 
int
__stdcall
DrawTextExW(
      HDC hdc,
    
    
    
    LPWSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format,
      LPDRAWTEXTPARAMS lpdtp);




#line 8062 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 8063 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 8065 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 8068 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
      HDC hDC,
      HBRUSH hBrush,
      GRAYSTRINGPROC lpOutputFunc,
      LPARAM lpData,
      int nCount,
      int X,
      int Y,
      int nWidth,
      int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
      HDC hDC,
      HBRUSH hBrush,
      GRAYSTRINGPROC lpOutputFunc,
      LPARAM lpData,
      int nCount,
      int X,
      int Y,
      int nWidth,
      int nHeight);




#line 8103 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 8105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


















#line 8125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
      HDC hdc,
      HBRUSH hbrFore,
      DRAWSTATEPROC qfnCallBack,
      LPARAM lData,
      WPARAM wData,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
      HDC hdc,
      HBRUSH hbrFore,
      DRAWSTATEPROC qfnCallBack,
      LPARAM lData,
      WPARAM wData,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);




#line 8163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 8165 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 8168 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
      HDC hdc,
      int x,
      int y,
      LPCSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions,
      int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
      HDC hdc,
      int x,
      int y,
      LPCWSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions,
      int nTabOrigin);




#line 8201 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
      HDC hdc,
      LPCSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
      HDC hdc,
      LPCWSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions);




#line 8225 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
      HWND hWnd);


__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
      HDC hdc);

__declspec(dllimport)
void
__stdcall
SwitchToThisWindow(
      HWND hwnd,
      BOOL fUnknown);
#line 8259 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
      HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
AllowSetForegroundWindow(
      DWORD dwProcessId);



__declspec(dllimport)
BOOL
__stdcall
LockSetForegroundWindow(
      UINT uLockCode);




#line 8286 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
      HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
      HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
      HWND hWnd,
      HRGN hrgnClip,
      DWORD flags);

#line 8308 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


















#pragma region Desktop Family


__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
      HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
      HWND hWnd,
      HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
      HWND hWnd,
      LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
      HWND hWnd,
      const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
      HWND hWnd,
      LPRECT lpRect,
      BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bRedraw);

#line 8382 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetWindowRgn(
      HWND hWnd,
      HRGN hRgn);



__declspec(dllimport)
int
__stdcall
GetWindowRgnBox(
      HWND hWnd,
      LPRECT lprc);

#line 8405 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
      HDC hDC,
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
      HWND hWnd,
      const RECT *lpRect,
      BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
      HWND hWnd,
      const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
      HWND hWnd,
      HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
      HWND hWnd,
      const RECT *lprcUpdate,
      HRGN hrgnUpdate,
      UINT flags);

#line 8454 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion






















#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
      HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
      HWND hWnd,
      int XAmount,
      int YAmount,
      const RECT *lpRect,
      const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
      HDC hDC,
      int dx,
      int dy,
      const RECT *lprcScroll,
      const RECT *lprcClip,
      HRGN hrgnUpdate,
      LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
      HWND hWnd,
      int dx,
      int dy,
      const RECT *prcScroll,
      const RECT *prcClip,
      HRGN hrgnUpdate,
      LPRECT prcUpdate,
      UINT flags);

#line 8526 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion






#line 8534 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
SetScrollPos(
      HWND hWnd,
      int nBar,
      int nPos,
      BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
      HWND hWnd,
      int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
      HWND hWnd,
      int nBar,
      int nMinPos,
      int nMaxPos,
      BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
      HWND hWnd,
      int nBar,
      LPINT lpMinPos,
      LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
      HWND hWnd,
      int wBar,
      BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
      HWND hWnd,
      UINT wSBflags,
      UINT wArrows);


















#line 8609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetPropA(
      HWND hWnd,
      LPCSTR lpString,
      HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
      HWND hWnd,
      LPCWSTR lpString,
      HANDLE hData);




#line 8629 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
      HWND hWnd,
      LPCWSTR lpString);




#line 8647 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
      HWND hWnd,
      LPCWSTR lpString);




#line 8665 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsExA(
      HWND hWnd,
      PROPENUMPROCEXA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
      HWND hWnd,
      PROPENUMPROCEXW lpEnumFunc,
      LPARAM lParam);




#line 8685 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsA(
      HWND hWnd,
      PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
      HWND hWnd,
      PROPENUMPROCW lpEnumFunc);




#line 8703 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
      HWND hWnd,
      LPCWSTR lpString);




#line 8721 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

 
__declspec(dllimport)
int
__stdcall
GetWindowTextA(
      HWND hWnd,
      LPSTR lpString,
      int nMaxCount);
 
__declspec(dllimport)
int
__stdcall
GetWindowTextW(
      HWND hWnd,
      LPWSTR lpString,
      int nMaxCount);




#line 8743 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
      HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
      HWND hWnd);




#line 8759 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
      HWND hWnd,
      LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
      HWND hWnd,
      LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
      LPRECT lpRect,
      DWORD dwStyle,
      BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
      LPRECT lpRect,
      DWORD dwStyle,
      BOOL bMenu,
      DWORD dwExStyle);


__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectExForDpi(
      LPRECT lpRect,
      DWORD dwStyle,
      BOOL bMenu,
      DWORD dwExStyle,
      UINT dpi);
#line 8802 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 8805 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion





#pragma region Desktop Family


typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD_PTR dwContextId;      
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
      HWND,
      DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
      HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
      HMENU,
      DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
      HMENU);

#line 8851 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 8854 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"















#line 8870 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"











#line 8882 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 8892 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 8899 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










#line 8910 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 8917 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 8919 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
MessageBoxA(
      HWND hWnd,
      LPCSTR lpText,
      LPCSTR lpCaption,
      UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
      HWND hWnd,
      LPCWSTR lpText,
      LPCWSTR lpCaption,
      UINT uType);




#line 8950 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"























#line 8974 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxExA(
      HWND hWnd,
      LPCSTR lpText,
      LPCSTR lpCaption,
      UINT uType,
      WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
      HWND hWnd,
      LPCWSTR lpText,
      LPCWSTR lpCaption,
      UINT uType,
      WORD wLanguageId);




#line 8998 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCSTR      lpszText;
    LPCSTR      lpszCaption;
    DWORD       dwStyle;
    LPCSTR      lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCWSTR     lpszText;
    LPCWSTR     lpszCaption;
    DWORD       dwStyle;
    LPCWSTR     lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
#line 9038 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
      const MSGBOXPARAMSA * lpmbp);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
      const MSGBOXPARAMSW * lpmbp);




#line 9054 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 9055 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 9058 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
      UINT uType);

#line 9071 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 9074 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
ShowCursor(
      BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
      int X,
      int Y);


__declspec(dllimport)
BOOL
__stdcall
SetPhysicalCursorPos(
      int X,
      int Y);
#line 9100 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
      HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
      LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
GetPhysicalCursorPos(
      LPPOINT lpPoint);
#line 9120 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
      LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
      HWND hWnd,
      HBITMAP hBitmap,
      int nWidth,
      int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
      UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
      int X,
      int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
      HWND hWnd,
      LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPoint(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPoint(
      HWND hWnd,
      LPPOINT lpPoint);

#line 9216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPointForPerMonitorDPI(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPointForPerMonitorDPI(
      HWND hWnd,
      LPPOINT lpPoint);

#line 9233 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
MapWindowPoints(
      HWND hWndFrom,
      HWND hWndTo,
      LPPOINT lpPoints,
      UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
      POINT Point);


__declspec(dllimport)
HWND
__stdcall
WindowFromPhysicalPoint(
      POINT Point);
#line 9256 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
      HWND hWndParent,
      POINT Point);

#line 9265 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop or PC Family

__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
      const RECT *lpRect);
#line 9275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPointEx(
      HWND hwnd,
      POINT pt,
      UINT flags);

#line 9295 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 9298 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










































#line 9341 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"








#line 9350 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 9351 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"








#line 9360 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
      int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
      int nIndex);


#line 9380 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
      int cElements,
      const INT * lpaElements,
      const COLORREF * lpaRgbValues);

#line 9390 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 9393 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
      HDC hDC,
      const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
      HDC hDC,
      const RECT *lprc,
      HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
      HDC hDC,
      const RECT *lprc,
      HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
      HDC hDC,
      const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
      LPRECT lprc,
      int xLeft,
      int yTop,
      int xRight,
      int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
      LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
      LPRECT lprcDst,
      const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
      LPRECT lprc,
      int dx,
      int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
      LPRECT lprc,
      int dx,
      int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
      const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
      const RECT *lprc1,
      const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
      const RECT *lprc,
      POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
      HWND hWnd,
      int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
      HWND hWnd,
      int nIndex,
      WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
      HWND hWnd,
      int nIndex);




#line 9544 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);




#line 9564 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

















































#line 9614 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 9622 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 9624 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
WORD
__stdcall
GetClassWord(
      HWND hWnd,
      int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
      HWND hWnd,
      int nIndex,
      WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
      HWND hWnd,
      int nIndex);




#line 9657 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);




#line 9677 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

















































#line 9727 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 9735 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 9737 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 9739 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
      DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
      DWORD dwDefaultLayout);
#line 9753 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
      HWND hWndChild,
      HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
      HWND hWndParent,
      WNDENUMPROC lpEnumFunc,
      LPARAM lParam);


__declspec(dllimport)
HWND
__stdcall
FindWindowA(
      LPCSTR lpClassName,
      LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName);




#line 9800 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
HWND
__stdcall
FindWindowExA(
      HWND hWndParent,
      HWND hWndChildAfter,
      LPCSTR lpszClass,
      LPCSTR lpszWindow);
__declspec(dllimport)
HWND
__stdcall
FindWindowExW(
      HWND hWndParent,
      HWND hWndChildAfter,
      LPCWSTR lpszClass,
      LPCWSTR lpszWindow);




#line 9823 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetShellWindow(
    void);

#line 9831 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
RegisterShellHookWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
DeregisterShellHookWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
      WNDENUMPROC lpEnumFunc,
      LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
      DWORD dwThreadId,
      WNDENUMPROC lpfn,
      LPARAM lParam);




__declspec(dllimport)
int
__stdcall
GetClassNameA(
      HWND hWnd,
      LPSTR lpClassName,
      int nMaxCount
    );
__declspec(dllimport)
int
__stdcall
GetClassNameW(
      HWND hWnd,
      LPWSTR lpClassName,
      int nMaxCount
    );




#line 9884 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





















#line 9906 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
      HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
      HWND hWnd,
      LPDWORD lpdwProcessId);



__declspec(dllimport)
BOOL
__stdcall
IsGUIThread(
      BOOL bConvert);

#line 9935 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
      HWND hWnd);












#line 9958 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 9961 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetWindow(
      HWND hWnd,
      UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
      int nFilterType,
      HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
      int nFilterType,
      HOOKPROC pfnFilterProc);




#line 9991 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





















#line 10013 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
      int nCode,
      HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
      int idHook,
      HOOKPROC lpfn,
      HINSTANCE hmod,
      DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
      int idHook,
      HOOKPROC lpfn,
      HINSTANCE hmod,
      DWORD dwThreadId);




#line 10042 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
      HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
      HHOOK hhk,
      int nCode,
      WPARAM wParam,
      LPARAM lParam);










#line 10068 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 10069 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 10071 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








































#line 10113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 10118 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 10123 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






















#line 10146 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
      HMENU hmenu,
      UINT first,
      UINT last,
      UINT check,
      UINT flags);
#line 10163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {        
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;


#line 10180 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 10183 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



























#line 10211 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 10215 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 10225 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#pragma region Desktop Family


__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
      HINSTANCE hInstance,
      LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
      HINSTANCE hInstance,
      LPCWSTR lpBitmapName);




#line 10250 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
      HINSTANCE hInstance,
      LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
      HINSTANCE hInstance,
      LPCWSTR lpCursorName);




#line 10268 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
      LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
      LPCWSTR lpFileName);




#line 10284 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
      HINSTANCE hInst,
      int xHotSpot,
      int yHotSpot,
      int nWidth,
      int nHeight,
      const void *pvANDPlane,
      const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
      HCURSOR hCursor);









#line 10312 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 10314 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion



















#line 10335 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 10339 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 10344 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
      HCURSOR hcur,
      DWORD id);

typedef struct _ICONINFO {
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
      HINSTANCE hInstance,
      LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
      HINSTANCE hInstance,
      LPCWSTR lpIconName);




#line 10381 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsA(
      LPCSTR szFileName,
      int nIconIndex,
      int cxIcon,
      int cyIcon,
      HICON *phicon,
      UINT *piconid,
      UINT nIcons,
      UINT flags);
__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsW(
      LPCWSTR szFileName,
      int nIconIndex,
      int cxIcon,
      int cyIcon,
      HICON *phicon,
      UINT *piconid,
      UINT nIcons,
      UINT flags);




#line 10412 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIcon(
      HINSTANCE hInstance,
      int nWidth,
      int nHeight,
      BYTE cPlanes,
      BYTE cBitsPixel,
      const BYTE *lpbANDbits,
      const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
      HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
      PBYTE presbits,
      BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
      PBYTE presbits,
      BOOL fIcon,
      int cxDesired,
      int cyDesired,
      UINT Flags);
#line 10449 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
      PBYTE presbits,
      DWORD dwResSize,
      BOOL fIcon,
      DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
      PBYTE presbits,
      DWORD dwResSize,
      BOOL fIcon,
      DWORD dwVer,
      int cxDesired,
      int cyDesired,
      UINT Flags);


typedef struct tagCURSORSHAPE
{
    int     xHotSpot;
    int     yHotSpot;
    int     cx;
    int     cy;
    int     cbWidth;
    BYTE    Planes;
    BYTE    BitsPixel;
} CURSORSHAPE,  *LPCURSORSHAPE;
#line 10484 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 10486 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion





















#pragma region Desktop Family


__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
      HINSTANCE hInst,
      LPCSTR name,
      UINT type,
      int cx,
      int cy,
      UINT fuLoad);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
      HINSTANCE hInst,
      LPCWSTR name,
      UINT type,
      int cx,
      int cy,
      UINT fuLoad);




#line 10536 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
      HANDLE h,
      UINT type,
      int cx,
      int cy,
      UINT flags);








#line 10555 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport) BOOL __stdcall DrawIconEx(
      HDC hdc,
      int xLeft,
      int yTop,
      HICON hIcon,
      int cxWidth,
      int cyWidth,
      UINT istepIfAniCur,
      HBRUSH hbrFlickerFreeDraw,
      UINT diFlags);

#line 10568 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 10571 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
      PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
      HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
      HICON hIcon,
      PICONINFO piconinfo);


typedef struct _ICONINFOEXA {
    DWORD   cbSize;
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD    wResID;
    CHAR    szModName[260];
    CHAR    szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
    DWORD   cbSize;
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD    wResID;
    WCHAR   szModName[260];
    WCHAR   szResName[260];
} ICONINFOEXW, *PICONINFOEXW;




typedef ICONINFOEXA ICONINFOEX;
typedef PICONINFOEXA PICONINFOEX;
#line 10624 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExA(
      HICON hicon,
      PICONINFOEXA piconinfo);
__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExW(
      HICON hicon,
      PICONINFOEXW piconinfo);




#line 10642 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 10643 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 10648 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 10650 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


















































































































#line 10766 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 10769 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 10770 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 10776 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 10779 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
















































#line 10828 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 10833 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 10838 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 10839 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





























#line 10869 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 10872 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
















#line 10889 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 10894 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 10901 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 10911 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"













































#line 10957 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 10962 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 10966 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 10969 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





typedef enum {
    EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT  = 0,
    EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS                       = 1,
} EDIT_CONTROL_FEATURE;
#line 10979 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









































#line 11021 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
















#line 11038 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"













#line 11052 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 11055 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 11063 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

























#line 11089 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 11092 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"












#line 11105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
















#line 11122 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 11124 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

























#pragma region Desktop Family








__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
      HWND hDlg,
      LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
      HWND hDlg,
      LPMSG lpMsg);




#line 11175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 11177 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
      HWND hDlg,
      LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
      HWND hDlg,
      LPSTR lpPathSpec,
      int nIDListBox,
      int nIDStaticPath,
      UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
      HWND hDlg,
      LPWSTR lpPathSpec,
      int nIDListBox,
      int nIDStaticPath,
      UINT uFileType);




#line 11208 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 11210 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion















#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
      HWND hwndDlg,
      LPSTR lpString,
      int chCount,
      int idListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
      HWND hwndDlg,
      LPWSTR lpString,
      int chCount,
      int idListBox);




#line 11250 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
      HWND hDlg,
      LPSTR lpPathSpec,
      int nIDComboBox,
      int nIDStaticPath,
      UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
      HWND hDlg,
      LPWSTR lpPathSpec,
      int nIDComboBox,
      int nIDStaticPath,
      UINT uFiletype);




#line 11274 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
      HWND hwndDlg,
      LPSTR lpString,
      int cchOut,
      int idComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
      HWND hwndDlg,
      LPWSTR lpString,
      int cchOut,
      int idComboBox);




#line 11296 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 11298 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

























#line 11325 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 11329 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 11337 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


































                                  




























































#line 11433 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 11436 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 11441 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 11451 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 11453 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"























#line 11477 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 11483 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"












































#line 11528 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 11530 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"











































#line 11574 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 11575 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 11579 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 11589 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 11590 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




















#line 11611 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 11614 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"














#line 11629 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 11633 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#pragma region Desktop Family


typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    int     nMin;
    int     nMax;
    UINT    nPage;
    int     nPos;
    int     nTrackPos;
}   SCROLLINFO,  *LPSCROLLINFO;
typedef SCROLLINFO const  *LPCSCROLLINFO;

__declspec(dllimport)
int
__stdcall
SetScrollInfo(
      HWND hwnd,
      int nBar,
      LPCSCROLLINFO lpsi,
      BOOL redraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollInfo(
      HWND hwnd,
      int nBar,
      LPSCROLLINFO lpsi);


#line 11676 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion
#line 11678 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 11680 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 11681 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
















#line 11698 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagMDICREATESTRUCTA {
    LPCSTR   szClass;
    LPCSTR   szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR  szClass;
    LPCWSTR  szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
#line 11731 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
      HWND hWnd,
      HWND hWndMDIClient,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
      HWND hWnd,
      HWND hWndMDIClient,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);




#line 11760 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)

LRESULT
__stdcall



#line 11769 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
DefMDIChildProcA(
      HWND hWnd,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 11782 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
DefMDIChildProcW(
      HWND hWnd,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);




#line 11792 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
      HWND hWndClient,
      LPMSG lpMsg);

#line 11803 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
      LPCSTR lpClassName,
      LPCSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HINSTANCE hInstance,
      LPARAM lParam);
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HINSTANCE hInstance,
      LPARAM lParam);




#line 11843 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
WORD
__stdcall
TileWindows(
      HWND hwndParent,
      UINT wHow,
      const RECT * lpRect,
      UINT cKids,
      const HWND  * lpKids);

__declspec(dllimport)
WORD
__stdcall CascadeWindows(
      HWND hwndParent,
      UINT wHow,
      const RECT * lpRect,
      UINT cKids,
      const HWND  * lpKids);

#line 11865 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 11867 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 11870 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 11872 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family




typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD  mkSize;


#line 11887 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD  mkSize;


#line 11896 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
#line 11908 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

typedef struct tagHELPWININFOA {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    CHAR   rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    WCHAR  rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
#line 11936 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





































#line 11974 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
      HWND hWndMain,
      LPCSTR lpszHelp,
      UINT uCommand,
      ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
      HWND hWndMain,
      LPCWSTR lpszHelp,
      UINT uCommand,
      ULONG_PTR dwData);




#line 11998 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 12000 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 12002 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion





#line 12009 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 12013 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 12017 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
      HANDLE hProcess,
      DWORD uiFlags);
#line 12029 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 12031 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family



#line 12039 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




















































































#line 12125 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"















#line 12141 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 12147 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"















#line 12163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 12167 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 12175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#line 12183 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




























#line 12212 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#pragma region Desktop Family


typedef struct tagTouchPredictionParameters
{
    UINT cbSize;
    UINT dwLatency;       
    UINT dwSampleTime;    
    UINT bUseHWTimeStamp; 
} TOUCHPREDICTIONPARAMETERS, *PTOUCHPREDICTIONPARAMETERS;










#line 12237 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion













#line 12252 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"












































#line 12297 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"













#line 12311 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"








#line 12320 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 12323 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


































#line 12358 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 12365 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



















#line 12385 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"









#line 12395 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 12396 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



















#line 12416 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 12421 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




typedef enum tagHANDEDNESS {
    HANDEDNESS_LEFT = 0,
    HANDEDNESS_RIGHT
} HANDEDNESS, *PHANDEDNESS;
#line 12430 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 12432 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"













#pragma region Desktop Family


typedef struct tagNONCLIENTMETRICSA
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;

    int     iPaddedBorderWidth;
#line 12468 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;

    int     iPaddedBorderWidth;
#line 12489 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
#line 12499 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 12501 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 12504 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 12505 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"















#pragma region Desktop Family


typedef struct tagMINIMIZEDMETRICS
{
    UINT    cbSize;
    int     iWidth;
    int     iHorzGap;
    int     iVertGap;
    int     iArrange;
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTA lfFont;
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTW lfFont;
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
#line 12559 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 12560 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 12561 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

typedef struct tagANIMATIONINFO
{
    UINT    cbSize;
    int     iMinAnimate;
}   ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR     lpszActivePort;
    LPSTR     lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR    lpszActivePort;
    LPWSTR    lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSW, *LPSERIALKEYSW;




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
#line 12595 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







typedef struct tagHIGHCONTRASTA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#line 12621 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 12623 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion






















#line 12647 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\tvout.h"











#pragma once
#line 14 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\tvout.h"





#pragma region Desktop Family


typedef struct _VIDEOPARAMETERS {
    GUID  Guid;                         
    ULONG dwOffset;                     
    ULONG dwCommand;                    
    ULONG dwFlags;                      
    ULONG dwMode;                       
    ULONG dwTVStandard;                 
    ULONG dwAvailableModes;             
    ULONG dwAvailableTVStandard;        
    ULONG dwFlickerFilter;              
    ULONG dwOverScanX;                  
    ULONG dwOverScanY;                  
    ULONG dwMaxUnscaledX;               
    ULONG dwMaxUnscaledY;               
    ULONG dwPositionX;                  
    ULONG dwPositionY;                  
    ULONG dwBrightness;                 
    ULONG dwContrast;                   
    ULONG dwCPType;                     
    ULONG dwCPCommand;                  
    ULONG dwCPStandard;                 
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;           
    UCHAR bOEMCopyProtection[256];      
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;


                                        












































#line 95 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\tvout.h"
#pragma endregion

#line 98 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\tvout.h"
#line 12652 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"











#line 12664 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family





__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
      DEVMODEA* lpDevMode,
      DWORD dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
      DEVMODEW* lpDevMode,
      DWORD dwFlags);




#line 12688 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
      LPCSTR lpszDeviceName,
      DEVMODEA* lpDevMode,
      HWND hwnd,
      DWORD dwflags,
      LPVOID lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
      LPCWSTR lpszDeviceName,
      DEVMODEW* lpDevMode,
      HWND hwnd,
      DWORD dwflags,
      LPVOID lParam);




#line 12712 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
      LPCSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEA* lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
      LPCWSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEW* lpDevMode);




#line 12736 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
      LPCSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEA* lpDevMode,
      DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
      LPCWSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEW* lpDevMode,
      DWORD dwFlags);




#line 12760 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
      LPCSTR lpDevice,
      DWORD iDevNum,
      PDISPLAY_DEVICEA lpDisplayDevice,
      DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
      LPCWSTR lpDevice,
      DWORD iDevNum,
      PDISPLAY_DEVICEW lpDisplayDevice,
      DWORD dwFlags);




#line 12786 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#line 12791 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
LONG
__stdcall
GetDisplayConfigBufferSizes(
      UINT32 flags,
      UINT32* numPathArrayElements,
      UINT32* numModeInfoArrayElements);

__declspec(dllimport)
LONG
__stdcall
SetDisplayConfig(
      UINT32 numPathArrayElements,
      DISPLAYCONFIG_PATH_INFO* pathArray,
      UINT32 numModeInfoArrayElements,
      DISPLAYCONFIG_MODE_INFO* modeInfoArray,
      UINT32 flags);

__declspec(dllimport)
  LONG
__stdcall
QueryDisplayConfig(
      UINT32 flags,
      UINT32* numPathArrayElements,
      DISPLAYCONFIG_PATH_INFO* pathArray,
      UINT32* numModeInfoArrayElements,
      DISPLAYCONFIG_MODE_INFO* modeInfoArray,
    
    
        DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigGetDeviceInfo(
      DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigSetDeviceInfo(
      DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);

#line 12838 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 12841 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 12842 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
 
BOOL
__stdcall
SystemParametersInfoA(
      UINT uiAction,
      UINT uiParam,
        PVOID pvParam,
      UINT fWinIni);
__declspec(dllimport)
 
BOOL
__stdcall
SystemParametersInfoW(
      UINT uiAction,
      UINT uiParam,
        PVOID pvParam,
      UINT fWinIni);




#line 12867 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
 
BOOL
__stdcall
SystemParametersInfoForDpi(
      UINT uiAction,
      UINT uiParam,
        PVOID pvParam,
      UINT fWinIni,
      UINT dpi);

#line 12882 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 12884 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 12887 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagFILTERKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;            
    DWORD iDelayMSec;           
    DWORD iRepeatMSec;          
    DWORD iBounceMSec;          
} FILTERKEYS, *LPFILTERKEYS;

#line 12905 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion












#pragma region Desktop Family


typedef struct tagSTICKYKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;

#line 12928 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion






























#line 12960 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;

#line 12976 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


















#line 12996 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagACCESSTIMEOUT
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;

#line 13008 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion
























#pragma region Desktop Family


typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR   lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
#line 13073 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 13075 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








#pragma region Desktop or PC Family


__declspec(dllimport)
BOOL
__stdcall
SoundSentry(void);
#line 13092 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 13093 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family

typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;

#line 13104 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion











#pragma region Desktop Family



typedef struct tagAUDIODESCRIPTION {
    UINT cbSize;   
    BOOL Enabled;  
    LCID Locale;   
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;
#line 13126 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
      DWORD dwLevel);

#line 13139 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion









#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
      DWORD dwErrCode,
      DWORD dwType);

__declspec(dllimport)
int
__stdcall
InternalGetWindowText(
      HWND hWnd,
      LPWSTR pString,
      int cchMaxCount);










#line 13177 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CancelShutdown(
    void);

#line 13185 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion












#pragma region Desktop Family


__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
      POINT pt,
      DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
      LPCRECT lprc,
      DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(
      HWND hwnd,
      DWORD dwFlags);

#line 13223 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


typedef struct tagMONITORINFO
{
    DWORD   cbSize;
    RECT    rcMonitor;
    RECT    rcWork;
    DWORD   dwFlags;
} MONITORINFO, *LPMONITORINFO;


typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{
    CHAR        szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{
    WCHAR       szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;




typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
#line 13258 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


















#line 13277 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoA(
      HMONITOR hMonitor,
      LPMONITORINFO lpmi);
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoW(
      HMONITOR hMonitor,
      LPMONITORINFO lpmi);




#line 13295 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
      HDC hdc,
      LPCRECT lprcClip,
      MONITORENUMPROC lpfnEnum,
      LPARAM dwData);

#line 13308 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family






__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
      DWORD event,
      HWND  hwnd,
      LONG  idObject,
      LONG  idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD         event,
    HWND          hwnd,
    LONG          idObject,
    LONG          idChild,
    DWORD         idEventThread,
    DWORD         dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
      DWORD eventMin,
      DWORD eventMax,
      HMODULE hmodWinEventProc,
      WINEVENTPROC pfnWinEventProc,
      DWORD idProcess,
      DWORD idThread,
      DWORD dwFlags);


__declspec(dllimport)
BOOL
__stdcall
IsWinEventHookInstalled(
      DWORD event);
#line 13357 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 13359 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion









#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
      HWINEVENTHOOK hWinEventHook);

#line 13379 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion















































































































































































































#line 13588 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
















#line 13605 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"















#line 13621 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"













#line 13635 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"















#line 13651 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 13653 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 13660 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 13664 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






































































































































































































#line 13863 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 13867 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










































































#line 13942 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






#line 13949 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"






































#pragma region Desktop Family


typedef struct tagGUITHREADINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HWND    hwndActive;
    HWND    hwndFocus;
    HWND    hwndCapture;
    HWND    hwndMenuOwner;
    HWND    hwndMoveSize;
    HWND    hwndCaret;
    RECT    rcCaret;
} GUITHREADINFO, *PGUITHREADINFO,  * LPGUITHREADINFO;

#line 14004 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion









#line 14015 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 14017 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 14018 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
      DWORD idThread,
      PGUITHREADINFO pgui);

__declspec(dllimport)
BOOL
__stdcall
BlockInput(
    BOOL fBlockIt);





__declspec(dllimport)
BOOL
__stdcall
SetProcessDPIAware(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsProcessDPIAware(
    void);

#line 14052 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
DPI_AWARENESS_CONTEXT
__stdcall
SetThreadDpiAwarenessContext(
      DPI_AWARENESS_CONTEXT dpiContext);

__declspec(dllimport)
DPI_AWARENESS_CONTEXT
__stdcall
GetThreadDpiAwarenessContext(
    void);

__declspec(dllimport)
DPI_AWARENESS_CONTEXT
__stdcall
GetWindowDpiAwarenessContext(
      HWND hwnd);

__declspec(dllimport)
DPI_AWARENESS
__stdcall
GetAwarenessFromDpiAwarenessContext(
      DPI_AWARENESS_CONTEXT value);

__declspec(dllimport)
UINT
__stdcall
GetDpiFromDpiAwarenessContext(
      DPI_AWARENESS_CONTEXT value);

__declspec(dllimport)
BOOL
__stdcall
AreDpiAwarenessContextsEqual(
      DPI_AWARENESS_CONTEXT dpiContextA,
      DPI_AWARENESS_CONTEXT dpiContextB);

__declspec(dllimport)
BOOL
__stdcall
IsValidDpiAwarenessContext(
      DPI_AWARENESS_CONTEXT value);

__declspec(dllimport)
UINT
__stdcall
GetDpiForWindow(
      HWND hwnd);

__declspec(dllimport)
UINT
__stdcall
GetDpiForSystem(
    void);

__declspec(dllimport)
UINT
__stdcall
GetSystemDpiForProcess(
      HANDLE hProcess);

__declspec(dllimport)
BOOL
__stdcall
EnableNonClientDpiScaling(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
InheritWindowMonitor(
      HWND hwnd,
      HWND hwndInherit);

#line 14129 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SetProcessDpiAwarenessContext(
      DPI_AWARENESS_CONTEXT value);

#line 14138 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
DPI_HOSTING_BEHAVIOR
__stdcall
SetThreadDpiHostingBehavior(
      DPI_HOSTING_BEHAVIOR value);

__declspec(dllimport)
DPI_HOSTING_BEHAVIOR
__stdcall
GetThreadDpiHostingBehavior();

__declspec(dllimport)
DPI_HOSTING_BEHAVIOR
__stdcall
GetWindowDpiHostingBehavior(
      HWND hwnd);

#line 14159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
      HWND hwnd,
      LPSTR pszFileName,
      UINT cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
      HWND hwnd,
      LPWSTR pszFileName,
      UINT cchFileNameMax);




#line 14180 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 14182 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


































#line 14218 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#pragma region Desktop Family





typedef struct tagCURSORINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HCURSOR hCursor;
    POINT   ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;




#line 14240 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
      PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
      HWND hwnd,
      PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
      HWND hwnd,
      PTITLEBARINFO pti);


typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;
#line 14299 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;          
    HMENU hMenu;         
    HWND hwndMenu;       
    BOOL fBarFocused:1;  
    BOOL fFocused:1;     
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
      HWND hwnd,
      LONG idObject,
      LONG idItem,
      PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
      HWND hwnd,
      LONG idObject,
      PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
      HWND hwndCombo,
      PCOMBOBOXINFO pcbi);

#line 14366 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
GetAncestor(
      HWND hwnd,
      UINT gaFlags);








__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
      HWND hwndParent,
      POINT ptParentClientCoords);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
      HWND hwnd,
      LPSTR ptszClassName,
      UINT cchClassNameMax);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
      HWND hwnd,
      LPWSTR ptszClassName,
      UINT cchClassNameMax);




#line 14427 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
      HWND hwnd,
      int iItem,
      PALTTABINFO pati,
      LPSTR pszItemText,
      UINT cchItemText);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
      HWND hwnd,
      int iItem,
      PALTTABINFO pati,
      LPWSTR pszItemText,
      UINT cchItemText);




#line 14467 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
      HWND hwnd);

#line 14479 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 14482 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 14483 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
LockWorkStation(
    void);
#line 14495 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
UserHandleGrantAccess(
      HANDLE hUserHandle,
      HANDLE hJob,
      BOOL   bGrant);

#line 14507 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 14509 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;

#line 14523 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion























#pragma region Desktop Family





typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;

#line 14561 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion









#pragma region Desktop Family




#pragma warning(push)
#line 14578 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma warning(disable : 4201)




typedef struct tagRAWMOUSE {
    


    USHORT usFlags;

    


    union {
        ULONG ulButtons;
        struct  {
            USHORT  usButtonFlags;
            USHORT  usButtonData;
        } ;
    } ;


    


    ULONG ulRawButtons;

    


    LONG lLastX;

    


    LONG lLastY;

    


    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;


#pragma warning(pop)
#line 14626 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 14628 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion































#line 14661 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










#line 14672 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagRAWKEYBOARD {
    


    USHORT MakeCode;

    



    USHORT Flags;

    USHORT Reserved;

    


    USHORT VKey;
    UINT   Message;

    


    ULONG ExtraInformation;


} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;

#line 14708 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

















#pragma region Desktop Family





typedef struct tagRAWHID {
    DWORD dwSizeHid;    
    DWORD dwCount;      
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;

#line 14739 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion





#pragma region Desktop Family


typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE    mouse;
        RAWKEYBOARD keyboard;
        RAWHID      hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;

#line 14758 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion





#line 14765 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetRawInputData(
      HRAWINPUT hRawInput,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize,
      UINT cbSizeHeader);

#line 14789 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL  fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;

    


    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    } ;
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoA(
      HANDLE hDevice,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize);
__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoW(
      HANDLE hDevice,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize);




#line 14860 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





__declspec(dllimport)
UINT
__stdcall
GetRawInputBuffer(
      PRAWINPUT pData,
      PUINT pcbSize,
      UINT cbSizeHeader);




typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage; 
    USHORT usUsage;     
    DWORD dwFlags;
    HWND hwndTarget;    
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;

#line 14886 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion












#line 14900 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"










#line 14911 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 14917 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterRawInputDevices(
      PCRAWINPUTDEVICE pRawInputDevices,
      UINT uiNumDevices,
      UINT cbSize);

__declspec(dllimport)
UINT
__stdcall
GetRegisteredRawInputDevices(
      PRAWINPUTDEVICE pRawInputDevices,
      PUINT puiNumDevices,
      UINT cbSize);


typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceList(
      PRAWINPUTDEVICELIST pRawInputDeviceList,
      PUINT puiNumDevices,
      UINT cbSize);

__declspec(dllimport)
LRESULT
__stdcall
DefRawInputProc(
      PRAWINPUT* paRawInput,
      INT nInput,
      UINT cbSizeHeader);

#line 14960 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 14963 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





















#pragma region Desktop Family


typedef enum tagPOINTER_DEVICE_TYPE {
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN   = 0x00000002,
    POINTER_DEVICE_TYPE_TOUCH          = 0x00000003,

    POINTER_DEVICE_TYPE_TOUCH_PAD      = 0x00000004,
#line 14994 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
    POINTER_DEVICE_TYPE_MAX            = 0xFFFFFFFF
} POINTER_DEVICE_TYPE;

typedef struct tagPOINTER_DEVICE_INFO {
    DWORD displayOrientation;
    HANDLE device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR monitor;
    ULONG startingCursorId;
    USHORT maxActiveContacts;
    WCHAR productString[520];
} POINTER_DEVICE_INFO;

typedef struct tagPOINTER_DEVICE_PROPERTY {
    INT32 logicalMin;
    INT32 logicalMax;
    INT32 physicalMin;
    INT32 physicalMax;
    UINT32 unit;
    UINT32 unitExponent;
    USHORT usagePageId;
    USHORT usageId;
} POINTER_DEVICE_PROPERTY;

typedef enum tagPOINTER_DEVICE_CURSOR_TYPE {
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN   = 0x00000000,
    POINTER_DEVICE_CURSOR_TYPE_TIP       = 0x00000001,
    POINTER_DEVICE_CURSOR_TYPE_ERASER    = 0x00000002,
    POINTER_DEVICE_CURSOR_TYPE_MAX       = 0xFFFFFFFF
} POINTER_DEVICE_CURSOR_TYPE;

typedef struct tagPOINTER_DEVICE_CURSOR_INFO {
    UINT32 cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
} POINTER_DEVICE_CURSOR_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevices(
      UINT32* deviceCount,
      POINTER_DEVICE_INFO *pointerDevices);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevice(
      HANDLE device,
      POINTER_DEVICE_INFO *pointerDevice);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceProperties(
      HANDLE device,
      UINT32* propertyCount,
      POINTER_DEVICE_PROPERTY *pointerProperties);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerDeviceNotifications(
      HWND window,
      BOOL notifyRange);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceRects(
      HANDLE device,
      RECT* pointerDeviceRect,
      RECT* displayRect);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceCursors(
      HANDLE device,
      UINT32* cursorCount,
      POINTER_DEVICE_CURSOR_INFO *deviceCursors);

__declspec(dllimport)
BOOL
__stdcall
GetRawPointerDeviceData(
      UINT32 pointerId,
      UINT32 historyCount,
      UINT32 propertiesCount,
      POINTER_DEVICE_PROPERTY* pProperties,
      LONG* pValues);


#line 15087 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 15090 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"











#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilter(
      UINT message,
      DWORD dwFlag);

#line 15112 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 15115 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"











#pragma region Desktop Family


typedef struct tagCHANGEFILTERSTRUCT {
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;

#line 15135 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilterEx(
      HWND hwnd,                                         
      UINT message,                                      
      DWORD action,                                      
      PCHANGEFILTERSTRUCT pChangeFilterStruct);   

#line 15157 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 15160 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#line 15163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#pragma region Desktop Family





struct HGESTUREINFO__{int unused;}; typedef struct HGESTUREINFO__ *HGESTUREINFO;

#line 15179 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




















#pragma region Desktop Family










typedef struct tagGESTUREINFO {
    UINT cbSize;                    
    DWORD dwFlags;                  
    DWORD dwID;                     
    HWND hwndTarget;                
    POINTS ptsLocation;             
    DWORD dwInstanceID;             
    DWORD dwSequenceID;             
    ULONGLONG ullArguments;         
    UINT cbExtraArgs;               
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;









typedef struct tagGESTURENOTIFYSTRUCT {
    UINT cbSize;                    
    DWORD dwFlags;                  
    HWND hwndTarget;                
    POINTS ptsLocation;             
    DWORD dwInstanceID;             
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;













__declspec(dllimport)
BOOL
__stdcall
GetGestureInfo(
      HGESTUREINFO hGestureInfo,
      PGESTUREINFO pGestureInfo);







__declspec(dllimport)
BOOL
__stdcall
GetGestureExtraArgs(
      HGESTUREINFO hGestureInfo,
      UINT cbExtraArgs,
      PBYTE pExtraArgs);











__declspec(dllimport)
BOOL
__stdcall
CloseGestureInfoHandle(
      HGESTUREINFO hGestureInfo);









typedef struct tagGESTURECONFIG {
    DWORD dwID;                     
    DWORD dwWant;                   
    DWORD dwBlock;                  
} GESTURECONFIG, *PGESTURECONFIG;

#line 15304 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion









































                                                        

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetGestureConfig(
      HWND hwnd,                                     
      DWORD dwReserved,                              
      UINT cIDs,                                     
      PGESTURECONFIG pGestureConfig,    
                                                        
      UINT cbSize);                                  



                                                        

__declspec(dllimport)
BOOL
__stdcall
GetGestureConfig(
      HWND hwnd,                                     
      DWORD dwReserved,                              
      DWORD dwFlags,                                 
      PUINT pcIDs,                                   
                                                        
      PGESTURECONFIG pGestureConfig,
                                                        
      UINT cbSize);                                  

#line 15380 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion


#line 15384 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"














#line 15399 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonCreate(
      HWND hWnd,
      LPCWSTR pwszReason);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonQuery(
      HWND hWnd,
      LPWSTR pwszBuff,
      DWORD *pcchBuff);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonDestroy(
      HWND hWnd);

#line 15428 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family





typedef enum tagINPUT_MESSAGE_DEVICE_TYPE  {
    IMDT_UNAVAILABLE        = 0x00000000,       
    IMDT_KEYBOARD           = 0x00000001,       
    IMDT_MOUSE              = 0x00000002,       
    IMDT_TOUCH              = 0x00000004,       
    IMDT_PEN                = 0x00000008,       

    IMDT_TOUCHPAD           = 0x00000010,       
#line 15448 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
 } INPUT_MESSAGE_DEVICE_TYPE;

typedef enum tagINPUT_MESSAGE_ORIGIN_ID {
     IMO_UNAVAILABLE = 0x00000000,  
     IMO_HARDWARE    = 0x00000001,  
     IMO_INJECTED    = 0x00000002,  
     IMO_SYSTEM      = 0x00000004,  
} INPUT_MESSAGE_ORIGIN_ID;




 typedef struct tagINPUT_MESSAGE_SOURCE {
     INPUT_MESSAGE_DEVICE_TYPE deviceType;
     INPUT_MESSAGE_ORIGIN_ID   originId;
 } INPUT_MESSAGE_SOURCE;





__declspec(dllimport)
BOOL
__stdcall
GetCurrentInputMessageSource(
      INPUT_MESSAGE_SOURCE *inputMessageSource);

__declspec(dllimport)
BOOL
__stdcall
GetCIMSSM(
      INPUT_MESSAGE_SOURCE *inputMessageSource);

#line 15482 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 15485 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Application Family or OneCore Family





typedef enum tagAR_STATE {
    AR_ENABLED        = 0x0,
    AR_DISABLED       = 0x1,
    AR_SUPPRESSED     = 0x2,
    AR_REMOTESESSION  = 0x4,
    AR_MULTIMON       = 0x8,
    AR_NOSENSOR       = 0x10,
    AR_NOT_SUPPORTED  = 0x20,
    AR_DOCKED         = 0x40,
    AR_LAPTOP         = 0x80
} AR_STATE, *PAR_STATE;

#line 15507 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion





extern "C++" { inline constexpr AR_STATE operator | (AR_STATE a, AR_STATE b) throw() { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator |= (AR_STATE &a, AR_STATE b) throw() { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline constexpr AR_STATE operator & (AR_STATE a, AR_STATE b) throw() { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator &= (AR_STATE &a, AR_STATE b) throw() { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline constexpr AR_STATE operator ~ (AR_STATE a) throw() { return AR_STATE(~((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a)); } inline constexpr AR_STATE operator ^ (AR_STATE a, AR_STATE b) throw() { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator ^= (AR_STATE &a, AR_STATE b) throw() { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } }
#line 15515 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#pragma region Desktop Family






typedef enum ORIENTATION_PREFERENCE {
    ORIENTATION_PREFERENCE_NONE              = 0x0,
    ORIENTATION_PREFERENCE_LANDSCAPE         = 0x1,
    ORIENTATION_PREFERENCE_PORTRAIT          = 0x2,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED  = 0x8
} ORIENTATION_PREFERENCE;






extern "C++" { inline constexpr ORIENTATION_PREFERENCE operator | (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) throw() { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator |= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) throw() { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline constexpr ORIENTATION_PREFERENCE operator & (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) throw() { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator &= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) throw() { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline constexpr ORIENTATION_PREFERENCE operator ~ (ORIENTATION_PREFERENCE a) throw() { return ORIENTATION_PREFERENCE(~((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a)); } inline constexpr ORIENTATION_PREFERENCE operator ^ (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) throw() { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator ^= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) throw() { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } }
#line 15538 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetAutoRotationState(
      PAR_STATE pState);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferences(
      ORIENTATION_PREFERENCE *pOrientation);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferencesByProcessId(
      DWORD dwProcessId,
      ORIENTATION_PREFERENCE *pOrientation,
      BOOL *fRotateScreen);

__declspec(dllimport)
BOOL
__stdcall
SetDisplayAutoRotationPreferences(
      ORIENTATION_PREFERENCE orientation);

#line 15566 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 15569 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
IsImmersiveProcess(
      HANDLE hProcess);

__declspec(dllimport)
BOOL
__stdcall
SetProcessRestrictionExemption(
      BOOL fEnableExemption);

#line 15589 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#pragma endregion

#line 15592 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


#pragma region Desktop Family



#line 15599 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"







#pragma warning(pop)
#line 15608 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"





#line 15614 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"
#line 15615 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"


}
#line 15619 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"

#line 15621 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winuser.h"



#line 175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"























extern "C" {
#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"










extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"

#pragma region Desktop Family or OneCore Family



__declspec(dllimport)
int
__stdcall
GetDateFormatA(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME* lpDate,
      LPCSTR lpFormat,
      LPSTR lpDateStr,
      int cchDate
    );

__declspec(dllimport)
int
__stdcall
GetDateFormatW(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME* lpDate,
      LPCWSTR lpFormat,
      LPWSTR lpDateStr,
      int cchDate
    );





#line 58 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"


__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME* lpTime,
      LPCSTR lpFormat,
      LPSTR lpTimeStr,
      int cchTime
    );

__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME* lpTime,
      LPCWSTR lpFormat,
      LPWSTR lpTimeStr,
      int cchTime
    );





#line 89 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"

#line 91 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
int
__stdcall
GetTimeFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME* lpTime,
      LPCWSTR lpFormat,
      LPWSTR lpTimeStr,
      int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME* lpDate,
      LPCWSTR lpFormat,
      LPWSTR lpDateStr,
      int cchDate,
      LPCWSTR lpCalendar
    );


#line 124 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
int
__stdcall
GetDurationFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME* lpDuration,
      ULONGLONG ullDuration,
      LPCWSTR lpFormat,
      LPWSTR lpDurationStr,
      int cchDuration
    );


#line 146 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"
#pragma endregion


}
#line 151 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"

#line 153 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\datetimeapi.h"

#line 31 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 33 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#pragma warning(push)
#pragma warning(disable:4820) 
#line 39 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"










#line 50 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


















#line 69 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




#pragma region Application Family or OneCore Family










#line 87 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"









































































#line 161 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#line 165 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


























































































#line 256 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"








#line 265 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


















#line 284 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"










































#line 327 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#line 331 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"












































#line 376 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


















































































































































































#line 555 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




#line 560 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"














#line 575 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#line 579 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"































































































#line 675 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"









#line 685 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



















#line 705 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



                                                   
                                                   
                                                   
                                                   









#line 722 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#line 726 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




#line 731 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"















#line 747 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


























#line 774 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"





#line 780 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"































#line 812 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#line 816 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#line 820 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



























#line 848 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#line 852 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
























































#line 909 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"









#line 919 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




#line 924 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#line 928 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




#line 933 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



































































































#line 1033 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




















typedef DWORD LGRPID;




typedef DWORD LCTYPE;




typedef DWORD CALTYPE;





typedef DWORD CALID;











typedef struct _cpinfo {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
} CPINFO, *LPCPINFO;



typedef struct _cpinfoexA {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    CHAR    CodePageName[260];         
} CPINFOEXA, *LPCPINFOEXA;

typedef struct _cpinfoexW {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    WCHAR   CodePageName[260];         
} CPINFOEXW, *LPCPINFOEXW;




typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
#line 1113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"






typedef struct _numberfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
#line 1142 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"






typedef struct _currencyfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPSTR   lpCurrencySymbol;          
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPWSTR  lpCurrencySymbol;          
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
#line 1175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"





enum SYSNLS_FUNCTION{
    COMPARE_STRING    =  0x0001,
};
typedef DWORD NLS_FUNCTION;














typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize;     
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;         
    DWORD dwEffectiveId;            
    GUID  guidCustomVersion;        
} NLSVERSIONINFO, *LPNLSVERSIONINFO;













#line 1219 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize;     
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;         
    DWORD dwEffectiveId;            
    GUID  guidCustomVersion;        
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;




typedef DWORD   GEOTYPE;
typedef DWORD   GEOCLASS;












typedef LONG    GEOID;





#line 1255 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"





enum SYSGEOTYPE {
    GEO_NATION      =       0x0001, 
    GEO_LATITUDE    =       0x0002,
    GEO_LONGITUDE   =       0x0003,
    GEO_ISO2        =       0x0004,
    GEO_ISO3        =       0x0005,
    GEO_RFC1766     =       0x0006, 
    GEO_LCID        =       0x0007, 
    GEO_FRIENDLYNAME=       0x0008,
    GEO_OFFICIALNAME=       0x0009,
    GEO_TIMEZONES   =       0x000A, 
    GEO_OFFICIALLANGUAGES = 0x000B, 
    GEO_ISO_UN_NUMBER =     0x000C,
    GEO_PARENT      =       0x000D,
    GEO_DIALINGCODE =       0x000E,
    GEO_CURRENCYCODE=       0x000F, 
    GEO_CURRENCYSYMBOL=     0x0010, 

    GEO_NAME        =       0x0011, 
    GEO_ID          =       0x0012  
#line 1281 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
};





enum SYSGEOCLASS {
    GEOCLASS_NATION  = 16,
    GEOCLASS_REGION  = 14,
    GEOCLASS_ALL = 0
};






typedef enum _NORM_FORM {
    NormalizationOther  = 0,       
    NormalizationC      = 0x1,     
    NormalizationD      = 0x2,     
    NormalizationKC     = 0x5,     
                                   
    NormalizationKD     = 0x6      
                                   
} NORM_FORM;













#line 1321 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"








typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);    

typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);          
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);                             
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);                                         
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);                                          
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);                                 
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);                                          
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);                                          
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);                                 
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);                                           
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);                                          

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);  

typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);         
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);            
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);                   

typedef BOOL (__stdcall* GEO_ENUMNAMEPROC)(PWSTR, LPARAM);
#line 1356 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
































#line 1389 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"































#line 1421 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"






typedef struct _FILEMUIINFO {
    DWORD       dwSize;                 
    DWORD       dwVersion;              
    DWORD       dwFileType;             
    BYTE        pChecksum[16];          
    BYTE        pServiceChecksum[16];   
    DWORD       dwLanguageNameOffset;   
    DWORD       dwTypeIDMainSize;       
    DWORD       dwTypeIDMainOffset;     
    DWORD       dwTypeNameMainOffset;   
    DWORD       dwTypeIDMUISize;        
    DWORD       dwTypeIDMUIOffset;      
    DWORD       dwTypeNameMUIOffset;    
    BYTE        abBuffer[8];             
} FILEMUIINFO, *PFILEMUIINFO;


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"







#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"


extern "C" {
#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"



#pragma region Application or OneCore Family


__declspec(dllimport)
int
__stdcall
CompareStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwCmpFlags,
      LPCWCH lpString1,
      int cchCount1,
      LPCWCH lpString2,
      int cchCount2,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM lParam
    );


__declspec(dllimport)
int
__stdcall
CompareStringOrdinal(
      LPCWCH lpString1,
      int cchCount1,
      LPCWCH lpString2,
      int cchCount2,
      BOOL bIgnoreCase
    );


#line 59 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"
#pragma endregion

#line 62 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"

#pragma region Desktop or OneCore Family


__declspec(dllimport)
int
__stdcall
CompareStringW(
      LCID Locale,
      DWORD dwCmpFlags,
      PCNZWCH lpString1,
      int cchCount1,
      PCNZWCH lpString2,
      int cchCount2
    );





__declspec(dllimport)
int
__stdcall
FoldStringW(
      DWORD dwMapFlags,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWSTR lpDestStr,
      int cchDest
    );





#line 98 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"
#pragma endregion

#pragma region Application or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
      LCID Locale,
      DWORD dwInfoType,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWORD lpCharType
    );





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
      DWORD dwInfoType,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWORD lpCharType
    );






__declspec(dllimport)
 
         
int
__stdcall
MultiByteToWideChar(
      UINT CodePage,
      DWORD dwFlags,
      LPCCH lpMultiByteStr,
      int cbMultiByte,
      LPWSTR lpWideCharStr,
      int cchWideChar
    );


__declspec(dllimport)
 
         
int
__stdcall
WideCharToMultiByte(
      UINT CodePage,
      DWORD dwFlags,
      LPCWCH lpWideCharStr,
      int cchWideChar,
      LPSTR lpMultiByteStr,
      int cbMultiByte,
      LPCCH lpDefaultChar,
      LPBOOL lpUsedDefaultChar
    );


#line 166 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"
#pragma endregion


}
#line 171 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"

#line 173 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\stringapiset.h"
#line 1445 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#line 1446 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


































































__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
      UINT  CodePage);

__declspec(dllimport)
UINT
__stdcall
GetACP(void);

#line 1524 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);

#line 1535 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop or Pc Family or OneCore Family



__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
      UINT       CodePage,
      LPCPINFO  lpCPInfo);


__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
      UINT          CodePage,
      DWORD         dwFlags,
      LPCPINFOEXA  lpCPInfoEx);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
      UINT          CodePage,
      DWORD         dwFlags,
      LPCPINFOEXW  lpCPInfoEx);




#line 1569 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 1571 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop or OneCore Family







__declspec(dllimport)
int
__stdcall
CompareStringA(
      LCID     Locale,
      DWORD    dwCmpFlags,
      PCNZCH lpString1,
      int      cchCount1,
      PCNZCH  lpString2,
      int      cchCount2);



#line 1595 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



























#line 1623 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




__declspec(dllimport)
int
__stdcall
FindNLSString(
                         LCID Locale,
                         DWORD dwFindNLSStringFlags,
       LPCWSTR lpStringSource,
                         int cchSource,
        LPCWSTR lpStringValue,
                         int cchValue,
                    LPINT pcchFound);

#line 1640 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
LCMapStringW(
      LCID     Locale,
      DWORD    dwMapFlags,
      LPCWSTR  lpSrcStr,
      int      cchSrc,
      LPWSTR  lpDestStr,
      int      cchDest);





__declspec(dllimport)
int
__stdcall
LCMapStringA(
      LCID     Locale,
      DWORD    dwMapFlags,
      LPCSTR  lpSrcStr,
      int      cchSrc,
      LPSTR  lpDestStr,
      int      cchDest);


#line 1670 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 1672 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Application Family or OneCore Family



__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
      LCID     Locale,
      LCTYPE   LCType,
      LPWSTR lpLCData,
      int      cchData);
    





__declspec(dllimport)
int 
__stdcall 
GetLocaleInfoA(
      LCID Locale,
      LCTYPE LCType,
      LPSTR lpLCData,
      int cchData
    );



#line 1705 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 1707 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
      LCID     Locale,
      LCTYPE   LCType,
      LPCSTR  lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
      LCID     Locale,
      LCTYPE   LCType,
      LPCWSTR  lpLCData);




#line 1731 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPSTR   lpCalData,
      int      cchData,
      LPDWORD  lpValue);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPWSTR   lpCalData,
      int      cchData,
      LPDWORD  lpValue);




#line 1761 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPCSTR  lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPCWSTR  lpCalData);




#line 1783 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#line 1784 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 1786 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family











        
__declspec(dllimport)                                
BOOL                                      
__stdcall                                    
LoadStringByReference(                    
            DWORD   Flags,             
            PCWSTR  Language,      
            PCWSTR  SourceString,      
        PWSTR   Buffer,     
            ULONG  cchBuffer,                      
        PCWSTR  Directory,                     
       PULONG  pcchBufferOut                  
    );                                                
#line 1814 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


#line 1817 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Application Family or OneCore Family



__declspec(dllimport)         
BOOL               
__stdcall             
IsDBCSLeadByte(    
      BYTE  TestChar 
    );


__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
      UINT  CodePage,
      BYTE  TestChar
    );




__declspec(dllimport)
int
__stdcall
LCIDToLocaleName(
      LCID     Locale,
      LPWSTR  lpName,
      int      cchName,
      DWORD    dwFlags);



__declspec(dllimport)
LCID
__stdcall
LocaleNameToLCID(
      LPCWSTR lpName,
      DWORD dwFlags);

#line 1861 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 1863 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
GetDurationFormat(
      LCID             Locale,
      DWORD            dwFlags,
      const SYSTEMTIME *lpDuration,
      ULONGLONG ullDuration,
      LPCWSTR          lpFormat,
      LPWSTR          lpDurationStr,
      int              cchDuration);
#line 1882 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 1884 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family



__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
      LCID             Locale,
      DWORD            dwFlags,
      LPCSTR          lpValue,
      const NUMBERFMTA *lpFormat,
      LPSTR          lpNumberStr,
      int              cchNumber);

__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
      LCID             Locale,
      DWORD            dwFlags,
      LPCWSTR          lpValue,
      const NUMBERFMTW *lpFormat,
      LPWSTR          lpNumberStr,
      int              cchNumber);




#line 1916 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
      LCID               Locale,
      DWORD              dwFlags,
      LPCSTR            lpValue,
      const CURRENCYFMTA *lpFormat,
      LPSTR            lpCurrencyStr,
      int                cchCurrency);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
      LCID               Locale,
      DWORD              dwFlags,
      LPCWSTR            lpValue,
      const CURRENCYFMTW *lpFormat,
      LPWSTR            lpCurrencyStr,
      int                cchCurrency);




#line 1944 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
      CALINFO_ENUMPROCA lpCalInfoEnumProc,
      LCID              Locale,
      CALID             Calendar,
      CALTYPE           CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
      CALINFO_ENUMPROCW lpCalInfoEnumProc,
      LCID              Locale,
      CALID             Calendar,
      CALTYPE           CalType);




#line 1968 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
      CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
      LCID                Locale,
      CALID               Calendar,
      CALTYPE             CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
      CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
      LCID                Locale,
      CALID               Calendar,
      CALTYPE             CalType);




#line 1993 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#line 1994 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
      TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
      TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);




#line 2016 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
      DATEFMT_ENUMPROCA lpDateFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
      DATEFMT_ENUMPROCW lpDateFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);




#line 2038 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
      DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
      LCID                Locale,
      DWORD               dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
      DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
      LCID                Locale,
      DWORD               dwFlags);




#line 2061 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#line 2062 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
      LGRPID  LanguageGroup,
      DWORD   dwFlags);
#line 2072 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
GetNLSVersion(
         NLS_FUNCTION     Function,
         LCID             Locale,
      LPNLSVERSIONINFO lpVersionInformation);


__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
      LCID   Locale,
      DWORD  dwFlags);

#line 2091 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Application Family or OneCore Family



__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
      GEOID       Location,
      GEOTYPE     GeoType,
      LPSTR     lpGeoData,
      int         cchData,
      LANGID      LangId);

__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
      GEOID       Location,
      GEOTYPE     GeoType,
      LPWSTR     lpGeoData,
      int         cchData,
      LANGID      LangId);




#line 2121 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
GetGeoInfoEx(
      PWSTR       location,
      GEOTYPE     geoType,
      PWSTR    geoData,
      int         geoDataCount);
#line 2132 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2134 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop or PC Family or OneCore Family



__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
      GEOCLASS        GeoClass,
      GEOID           ParentGeoId,
      GEO_ENUMPROC    lpGeoEnumProc);


__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoNames(
      GEOCLASS            geoClass,
      GEO_ENUMNAMEPROC    geoEnumProc,
      LPARAM          data);
#line 2157 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion


#pragma region Application Family or OneCore Family



__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
      GEOCLASS    GeoClass);






__declspec(dllimport)
int
__stdcall
GetUserDefaultGeoName(
      LPWSTR geoName,
      int geoNameCount
);

#line 2186 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
      GEOID       GeoId);



__declspec(dllimport)
BOOL
__stdcall
SetUserGeoName(
      PWSTR       geoName);
#line 2207 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
      LCID   Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
      LCID  Locale
    );



__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);

#line 2235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Application Family or OneCore Family



__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);
#line 2246 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

#line 2254 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family



__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);


__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);


__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);

#line 2278 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family



#line 2285 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__declspec(dllimport)
LANGID
__stdcall
SetThreadUILanguage(  LANGID LangId);




__declspec(dllimport)
LANGID
__stdcall
GetThreadUILanguage(void);

__declspec(dllimport)
BOOL
__stdcall
GetProcessPreferredUILanguages(
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetProcessPreferredUILanguages(
             DWORD dwFlags,
         PCZZWSTR pwszLanguagesBuffer,
        PULONG pulNumLanguages
);

#line 2324 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#line 2325 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family or Phone Family or OneCore Family



__declspec(dllimport)
BOOL
__stdcall
GetUserPreferredUILanguages (
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);

#line 2342 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2344 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
BOOL
__stdcall
GetSystemPreferredUILanguages (
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetThreadPreferredUILanguages(
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetThreadPreferredUILanguages(
             DWORD dwFlags,
         PCZZWSTR pwszLanguagesBuffer,
        PULONG pulNumLanguages
);

__declspec(dllimport)
 
BOOL
__stdcall
GetFileMUIInfo(
                        DWORD           dwFlags,
                     PCWSTR          pcwszFilePath,
      PFILEMUIINFO    pFileMUIInfo,
                  DWORD*          pcbFileMUIInfo);

__declspec(dllimport)
BOOL
__stdcall
GetFileMUIPath(
      DWORD      dwFlags,
      PCWSTR     pcwszFilePath ,
        PWSTR pwszLanguage,
      PULONG  pcchLanguage,
      PWSTR pwszFileMUIPath,
              PULONG pcchFileMUIPath,
              PULONGLONG pululEnumerator
);


__declspec(dllimport)
BOOL
__stdcall
GetUILanguageInfo(
      DWORD dwFlags,
      PCZZWSTR pwmszLanguage,
      PZZWSTR pwszFallbackLanguages,
      PDWORD pcchFallbackLanguages,
      PDWORD pAttributes
);

#line 2418 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2420 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
NotifyUILanguageChange(
             DWORD dwFlags,
         PCWSTR pcwstrNewLanguage,
         PCWSTR pcwstrPreviousLanguage,
             DWORD dwReserved,
        PDWORD pdwStatusRtrn
);

#line 2439 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2441 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion






#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
                      LCID       Locale,
                      DWORD      dwInfoType,
        LPCSTR   lpSrcStr,
                      int        cchSrc,
      LPWORD     lpCharType);


#line 2463 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2465 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family













__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
      LCID     Locale,
      DWORD    dwInfoType,
      LPCSTR   lpSrcStr,
      int      cchSrc,
      LPWORD  lpCharType);

__declspec(dllimport)
int
__stdcall
FoldStringA(
      DWORD    dwMapFlags,
      LPCSTR  lpSrcStr,
      int      cchSrc,
      LPSTR  lpDestStr,
      int      cchDest);


#line 2503 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
      LOCALE_ENUMPROCA lpLocaleEnumProc,
      DWORD            dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
      LOCALE_ENUMPROCW lpLocaleEnumProc,
      DWORD            dwFlags);




#line 2525 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2527 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"




__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
      LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
      DWORD                   dwFlags,
      LONG_PTR                lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
      LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
      DWORD                   dwFlags,
      LONG_PTR                lParam);




#line 2551 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
      LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
      LGRPID                    LanguageGroup,
      DWORD                     dwFlags,
      LONG_PTR                  lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
      LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
      LGRPID                    LanguageGroup,
      DWORD                     dwFlags,
      LONG_PTR                  lParam);




#line 2575 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2577 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Application Family or OneCore Family



__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
      UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
      DWORD                dwFlags,
      LONG_PTR             lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
      UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
      DWORD                dwFlags,
      LONG_PTR             lParam);




#line 2603 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2605 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2607 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop or PC Family or OneCore Family



__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
      CODEPAGE_ENUMPROCA lpCodePageEnumProc,
      DWORD              dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
      CODEPAGE_ENUMPROCW lpCodePageEnumProc,
      DWORD              dwFlags);




#line 2631 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2633 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion





#pragma region Application Family or OneCore Family




__declspec(dllimport)
int
__stdcall NormalizeString(                            NORM_FORM NormForm,
                               LPCWSTR   lpSrcString,
                                                   int       cwSrcLength,
                          LPWSTR    lpDstString,
                                                   int       cwDstLength );

__declspec(dllimport)
BOOL
__stdcall IsNormalizedString(                     NORM_FORM NormForm,
                              LPCWSTR   lpString,
                                               int       cwLength );


#line 2660 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"






__declspec(dllimport)
int
__stdcall IdnToAscii(                            DWORD    dwFlags,
                    	 LPCWSTR  lpUnicodeCharStr,
                                           	 int      cchUnicodeChar,
                    LPWSTR   lpASCIICharStr,
                                           	 int      cchASCIIChar);

#line 2675 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



__declspec(dllimport)
int
__stdcall IdnToNameprepUnicode(                             	DWORD   dwFlags,
                                  	LPCWSTR lpUnicodeCharStr,
                                                         	int     cchUnicodeChar,
                                LPWSTR  lpNameprepCharStr,
                                                         	int     cchNameprepChar);

#line 2687 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



__declspec(dllimport)
int
__stdcall IdnToUnicode(                          	 DWORD   dwFlags,
                         	 LPCWSTR lpASCIICharStr,
                                              	 int     cchASCIIChar,
                      LPWSTR  lpUnicodeCharStr,
                                              	 int     cchUnicodeChar);

#line 2699 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall VerifyScripts(
         DWORD   dwFlags,            
         LPCWSTR lpLocaleScripts,    
         int     cchLocaleScripts,   
         LPCWSTR lpTestScripts,      
         int     cchTestScripts);    

__declspec(dllimport)
int
__stdcall GetStringScripts(
                                  DWORD   dwFlags,        
                                  LPCWSTR lpString,       
                                  int     cchString,      
          LPWSTR  lpScripts,      
                                  int     cchScripts);    

#line 2721 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2723 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion



#pragma region Application Family or OneCore Family










__declspec(dllimport)
int
__stdcall
GetLocaleInfoEx(
      LPCWSTR lpLocaleName,
      LCTYPE LCType,
      LPWSTR lpLCData,
      int cchData
);

#line 2749 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop or PC Family or OneCore Family


__declspec(dllimport)
int
__stdcall
GetCalendarInfoEx(
      LPCWSTR lpLocaleName,
      CALID Calendar,
      LPCWSTR lpReserved,
      CALTYPE CalType,
      LPWSTR lpCalData,
      int cchData,
      LPDWORD lpValue
);

#line 2768 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Application Family

















#line 2789 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
int
__stdcall
GetNumberFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPCWSTR lpValue,
      const NUMBERFMTW *lpFormat,
      LPWSTR lpNumberStr,
      int cchNumber
);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPCWSTR lpValue,
      const CURRENCYFMTW *lpFormat,
      LPWSTR lpCurrencyStr,
      int cchCurrency
);

__declspec(dllimport)
int
__stdcall
GetUserDefaultLocaleName(
      LPWSTR lpLocaleName,
      int cchLocaleName
);

#line 2827 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop or PC Family or OneCore Family


__declspec(dllimport)
int
__stdcall
GetSystemDefaultLocaleName(
      LPWSTR lpLocaleName,
      int cchLocaleName
);

__declspec(dllimport)
BOOL
__stdcall
IsNLSDefinedString(
      NLS_FUNCTION     Function,
      DWORD            dwFlags,
      LPNLSVERSIONINFO lpVersionInformation,
      LPCWSTR          lpString,
      INT              cchStr);

__declspec(dllimport)
BOOL
__stdcall
GetNLSVersionEx(
     	    NLS_FUNCTION function,
         LPCWSTR lpLocaleName,
     	    LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
DWORD
__stdcall
IsValidNLSVersion(
             NLS_FUNCTION function,
         LPCWSTR lpLocaleName,
             LPNLSVERSIONINFOEX lpVersionInformation
);
#line 2869 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#line 2871 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Application Family or OneCore Family


__declspec(dllimport)
int
__stdcall
FindNLSStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwFindNLSStringFlags,
      LPCWSTR lpStringSource,
      int cchSource,
      LPCWSTR lpStringValue,
      int cchValue,
      LPINT pcchFound,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM sortHandle
);





#line 2897 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
LCMapStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwMapFlags,
      LPCWSTR lpSrcStr,
      int cchSrc,
      LPWSTR lpDestStr,
      int cchDest,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM sortHandle
);

__declspec(dllimport)
BOOL
__stdcall
IsValidLocaleName(
      LPCWSTR lpLocaleName
);
#line 2921 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#pragma region Desktop or PC Family or OneCore Family


typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExEx(
      CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
      LPCWSTR lpLocaleName,
      CALID Calendar,
      LPCWSTR lpReserved,
      CALTYPE CalType,
      LPARAM lParam
);

typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExEx(
      DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPARAM lParam
);

typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsEx(
      TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPARAM lParam
);

typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesEx(
      LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
      DWORD dwFlags,
      LPARAM lParam,
      LPVOID lpReserved
);

#line 2977 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#line 2980 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"



#pragma region Application Family or OneCore Family


__declspec(dllimport)
int
__stdcall
ResolveLocaleName(
                             LPCWSTR lpNameToResolve,
      LPWSTR  lpLocaleName,
                                 int     cchLocaleName
);

#line 2996 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#line 2999 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"

#pragma region Desktop Family


    
#line 3005 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#pragma endregion

#line 3008 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"






#pragma warning(pop)
#line 3016 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


}
#line 3020 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"


#line 3023 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnls.h"
#line 177 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 178 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"


























#pragma once


extern "C" {
#line 32 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincontypes.h"
























#pragma once




extern "C" {
#line 32 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincontypes.h"

#pragma region Application Family


typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;























typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;




















#line 109 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincontypes.h"

typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;











typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD  nFont;
    COORD  dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;

#line 157 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincontypes.h"
#pragma endregion


}
#line 162 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincontypes.h"

#line 164 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincontypes.h"
#line 39 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"




#line 44 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"












extern "C" {
#line 26 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
AllocConsole(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
FreeConsole(
    void
    );




__declspec(dllimport)
BOOL
__stdcall
AttachConsole(
      DWORD dwProcessId
    );




#line 59 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"

__declspec(dllimport)
UINT
__stdcall
GetConsoleCP(
    void
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP(
    void
    );



























__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
      HANDLE hConsoleHandle,
      LPDWORD lpMode
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
      HANDLE hConsoleHandle,
      DWORD dwMode
    );


__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
      HANDLE hConsoleInput,
      LPDWORD lpNumberOfEvents
    );


__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleInputA(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
        LPDWORD lpNumberOfEventsRead
    );

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleInputW(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
        LPDWORD lpNumberOfEventsRead
    );





#line 155 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"
    

__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsRead
    );

__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsRead
    );





#line 182 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"

typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleA(
      HANDLE hConsoleInput,
      LPVOID lpBuffer,
      DWORD nNumberOfCharsToRead,
        LPDWORD lpNumberOfCharsRead,
      PCONSOLE_READCONSOLE_CONTROL pInputControl
    );

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleW(
      HANDLE hConsoleInput,
      LPVOID lpBuffer,
      DWORD nNumberOfCharsToRead,
        LPDWORD lpNumberOfCharsRead,
      PCONSOLE_READCONSOLE_CONTROL pInputControl
    );





#line 219 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
      HANDLE hConsoleOutput,
      const void* lpBuffer,
      DWORD nNumberOfCharsToWrite,
      LPDWORD lpNumberOfCharsWritten,
      LPVOID lpReserved
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
      HANDLE hConsoleOutput,
      const void* lpBuffer,
      DWORD nNumberOfCharsToWrite,
      LPDWORD lpNumberOfCharsWritten,
      LPVOID lpReserved
    );





#line 247 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"

















typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
      DWORD CtrlType
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
      PHANDLER_ROUTINE HandlerRoutine,
      BOOL Add
    );


#line 280 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"
#pragma endregion


}
#line 285 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"

#line 287 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi.h"
#line 47 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"













extern "C" {
#line 27 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

#pragma region Application Family or OneCore Family
























__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      CHAR cCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      WCHAR cCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );





#line 80 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      WORD wAttribute,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfAttrsWritten
    );


__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
      DWORD dwCtrlEvent,
      DWORD dwProcessGroupId
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      const SECURITY_ATTRIBUTES* lpSecurityAttributes,
      DWORD dwFlags,
      LPVOID lpScreenBufferData
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
      HANDLE hConsoleOutput
    );


__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
      HANDLE hConsoleInput
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
      UINT wCodePageID
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
      UINT wCodePageID
    );


typedef struct _CONSOLE_CURSOR_INFO {
    DWORD  dwSize;
    BOOL   bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
      HANDLE hConsoleOutput,
      PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
      HANDLE hConsoleOutput,
      const CONSOLE_CURSOR_INFO* lpConsoleCursorInfo
    );


typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD  wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );


typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
      HANDLE hConsoleOutput,
      COORD dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
      HANDLE hConsoleOutput,
      COORD dwCursorPosition
    );


__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
      HANDLE hConsoleOutput
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
      HANDLE hConsoleOutput,
      WORD wAttributes
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
      HANDLE hConsoleOutput,
      BOOL bAbsolute,
      const SMALL_RECT* lpConsoleWindow
    );


__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      LPCSTR lpCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      LPCWSTR lpCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );





#line 288 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      const WORD* lpAttribute,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfAttrsWritten
    );


__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      LPSTR lpCharacter,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfCharsRead
    );

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      LPWSTR lpCharacter,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfCharsRead
    );





#line 328 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      LPWORD lpAttribute,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfAttrsRead
    );


__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
      HANDLE hConsoleInput,
      const INPUT_RECORD* lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
      HANDLE hConsoleInput,
      const INPUT_RECORD* lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsWritten
    );





#line 366 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
      HANDLE hConsoleOutput,
      const SMALL_RECT* lpScrollRectangle,
      const SMALL_RECT* lpClipRectangle,
      COORD dwDestinationOrigin,
      const CHAR_INFO* lpFill
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
      HANDLE hConsoleOutput,
      const SMALL_RECT* lpScrollRectangle,
      const SMALL_RECT* lpClipRectangle,
      COORD dwDestinationOrigin,
      const CHAR_INFO* lpFill
    );





#line 394 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
      HANDLE hConsoleOutput,
      const CHAR_INFO* lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
      HANDLE hConsoleOutput,
      const CHAR_INFO* lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );





#line 422 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
      HANDLE hConsoleOutput,
      PCHAR_INFO lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
      HANDLE hConsoleOutput,
      PCHAR_INFO lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );





#line 450 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"


__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
      LPSTR lpConsoleTitle,
      DWORD nSize
    );

__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
      LPWSTR lpConsoleTitle,
      DWORD nSize
    );





#line 473 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"



__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleA(
      LPSTR lpConsoleTitle,
      DWORD nSize
    );

__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleW(
      LPWSTR lpConsoleTitle,
      DWORD nSize
    );





#line 497 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"
    
#line 499 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
      LPCSTR lpConsoleTitle
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
      LPCWSTR lpConsoleTitle
    );





#line 519 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

#line 521 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"
#pragma endregion


}
#line 526 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"

#line 528 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi2.h"
#line 48 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"









#pragma once
#line 12 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"














#line 27 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"


extern "C" {
#line 31 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

#pragma region Application Family or OneCore Family


__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
      LPDWORD lpNumberOfMouseButtons
    );




__declspec(dllimport)
COORD
__stdcall
GetConsoleFontSize(
      HANDLE hConsoleOutput,
      DWORD nFont
    );


__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFont(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );




typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;

__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFontEx(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
    );


__declspec(dllimport)
BOOL
__stdcall
SetCurrentConsoleFontEx(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
    );


#line 96 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"











typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetConsoleSelectionInfo(
      PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );








typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetConsoleHistoryInfo(
      PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleHistoryInfo(
      PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
    );





__declspec(dllimport)
BOOL
__stdcall
GetConsoleDisplayMode(
      LPDWORD lpModeFlags
    );





__declspec(dllimport)
BOOL
__stdcall
SetConsoleDisplayMode(
      HANDLE hConsoleOutput,
      DWORD dwFlags,
      PCOORD lpNewScreenBufferDimensions
    );

    
__declspec(dllimport)
HWND
__stdcall
GetConsoleWindow(
    void
    );


#line 183 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"



__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasA(
      LPSTR Source,
      LPSTR Target,
      LPSTR ExeName
    );

__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasW(
      LPWSTR Source,
      LPWSTR Target,
      LPWSTR ExeName
    );





#line 209 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasA(
      LPSTR Source,
      LPSTR TargetBuffer,
      DWORD TargetBufferLength,
      LPSTR ExeName
    );

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasW(
      LPWSTR Source,
      LPWSTR TargetBuffer,
      DWORD TargetBufferLength,
      LPWSTR ExeName
    );





#line 235 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthA(
      LPSTR ExeName
    );

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthW(
      LPWSTR ExeName
    );





#line 255 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthA(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthW(
    void
    );





#line 275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesA(
      LPSTR AliasBuffer,
      DWORD AliasBufferLength,
      LPSTR ExeName
    );

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesW(
      LPWSTR AliasBuffer,
      DWORD AliasBufferLength,
      LPWSTR ExeName
    );





#line 299 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesA(
      LPSTR ExeNameBuffer,
      DWORD ExeNameBufferLength
    );

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesW(
      LPWSTR ExeNameBuffer,
      DWORD ExeNameBufferLength
    );





#line 321 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

#line 323 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

__declspec(dllimport)
void
__stdcall
ExpungeConsoleCommandHistoryA(
      LPSTR ExeName
    );

__declspec(dllimport)
void
__stdcall
ExpungeConsoleCommandHistoryW(
      LPWSTR ExeName
    );





#line 343 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleNumberOfCommandsA(
      DWORD Number,
      LPSTR ExeName
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleNumberOfCommandsW(
      DWORD Number,
      LPWSTR ExeName
    );





#line 365 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleCommandHistoryLengthA(
      LPSTR ExeName
    );

__declspec(dllimport)
DWORD
__stdcall
GetConsoleCommandHistoryLengthW(
      LPWSTR ExeName
    );





#line 385 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleCommandHistoryA(
      LPSTR Commands,
      DWORD CommandBufferLength,
      LPSTR ExeName
    );

__declspec(dllimport)
DWORD
__stdcall
GetConsoleCommandHistoryW(
      LPWSTR Commands,
      DWORD CommandBufferLength,
      LPWSTR ExeName
    );





#line 409 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"



__declspec(dllimport)
DWORD
__stdcall
GetConsoleProcessList(
      LPDWORD lpdwProcessList,
      DWORD dwProcessCount
    );


#line 422 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

#line 424 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"
#pragma endregion
    

}
#line 429 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"

#line 431 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\consoleapi3.h"
#line 49 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"
#line 50 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"







#line 58 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"



#pragma warning(pop)
#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"


}
#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"

#line 69 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\wincon.h"

#line 180 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"


















#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\verrsrc.h"












#pragma region Application Family or OneCore Family












#line 27 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\verrsrc.h"




























































#line 88 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\verrsrc.h"
#pragma endregion

#pragma region Desktop Family










































extern "C" {
#line 135 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\verrsrc.h"
    











typedef struct tagVS_FIXEDFILEINFO
{
    DWORD   dwSignature;            
    DWORD   dwStrucVersion;         
    DWORD   dwFileVersionMS;        
    DWORD   dwFileVersionLS;        
    DWORD   dwProductVersionMS;     
    DWORD   dwProductVersionLS;     
    DWORD   dwFileFlagsMask;        
    DWORD   dwFileFlags;            
    DWORD   dwFileOS;               
    DWORD   dwFileType;             
    DWORD   dwFileSubtype;          
    DWORD   dwFileDateMS;           
    DWORD   dwFileDateLS;           
} VS_FIXEDFILEINFO;


}
#line 167 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\verrsrc.h"

#line 169 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\verrsrc.h"

#line 171 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\verrsrc.h"
#pragma endregion

#line 20 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"



extern "C" {
#line 25 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#pragma region Desktop Family or OneCore Family







DWORD
__stdcall
VerFindFileA(
                                  DWORD uFlags,
                                  LPCSTR szFileName,
                              LPCSTR szWinDir,
                                  LPCSTR szAppDir,
            LPSTR szCurDir,
                               PUINT puCurDirLen,
           LPSTR szDestDir,
                               PUINT puDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
                                  DWORD uFlags,
                                  LPCWSTR szFileName,
                              LPCWSTR szWinDir,
                                  LPCWSTR szAppDir,
            LPWSTR szCurDir,
                               PUINT puCurDirLen,
           LPWSTR szDestDir,
                               PUINT puDestDirLen
        );




#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 65 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"
#pragma endregion

#pragma region Desktop Family




DWORD
__stdcall
VerInstallFileA(
                                  DWORD uFlags,
                                  LPCSTR szSrcFileName,
                                  LPCSTR szDestFileName,
                                  LPCSTR szSrcDir,
                                  LPCSTR szDestDir,
                                  LPCSTR szCurDir,
           LPSTR szTmpFile,
                               PUINT puTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
                                  DWORD uFlags,
                                  LPCWSTR szSrcFileName,
                                  LPCWSTR szDestFileName,
                                  LPCWSTR szSrcDir,
                                  LPCWSTR szDestDir,
                                  LPCWSTR szCurDir,
           LPWSTR szTmpFile,
                               PUINT puTmpFileLen
        );




#line 103 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 105 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 107 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family





DWORD
__stdcall
GetFileVersionInfoSizeA(
                 LPCSTR lptstrFilename, 
          LPDWORD lpdwHandle       
        );

DWORD
__stdcall
GetFileVersionInfoSizeW(
                 LPCWSTR lptstrFilename, 
          LPDWORD lpdwHandle       
        );




#line 133 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"


BOOL
__stdcall
GetFileVersionInfoA(
                         LPCSTR lptstrFilename, 
                   DWORD dwHandle,          
                         DWORD dwLen,             
          LPVOID lpData            
        );

BOOL
__stdcall
GetFileVersionInfoW(
                         LPCWSTR lptstrFilename, 
                   DWORD dwHandle,          
                         DWORD dwLen,             
          LPVOID lpData            
        );




#line 157 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 161 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"
#pragma endregion

#pragma region Application or OneCore Family




DWORD __stdcall GetFileVersionInfoSizeExA(  DWORD dwFlags,   LPCSTR lpwstrFilename,   LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW(  DWORD dwFlags,   LPCWSTR lpwstrFilename,   LPDWORD lpdwHandle);




#line 175 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

BOOL __stdcall GetFileVersionInfoExA(  DWORD dwFlags,
                                      LPCSTR lpwstrFilename,
                                      DWORD dwHandle,
                                      DWORD dwLen,
                                      LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW(  DWORD dwFlags,
                                      LPCWSTR lpwstrFilename,
                                      DWORD dwHandle,
                                      DWORD dwLen,
                                      LPVOID lpData);




#line 191 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 193 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 195 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"
#pragma endregion

#pragma region Desktop Family





#line 204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 206 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"
#pragma endregion

#pragma region Application Family or OneCore Family




DWORD
__stdcall
VerLanguageNameA(
                           DWORD wLang,
          LPSTR szLang,
                           DWORD cchLang
        );
DWORD
__stdcall
VerLanguageNameW(
                           DWORD wLang,
          LPWSTR szLang,
                           DWORD cchLang
        );




#line 232 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

BOOL
__stdcall
VerQueryValueA(
          LPCVOID pBlock,
          LPCSTR lpSubBlock,
         LPVOID * lplpBuffer,
          PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
          LPCVOID pBlock,
          LPCWSTR lpSubBlock,
         LPVOID * lplpBuffer,
          PUINT puLen
        );




#line 254 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"


#line 257 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 259 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"
#pragma endregion


}
#line 264 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"


#line 267 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winver.h"

#line 181 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 182 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"































extern "C" {
#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 39 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

#pragma region Application Family or Desktop Family or OneCore Family







typedef   LONG LSTATUS;





















#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"













typedef ACCESS_MASK REGSAM;






















struct val_context {
    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

typedef struct val_context  *PVALCONTEXT;

typedef struct pvalueA {           
    LPSTR   pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA,  *PPVALUEA;
typedef struct pvalueW {           
    LPWSTR  pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW,  *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;
#line 134 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

typedef
DWORD __cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;    
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info  *PPROVIDER;

typedef struct value_entA {
    LPSTR   ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA,  *PVALENTA;
typedef struct value_entW {
    LPWSTR  ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW,  *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
#line 172 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

#line 174 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"


#line 177 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"








#line 186 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family














#line 204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"





__declspec(dllimport)
LSTATUS
__stdcall
RegCloseKey(
      HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOverridePredefKey (
      HKEY hKey,
      HKEY hNewHKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenUserClassesRoot(
      HANDLE hToken,
      DWORD dwOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenCurrentUser(
      REGSAM samDesired,
      PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCache(
    void
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
    void
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryA (
      LPCSTR lpMachineName,
      HKEY hKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryW (
      LPCWSTR lpMachineName,
      HKEY hKey,
      PHKEY phkResult
    );




#line 281 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExA (
      LPCSTR lpMachineName,
      HKEY hKey,
      ULONG Flags,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExW (
      LPCWSTR lpMachineName,
      HKEY hKey,
      ULONG Flags,
      PHKEY phkResult
    );




#line 305 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      PHKEY phkResult
    );




#line 327 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD Reserved,
      LPSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD Reserved,
      LPWSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition
    );





#line 363 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD Reserved,
      LPSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD Reserved,
      LPWSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );




#line 401 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyA (
      HKEY hKey,
      LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey
    );




#line 421 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved
    );





#line 447 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved,
             HANDLE hTransaction,
      PVOID  pExtendedParameter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved,
             HANDLE hTransaction,
      PVOID  pExtendedParameter
    );




#line 475 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDisableReflectionKey (
      HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegEnableReflectionKey (
      HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegQueryReflectionKey (
      HKEY hBase,
      BOOL *bIsReflectionDisabled
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueA(
      HKEY hKey,
      LPCSTR lpValueName
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueW(
      HKEY hKey,
      LPCWSTR lpValueName
    );





#line 519 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyA (
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpName,
      DWORD cchName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyW (
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpName,
      DWORD cchName
    );




#line 543 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExA(
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpName,
      LPDWORD lpcchName,
      LPDWORD lpReserved,
      LPSTR lpClass,
      LPDWORD lpcchClass,
      PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExW(
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpName,
      LPDWORD lpcchName,
      LPDWORD lpReserved,
      LPWSTR lpClass,
      LPDWORD lpcchClass,
      PFILETIME lpftLastWriteTime
    );





#line 577 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueA(
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpValueName,
      LPDWORD lpcchValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueW(
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpValueName,
      LPDWORD lpcchValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );





#line 611 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegFlushKey(
      HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegGetKeySecurity(
      HKEY hKey,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPDWORD lpcbSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyA(
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpFile
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpFile
    );





#line 654 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegNotifyChangeKeyValue(
      HKEY hKey,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter,
      HANDLE hEvent,
      BOOL fAsynchronous
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      PHKEY phkResult
    );




#line 688 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );





#line 716 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );




#line 746 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyA(
      HKEY hKey,
      LPSTR lpClass,
      LPDWORD lpcchClass,
      LPDWORD lpReserved,
      LPDWORD lpcSubKeys,
      LPDWORD lpcbMaxSubKeyLen,
      LPDWORD lpcbMaxClassLen,
      LPDWORD lpcValues,
      LPDWORD lpcbMaxValueNameLen,
      LPDWORD lpcbMaxValueLen,
      LPDWORD lpcbSecurityDescriptor,
      PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyW(
      HKEY hKey,
      LPWSTR lpClass,
      LPDWORD lpcchClass,
      LPDWORD lpReserved,
      LPDWORD lpcSubKeys,
      LPDWORD lpcbMaxSubKeyLen,
      LPDWORD lpcbMaxClassLen,
      LPDWORD lpcValues,
      LPDWORD lpcbMaxValueNameLen,
      LPDWORD lpcbMaxValueLen,
      LPDWORD lpcbSecurityDescriptor,
      PFILETIME lpftLastWriteTime
    );





#line 788 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueA (
      HKEY hKey,
      LPCSTR lpSubKey,
       LPSTR lpData,
      PLONG lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueW (
      HKEY hKey,
      LPCWSTR lpSubKey,
       LPWSTR lpData,
      PLONG lpcbData
    );




#line 812 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"



__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesA(
      HKEY hKey,
      PVALENTA val_list,
      DWORD num_vals,
       LPSTR lpValueBuf,
      LPDWORD ldwTotsize
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesW(
      HKEY hKey,
      PVALENTW val_list,
      DWORD num_vals,
       LPWSTR lpValueBuf,
      LPDWORD ldwTotsize
    );





#line 842 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

#line 844 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExA(
      HKEY hKey,
      LPCSTR lpValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExW(
      HKEY hKey,
      LPCWSTR lpValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );





#line 874 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpNewFile,
      LPCSTR lpOldFile
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpNewFile,
      LPCWSTR lpOldFile
    );




#line 898 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyA(
      HKEY hKey,
      LPCSTR lpFile,
      DWORD dwFlags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyW(
      HKEY hKey,
      LPCWSTR lpFile,
      DWORD dwFlags
    );





#line 922 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"



__declspec(dllimport)
LSTATUS
__stdcall
RegRenameKey(
      HKEY hKey,
      LPCWSTR lpSubKeyName,
      LPCWSTR lpNewKeyName
    );

#line 935 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyA (
      HKEY hKey,
      LPCSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyW (
      HKEY hKey,
      LPCWSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 957 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeySecurity(
      HKEY hKey,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD dwType,
      LPCSTR lpData,
      DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD dwType,
      LPCWSTR lpData,
      DWORD cbData
    );




#line 993 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExA(
      HKEY hKey,
      LPCSTR lpValueName,
      DWORD Reserved,
      DWORD dwType,
      const BYTE* lpData,
      DWORD cbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExW(
      HKEY hKey,
      LPCWSTR lpValueName,
      DWORD Reserved,
      DWORD dwType,
      const BYTE* lpData,
      DWORD cbData
    );





#line 1023 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyA(
      HKEY hKey,
      LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyW(
      HKEY hKey,
      LPCWSTR lpSubKey
    );





#line 1045 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueA(
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpValueName
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpValueName
    );





#line 1074 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueA(
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpValueName,
      DWORD dwType,
      LPCVOID lpData,
      DWORD cbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpValueName,
      DWORD dwType,
      LPCVOID lpData,
      DWORD cbData
    );





#line 1104 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeA(
      HKEY hKey,
      LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeW(
      HKEY hKey,
      LPCWSTR lpSubKey
    );





#line 1126 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeA (
             HKEY     hKeySrc,
         LPCSTR  lpSubKey,
             HKEY     hKeyDest
    );


#line 1138 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

#line 1140 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"



__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueA(
      HKEY hkey,
      LPCSTR lpSubKey,
      LPCSTR lpValue,
      DWORD dwFlags,
      LPDWORD pdwType,
    
#line 1157 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"
        
#line 1159 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"
      PVOID pvData,
      LPDWORD pcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueW(
      HKEY hkey,
      LPCWSTR lpSubKey,
      LPCWSTR lpValue,
      DWORD dwFlags,
      LPDWORD pdwType,
    
#line 1177 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"
        
#line 1179 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"
      PVOID pvData,
      LPDWORD pcbData
    );





#line 1188 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

#line 1190 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"



__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeW(
      HKEY hKeySrc,
      LPCWSTR lpSubKey,
      HKEY hKeyDest
    );





__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringA(
      HKEY hKey,
      LPCSTR pszValue,
      LPSTR pszOutBuf,
      DWORD cbOutBuf,
      LPDWORD pcbData,
      DWORD Flags,
      LPCSTR pszDirectory
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringW(
      HKEY hKey,
      LPCWSTR pszValue,
      LPWSTR pszOutBuf,
      DWORD cbOutBuf,
      LPDWORD pcbData,
      DWORD Flags,
      LPCWSTR pszDirectory
    );





#line 1237 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyA(
      LPCSTR lpFile,
      PHKEY phkResult,
      REGSAM samDesired,
      DWORD dwOptions,
      DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyW(
      LPCWSTR lpFile,
      PHKEY phkResult,
      REGSAM samDesired,
      DWORD dwOptions,
      DWORD Reserved
    );





#line 1265 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

#line 1267 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"





 
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown
    );
 
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown
    );




#line 1299 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
      LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
      LPWSTR lpMachineName
    );




#line 1317 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"





#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\reason.h"
















#pragma once

#pragma region Desktop Family







































































































#line 124 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\reason.h"
#pragma endregion

#line 127 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\reason.h"
#line 1323 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"


















 

#line 1344 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown,
      DWORD dwReason
    );
 

#line 1358 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown,
      DWORD dwReason
    );




#line 1374 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"



















__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
          DWORD dwGracePeriod,
          DWORD dwShutdownFlags,
          DWORD dwReason
    );
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
          DWORD dwGracePeriod,
          DWORD dwShutdownFlags,
          DWORD dwReason
    );




#line 1418 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

__declspec(dllimport)
DWORD
__stdcall
CheckForHiberboot(
      PBOOLEAN pHiberboot,
      BOOLEAN bClearFlag
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExA(
      HKEY hKey,
      LPCSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD Flags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExW(
      HKEY hKey,
      LPCWSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD Flags
    );





#line 1452 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"


#line 1455 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"
#pragma endregion


#pragma warning(pop)
#line 1460 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"


}
#line 1464 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"


#line 1467 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winreg.h"

#line 184 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 185 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"




























#pragma once



extern "C" {
#line 35 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 40 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"


#pragma region Desktop Family or System Family








#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\wnnc.h"



























#pragma region Desktop Family or OneCore Family






















































































#line 116 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\wnnc.h"
#pragma endregion

#line 119 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\wnnc.h"



#line 52 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"











#line 64 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"






#line 71 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"









#line 81 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"













#line 95 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"



#line 99 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

typedef struct  _NETRESOURCEA {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPSTR    lpLocalName;
    LPSTR    lpRemoteName;
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPWSTR   lpLocalName;
    LPWSTR   lpRemoteName;
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
#line 127 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"





















#line 149 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"



#line 153 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"


#line 156 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"






#line 163 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetAddConnectionA(
          LPCSTR   lpRemoteName,
      LPCSTR   lpPassword,
      LPCSTR   lpLocalName
    );
 
DWORD __stdcall
WNetAddConnectionW(
          LPCWSTR   lpRemoteName,
      LPCWSTR   lpPassword,
      LPCWSTR   lpLocalName
    );




#line 183 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetAddConnection2A(
          LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
          DWORD          dwFlags
    );
 
DWORD __stdcall
WNetAddConnection2W(
          LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
          DWORD          dwFlags
    );




#line 205 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetAddConnection3A(
      HWND           hwndOwner,
          LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
          DWORD          dwFlags
    );
 
DWORD __stdcall
WNetAddConnection3W(
      HWND           hwndOwner,
          LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
          DWORD          dwFlags
    );




#line 229 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetCancelConnectionA(
      LPCSTR lpName,
      BOOL     fForce
    );
 
DWORD __stdcall
WNetCancelConnectionW(
      LPCWSTR lpName,
      BOOL     fForce
    );




#line 247 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetCancelConnection2A(
      LPCSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );
 
DWORD __stdcall
WNetCancelConnection2W(
      LPCWSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );




#line 267 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetGetConnectionA(
      LPCSTR lpLocalName,
      LPSTR  lpRemoteName,
      LPDWORD lpnLength
    );
 
DWORD __stdcall
WNetGetConnectionW(
      LPCWSTR lpLocalName,
      LPWSTR  lpRemoteName,
      LPDWORD lpnLength
    );




#line 287 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"


#line 290 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"
#pragma endregion

#pragma region Desktop Family



 
DWORD __stdcall
WNetRestoreSingleConnectionW(
      HWND    hwndParent,
          LPCWSTR lpDevice,
          BOOL    fUseUI
    );









#line 313 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

#line 315 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"
#pragma endregion

#pragma region Desktop Family or System Family



 
DWORD __stdcall
WNetUseConnectionA(
      HWND            hwndOwner,
          LPNETRESOURCEA  lpNetResource,
      LPCSTR        lpPassword,
      LPCSTR        lpUserId,
          DWORD           dwFlags,
      LPSTR lpAccessName,
      LPDWORD lpBufferSize,
      LPDWORD   lpResult
    );
 
DWORD __stdcall
WNetUseConnectionW(
      HWND            hwndOwner,
          LPNETRESOURCEW  lpNetResource,
      LPCWSTR        lpPassword,
      LPCWSTR        lpUserId,
          DWORD           dwFlags,
      LPWSTR lpAccessName,
      LPDWORD lpBufferSize,
      LPDWORD   lpResult
    );




#line 350 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"
#line 351 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"





 
DWORD __stdcall
WNetConnectionDialog(
      HWND  hwnd,
      DWORD dwType
    );

 
DWORD __stdcall
WNetDisconnectDialog(
      HWND hwnd,
      DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA,  *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW,  *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
#line 392 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"














 
DWORD __stdcall
WNetConnectionDialog1A(
      LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
 
DWORD __stdcall
WNetConnectionDialog1W(
      LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );




#line 421 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

typedef struct _DISCDLGSTRUCTA{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA,  *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW,  *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
#line 443 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"




 
DWORD __stdcall
WNetDisconnectDialog1A(
      LPDISCDLGSTRUCTA lpConnDlgStruct
    );
 
DWORD __stdcall
WNetDisconnectDialog1W(
      LPDISCDLGSTRUCTW lpConnDlgStruct
    );




#line 462 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"
#line 463 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"





 
DWORD __stdcall
WNetOpenEnumA(
       DWORD          dwScope,
       DWORD          dwType,
       DWORD          dwUsage,
      LPNETRESOURCEA lpNetResource,
      LPHANDLE       lphEnum
    );
 
DWORD __stdcall
WNetOpenEnumW(
       DWORD          dwScope,
       DWORD          dwType,
       DWORD          dwUsage,
      LPNETRESOURCEW lpNetResource,
      LPHANDLE       lphEnum
    );




#line 491 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetEnumResourceA(
         HANDLE  hEnum,
      LPDWORD lpcCount,
      LPVOID  lpBuffer,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetEnumResourceW(
         HANDLE  hEnum,
      LPDWORD lpcCount,
      LPVOID  lpBuffer,
      LPDWORD lpBufferSize
    );




#line 513 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetCloseEnum(
      HANDLE   hEnum
    );


 
DWORD __stdcall
WNetGetResourceParentA(
      LPNETRESOURCEA lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );
 
DWORD __stdcall
WNetGetResourceParentW(
      LPNETRESOURCEW lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );




#line 540 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetGetResourceInformationA(
      LPNETRESOURCEA  lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer,
     LPSTR *lplpSystem
    );
 
DWORD __stdcall
WNetGetResourceInformationW(
      LPNETRESOURCEW  lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer,
     LPWSTR *lplpSystem
    );




#line 562 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"
#line 563 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"








typedef struct  _UNIVERSAL_NAME_INFOA {
    LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
    LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
#line 584 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

typedef struct  _REMOTE_NAME_INFOA {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
#line 602 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

 
DWORD __stdcall
WNetGetUniversalNameA(
      LPCSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID lpBuffer,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetGetUniversalNameW(
      LPCWSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID lpBuffer,
      LPDWORD lpBufferSize
    );




#line 624 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"




 
DWORD __stdcall
WNetGetUserA(
      LPCSTR  lpName,
      LPSTR lpUserName,
       LPDWORD lpnLength
    );



 
DWORD __stdcall
WNetGetUserW(
      LPCWSTR  lpName,
      LPWSTR lpUserName,
       LPDWORD lpnLength
    );




#line 650 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"












#line 663 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"



 
DWORD __stdcall
WNetGetProviderNameA(
         DWORD   dwNetType,
      LPSTR lpProviderName,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetGetProviderNameW(
         DWORD   dwNetType,
      LPWSTR lpProviderName,
      LPDWORD lpBufferSize
    );




#line 685 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT,  *LPNETINFOSTRUCT;





 
DWORD __stdcall
WNetGetNetworkInformationA(
       LPCSTR        lpProvider,
      LPNETINFOSTRUCT lpNetInfoStruct
    );
 
DWORD __stdcall
WNetGetNetworkInformationW(
       LPCWSTR        lpProvider,
      LPNETINFOSTRUCT lpNetInfoStruct
    );




#line 718 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

#line 720 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"





 
DWORD __stdcall
WNetGetLastErrorA(
      LPDWORD    lpError,
      LPSTR lpErrorBuf,
      DWORD      nErrorBufSize,
      LPSTR  lpNameBuf,
      DWORD      nNameBufSize
    );
 
DWORD __stdcall
WNetGetLastErrorW(
      LPDWORD    lpError,
      LPWSTR lpErrorBuf,
      DWORD      nErrorBufSize,
      LPWSTR  lpNameBuf,
      DWORD      nNameBufSize
    );




#line 748 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"





























#line 778 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"




















#line 799 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"












#line 812 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"






typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,  *LPNETCONNECTINFOSTRUCT;






 
DWORD __stdcall
MultinetGetConnectionPerformanceA(
       LPNETRESOURCEA lpNetResource,
      LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
 
DWORD __stdcall
MultinetGetConnectionPerformanceW(
       LPNETRESOURCEW lpNetResource,
      LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );




#line 848 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"
#line 849 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"


#line 852 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"
#pragma endregion



#pragma warning(pop)
#line 858 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"


}
#line 862 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"


#line 865 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winnetwk.h"

#line 187 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 188 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"




































#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"




















































#line 54 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"
#line 55 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"




#line 60 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"

#line 62 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"
#line 63 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"


extern "C" {
#line 67 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"

#pragma region Desktop Family














#line 84 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"



















#line 104 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"

__inline
PUWSTR
static
__declspec(deprecated)
ua_wcscpy(
      PUWSTR  Destination,
      PCUWSTR Source
    )
{
#pragma warning(push)
#pragma warning(disable:4995)
#pragma warning(disable:4996)



    return wcscpy(Destination, Source);
#pragma warning(pop)
}














































































































































































































































































































































































#line 490 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"






































































#line 561 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"




































#line 598 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"











































#line 642 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"



#line 646 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"














#line 661 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"










#line 672 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"

#line 674 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"



#line 678 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"

#line 680 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"
#pragma endregion


}
#line 685 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"

#line 687 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\shared\\stralign.h"








#line 225 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"












#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
































#line 34 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 39 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"


extern "C" {
#line 43 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#pragma region Desktop Family or OneCore Family





































#line 83 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
























































































































































































































































































extern "C" const GUID  NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;
#line 370 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

extern "C" const GUID  NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
#line 378 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"




extern "C" const GUID  DOMAIN_JOIN_GUID;
#line 389 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

extern "C" const GUID  DOMAIN_LEAVE_GUID;
#line 397 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"





extern "C" const GUID  FIREWALL_PORT_OPEN_GUID;
#line 409 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

extern "C" const GUID  FIREWALL_PORT_CLOSE_GUID;
#line 417 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"





extern "C" const GUID  MACHINE_POLICY_PRESENT_GUID;
#line 429 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

extern "C" const GUID  USER_POLICY_PRESENT_GUID;
#line 437 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"





extern "C" const GUID  RPC_INTERFACE_EVENT_GUID;
#line 449 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

extern "C" const GUID  NAMED_PIPE_EVENT_GUID;
#line 457 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"




extern "C" const GUID  CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID;
#line 468 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"




typedef struct
{
    DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
    union {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
















typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR       lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR      lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;




typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
#line 518 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"




typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE          = 0,
        SC_ACTION_RESTART       = 1,
        SC_ACTION_REBOOT        = 2,
        SC_ACTION_RUN_COMMAND   = 3,
        SC_ACTION_OWN_RESTART   = 4
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE  Type;
    DWORD           Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD       dwResetPeriod;
    LPSTR       lpRebootMsg;
    LPSTR       lpCommand;



    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD       dwResetPeriod;
    LPWSTR      lpRebootMsg;
    LPWSTR      lpCommand;



    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;




typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
#line 568 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"




typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL       fDelayedAutostart;      
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;




typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL       fFailureActionsOnNonCrashFailures;       
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;




typedef struct _SERVICE_SID_INFO {
    DWORD       dwServiceSidType;     
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;




typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR       pmszRequiredPrivileges;             
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;



typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR      pmszRequiredPrivileges;             
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;




typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO;
#line 609 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"




typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD       dwPreshutdownTimeout;   
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;




typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD   dwDataType; 



    DWORD   cbData;     



    PBYTE   pData;      
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;




typedef struct _SERVICE_TRIGGER
{
    DWORD                       dwTriggerType;              
    DWORD                       dwAction;                   
    GUID    *                   pTriggerSubtype;            
                                                            
                                                            
                                                            



    DWORD                       cDataItems;                 



    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM  pDataItems;       
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;




typedef struct _SERVICE_TRIGGER_INFO {



    DWORD                   cTriggers;  



    PSERVICE_TRIGGER        pTriggers;  
    PBYTE                   pReserved;  
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;






typedef struct _SERVICE_PREFERRED_NODE_INFO {
    USHORT                  usPreferredNode;    
    BOOLEAN                 fDelete;            
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;




typedef struct _SERVICE_TIMECHANGE_INFO {
    LARGE_INTEGER   liNewTime;      
    LARGE_INTEGER   liOldTime;      
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;




typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
    DWORD       dwLaunchProtected;     
} SERVICE_LAUNCH_PROTECTED_INFO, *PSERVICE_LAUNCH_PROTECTED_INFO;





struct SC_HANDLE__{int unused;}; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE   *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__{int unused;}; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO      = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO        = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
    DWORD   dwProcessId;
    DWORD   dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR             lpServiceName;
    LPSTR             lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR            lpServiceName;
    LPWSTR            lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;




typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
#line 767 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR                     lpServiceName;
    LPSTR                     lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR                    lpServiceName;
    LPWSTR                    lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;




typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
#line 785 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"





typedef LPVOID  SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD   fIsLocked;
    LPSTR   lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD   fIsLocked;
    LPWSTR  lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;




typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
#line 809 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"







typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPSTR   lpBinaryPathName;
    LPSTR   lpLoadOrderGroup;
    DWORD   dwTagId;
    LPSTR   lpDependencies;
    LPSTR   lpServiceStartName;
    LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPWSTR  lpBinaryPathName;
    LPWSTR  lpLoadOrderGroup;
    DWORD   dwTagId;
    LPWSTR  lpDependencies;
    LPWSTR  lpServiceStartName;
    LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;




typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
#line 845 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"







typedef void __stdcall SERVICE_MAIN_FUNCTIONW (
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void __stdcall SERVICE_MAIN_FUNCTIONA (
    DWORD dwNumServicesArgs,
    LPTSTR *lpServiceArgVectors
    );





#line 867 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD   dwNumServicesArgs,
    LPWSTR  *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD   dwNumServicesArgs,
    LPSTR   *lpServiceArgVectors
    );





#line 883 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"






typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR                       lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR                      lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;




typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
#line 904 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"





typedef void __stdcall HANDLER_FUNCTION (
    DWORD    dwControl
    );

typedef DWORD __stdcall HANDLER_FUNCTION_EX (
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );

typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD    dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );




typedef
void
( __stdcall * PFN_SC_NOTIFY_CALLBACK ) (
      PVOID pParameter
    );




typedef struct _SERVICE_NOTIFY_1 {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
    DWORD                   dwNotificationTriggered;
    LPSTR                   pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
    DWORD                   dwNotificationTriggered;
    LPWSTR                  pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;




typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2;
#line 976 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;




typedef SERVICE_NOTIFYA SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY;
#line 986 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"




typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD                   dwReason;
    LPSTR                   pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;



typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD                   dwReason;
    LPWSTR                  pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;




typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS;
#line 1010 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"




typedef struct _SERVICE_START_REASON {
    DWORD                   dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON;





__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
             SC_HANDLE    hService,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCSTR     lpBinaryPathName,
         LPCSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCSTR     lpDependencies,
         LPCSTR     lpServiceStartName,
         LPCSTR     lpPassword,
         LPCSTR     lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
             SC_HANDLE    hService,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCWSTR     lpBinaryPathName,
         LPCWSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCWSTR     lpDependencies,
         LPCWSTR     lpServiceStartName,
         LPCWSTR     lpPassword,
         LPCWSTR     lpDisplayName
    );




#line 1059 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
             SC_HANDLE    hService,
             DWORD        dwInfoLevel,
         LPVOID       lpInfo
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
             SC_HANDLE    hService,
             DWORD        dwInfoLevel,
         LPVOID       lpInfo
    );




#line 1081 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
             SC_HANDLE   hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
             SC_HANDLE           hService,
             DWORD               dwControl,
            LPSERVICE_STATUS    lpServiceStatus
    );

 
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
             SC_HANDLE    hSCManager,
             LPCSTR     lpServiceName,
         LPCSTR     lpDisplayName,
             DWORD        dwDesiredAccess,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCSTR     lpBinaryPathName,
         LPCSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCSTR     lpDependencies,
         LPCSTR     lpServiceStartName,
         LPCSTR     lpPassword
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
             SC_HANDLE    hSCManager,
             LPCWSTR     lpServiceName,
         LPCWSTR     lpDisplayName,
             DWORD        dwDesiredAccess,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCWSTR     lpBinaryPathName,
         LPCWSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCWSTR     lpDependencies,
         LPCWSTR     lpServiceStartName,
         LPCWSTR     lpPassword
    );




#line 1141 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteService(
             SC_HANDLE   hService
    );

 
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
                 SC_HANDLE               hService,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSA  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
                 SC_HANDLE               hService,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSW  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned
    );




#line 1180 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1182 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
#pragma endregion

#pragma region Desktop Family


 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
                 SC_HANDLE               hSCManager,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSA  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
                 SC_HANDLE               hSCManager,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSW  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle
    );




#line 1222 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1224 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExA(
                 SC_HANDLE               hSCManager,
                 SC_ENUM_TYPE            InfoLevel,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPBYTE                  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle,
             LPCSTR                pszGroupName
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExW(
                 SC_HANDLE               hSCManager,
                 SC_ENUM_TYPE            InfoLevel,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPBYTE                  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle,
             LPCWSTR                pszGroupName
    );




#line 1268 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpDisplayName,
     
                    LPSTR                 lpServiceName,
              LPDWORD                 lpcchBuffer
    );
 
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpDisplayName,
     
                    LPWSTR                 lpServiceName,
              LPDWORD                 lpcchBuffer
    );




#line 1296 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpServiceName,
     
                    LPSTR                 lpDisplayName,
              LPDWORD                 lpcchBuffer
    );
 
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpServiceName,
     
                    LPWSTR                 lpDisplayName,
              LPDWORD                 lpcchBuffer
    );




#line 1324 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1326 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
                 SC_HANDLE               hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
                 BOOL                    BootAcceptable
    );

#line 1346 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
             LPCSTR                lpMachineName,
             LPCSTR                lpDatabaseName,
                 DWORD                   dwDesiredAccess
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
             LPCWSTR                lpMachineName,
             LPCWSTR                lpDatabaseName,
                 DWORD                   dwDesiredAccess
    );




#line 1374 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpServiceName,
                 DWORD                   dwDesiredAccess
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpServiceName,
                 DWORD                   dwDesiredAccess
    );




#line 1398 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
                 SC_HANDLE               hService,
     
                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
                 SC_HANDLE               hService,
     
                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );




#line 1426 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"


#line 1429 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1431 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1434 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
                 SC_HANDLE               hService,
                 DWORD                   dwInfoLevel,
     
                    LPBYTE                  lpBuffer,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );

#line 1448 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1450 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1453 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
                 SC_HANDLE               hService,
                 DWORD                   dwInfoLevel,
     
                    LPBYTE                  lpBuffer,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );




#line 1470 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1472 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
#pragma endregion

#pragma region Desktop Family


 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
                 SC_HANDLE                       hSCManager,
     
                    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
                 DWORD                           cbBufSize,
                LPDWORD                         pcbBytesNeeded
    );
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
                 SC_HANDLE                       hSCManager,
     
                    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
                 DWORD                           cbBufSize,
                LPDWORD                         pcbBytesNeeded
    );




#line 1504 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1506 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
                 SC_HANDLE               hService,
                 SECURITY_INFORMATION    dwSecurityInformation,
     
                    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
                 SC_HANDLE           hService,
                LPSERVICE_STATUS    lpServiceStatus
    );

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatusEx(
                 SC_HANDLE           hService,
                 SC_STATUS_TYPE      InfoLevel,
     
                    LPBYTE              lpBuffer,
                 DWORD               cbBufSize,
                LPDWORD             pcbBytesNeeded
    );

 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
         LPCSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION          lpHandlerProc
    );
 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
         LPCWSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION          lpHandlerProc
    );




#line 1569 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
         LPCSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
      LPVOID                     lpContext
    );
 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
         LPCWSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
      LPVOID                     lpContext
    );




#line 1595 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
             SC_HANDLE               hService,
             SECURITY_INFORMATION    dwSecurityInformation,
             PSECURITY_DESCRIPTOR    lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
             SERVICE_STATUS_HANDLE   hServiceStatus,
             LPSERVICE_STATUS        lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
      const  SERVICE_TABLE_ENTRYA    *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
      const  SERVICE_TABLE_ENTRYW    *lpServiceStartTable
    );




#line 1630 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
                 SC_HANDLE            hService,
                 DWORD                dwNumServiceArgs,
     
                    LPCSTR             *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
                 SC_HANDLE            hService,
                 DWORD                dwNumServiceArgs,
     
                    LPCWSTR             *lpServiceArgVectors
    );




#line 1655 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1657 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
                 SC_LOCK             ScLock
    );

#line 1670 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeA (
             SC_HANDLE               hService,
             DWORD                   dwNotifyMask,
             PSERVICE_NOTIFYA        pNotifyBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeW (
             SC_HANDLE               hService,
             DWORD                   dwNotifyMask,
             PSERVICE_NOTIFYW        pNotifyBuffer
    );




#line 1698 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
ControlServiceExA(
             SC_HANDLE               hService,
             DWORD                   dwControl,
             DWORD                   dwInfoLevel,
          PVOID                   pControlParams
    );
__declspec(dllimport)
BOOL
__stdcall
ControlServiceExW(
             SC_HANDLE               hService,
             DWORD                   dwControl,
             DWORD                   dwInfoLevel,
          PVOID                   pControlParams
    );




#line 1722 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceDynamicInformation (
             SERVICE_STATUS_HANDLE   hServiceStatus,
             DWORD                   dwInfoLevel,
        PVOID           *       ppDynamicInfo
    );

#line 1733 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"







typedef enum _SC_EVENT_TYPE {
    SC_EVENT_DATABASE_CHANGE,
    SC_EVENT_PROPERTY_CHANGE,
    SC_EVENT_STATUS_CHANGE
} SC_EVENT_TYPE, *PSC_EVENT_TYPE;

typedef
void
__stdcall
SC_NOTIFICATION_CALLBACK (
             DWORD                   dwNotify,
         PVOID                   pCallbackContext
    );
typedef SC_NOTIFICATION_CALLBACK* PSC_NOTIFICATION_CALLBACK;

typedef struct _SC_NOTIFICATION_REGISTRATION* PSC_NOTIFICATION_REGISTRATION;

__declspec(dllimport)
DWORD
__stdcall
SubscribeServiceChangeNotifications (
           SC_HANDLE                      hService,
           SC_EVENT_TYPE                  eEventType,
           PSC_NOTIFICATION_CALLBACK      pCallback,
       PVOID                          pCallbackContext,
          PSC_NOTIFICATION_REGISTRATION* pSubscription
    );

__declspec(dllimport)
void
__stdcall
UnsubscribeServiceChangeNotifications (
           PSC_NOTIFICATION_REGISTRATION pSubscription
    );

__declspec(dllimport)
DWORD
__stdcall
WaitServiceState (
           SC_HANDLE  hService,
           DWORD      dwNotify,
       DWORD      dwTimeout,
       HANDLE     hCancelEvent
    );

#line 1786 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"







typedef enum SERVICE_REGISTRY_STATE_TYPE {
    ServiceRegistryStateParameters = 0,
    ServiceRegistryStatePersistent = 1,
    MaxServiceRegistryStateType = 2,
} SERVICE_REGISTRY_STATE_TYPE;

 
DWORD
__stdcall
GetServiceRegistryStateKey(
      SERVICE_STATUS_HANDLE ServiceStatusHandle,
      SERVICE_REGISTRY_STATE_TYPE StateType,
      DWORD AccessMask,
      HKEY *ServiceStateKey
    );

#line 1810 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1812 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"
#pragma endregion


}
#line 1817 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"


#pragma warning(pop)
#line 1821 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 1823 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\winsvc.h"

#line 238 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 239 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"



#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\mcx.h"












#pragma once
#line 15 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\mcx.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 20 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\mcx.h"

typedef struct _MODEMDEVCAPS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;


















































































































































































































































































































































































































































































































































































































































































#pragma warning(pop)
#line 730 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\mcx.h"

#line 732 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\mcx.h"
#line 243 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 244 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"


#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"













extern "C" {
#line 16 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 21 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"






#pragma region Application Family



struct HIMC__{int unused;}; typedef struct HIMC__ *HIMC;
struct HIMCC__{int unused;}; typedef struct HIMCC__ *HIMCC;



#line 37 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

#line 39 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#pragma endregion

#pragma region Desktop Family


typedef HKL   *LPHKL;
typedef UINT  *LPUINT;

#line 48 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#pragma endregion

#pragma region Application Family


typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;

#line 68 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;

#line 86 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#pragma endregion


#pragma region Application Family


typedef struct tagREGISTERWORDA {
    LPSTR   lpReading;
    LPSTR   lpWord;
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR  lpReading;
    LPWSTR  lpWord;
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;






typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;
#line 111 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

#line 113 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING,  *NPRECONVERTSTRING,  *LPRECONVERTSTRING;

#line 132 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#pragma endregion

#line 135 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"



#pragma region Application Family


typedef struct tagSTYLEBUFA {
    DWORD       dwStyle;
    CHAR        szDescription[32];
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD       dwStyle;
    WCHAR       szDescription[32];
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;






typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;
#line 160 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

#line 162 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#pragma endregion





#pragma region Desktop Family


typedef struct tagIMEMENUITEMINFOA {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    CHAR        szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA,  *NPIMEMENUITEMINFOA,  *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    WCHAR       szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW,  *NPIMEMENUITEMINFOW,  *LPIMEMENUITEMINFOW;






typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
#line 204 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

typedef struct tagIMECHARPOSITION {
    DWORD       dwSize;
    DWORD       dwCharPos;
    POINT       pt;
    UINT        cLineHeight;
    RECT        rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION,  *NPIMECHARPOSITION,  *LPIMECHARPOSITION;

typedef BOOL    (__stdcall* IMCENUMPROC)(HIMC, LPARAM);

#line 216 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#pragma endregion

#line 219 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"





#pragma region Desktop Family


HKL  __stdcall ImmInstallIMEA(  LPCSTR lpszIMEFileName,   LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW(  LPCWSTR lpszIMEFileName,   LPCWSTR lpszLayoutText);




#line 234 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL,   LPSTR lpszDescription,  UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL,   LPWSTR lpszDescription,  UINT uBufLen);




#line 244 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

UINT __stdcall ImmGetIMEFileNameA( HKL,   LPSTR lpszFileName,  UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL,   LPWSTR lpszFileName,  UINT uBufLen);




#line 252 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

DWORD __stdcall ImmGetProperty( HKL,  DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND,  DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND,  HIMC);
HIMC __stdcall ImmAssociateContext( HWND,  HIMC);

BOOL __stdcall ImmAssociateContextEx(  HWND,   HIMC,   DWORD);
#line 267 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

LONG  __stdcall ImmGetCompositionStringA( HIMC,  DWORD,   LPVOID lpBuf,  DWORD dwBufLen);
LONG  __stdcall ImmGetCompositionStringW( HIMC,  DWORD,   LPVOID lpBuf,  DWORD dwBufLen);




#line 275 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

BOOL  __stdcall ImmSetCompositionStringA( HIMC,  DWORD dwIndex,   LPVOID lpComp,  DWORD dwCompLen,   LPVOID lpRead,  DWORD dwReadLen);
BOOL  __stdcall ImmSetCompositionStringW( HIMC,  DWORD dwIndex,   LPVOID lpComp,  DWORD dwCompLen,   LPVOID lpRead,  DWORD dwReadLen);




#line 283 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

DWORD __stdcall ImmGetCandidateListCountA( HIMC,   LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC,   LPDWORD lpdwListCount);




#line 291 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

DWORD __stdcall ImmGetCandidateListA( HIMC,  DWORD deIndex,   LPCANDIDATELIST lpCandList,  DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC,  DWORD deIndex,   LPCANDIDATELIST lpCandList,  DWORD dwBufLen);




#line 299 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

DWORD __stdcall ImmGetGuideLineA(  HIMC,   DWORD dwIndex,   LPSTR lpBuf,   DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW(  HIMC,   DWORD dwIndex,   LPWSTR lpBuf,   DWORD dwBufLen);




#line 307 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

BOOL __stdcall ImmGetConversionStatus( HIMC,   LPDWORD lpfdwConversion,   LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus( HIMC,  DWORD,  DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC,  BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC,   LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW( HIMC,   LPLOGFONTW lplf);




#line 321 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

BOOL __stdcall ImmSetCompositionFontA( HIMC,   LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW( HIMC,   LPLOGFONTW lplf);




#line 329 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#line 330 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

BOOL    __stdcall ImmConfigureIMEA( HKL,  HWND,  DWORD,  LPVOID);
BOOL    __stdcall ImmConfigureIMEW( HKL,  HWND,  DWORD,  LPVOID);




#line 338 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

LRESULT __stdcall ImmEscapeA( HKL,  HIMC,  UINT,  LPVOID);
LRESULT __stdcall ImmEscapeW( HKL,  HIMC,  UINT,  LPVOID);




#line 346 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

DWORD   __stdcall ImmGetConversionListA( HKL,  HIMC,   LPCSTR lpSrc,   LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);
DWORD   __stdcall ImmGetConversionListW( HKL,  HIMC,   LPCWSTR lpSrc,   LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);




#line 354 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

BOOL    __stdcall ImmNotifyIME( HIMC,  DWORD dwAction,  DWORD dwIndex,  DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC,   LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos( HIMC,   LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow( HIMC,   LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow( HIMC,   LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow( HIMC,  DWORD,   LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow( HIMC,   LPCANDIDATEFORM lpCandidate);

BOOL __stdcall ImmIsUIMessageA( HWND,  UINT,  WPARAM,  LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND,  UINT,  WPARAM,  LPARAM);




#line 371 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)(  LPCSTR lpszReading, DWORD,   LPCSTR lpszString, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)(  LPCWSTR lpszReading, DWORD,   LPCWSTR lpszString, LPVOID);




#line 381 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

BOOL __stdcall ImmRegisterWordA( HKL,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszRegister);




#line 389 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

BOOL __stdcall ImmUnregisterWordA( HKL,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszUnregister);




#line 397 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

UINT __stdcall ImmGetRegisterWordStyleA( HKL,  UINT nItem,   LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW( HKL,  UINT nItem,   LPSTYLEBUFW lpStyleBuf);




#line 405 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

UINT __stdcall ImmEnumRegisterWordA( HKL,  REGISTERWORDENUMPROCA,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszRegister,  LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL,  REGISTERWORDENUMPROCW,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszRegister,  LPVOID);




#line 413 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"


BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC,  DWORD,  DWORD,   LPIMEMENUITEMINFOA lpImeParentMenu,   LPIMEMENUITEMINFOA lpImeMenu,  DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC,  DWORD,  DWORD,   LPIMEMENUITEMINFOW lpImeParentMenu,   LPIMEMENUITEMINFOW lpImeMenu,  DWORD dwSize);




#line 424 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);
#line 427 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"


BOOL __stdcall ImmDisableLegacyIME(void);
#line 431 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

#line 433 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"
#pragma endregion









































































































































































































#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ime_cmodes.h"



#pragma once


















#line 24 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\ime_cmodes.h"

#line 636 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"






















































#line 691 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"






































































#line 762 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"








#line 771 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"


#pragma warning(pop)
#line 775 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"


}
#line 779 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

#line 781 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\imm.h"

#line 247 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 248 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 249 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 250 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"




#pragma warning(pop)





#line 261 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 262 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#line 263 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#line 265 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#line 267 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"
#pragma endregion

#line 270 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#line 272 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\windows.h"

#line 39 "d:\\opengl\\include\\glad\\glad.h"
#line 40 "d:\\opengl\\include\\glad\\glad.h"






#line 47 "d:\\opengl\\include\\glad\\glad.h"



#line 51 "d:\\opengl\\include\\glad\\glad.h"


extern "C" {
#line 55 "d:\\opengl\\include\\glad\\glad.h"

struct gladGLversionStruct {
    int major;
    int minor;
};

typedef void* (* GLADloadproc)(const char *name);






















#line 85 "d:\\opengl\\include\\glad\\glad.h"

#line 87 "d:\\opengl\\include\\glad\\glad.h"
#line 88 "d:\\opengl\\include\\glad\\glad.h"

extern struct gladGLversionStruct GLVersion;

extern int gladLoadGL(void);

extern int gladLoadGLLoader(GLADloadproc);

#line 1 "d:\\opengl\\include\\khr\\khrplatform.h"









































































































#line 107 "d:\\opengl\\include\\khr\\khrplatform.h"








    



#line 120 "d:\\opengl\\include\\khr\\khrplatform.h"








#line 129 "d:\\opengl\\include\\khr\\khrplatform.h"

#line 131 "d:\\opengl\\include\\khr\\khrplatform.h"


















#line 150 "d:\\opengl\\include\\khr\\khrplatform.h"












#line 163 "d:\\opengl\\include\\khr\\khrplatform.h"




typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;











































#line 215 "d:\\opengl\\include\\khr\\khrplatform.h"





typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;












typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#line 241 "d:\\opengl\\include\\khr\\khrplatform.h"





typedef          float         khronos_float_t;
#line 248 "d:\\opengl\\include\\khr\\khrplatform.h"











typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#line 262 "d:\\opengl\\include\\khr\\khrplatform.h"






#line 269 "d:\\opengl\\include\\khr\\khrplatform.h"







typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = 0x7FFFFFFF
} khronos_boolean_enum_t;

#line 283 "d:\\opengl\\include\\khr\\khrplatform.h"
#line 96 "d:\\opengl\\include\\glad\\glad.h"
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;



typedef unsigned int GLhandleARB;
#line 121 "d:\\opengl\\include\\glad\\glad.h"
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_ssize_t GLsizeiptrARB;
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (__stdcall *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (__stdcall *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (__stdcall *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (__stdcall *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (__stdcall *GLVULKANPROCNV)(void);




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern int GLAD_GL_VERSION_1_0;
typedef void (__stdcall * PFNGLCULLFACEPROC)(GLenum mode);
extern PFNGLCULLFACEPROC glad_glCullFace;

typedef void (__stdcall * PFNGLFRONTFACEPROC)(GLenum mode);
extern PFNGLFRONTFACEPROC glad_glFrontFace;

typedef void (__stdcall * PFNGLHINTPROC)(GLenum target, GLenum mode);
extern PFNGLHINTPROC glad_glHint;

typedef void (__stdcall * PFNGLLINEWIDTHPROC)(GLfloat width);
extern PFNGLLINEWIDTHPROC glad_glLineWidth;

typedef void (__stdcall * PFNGLPOINTSIZEPROC)(GLfloat size);
extern PFNGLPOINTSIZEPROC glad_glPointSize;

typedef void (__stdcall * PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
extern PFNGLPOLYGONMODEPROC glad_glPolygonMode;

typedef void (__stdcall * PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLSCISSORPROC glad_glScissor;

typedef void (__stdcall * PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
extern PFNGLTEXPARAMETERFPROC glad_glTexParameterf;

typedef void (__stdcall * PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
extern PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;

typedef void (__stdcall * PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
extern PFNGLTEXPARAMETERIPROC glad_glTexParameteri;

typedef void (__stdcall * PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
extern PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;

typedef void (__stdcall * PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXIMAGE1DPROC glad_glTexImage1D;

typedef void (__stdcall * PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXIMAGE2DPROC glad_glTexImage2D;

typedef void (__stdcall * PFNGLDRAWBUFFERPROC)(GLenum buf);
extern PFNGLDRAWBUFFERPROC glad_glDrawBuffer;

typedef void (__stdcall * PFNGLCLEARPROC)(GLbitfield mask);
extern PFNGLCLEARPROC glad_glClear;

typedef void (__stdcall * PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLCLEARCOLORPROC glad_glClearColor;

typedef void (__stdcall * PFNGLCLEARSTENCILPROC)(GLint s);
extern PFNGLCLEARSTENCILPROC glad_glClearStencil;

typedef void (__stdcall * PFNGLCLEARDEPTHPROC)(GLdouble depth);
extern PFNGLCLEARDEPTHPROC glad_glClearDepth;

typedef void (__stdcall * PFNGLSTENCILMASKPROC)(GLuint mask);
extern PFNGLSTENCILMASKPROC glad_glStencilMask;

typedef void (__stdcall * PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern PFNGLCOLORMASKPROC glad_glColorMask;

typedef void (__stdcall * PFNGLDEPTHMASKPROC)(GLboolean flag);
extern PFNGLDEPTHMASKPROC glad_glDepthMask;

typedef void (__stdcall * PFNGLDISABLEPROC)(GLenum cap);
extern PFNGLDISABLEPROC glad_glDisable;

typedef void (__stdcall * PFNGLENABLEPROC)(GLenum cap);
extern PFNGLENABLEPROC glad_glEnable;

typedef void (__stdcall * PFNGLFINISHPROC)(void);
extern PFNGLFINISHPROC glad_glFinish;

typedef void (__stdcall * PFNGLFLUSHPROC)(void);
extern PFNGLFLUSHPROC glad_glFlush;

typedef void (__stdcall * PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
extern PFNGLBLENDFUNCPROC glad_glBlendFunc;

typedef void (__stdcall * PFNGLLOGICOPPROC)(GLenum opcode);
extern PFNGLLOGICOPPROC glad_glLogicOp;

typedef void (__stdcall * PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCPROC glad_glStencilFunc;

typedef void (__stdcall * PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
extern PFNGLSTENCILOPPROC glad_glStencilOp;

typedef void (__stdcall * PFNGLDEPTHFUNCPROC)(GLenum func);
extern PFNGLDEPTHFUNCPROC glad_glDepthFunc;

typedef void (__stdcall * PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
extern PFNGLPIXELSTOREFPROC glad_glPixelStoref;

typedef void (__stdcall * PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
extern PFNGLPIXELSTOREIPROC glad_glPixelStorei;

typedef void (__stdcall * PFNGLREADBUFFERPROC)(GLenum src);
extern PFNGLREADBUFFERPROC glad_glReadBuffer;

typedef void (__stdcall * PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
extern PFNGLREADPIXELSPROC glad_glReadPixels;

typedef void (__stdcall * PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);
extern PFNGLGETBOOLEANVPROC glad_glGetBooleanv;

typedef void (__stdcall * PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);
extern PFNGLGETDOUBLEVPROC glad_glGetDoublev;

typedef GLenum (__stdcall * PFNGLGETERRORPROC)(void);
extern PFNGLGETERRORPROC glad_glGetError;

typedef void (__stdcall * PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);
extern PFNGLGETFLOATVPROC glad_glGetFloatv;

typedef void (__stdcall * PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);
extern PFNGLGETINTEGERVPROC glad_glGetIntegerv;

typedef const GLubyte * (__stdcall * PFNGLGETSTRINGPROC)(GLenum name);
extern PFNGLGETSTRINGPROC glad_glGetString;

typedef void (__stdcall * PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
extern PFNGLGETTEXIMAGEPROC glad_glGetTexImage;

typedef void (__stdcall * PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
extern PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;

typedef void (__stdcall * PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;

typedef void (__stdcall * PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat *params);
extern PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;

typedef void (__stdcall * PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint *params);
extern PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;

typedef GLboolean (__stdcall * PFNGLISENABLEDPROC)(GLenum cap);
extern PFNGLISENABLEDPROC glad_glIsEnabled;

typedef void (__stdcall * PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
extern PFNGLDEPTHRANGEPROC glad_glDepthRange;

typedef void (__stdcall * PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLVIEWPORTPROC glad_glViewport;

#line 1636 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_1_1;
typedef void (__stdcall * PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
extern PFNGLDRAWARRAYSPROC glad_glDrawArrays;

typedef void (__stdcall * PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices);
extern PFNGLDRAWELEMENTSPROC glad_glDrawElements;

typedef void (__stdcall * PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
extern PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;

typedef void (__stdcall * PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
extern PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;

typedef void (__stdcall * PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;

typedef void (__stdcall * PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;

typedef void (__stdcall * PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;

typedef void (__stdcall * PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;

typedef void (__stdcall * PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;

typedef void (__stdcall * PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
extern PFNGLBINDTEXTUREPROC glad_glBindTexture;

typedef void (__stdcall * PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);
extern PFNGLDELETETEXTURESPROC glad_glDeleteTextures;

typedef void (__stdcall * PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);
extern PFNGLGENTEXTURESPROC glad_glGenTextures;

typedef GLboolean (__stdcall * PFNGLISTEXTUREPROC)(GLuint texture);
extern PFNGLISTEXTUREPROC glad_glIsTexture;

#line 1679 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_1_2;
typedef void (__stdcall * PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
extern PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;

typedef void (__stdcall * PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXIMAGE3DPROC glad_glTexImage3D;

typedef void (__stdcall * PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;

typedef void (__stdcall * PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;

#line 1695 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_1_3;
typedef void (__stdcall * PFNGLACTIVETEXTUREPROC)(GLenum texture);
extern PFNGLACTIVETEXTUREPROC glad_glActiveTexture;

typedef void (__stdcall * PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
extern PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;

typedef void (__stdcall * PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;

typedef void (__stdcall * PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;

typedef void (__stdcall * PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;

typedef void (__stdcall * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;

typedef void (__stdcall * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;

typedef void (__stdcall * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;

typedef void (__stdcall * PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;

#line 1726 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_1_4;
typedef void (__stdcall * PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
extern PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;

typedef void (__stdcall * PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
extern PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;

typedef void (__stdcall * PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
extern PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;

typedef void (__stdcall * PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
extern PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;

typedef void (__stdcall * PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);
extern PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;

typedef void (__stdcall * PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
extern PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;

typedef void (__stdcall * PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);
extern PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;

typedef void (__stdcall * PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLBLENDCOLORPROC glad_glBlendColor;

typedef void (__stdcall * PFNGLBLENDEQUATIONPROC)(GLenum mode);
extern PFNGLBLENDEQUATIONPROC glad_glBlendEquation;

#line 1757 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_1_5;
typedef void (__stdcall * PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
extern PFNGLGENQUERIESPROC glad_glGenQueries;

typedef void (__stdcall * PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);
extern PFNGLDELETEQUERIESPROC glad_glDeleteQueries;

typedef GLboolean (__stdcall * PFNGLISQUERYPROC)(GLuint id);
extern PFNGLISQUERYPROC glad_glIsQuery;

typedef void (__stdcall * PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
extern PFNGLBEGINQUERYPROC glad_glBeginQuery;

typedef void (__stdcall * PFNGLENDQUERYPROC)(GLenum target);
extern PFNGLENDQUERYPROC glad_glEndQuery;

typedef void (__stdcall * PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETQUERYIVPROC glad_glGetQueryiv;

typedef void (__stdcall * PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);
extern PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;

typedef void (__stdcall * PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);
extern PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;

typedef void (__stdcall * PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
extern PFNGLBINDBUFFERPROC glad_glBindBuffer;

typedef void (__stdcall * PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);
extern PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;

typedef void (__stdcall * PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
extern PFNGLGENBUFFERSPROC glad_glGenBuffers;

typedef GLboolean (__stdcall * PFNGLISBUFFERPROC)(GLuint buffer);
extern PFNGLISBUFFERPROC glad_glIsBuffer;

typedef void (__stdcall * PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
extern PFNGLBUFFERDATAPROC glad_glBufferData;

typedef void (__stdcall * PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
extern PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;

typedef void (__stdcall * PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
extern PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;

typedef void * (__stdcall * PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
extern PFNGLMAPBUFFERPROC glad_glMapBuffer;

typedef GLboolean (__stdcall * PFNGLUNMAPBUFFERPROC)(GLenum target);
extern PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;

typedef void (__stdcall * PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;

typedef void (__stdcall * PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void **params);
extern PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;

#line 1818 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_2_0;
typedef void (__stdcall * PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
extern PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;

typedef void (__stdcall * PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);
extern PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;

typedef void (__stdcall * PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
extern PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;

typedef void (__stdcall * PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;

typedef void (__stdcall * PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
extern PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;

typedef void (__stdcall * PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
extern PFNGLATTACHSHADERPROC glad_glAttachShader;

typedef void (__stdcall * PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);
extern PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;

typedef void (__stdcall * PFNGLCOMPILESHADERPROC)(GLuint shader);
extern PFNGLCOMPILESHADERPROC glad_glCompileShader;

typedef GLuint (__stdcall * PFNGLCREATEPROGRAMPROC)(void);
extern PFNGLCREATEPROGRAMPROC glad_glCreateProgram;

typedef GLuint (__stdcall * PFNGLCREATESHADERPROC)(GLenum type);
extern PFNGLCREATESHADERPROC glad_glCreateShader;

typedef void (__stdcall * PFNGLDELETEPROGRAMPROC)(GLuint program);
extern PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;

typedef void (__stdcall * PFNGLDELETESHADERPROC)(GLuint shader);
extern PFNGLDELETESHADERPROC glad_glDeleteShader;

typedef void (__stdcall * PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
extern PFNGLDETACHSHADERPROC glad_glDetachShader;

typedef void (__stdcall * PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;

typedef void (__stdcall * PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
extern PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;

typedef void (__stdcall * PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
extern PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;

typedef void (__stdcall * PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
extern PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;

typedef void (__stdcall * PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
extern PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;

typedef GLint (__stdcall * PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);
extern PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;

typedef void (__stdcall * PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);
extern PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;

typedef void (__stdcall * PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;

typedef void (__stdcall * PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
extern PFNGLGETSHADERIVPROC glad_glGetShaderiv;

typedef void (__stdcall * PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;

typedef void (__stdcall * PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
extern PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;

typedef GLint (__stdcall * PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
extern PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;

typedef void (__stdcall * PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
extern PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;

typedef void (__stdcall * PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
extern PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;

typedef void (__stdcall * PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);
extern PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;

typedef void (__stdcall * PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);
extern PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;

typedef void (__stdcall * PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);
extern PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;

typedef void (__stdcall * PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void **pointer);
extern PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;

typedef GLboolean (__stdcall * PFNGLISPROGRAMPROC)(GLuint program);
extern PFNGLISPROGRAMPROC glad_glIsProgram;

typedef GLboolean (__stdcall * PFNGLISSHADERPROC)(GLuint shader);
extern PFNGLISSHADERPROC glad_glIsShader;

typedef void (__stdcall * PFNGLLINKPROGRAMPROC)(GLuint program);
extern PFNGLLINKPROGRAMPROC glad_glLinkProgram;

typedef void (__stdcall * PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
extern PFNGLSHADERSOURCEPROC glad_glShaderSource;

typedef void (__stdcall * PFNGLUSEPROGRAMPROC)(GLuint program);
extern PFNGLUSEPROGRAMPROC glad_glUseProgram;

typedef void (__stdcall * PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
extern PFNGLUNIFORM1FPROC glad_glUniform1f;

typedef void (__stdcall * PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
extern PFNGLUNIFORM2FPROC glad_glUniform2f;

typedef void (__stdcall * PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFNGLUNIFORM3FPROC glad_glUniform3f;

typedef void (__stdcall * PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFNGLUNIFORM4FPROC glad_glUniform4f;

typedef void (__stdcall * PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
extern PFNGLUNIFORM1IPROC glad_glUniform1i;

typedef void (__stdcall * PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
extern PFNGLUNIFORM2IPROC glad_glUniform2i;

typedef void (__stdcall * PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
extern PFNGLUNIFORM3IPROC glad_glUniform3i;

typedef void (__stdcall * PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFNGLUNIFORM4IPROC glad_glUniform4i;

typedef void (__stdcall * PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM1FVPROC glad_glUniform1fv;

typedef void (__stdcall * PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM2FVPROC glad_glUniform2fv;

typedef void (__stdcall * PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM3FVPROC glad_glUniform3fv;

typedef void (__stdcall * PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM4FVPROC glad_glUniform4fv;

typedef void (__stdcall * PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM1IVPROC glad_glUniform1iv;

typedef void (__stdcall * PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM2IVPROC glad_glUniform2iv;

typedef void (__stdcall * PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM3IVPROC glad_glUniform3iv;

typedef void (__stdcall * PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM4IVPROC glad_glUniform4iv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;

typedef void (__stdcall * PFNGLVALIDATEPROGRAMPROC)(GLuint program);
extern PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;

typedef void (__stdcall * PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
extern PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;

typedef void (__stdcall * PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;

typedef void (__stdcall * PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
extern PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;

typedef void (__stdcall * PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;

typedef void (__stdcall * PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
extern PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;

typedef void (__stdcall * PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;

typedef void (__stdcall * PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
extern PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;

typedef void (__stdcall * PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;

typedef void (__stdcall * PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
extern PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;

typedef void (__stdcall * PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;

typedef void (__stdcall * PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
extern PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;

typedef void (__stdcall * PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;

typedef void (__stdcall * PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;

typedef void (__stdcall * PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;

typedef void (__stdcall * PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;

typedef void (__stdcall * PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;

typedef void (__stdcall * PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
extern PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;

typedef void (__stdcall * PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);
extern PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
extern PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;

typedef void (__stdcall * PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);
extern PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);
extern PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);
extern PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;

typedef void (__stdcall * PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;

typedef void (__stdcall * PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
extern PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;

typedef void (__stdcall * PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);
extern PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;

typedef void (__stdcall * PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);
extern PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;

typedef void (__stdcall * PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
extern PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;

#line 2101 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_2_1;
typedef void (__stdcall * PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;

#line 2123 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_3_0;
typedef void (__stdcall * PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
extern PFNGLCOLORMASKIPROC glad_glColorMaski;

typedef void (__stdcall * PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);
extern PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;

typedef void (__stdcall * PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);
extern PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;

typedef void (__stdcall * PFNGLENABLEIPROC)(GLenum target, GLuint index);
extern PFNGLENABLEIPROC glad_glEnablei;

typedef void (__stdcall * PFNGLDISABLEIPROC)(GLenum target, GLuint index);
extern PFNGLDISABLEIPROC glad_glDisablei;

typedef GLboolean (__stdcall * PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
extern PFNGLISENABLEDIPROC glad_glIsEnabledi;

typedef void (__stdcall * PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;

typedef void (__stdcall * PFNGLENDTRANSFORMFEEDBACKPROC)(void);
extern PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;

typedef void (__stdcall * PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;

typedef void (__stdcall * PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
extern PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;

typedef void (__stdcall * PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;

typedef void (__stdcall * PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;

typedef void (__stdcall * PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
extern PFNGLCLAMPCOLORPROC glad_glClampColor;

typedef void (__stdcall * PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
extern PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;

typedef void (__stdcall * PFNGLENDCONDITIONALRENDERPROC)(void);
extern PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;

typedef void (__stdcall * PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
extern PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;

typedef void (__stdcall * PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);
extern PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;

typedef void (__stdcall * PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params);
extern PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
extern PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;

typedef void (__stdcall * PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
extern PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;

typedef void (__stdcall * PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
extern PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;

typedef void (__stdcall * PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
extern PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;

typedef void (__stdcall * PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
extern PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;

typedef void (__stdcall * PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
extern PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;

typedef void (__stdcall * PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
extern PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;

typedef void (__stdcall * PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
extern PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;

typedef void (__stdcall * PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);
extern PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);
extern PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;

typedef void (__stdcall * PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);
extern PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;

typedef void (__stdcall * PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);
extern PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;

typedef void (__stdcall * PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);
extern PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;

typedef GLint (__stdcall * PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);
extern PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;

typedef void (__stdcall * PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
extern PFNGLUNIFORM1UIPROC glad_glUniform1ui;

typedef void (__stdcall * PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
extern PFNGLUNIFORM2UIPROC glad_glUniform2ui;

typedef void (__stdcall * PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFNGLUNIFORM3UIPROC glad_glUniform3ui;

typedef void (__stdcall * PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFNGLUNIFORM4UIPROC glad_glUniform4ui;

typedef void (__stdcall * PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;

typedef void (__stdcall * PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;

typedef void (__stdcall * PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;

typedef void (__stdcall * PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;

typedef void (__stdcall * PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *params);
extern PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;

typedef void (__stdcall * PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *params);
extern PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;

typedef void (__stdcall * PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;

typedef void (__stdcall * PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *params);
extern PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;

typedef void (__stdcall * PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *value);
extern PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;

typedef void (__stdcall * PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint *value);
extern PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;

typedef void (__stdcall * PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
extern PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;

typedef void (__stdcall * PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;

typedef const GLubyte * (__stdcall * PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
extern PFNGLGETSTRINGIPROC glad_glGetStringi;

typedef GLboolean (__stdcall * PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
extern PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;

typedef void (__stdcall * PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
extern PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;

typedef void (__stdcall * PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);
extern PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;

typedef void (__stdcall * PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
extern PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;

typedef void (__stdcall * PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;

typedef void (__stdcall * PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;

typedef GLboolean (__stdcall * PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
extern PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;

typedef void (__stdcall * PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
extern PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;

typedef void (__stdcall * PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);
extern PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;

typedef void (__stdcall * PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
extern PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;

typedef GLenum (__stdcall * PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;

typedef void (__stdcall * PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;

typedef void (__stdcall * PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;

typedef void (__stdcall * PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;

typedef void (__stdcall * PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;

typedef void (__stdcall * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;

typedef void (__stdcall * PFNGLGENERATEMIPMAPPROC)(GLenum target);
extern PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;

typedef void (__stdcall * PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;

typedef void (__stdcall * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;

typedef void (__stdcall * PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;

typedef void * (__stdcall * PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;

typedef void (__stdcall * PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;

typedef void (__stdcall * PFNGLBINDVERTEXARRAYPROC)(GLuint array);
extern PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;

typedef void (__stdcall * PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);
extern PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;

typedef void (__stdcall * PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
extern PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;

typedef GLboolean (__stdcall * PFNGLISVERTEXARRAYPROC)(GLuint array);
extern PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;

#line 2379 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_3_1;
typedef void (__stdcall * PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
extern PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;

typedef void (__stdcall * PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
extern PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;

typedef void (__stdcall * PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
extern PFNGLTEXBUFFERPROC glad_glTexBuffer;

typedef void (__stdcall * PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
extern PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;

typedef void (__stdcall * PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;

typedef void (__stdcall * PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
extern PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;

typedef void (__stdcall * PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
extern PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;

typedef void (__stdcall * PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
extern PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;

typedef GLuint (__stdcall * PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);
extern PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;

typedef void (__stdcall * PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;

typedef void (__stdcall * PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;

typedef void (__stdcall * PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
extern PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;

#line 2419 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_3_2;
typedef void (__stdcall * PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
extern PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;

typedef void (__stdcall * PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;

typedef void (__stdcall * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;

typedef void (__stdcall * PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;

typedef void (__stdcall * PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
extern PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;

typedef GLsync (__stdcall * PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
extern PFNGLFENCESYNCPROC glad_glFenceSync;

typedef GLboolean (__stdcall * PFNGLISSYNCPROC)(GLsync sync);
extern PFNGLISSYNCPROC glad_glIsSync;

typedef void (__stdcall * PFNGLDELETESYNCPROC)(GLsync sync);
extern PFNGLDELETESYNCPROC glad_glDeleteSync;

typedef GLenum (__stdcall * PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;

typedef void (__stdcall * PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLWAITSYNCPROC glad_glWaitSync;

typedef void (__stdcall * PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 *data);
extern PFNGLGETINTEGER64VPROC glad_glGetInteger64v;

typedef void (__stdcall * PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
extern PFNGLGETSYNCIVPROC glad_glGetSynciv;

typedef void (__stdcall * PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);
extern PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;

typedef void (__stdcall * PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *params);
extern PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;

typedef void (__stdcall * PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;

typedef void (__stdcall * PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;

typedef void (__stdcall * PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;

typedef void (__stdcall * PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);
extern PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;

typedef void (__stdcall * PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
extern PFNGLSAMPLEMASKIPROC glad_glSampleMaski;

#line 2480 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_3_3;
typedef void (__stdcall * PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;

typedef GLint (__stdcall * PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);
extern PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;

typedef void (__stdcall * PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);
extern PFNGLGENSAMPLERSPROC glad_glGenSamplers;

typedef void (__stdcall * PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);
extern PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;

typedef GLboolean (__stdcall * PFNGLISSAMPLERPROC)(GLuint sampler);
extern PFNGLISSAMPLERPROC glad_glIsSampler;

typedef void (__stdcall * PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
extern PFNGLBINDSAMPLERPROC glad_glBindSampler;

typedef void (__stdcall * PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
extern PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;

typedef void (__stdcall * PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
extern PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;

typedef void (__stdcall * PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
extern PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;

typedef void (__stdcall * PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat *param);
extern PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;

typedef void (__stdcall * PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
extern PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;

typedef void (__stdcall * PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint *param);
extern PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;

typedef void (__stdcall * PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *params);
extern PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;

typedef void (__stdcall * PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *params);
extern PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;

typedef void (__stdcall * PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *params);
extern PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;

typedef void (__stdcall * PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint *params);
extern PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;

typedef void (__stdcall * PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
extern PFNGLQUERYCOUNTERPROC glad_glQueryCounter;

typedef void (__stdcall * PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);
extern PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;

typedef void (__stdcall * PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params);
extern PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;

typedef void (__stdcall * PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
extern PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;

typedef void (__stdcall * PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;

typedef void (__stdcall * PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;

typedef void (__stdcall * PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;

typedef void (__stdcall * PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;

typedef void (__stdcall * PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;

typedef void (__stdcall * PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;

typedef void (__stdcall * PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;

typedef void (__stdcall * PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;

typedef void (__stdcall * PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
extern PFNGLVERTEXP2UIPROC glad_glVertexP2ui;

typedef void (__stdcall * PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);
extern PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;

typedef void (__stdcall * PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
extern PFNGLVERTEXP3UIPROC glad_glVertexP3ui;

typedef void (__stdcall * PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);
extern PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;

typedef void (__stdcall * PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
extern PFNGLVERTEXP4UIPROC glad_glVertexP4ui;

typedef void (__stdcall * PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);
extern PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;

typedef void (__stdcall * PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;

typedef void (__stdcall * PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;

typedef void (__stdcall * PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;

typedef void (__stdcall * PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;

typedef void (__stdcall * PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;

typedef void (__stdcall * PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;

typedef void (__stdcall * PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;

typedef void (__stdcall * PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;

typedef void (__stdcall * PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;

typedef void (__stdcall * PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
extern PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;

typedef void (__stdcall * PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;

typedef void (__stdcall * PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
extern PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;

typedef void (__stdcall * PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;

typedef void (__stdcall * PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
extern PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;

typedef void (__stdcall * PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;

typedef void (__stdcall * PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
extern PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;

typedef void (__stdcall * PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
extern PFNGLNORMALP3UIPROC glad_glNormalP3ui;

typedef void (__stdcall * PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;

typedef void (__stdcall * PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
extern PFNGLCOLORP3UIPROC glad_glColorP3ui;

typedef void (__stdcall * PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);
extern PFNGLCOLORP3UIVPROC glad_glColorP3uiv;

typedef void (__stdcall * PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
extern PFNGLCOLORP4UIPROC glad_glColorP4ui;

typedef void (__stdcall * PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);
extern PFNGLCOLORP4UIVPROC glad_glColorP4uiv;

typedef void (__stdcall * PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
extern PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;

typedef void (__stdcall * PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);
extern PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;

#line 2658 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_4_0;
typedef void (__stdcall * PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
extern PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;

typedef void (__stdcall * PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
extern PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;

typedef void (__stdcall * PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;

typedef void (__stdcall * PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
extern PFNGLBLENDFUNCIPROC glad_glBlendFunci;

typedef void (__stdcall * PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
extern PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;

typedef void (__stdcall * PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect);
extern PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;

typedef void (__stdcall * PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect);
extern PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;

typedef void (__stdcall * PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
extern PFNGLUNIFORM1DPROC glad_glUniform1d;

typedef void (__stdcall * PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
extern PFNGLUNIFORM2DPROC glad_glUniform2d;

typedef void (__stdcall * PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLUNIFORM3DPROC glad_glUniform3d;

typedef void (__stdcall * PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLUNIFORM4DPROC glad_glUniform4d;

typedef void (__stdcall * PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM1DVPROC glad_glUniform1dv;

typedef void (__stdcall * PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM2DVPROC glad_glUniform2dv;

typedef void (__stdcall * PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM3DVPROC glad_glUniform3dv;

typedef void (__stdcall * PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM4DVPROC glad_glUniform4dv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;

typedef void (__stdcall * PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;

typedef void (__stdcall * PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
extern PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;

typedef GLint (__stdcall * PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar *name);
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;

typedef GLuint (__stdcall * PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar *name);
extern PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;

typedef void (__stdcall * PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;

typedef void (__stdcall * PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;

typedef void (__stdcall * PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
extern PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;

typedef void (__stdcall * PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint *indices);
extern PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;

typedef void (__stdcall * PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint *params);
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;

typedef void (__stdcall * PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
extern PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;

typedef void (__stdcall * PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
extern PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;

typedef void (__stdcall * PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat *values);
extern PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;

typedef void (__stdcall * PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;

typedef void (__stdcall * PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
extern PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;

typedef void (__stdcall * PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
extern PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;

typedef GLboolean (__stdcall * PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
extern PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;

typedef void (__stdcall * PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
extern PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;

typedef void (__stdcall * PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
extern PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;

typedef void (__stdcall * PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
extern PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;

typedef void (__stdcall * PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;

typedef void (__stdcall * PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
extern PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;

typedef void (__stdcall * PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
extern PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;

typedef void (__stdcall * PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);
extern PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;

#line 2800 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_4_1;
typedef void (__stdcall * PFNGLRELEASESHADERCOMPILERPROC)(void);
extern PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;

typedef void (__stdcall * PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
extern PFNGLSHADERBINARYPROC glad_glShaderBinary;

typedef void (__stdcall * PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
extern PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;

typedef void (__stdcall * PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
extern PFNGLDEPTHRANGEFPROC glad_glDepthRangef;

typedef void (__stdcall * PFNGLCLEARDEPTHFPROC)(GLfloat d);
extern PFNGLCLEARDEPTHFPROC glad_glClearDepthf;

typedef void (__stdcall * PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
extern PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;

typedef void (__stdcall * PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
extern PFNGLPROGRAMBINARYPROC glad_glProgramBinary;

typedef void (__stdcall * PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
extern PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;

typedef void (__stdcall * PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
extern PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;

typedef void (__stdcall * PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
extern PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;

typedef GLuint (__stdcall * PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const*strings);
extern PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;

typedef void (__stdcall * PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
extern PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;

typedef void (__stdcall * PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
extern PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;

typedef void (__stdcall * PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
extern PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;

typedef GLboolean (__stdcall * PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
extern PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;

typedef void (__stdcall * PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint *params);
extern PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
extern PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
extern PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
extern PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
extern PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
extern PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
extern PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
extern PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
extern PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
extern PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
extern PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
extern PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;

typedef void (__stdcall * PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;

typedef void (__stdcall * PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;

typedef void (__stdcall * PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
extern PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;

typedef void (__stdcall * PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;

typedef void (__stdcall * PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
extern PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;

typedef void (__stdcall * PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
extern PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;

typedef void (__stdcall * PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;

typedef void (__stdcall * PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;

typedef void (__stdcall * PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;

typedef void (__stdcall * PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;

typedef void (__stdcall * PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;

typedef void (__stdcall * PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;

typedef void (__stdcall * PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
extern PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;

typedef void (__stdcall * PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble *params);
extern PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;

typedef void (__stdcall * PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
extern PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;

typedef void (__stdcall * PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
extern PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;

typedef void (__stdcall * PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;

typedef void (__stdcall * PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
extern PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;

typedef void (__stdcall * PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
extern PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;

typedef void (__stdcall * PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
extern PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;

typedef void (__stdcall * PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble *v);
extern PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;

typedef void (__stdcall * PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
extern PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;

typedef void (__stdcall * PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat *data);
extern PFNGLGETFLOATI_VPROC glad_glGetFloati_v;

typedef void (__stdcall * PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble *data);
extern PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;

#line 3068 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_4_2;
typedef void (__stdcall * PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
extern PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance;

typedef void (__stdcall * PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
extern PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance;

typedef void (__stdcall * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance;

typedef void (__stdcall * PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
extern PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ;

typedef void (__stdcall * PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv;

typedef void (__stdcall * PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
extern PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture;

typedef void (__stdcall * PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
extern PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier;

typedef void (__stdcall * PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
extern PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D;

typedef void (__stdcall * PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D;

typedef void (__stdcall * PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
extern PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D;

typedef void (__stdcall * PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
extern PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced;

typedef void (__stdcall * PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced;

#line 3108 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_4_3;
typedef void (__stdcall * PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData;

typedef void (__stdcall * PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData;

typedef void (__stdcall * PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
extern PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute;

typedef void (__stdcall * PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
extern PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect;

typedef void (__stdcall * PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
extern PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData;

typedef void (__stdcall * PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
extern PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri;

typedef void (__stdcall * PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv;

typedef void (__stdcall * PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
extern PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v;

typedef void (__stdcall * PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
extern PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage;

typedef void (__stdcall * PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
extern PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage;

typedef void (__stdcall * PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
extern PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData;

typedef void (__stdcall * PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
extern PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData;

typedef void (__stdcall * PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
extern PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer;

typedef void (__stdcall * PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer;

typedef void (__stdcall * PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
extern PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect;

typedef void (__stdcall * PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
extern PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect;

typedef void (__stdcall * PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
extern PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv;

typedef GLuint (__stdcall * PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
extern PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex;

typedef void (__stdcall * PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
extern PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName;

typedef void (__stdcall * PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
extern PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv;

typedef GLint (__stdcall * PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar *name);
extern PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation;

typedef GLint (__stdcall * PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar *name);
extern PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex;

typedef void (__stdcall * PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
extern PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding;

typedef void (__stdcall * PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange;

typedef void (__stdcall * PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample;

typedef void (__stdcall * PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample;

typedef void (__stdcall * PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
extern PFNGLTEXTUREVIEWPROC glad_glTextureView;

typedef void (__stdcall * PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer;

typedef void (__stdcall * PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat;

typedef void (__stdcall * PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat;

typedef void (__stdcall * PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat;

typedef void (__stdcall * PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
extern PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding;

typedef void (__stdcall * PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
extern PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor;

typedef void (__stdcall * PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
extern PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl;

typedef void (__stdcall * PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
extern PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert;

typedef void (__stdcall * PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void *userParam);
extern PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback;

typedef GLuint (__stdcall * PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
extern PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog;

typedef void (__stdcall * PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
extern PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup;

typedef void (__stdcall * PFNGLPOPDEBUGGROUPPROC)(void);
extern PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup;

typedef void (__stdcall * PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
extern PFNGLOBJECTLABELPROC glad_glObjectLabel;

typedef void (__stdcall * PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
extern PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel;

typedef void (__stdcall * PFNGLOBJECTPTRLABELPROC)(const void *ptr, GLsizei length, const GLchar *label);
extern PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel;

typedef void (__stdcall * PFNGLGETOBJECTPTRLABELPROC)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
extern PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel;

typedef void (__stdcall * PFNGLGETPOINTERVPROC)(GLenum pname, void **params);
extern PFNGLGETPOINTERVPROC glad_glGetPointerv;

#line 3244 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_4_4;
typedef void (__stdcall * PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
extern PFNGLBUFFERSTORAGEPROC glad_glBufferStorage;

typedef void (__stdcall * PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage;

typedef void (__stdcall * PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage;

typedef void (__stdcall * PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
extern PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase;

typedef void (__stdcall * PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
extern PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange;

typedef void (__stdcall * PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint *textures);
extern PFNGLBINDTEXTURESPROC glad_glBindTextures;

typedef void (__stdcall * PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint *samplers);
extern PFNGLBINDSAMPLERSPROC glad_glBindSamplers;

typedef void (__stdcall * PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint *textures);
extern PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures;

typedef void (__stdcall * PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
extern PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers;

#line 3275 "d:\\opengl\\include\\glad\\glad.h"


extern int GLAD_GL_VERSION_4_5;
typedef void (__stdcall * PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
extern PFNGLCLIPCONTROLPROC glad_glClipControl;

typedef void (__stdcall * PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
extern PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks;

typedef void (__stdcall * PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
extern PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase;

typedef void (__stdcall * PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange;

typedef void (__stdcall * PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint *param);
extern PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv;

typedef void (__stdcall * PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint *param);
extern PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v;

typedef void (__stdcall * PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
extern PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v;

typedef void (__stdcall * PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint *buffers);
extern PFNGLCREATEBUFFERSPROC glad_glCreateBuffers;

typedef void (__stdcall * PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
extern PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage;

typedef void (__stdcall * PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
extern PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData;

typedef void (__stdcall * PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
extern PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData;

typedef void (__stdcall * PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData;

typedef void (__stdcall * PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData;

typedef void (__stdcall * PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData;

typedef void * (__stdcall * PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
extern PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer;

typedef void * (__stdcall * PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange;

typedef GLboolean (__stdcall * PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
extern PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer;

typedef void (__stdcall * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange;

typedef void (__stdcall * PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint *params);
extern PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv;

typedef void (__stdcall * PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64 *params);
extern PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v;

typedef void (__stdcall * PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void **params);
extern PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv;

typedef void (__stdcall * PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
extern PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData;

typedef void (__stdcall * PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
extern PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers;

typedef void (__stdcall * PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer;

typedef void (__stdcall * PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri;

typedef void (__stdcall * PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
extern PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture;

typedef void (__stdcall * PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer;

typedef void (__stdcall * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer;

typedef void (__stdcall * PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers;

typedef void (__stdcall * PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
extern PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer;

typedef void (__stdcall * PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
extern PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData;

typedef void (__stdcall * PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData;

typedef void (__stdcall * PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv;

typedef void (__stdcall * PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv;

typedef void (__stdcall * PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv;

typedef void (__stdcall * PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi;

typedef void (__stdcall * PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer;

typedef GLenum (__stdcall * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus;

typedef void (__stdcall * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint *param);
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv;

typedef void (__stdcall * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv;

typedef void (__stdcall * PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
extern PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers;

typedef void (__stdcall * PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage;

typedef void (__stdcall * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample;

typedef void (__stdcall * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint *params);
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv;

typedef void (__stdcall * PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint *textures);
extern PFNGLCREATETEXTURESPROC glad_glCreateTextures;

typedef void (__stdcall * PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
extern PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer;

typedef void (__stdcall * PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange;

typedef void (__stdcall * PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
extern PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D;

typedef void (__stdcall * PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D;

typedef void (__stdcall * PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
extern PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D;

typedef void (__stdcall * PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample;

typedef void (__stdcall * PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample;

typedef void (__stdcall * PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D;

typedef void (__stdcall * PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D;

typedef void (__stdcall * PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D;

typedef void (__stdcall * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D;

typedef void (__stdcall * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D;

typedef void (__stdcall * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D;

typedef void (__stdcall * PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D;

typedef void (__stdcall * PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D;

typedef void (__stdcall * PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D;

typedef void (__stdcall * PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
extern PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf;

typedef void (__stdcall * PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat *param);
extern PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv;

typedef void (__stdcall * PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
extern PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri;

typedef void (__stdcall * PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint *params);
extern PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv;

typedef void (__stdcall * PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint *params);
extern PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv;

typedef void (__stdcall * PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint *param);
extern PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv;

typedef void (__stdcall * PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
extern PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap;

typedef void (__stdcall * PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
extern PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit;

typedef void (__stdcall * PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
extern PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage;

typedef void (__stdcall * PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage;

typedef void (__stdcall * PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat *params);
extern PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv;

typedef void (__stdcall * PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint *params);
extern PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv;

typedef void (__stdcall * PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat *params);
extern PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv;

typedef void (__stdcall * PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint *params);
extern PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv;

typedef void (__stdcall * PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint *params);
extern PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv;

typedef void (__stdcall * PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint *params);
extern PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv;

typedef void (__stdcall * PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
extern PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays;

typedef void (__stdcall * PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
extern PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib;

typedef void (__stdcall * PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
extern PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib;

typedef void (__stdcall * PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
extern PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer;

typedef void (__stdcall * PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer;

typedef void (__stdcall * PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
extern PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers;

typedef void (__stdcall * PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
extern PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding;

typedef void (__stdcall * PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat;

typedef void (__stdcall * PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat;

typedef void (__stdcall * PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat;

typedef void (__stdcall * PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
extern PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor;

typedef void (__stdcall * PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint *param);
extern PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv;

typedef void (__stdcall * PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
extern PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv;

typedef void (__stdcall * PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
extern PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv;

typedef void (__stdcall * PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint *samplers);
extern PFNGLCREATESAMPLERSPROC glad_glCreateSamplers;

typedef void (__stdcall * PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
extern PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines;

typedef void (__stdcall * PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint *ids);
extern PFNGLCREATEQUERIESPROC glad_glCreateQueries;

typedef void (__stdcall * PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v;

typedef void (__stdcall * PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv;

typedef void (__stdcall * PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v;

typedef void (__stdcall * PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv;

typedef void (__stdcall * PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
extern PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion;

typedef void (__stdcall * PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
extern PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage;

typedef void (__stdcall * PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
extern PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage;

typedef GLenum (__stdcall * PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
extern PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus;

typedef void (__stdcall * PFNGLGETNCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
extern PFNGLGETNCOMPRESSEDTEXIMAGEPROC glad_glGetnCompressedTexImage;

typedef void (__stdcall * PFNGLGETNTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
extern PFNGLGETNTEXIMAGEPROC glad_glGetnTexImage;

typedef void (__stdcall * PFNGLGETNUNIFORMDVPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
extern PFNGLGETNUNIFORMDVPROC glad_glGetnUniformdv;

typedef void (__stdcall * PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
extern PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv;

typedef void (__stdcall * PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
extern PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv;

typedef void (__stdcall * PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
extern PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv;

typedef void (__stdcall * PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
extern PFNGLREADNPIXELSPROC glad_glReadnPixels;

typedef void (__stdcall * PFNGLGETNMAPDVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
extern PFNGLGETNMAPDVPROC glad_glGetnMapdv;

typedef void (__stdcall * PFNGLGETNMAPFVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
extern PFNGLGETNMAPFVPROC glad_glGetnMapfv;

typedef void (__stdcall * PFNGLGETNMAPIVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
extern PFNGLGETNMAPIVPROC glad_glGetnMapiv;

typedef void (__stdcall * PFNGLGETNPIXELMAPFVPROC)(GLenum map, GLsizei bufSize, GLfloat *values);
extern PFNGLGETNPIXELMAPFVPROC glad_glGetnPixelMapfv;

typedef void (__stdcall * PFNGLGETNPIXELMAPUIVPROC)(GLenum map, GLsizei bufSize, GLuint *values);
extern PFNGLGETNPIXELMAPUIVPROC glad_glGetnPixelMapuiv;

typedef void (__stdcall * PFNGLGETNPIXELMAPUSVPROC)(GLenum map, GLsizei bufSize, GLushort *values);
extern PFNGLGETNPIXELMAPUSVPROC glad_glGetnPixelMapusv;

typedef void (__stdcall * PFNGLGETNPOLYGONSTIPPLEPROC)(GLsizei bufSize, GLubyte *pattern);
extern PFNGLGETNPOLYGONSTIPPLEPROC glad_glGetnPolygonStipple;

typedef void (__stdcall * PFNGLGETNCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
extern PFNGLGETNCOLORTABLEPROC glad_glGetnColorTable;

typedef void (__stdcall * PFNGLGETNCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
extern PFNGLGETNCONVOLUTIONFILTERPROC glad_glGetnConvolutionFilter;

typedef void (__stdcall * PFNGLGETNSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
extern PFNGLGETNSEPARABLEFILTERPROC glad_glGetnSeparableFilter;

typedef void (__stdcall * PFNGLGETNHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
extern PFNGLGETNHISTOGRAMPROC glad_glGetnHistogram;

typedef void (__stdcall * PFNGLGETNMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
extern PFNGLGETNMINMAXPROC glad_glGetnMinmax;

typedef void (__stdcall * PFNGLTEXTUREBARRIERPROC)(void);
extern PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier;

#line 3645 "d:\\opengl\\include\\glad\\glad.h"


}
#line 3649 "d:\\opengl\\include\\glad\\glad.h"

#line 3651 "d:\\opengl\\include\\glad\\glad.h"
#line 9 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "d:\\opengl\\include\\glfw\\glfw3.h"
































extern "C" {
#line 35 "d:\\opengl\\include\\glfw\\glfw3.h"
























































#line 92 "d:\\opengl\\include\\glfw\\glfw3.h"

















#line 110 "d:\\opengl\\include\\glfw\\glfw3.h"






#line 117 "d:\\opengl\\include\\glfw\\glfw3.h"




























#line 146 "d:\\opengl\\include\\glfw\\glfw3.h"
 

#line 149 "d:\\opengl\\include\\glfw\\glfw3.h"




#line 154 "d:\\opengl\\include\\glfw\\glfw3.h"




#line 159 "d:\\opengl\\include\\glfw\\glfw3.h"




#line 164 "d:\\opengl\\include\\glfw\\glfw3.h"




#line 169 "d:\\opengl\\include\\glfw\\glfw3.h"

#line 171 "d:\\opengl\\include\\glfw\\glfw3.h"
  #line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\um\\gl\\gl.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 172 "d:\\opengl\\include\\glfw\\glfw3.h"
  

#line 175 "d:\\opengl\\include\\glfw\\glfw3.h"
 #line 176 "d:\\opengl\\include\\glfw\\glfw3.h"
 

#line 179 "d:\\opengl\\include\\glfw\\glfw3.h"
#line 180 "d:\\opengl\\include\\glfw\\glfw3.h"







#line 188 "d:\\opengl\\include\\glfw\\glfw3.h"







#line 196 "d:\\opengl\\include\\glfw\\glfw3.h"


#line 199 "d:\\opengl\\include\\glfw\\glfw3.h"


#line 202 "d:\\opengl\\include\\glfw\\glfw3.h"
 
 
#line 205 "d:\\opengl\\include\\glfw\\glfw3.h"


































































































































































































































































































































































































































































































































































typedef void (*GLFWglproc)(void);













typedef void (*GLFWvkproc)(void);











typedef struct GLFWmonitor GLFWmonitor;











typedef struct GLFWwindow GLFWwindow;











typedef struct GLFWcursor GLFWcursor;















typedef void (* GLFWerrorfun)(int,const char*);


















typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int);

















typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int);















typedef void (* GLFWwindowclosefun)(GLFWwindow*);















typedef void (* GLFWwindowrefreshfun)(GLFWwindow*);
















typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int);

















typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int);

















typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int);




















typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int);


















typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double);
















typedef void (* GLFWcursorenterfun)(GLFWwindow*,int);
















typedef void (* GLFWscrollfun)(GLFWwindow*,double,double);




















typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int);
















typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int);




















typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int);
















typedef void (* GLFWdropfun)(GLFWwindow*,int,const char**);















typedef void (* GLFWmonitorfun)(GLFWmonitor*,int);
















typedef void (* GLFWjoystickfun)(int,int);













typedef struct GLFWvidmode
{
    

    int width;
    

    int height;
    

    int redBits;
    

    int greenBits;
    

    int blueBits;
    

    int refreshRate;
} GLFWvidmode;












typedef struct GLFWgammaramp
{
    

    unsigned short* red;
    

    unsigned short* green;
    

    unsigned short* blue;
    

    unsigned int size;
} GLFWgammaramp;









typedef struct GLFWimage
{
    

    int width;
    

    int height;
    

    unsigned char* pixels;
} GLFWimage;






































 int glfwInit(void);































 void glfwTerminate(void);


























 void glfwGetVersion(int* major, int* minor, int* rev);






























 const char* glfwGetVersionString(void);

































 GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun);




























 GLFWmonitor** glfwGetMonitors(int* count);























 GLFWmonitor* glfwGetPrimaryMonitor(void);
























 void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);

































 void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM);

























 const char* glfwGetMonitorName(GLFWmonitor* monitor);






















 GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun cbfun);
































 const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);



























 const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);





















 void glfwSetGamma(GLFWmonitor* monitor, float gamma);

























 const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);





























 void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);

















 void glfwDefaultWindowHints(void);



























 void glfwWindowHint(int hint, int value);
























































































































 GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share);




























 void glfwDestroyWindow(GLFWwindow* window);



















 int glfwWindowShouldClose(GLFWwindow* window);





















 void glfwSetWindowShouldClose(GLFWwindow* window, int value);
























 void glfwSetWindowTitle(GLFWwindow* window, const char* title);






































 void glfwSetWindowIcon(GLFWwindow* window, int count, const GLFWimage* images);



























 void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);






























 void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);





























 void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);







































 void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);







































 void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom);





































 void glfwSetWindowSize(GLFWwindow* window, int width, int height);




























 void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);




































 void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom);


























 void glfwIconifyWindow(GLFWwindow* window);


























 void glfwRestoreWindow(GLFWwindow* window);
























 void glfwMaximizeWindow(GLFWwindow* window);





















 void glfwShowWindow(GLFWwindow* window);





















 void glfwHideWindow(GLFWwindow* window);



























 void glfwFocusWindow(GLFWwindow* window);





















 GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);
















































 void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
































 int glfwGetWindowAttrib(GLFWwindow* window, int attrib);






















 void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);




















 void* glfwGetWindowUserPointer(GLFWwindow* window);























 GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun cbfun);
























 GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun cbfun);
































 GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun cbfun);




























 GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun cbfun);



























 GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun cbfun);






















 GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun cbfun);






















 GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun cbfun);


































 void glfwPollEvents(void);












































 void glfwWaitEvents(void);













































 void glfwWaitEventsTimeout(double timeout);























 void glfwPostEmptyEvent(void);






















 int glfwGetInputMode(GLFWwindow* window, int mode);















































 void glfwSetInputMode(GLFWwindow* window, int mode, int value);
























































 const char* glfwGetKeyName(int key, int scancode);







































 int glfwGetKey(GLFWwindow* window, int key);




























 int glfwGetMouseButton(GLFWwindow* window, int button);





































 void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);




































 void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);







































 GLFWcursor* glfwCreateCursor(const GLFWimage* image, int xhot, int yhot);
























 GLFWcursor* glfwCreateStandardCursor(int shape);























 void glfwDestroyCursor(GLFWcursor* cursor);


























 void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor);










































 GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun cbfun);





































 GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun cbfun);
































 GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* window, GLFWcharmodsfun cbfun);





























 GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun cbfun);
























 GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun cbfun);























 GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun cbfun);


























 GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun cbfun);



























 GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun cbfun);



















 int glfwJoystickPresent(int joy);

































 const float* glfwGetJoystickAxes(int joy, int* count);


































 const unsigned char* glfwGetJoystickButtons(int joy, int* count);































 const char* glfwGetJoystickName(int joy);






















 GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun cbfun);
























 void glfwSetClipboardString(GLFWwindow* window, const char* string);





























 const char* glfwGetClipboardString(GLFWwindow* window);


























 double glfwGetTime(void);


























 void glfwSetTime(double time);





















 uint64_t glfwGetTimerValue(void);



















 uint64_t glfwGetTimerFrequency(void);

































 void glfwMakeContextCurrent(GLFWwindow* window);




















 GLFWwindow* glfwGetCurrentContext(void);

































 void glfwSwapBuffers(GLFWwindow* window);














































 void glfwSwapInterval(int interval);





































 int glfwExtensionSupported(const char* extension);









































 GLFWglproc glfwGetProcAddress(const char* procname);

























 int glfwVulkanSupported(void);











































 const char** glfwGetRequiredInstanceExtensions(uint32_t* count);































































































































#line 4222 "d:\\opengl\\include\\glfw\\glfw3.h"






















}
#line 4246 "d:\\opengl\\include\\glfw\\glfw3.h"

#line 4248 "d:\\opengl\\include\\glfw\\glfw3.h"

#line 10 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"






































































































#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\_fixes.hpp"



























#line 104 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"


#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cassert"



#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\assert.h"









#line 11 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\assert.h"



__pragma(pack(push, 8)) extern "C" {











    __declspec(dllimport) void __cdecl _wassert(
          wchar_t const* _Message,
          wchar_t const* _File,
            unsigned       _Line
        );

    




#line 38 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\assert.h"



} __pragma(pack(pop))
#line 5 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cassert"





#line 4 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















#line 27 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 29 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"
#pragma once




















#line 23 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

#line 25 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

#line 27 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

#line 29 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"











#line 41 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"
















































































#line 122 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"














#line 137 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"



#line 141 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"





































#line 179 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"


#line 182 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"



















#line 202 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

























#line 228 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"














































#line 275 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"






#line 282 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"


#line 285 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"


#line 288 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"


#line 291 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"


#line 294 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"


#line 297 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"


#line 300 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"


#line 303 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"


#line 306 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"





























#line 336 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"










#line 347 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"
#line 348 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"



#line 352 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

#line 354 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"




#line 359 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

#line 361 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

#line 363 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

#line 365 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

#line 367 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"

#line 369 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"













#line 383 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"




#line 388 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"




#line 393 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"





#line 399 "d:\\vsprojects\\openglproject\\includes\\glm\\simd\\platform.h"
#line 34 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 41 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 43 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 45 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"



#line 49 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
































#line 82 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"



#line 86 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"


#line 89 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"


#line 92 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"


#line 95 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"


#line 98 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 100 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 102 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"











#line 114 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"


#line 117 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"



#line 121 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 123 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"









#line 133 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"











#line 146 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





#line 152 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 159 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 164 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





#line 170 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"









#line 180 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 185 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 192 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 197 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





#line 203 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 208 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 215 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 220 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





#line 226 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 231 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 238 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 243 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 250 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 255 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 262 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 267 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 274 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





#line 280 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 282 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





#line 288 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





#line 294 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"









#line 304 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 306 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 308 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"


#line 311 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"



#line 315 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 317 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"








#line 326 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"











#line 338 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 345 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 347 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

































#line 381 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"








#line 390 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





#line 396 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"










#line 407 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"







#line 415 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"


#line 418 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"















#line 434 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"


#line 437 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"















#line 453 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




#line 458 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"



#line 462 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 464 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 466 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"










#line 477 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




























#line 506 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 507 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
















#line 524 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"







#line 532 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"







































#line 572 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"















#line 588 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

namespace glm
{
	using std::size_t;


#line 595 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
		typedef int length_t;
#line 597 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
}







	namespace glm
	{
		template<typename T, std::size_t N>
		constexpr std::size_t countof(T const (&)[N])
		{
			return N;
		}
	}









#line 623 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"




namespace glm{
namespace detail
{
	template<typename T>
	struct is_int
	{
		enum test {value = 0};
	};

	template<>
	struct is_int<unsigned int>
	{
		enum test {value = ~0};
	};

	template<>
	struct is_int<signed int>
	{
		enum test {value = ~0};
	};
}

	typedef unsigned int	uint;
}






#line 658 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

namespace glm{
namespace detail
{

		typedef std::uint64_t						uint64;
		typedef std::int64_t						int64;

















#line 683 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
}
}







namespace glm{
namespace detail
{
	using std::make_unsigned;
}
}













































































#line 776 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"








#line 785 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"










#line 796 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 798 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 800 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 807 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 809 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"










#line 820 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"














#line 835 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 837 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






#line 844 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 846 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"








#line 855 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"










#line 866 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 868 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 870 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 872 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"



#line 876 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 878 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 880 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 882 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"



#line 886 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 888 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 890 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 892 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"



#line 896 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 898 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 900 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 902 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"



#line 906 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 908 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 910 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 912 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"































































































































































































































#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 106 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"

#pragma once





#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cassert"



#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\assert.h"









#line 11 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\assert.h"



__pragma(pack(push, 8)) extern "C" {











    __declspec(dllimport) void __cdecl _wassert(
          wchar_t const* _Message,
          wchar_t const* _File,
            unsigned       _Line
        );

    




#line 38 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\assert.h"



} __pragma(pack(pop))
#line 5 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cassert"





#line 114 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\fwd.hpp"
#pragma once

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"
#pragma once

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 4 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"

namespace glm
{
	
	enum qualifier
	{
		packed_highp, 
		packed_mediump, 
		packed_lowp, 






#line 20 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"

		highp = packed_highp, 
		mediump = packed_mediump, 
		lowp = packed_lowp, 
		packed = packed_highp, 



#line 29 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"
			defaultp = highp
#line 31 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"
	};

	typedef qualifier precision;

	template<length_t L, typename T, qualifier Q = defaultp> struct vec;
	template<length_t C, length_t R, typename T, qualifier Q = defaultp> struct mat;
	template<typename T, qualifier Q = defaultp> struct qua;


		template <typename T, qualifier Q = defaultp> using tvec1 = vec<1, T, Q>;
		template <typename T, qualifier Q = defaultp> using tvec2 = vec<2, T, Q>;
		template <typename T, qualifier Q = defaultp> using tvec3 = vec<3, T, Q>;
		template <typename T, qualifier Q = defaultp> using tvec4 = vec<4, T, Q>;
		template <typename T, qualifier Q = defaultp> using tmat2x2 = mat<2, 2, T, Q>;
		template <typename T, qualifier Q = defaultp> using tmat2x3 = mat<2, 3, T, Q>;
		template <typename T, qualifier Q = defaultp> using tmat2x4 = mat<2, 4, T, Q>;
		template <typename T, qualifier Q = defaultp> using tmat3x2 = mat<3, 2, T, Q>;
		template <typename T, qualifier Q = defaultp> using tmat3x3 = mat<3, 3, T, Q>;
		template <typename T, qualifier Q = defaultp> using tmat3x4 = mat<3, 4, T, Q>;
		template <typename T, qualifier Q = defaultp> using tmat4x2 = mat<4, 2, T, Q>;
		template <typename T, qualifier Q = defaultp> using tmat4x3 = mat<4, 3, T, Q>;
		template <typename T, qualifier Q = defaultp> using tmat4x4 = mat<4, 4, T, Q>;
		template <typename T, qualifier Q = defaultp> using tquat = qua<T, Q>;
#line 55 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"

namespace detail
{
	template<glm::qualifier P>
	struct is_aligned
	{
		static const bool value = false;
	};



















#line 83 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"

	template<length_t L, typename T, bool is_aligned>
	struct storage
	{
		typedef struct type {
			T data[L];
		} type;
	};


		template<length_t L, typename T>
		struct storage<L, T, true>
		{
			typedef struct alignas(L * sizeof(T)) type {
				T data[L];
			} type;
		};

		template<typename T>
		struct storage<3, T, true>
		{
			typedef struct alignas(4 * sizeof(T)) type {
				T data[4];
			} type;
		};
#line 109 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"





































#line 147 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"







#line 155 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"













#line 169 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"



















#line 189 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\qualifier.hpp"

	enum genTypeEnum
	{
		GENTYPE_VEC,
		GENTYPE_MAT,
		GENTYPE_QUAT
	};

	template <typename genType>
	struct genTypeTrait
	{};

	template <length_t C, length_t R, typename T>
	struct genTypeTrait<mat<C, R, T> >
	{
		static const genTypeEnum GENTYPE = GENTYPE_MAT;
	};

	template<typename genType, genTypeEnum type>
	struct init_gentype
	{
	};

	template<typename genType>
	struct init_gentype<genType, GENTYPE_QUAT>
	{
		 inline constexpr static genType identity()
		{
			return genType(1, 0, 0, 0);
		}
	};

	template<typename genType>
	struct init_gentype<genType, GENTYPE_MAT>
	{
		 inline constexpr static genType identity()
		{
			return genType(1);
		}
	};
}
}
#line 4 "d:\\vsprojects\\openglproject\\includes\\glm\\fwd.hpp"

namespace glm
{

	typedef std::int8_t				int8;
	typedef std::int16_t			int16;
	typedef std::int32_t			int32;
	typedef std::int64_t			int64;

	typedef std::uint8_t			uint8;
	typedef std::uint16_t			uint16;
	typedef std::uint32_t			uint32;
	typedef std::uint64_t			uint64;










#line 28 "d:\\vsprojects\\openglproject\\includes\\glm\\fwd.hpp"

	

	typedef int8					lowp_i8;
	typedef int8					mediump_i8;
	typedef int8					highp_i8;
	typedef int8					i8;

	typedef int8					lowp_int8;
	typedef int8					mediump_int8;
	typedef int8					highp_int8;

	typedef int8					lowp_int8_t;
	typedef int8					mediump_int8_t;
	typedef int8					highp_int8_t;
	typedef int8					int8_t;

	typedef int16					lowp_i16;
	typedef int16					mediump_i16;
	typedef int16					highp_i16;
	typedef int16					i16;

	typedef int16					lowp_int16;
	typedef int16					mediump_int16;
	typedef int16					highp_int16;

	typedef int16					lowp_int16_t;
	typedef int16					mediump_int16_t;
	typedef int16					highp_int16_t;
	typedef int16					int16_t;

	typedef int32					lowp_i32;
	typedef int32					mediump_i32;
	typedef int32					highp_i32;
	typedef int32					i32;

	typedef int32					lowp_int32;
	typedef int32					mediump_int32;
	typedef int32					highp_int32;

	typedef int32					lowp_int32_t;
	typedef int32					mediump_int32_t;
	typedef int32					highp_int32_t;
	typedef int32					int32_t;

	typedef int64					lowp_i64;
	typedef int64					mediump_i64;
	typedef int64					highp_i64;
	typedef int64					i64;

	typedef int64					lowp_int64;
	typedef int64					mediump_int64;
	typedef int64					highp_int64;

	typedef int64					lowp_int64_t;
	typedef int64					mediump_int64_t;
	typedef int64					highp_int64_t;
	typedef int64					int64_t;

	

	typedef uint8					lowp_u8;
	typedef uint8					mediump_u8;
	typedef uint8					highp_u8;
	typedef uint8					u8;

	typedef uint8					lowp_uint8;
	typedef uint8					mediump_uint8;
	typedef uint8					highp_uint8;

	typedef uint8					lowp_uint8_t;
	typedef uint8					mediump_uint8_t;
	typedef uint8					highp_uint8_t;
	typedef uint8					uint8_t;

	typedef uint16					lowp_u16;
	typedef uint16					mediump_u16;
	typedef uint16					highp_u16;
	typedef uint16					u16;

	typedef uint16					lowp_uint16;
	typedef uint16					mediump_uint16;
	typedef uint16					highp_uint16;

	typedef uint16					lowp_uint16_t;
	typedef uint16					mediump_uint16_t;
	typedef uint16					highp_uint16_t;
	typedef uint16					uint16_t;

	typedef uint32					lowp_u32;
	typedef uint32					mediump_u32;
	typedef uint32					highp_u32;
	typedef uint32					u32;

	typedef uint32					lowp_uint32;
	typedef uint32					mediump_uint32;
	typedef uint32					highp_uint32;

	typedef uint32					lowp_uint32_t;
	typedef uint32					mediump_uint32_t;
	typedef uint32					highp_uint32_t;
	typedef uint32					uint32_t;

	typedef uint64					lowp_u64;
	typedef uint64					mediump_u64;
	typedef uint64					highp_u64;
	typedef uint64					u64;

	typedef uint64					lowp_uint64;
	typedef uint64					mediump_uint64;
	typedef uint64					highp_uint64;

	typedef uint64					lowp_uint64_t;
	typedef uint64					mediump_uint64_t;
	typedef uint64					highp_uint64_t;
	typedef uint64					uint64_t;

	

	typedef float					lowp_f32;
	typedef float					mediump_f32;
	typedef float					highp_f32;
	typedef float					f32;

	typedef float					lowp_float32;
	typedef float					mediump_float32;
	typedef float					highp_float32;
	typedef float					float32;

	typedef float					lowp_float32_t;
	typedef float					mediump_float32_t;
	typedef float					highp_float32_t;
	typedef float					float32_t;


	typedef double					lowp_f64;
	typedef double					mediump_f64;
	typedef double					highp_f64;
	typedef double					f64;

	typedef double					lowp_float64;
	typedef double					mediump_float64;
	typedef double					highp_float64;
	typedef double					float64;

	typedef double					lowp_float64_t;
	typedef double					mediump_float64_t;
	typedef double					highp_float64_t;
	typedef double					float64_t;

	

	typedef vec<1, bool, lowp>		lowp_bvec1;
	typedef vec<2, bool, lowp>		lowp_bvec2;
	typedef vec<3, bool, lowp>		lowp_bvec3;
	typedef vec<4, bool, lowp>		lowp_bvec4;

	typedef vec<1, bool, mediump>	mediump_bvec1;
	typedef vec<2, bool, mediump>	mediump_bvec2;
	typedef vec<3, bool, mediump>	mediump_bvec3;
	typedef vec<4, bool, mediump>	mediump_bvec4;

	typedef vec<1, bool, highp>		highp_bvec1;
	typedef vec<2, bool, highp>		highp_bvec2;
	typedef vec<3, bool, highp>		highp_bvec3;
	typedef vec<4, bool, highp>		highp_bvec4;

	typedef vec<1, bool, defaultp>	bvec1;
	typedef vec<2, bool, defaultp>	bvec2;
	typedef vec<3, bool, defaultp>	bvec3;
	typedef vec<4, bool, defaultp>	bvec4;

	

	typedef vec<1, i32, lowp>		lowp_ivec1;
	typedef vec<2, i32, lowp>		lowp_ivec2;
	typedef vec<3, i32, lowp>		lowp_ivec3;
	typedef vec<4, i32, lowp>		lowp_ivec4;

	typedef vec<1, i32, mediump>	mediump_ivec1;
	typedef vec<2, i32, mediump>	mediump_ivec2;
	typedef vec<3, i32, mediump>	mediump_ivec3;
	typedef vec<4, i32, mediump>	mediump_ivec4;

	typedef vec<1, i32, highp>		highp_ivec1;
	typedef vec<2, i32, highp>		highp_ivec2;
	typedef vec<3, i32, highp>		highp_ivec3;
	typedef vec<4, i32, highp>		highp_ivec4;

	typedef vec<1, i32, defaultp>	ivec1;
	typedef vec<2, i32, defaultp>	ivec2;
	typedef vec<3, i32, defaultp>	ivec3;
	typedef vec<4, i32, defaultp>	ivec4;

	typedef vec<1, i8, lowp>		lowp_i8vec1;
	typedef vec<2, i8, lowp>		lowp_i8vec2;
	typedef vec<3, i8, lowp>		lowp_i8vec3;
	typedef vec<4, i8, lowp>		lowp_i8vec4;

	typedef vec<1, i8, mediump>		mediump_i8vec1;
	typedef vec<2, i8, mediump>		mediump_i8vec2;
	typedef vec<3, i8, mediump>		mediump_i8vec3;
	typedef vec<4, i8, mediump>		mediump_i8vec4;

	typedef vec<1, i8, highp>		highp_i8vec1;
	typedef vec<2, i8, highp>		highp_i8vec2;
	typedef vec<3, i8, highp>		highp_i8vec3;
	typedef vec<4, i8, highp>		highp_i8vec4;

	typedef vec<1, i8, defaultp>	i8vec1;
	typedef vec<2, i8, defaultp>	i8vec2;
	typedef vec<3, i8, defaultp>	i8vec3;
	typedef vec<4, i8, defaultp>	i8vec4;

	typedef vec<1, i16, lowp>		lowp_i16vec1;
	typedef vec<2, i16, lowp>		lowp_i16vec2;
	typedef vec<3, i16, lowp>		lowp_i16vec3;
	typedef vec<4, i16, lowp>		lowp_i16vec4;

	typedef vec<1, i16, mediump>	mediump_i16vec1;
	typedef vec<2, i16, mediump>	mediump_i16vec2;
	typedef vec<3, i16, mediump>	mediump_i16vec3;
	typedef vec<4, i16, mediump>	mediump_i16vec4;

	typedef vec<1, i16, highp>		highp_i16vec1;
	typedef vec<2, i16, highp>		highp_i16vec2;
	typedef vec<3, i16, highp>		highp_i16vec3;
	typedef vec<4, i16, highp>		highp_i16vec4;

	typedef vec<1, i16, defaultp>	i16vec1;
	typedef vec<2, i16, defaultp>	i16vec2;
	typedef vec<3, i16, defaultp>	i16vec3;
	typedef vec<4, i16, defaultp>	i16vec4;

	typedef vec<1, i32, lowp>		lowp_i32vec1;
	typedef vec<2, i32, lowp>		lowp_i32vec2;
	typedef vec<3, i32, lowp>		lowp_i32vec3;
	typedef vec<4, i32, lowp>		lowp_i32vec4;

	typedef vec<1, i32, mediump>	mediump_i32vec1;
	typedef vec<2, i32, mediump>	mediump_i32vec2;
	typedef vec<3, i32, mediump>	mediump_i32vec3;
	typedef vec<4, i32, mediump>	mediump_i32vec4;

	typedef vec<1, i32, highp>		highp_i32vec1;
	typedef vec<2, i32, highp>		highp_i32vec2;
	typedef vec<3, i32, highp>		highp_i32vec3;
	typedef vec<4, i32, highp>		highp_i32vec4;

	typedef vec<1, i32, defaultp>	i32vec1;
	typedef vec<2, i32, defaultp>	i32vec2;
	typedef vec<3, i32, defaultp>	i32vec3;
	typedef vec<4, i32, defaultp>	i32vec4;

	typedef vec<1, i64, lowp>		lowp_i64vec1;
	typedef vec<2, i64, lowp>		lowp_i64vec2;
	typedef vec<3, i64, lowp>		lowp_i64vec3;
	typedef vec<4, i64, lowp>		lowp_i64vec4;

	typedef vec<1, i64, mediump>	mediump_i64vec1;
	typedef vec<2, i64, mediump>	mediump_i64vec2;
	typedef vec<3, i64, mediump>	mediump_i64vec3;
	typedef vec<4, i64, mediump>	mediump_i64vec4;

	typedef vec<1, i64, highp>		highp_i64vec1;
	typedef vec<2, i64, highp>		highp_i64vec2;
	typedef vec<3, i64, highp>		highp_i64vec3;
	typedef vec<4, i64, highp>		highp_i64vec4;

	typedef vec<1, i64, defaultp>	i64vec1;
	typedef vec<2, i64, defaultp>	i64vec2;
	typedef vec<3, i64, defaultp>	i64vec3;
	typedef vec<4, i64, defaultp>	i64vec4;

	

	typedef vec<1, u32, lowp>		lowp_uvec1;
	typedef vec<2, u32, lowp>		lowp_uvec2;
	typedef vec<3, u32, lowp>		lowp_uvec3;
	typedef vec<4, u32, lowp>		lowp_uvec4;

	typedef vec<1, u32, mediump>	mediump_uvec1;
	typedef vec<2, u32, mediump>	mediump_uvec2;
	typedef vec<3, u32, mediump>	mediump_uvec3;
	typedef vec<4, u32, mediump>	mediump_uvec4;

	typedef vec<1, u32, highp>		highp_uvec1;
	typedef vec<2, u32, highp>		highp_uvec2;
	typedef vec<3, u32, highp>		highp_uvec3;
	typedef vec<4, u32, highp>		highp_uvec4;

	typedef vec<1, u32, defaultp>	uvec1;
	typedef vec<2, u32, defaultp>	uvec2;
	typedef vec<3, u32, defaultp>	uvec3;
	typedef vec<4, u32, defaultp>	uvec4;

	typedef vec<1, u8, lowp>		lowp_u8vec1;
	typedef vec<2, u8, lowp>		lowp_u8vec2;
	typedef vec<3, u8, lowp>		lowp_u8vec3;
	typedef vec<4, u8, lowp>		lowp_u8vec4;

	typedef vec<1, u8, mediump>		mediump_u8vec1;
	typedef vec<2, u8, mediump>		mediump_u8vec2;
	typedef vec<3, u8, mediump>		mediump_u8vec3;
	typedef vec<4, u8, mediump>		mediump_u8vec4;

	typedef vec<1, u8, highp>		highp_u8vec1;
	typedef vec<2, u8, highp>		highp_u8vec2;
	typedef vec<3, u8, highp>		highp_u8vec3;
	typedef vec<4, u8, highp>		highp_u8vec4;

	typedef vec<1, u8, defaultp>	u8vec1;
	typedef vec<2, u8, defaultp>	u8vec2;
	typedef vec<3, u8, defaultp>	u8vec3;
	typedef vec<4, u8, defaultp>	u8vec4;

	typedef vec<1, u16, lowp>		lowp_u16vec1;
	typedef vec<2, u16, lowp>		lowp_u16vec2;
	typedef vec<3, u16, lowp>		lowp_u16vec3;
	typedef vec<4, u16, lowp>		lowp_u16vec4;

	typedef vec<1, u16, mediump>	mediump_u16vec1;
	typedef vec<2, u16, mediump>	mediump_u16vec2;
	typedef vec<3, u16, mediump>	mediump_u16vec3;
	typedef vec<4, u16, mediump>	mediump_u16vec4;

	typedef vec<1, u16, highp>		highp_u16vec1;
	typedef vec<2, u16, highp>		highp_u16vec2;
	typedef vec<3, u16, highp>		highp_u16vec3;
	typedef vec<4, u16, highp>		highp_u16vec4;

	typedef vec<1, u16, defaultp>	u16vec1;
	typedef vec<2, u16, defaultp>	u16vec2;
	typedef vec<3, u16, defaultp>	u16vec3;
	typedef vec<4, u16, defaultp>	u16vec4;

	typedef vec<1, u32, lowp>		lowp_u32vec1;
	typedef vec<2, u32, lowp>		lowp_u32vec2;
	typedef vec<3, u32, lowp>		lowp_u32vec3;
	typedef vec<4, u32, lowp>		lowp_u32vec4;

	typedef vec<1, u32, mediump>	mediump_u32vec1;
	typedef vec<2, u32, mediump>	mediump_u32vec2;
	typedef vec<3, u32, mediump>	mediump_u32vec3;
	typedef vec<4, u32, mediump>	mediump_u32vec4;

	typedef vec<1, u32, highp>		highp_u32vec1;
	typedef vec<2, u32, highp>		highp_u32vec2;
	typedef vec<3, u32, highp>		highp_u32vec3;
	typedef vec<4, u32, highp>		highp_u32vec4;

	typedef vec<1, u32, defaultp>	u32vec1;
	typedef vec<2, u32, defaultp>	u32vec2;
	typedef vec<3, u32, defaultp>	u32vec3;
	typedef vec<4, u32, defaultp>	u32vec4;

	typedef vec<1, u64, lowp>		lowp_u64vec1;
	typedef vec<2, u64, lowp>		lowp_u64vec2;
	typedef vec<3, u64, lowp>		lowp_u64vec3;
	typedef vec<4, u64, lowp>		lowp_u64vec4;

	typedef vec<1, u64, mediump>	mediump_u64vec1;
	typedef vec<2, u64, mediump>	mediump_u64vec2;
	typedef vec<3, u64, mediump>	mediump_u64vec3;
	typedef vec<4, u64, mediump>	mediump_u64vec4;

	typedef vec<1, u64, highp>		highp_u64vec1;
	typedef vec<2, u64, highp>		highp_u64vec2;
	typedef vec<3, u64, highp>		highp_u64vec3;
	typedef vec<4, u64, highp>		highp_u64vec4;

	typedef vec<1, u64, defaultp>	u64vec1;
	typedef vec<2, u64, defaultp>	u64vec2;
	typedef vec<3, u64, defaultp>	u64vec3;
	typedef vec<4, u64, defaultp>	u64vec4;

	

	typedef vec<1, float, lowp>			lowp_vec1;
	typedef vec<2, float, lowp>			lowp_vec2;
	typedef vec<3, float, lowp>			lowp_vec3;
	typedef vec<4, float, lowp>			lowp_vec4;

	typedef vec<1, float, mediump>		mediump_vec1;
	typedef vec<2, float, mediump>		mediump_vec2;
	typedef vec<3, float, mediump>		mediump_vec3;
	typedef vec<4, float, mediump>		mediump_vec4;

	typedef vec<1, float, highp>		highp_vec1;
	typedef vec<2, float, highp>		highp_vec2;
	typedef vec<3, float, highp>		highp_vec3;
	typedef vec<4, float, highp>		highp_vec4;

	typedef vec<1, float, defaultp>		vec1;
	typedef vec<2, float, defaultp>		vec2;
	typedef vec<3, float, defaultp>		vec3;
	typedef vec<4, float, defaultp>		vec4;

	typedef vec<1, float, lowp>			lowp_fvec1;
	typedef vec<2, float, lowp>			lowp_fvec2;
	typedef vec<3, float, lowp>			lowp_fvec3;
	typedef vec<4, float, lowp>			lowp_fvec4;

	typedef vec<1, float, mediump>		mediump_fvec1;
	typedef vec<2, float, mediump>		mediump_fvec2;
	typedef vec<3, float, mediump>		mediump_fvec3;
	typedef vec<4, float, mediump>		mediump_fvec4;

	typedef vec<1, float, highp>		highp_fvec1;
	typedef vec<2, float, highp>		highp_fvec2;
	typedef vec<3, float, highp>		highp_fvec3;
	typedef vec<4, float, highp>		highp_fvec4;

	typedef vec<1, f32, defaultp>		fvec1;
	typedef vec<2, f32, defaultp>		fvec2;
	typedef vec<3, f32, defaultp>		fvec3;
	typedef vec<4, f32, defaultp>		fvec4;

	typedef vec<1, f32, lowp>			lowp_f32vec1;
	typedef vec<2, f32, lowp>			lowp_f32vec2;
	typedef vec<3, f32, lowp>			lowp_f32vec3;
	typedef vec<4, f32, lowp>			lowp_f32vec4;

	typedef vec<1, f32, mediump>		mediump_f32vec1;
	typedef vec<2, f32, mediump>		mediump_f32vec2;
	typedef vec<3, f32, mediump>		mediump_f32vec3;
	typedef vec<4, f32, mediump>		mediump_f32vec4;

	typedef vec<1, f32, highp>			highp_f32vec1;
	typedef vec<2, f32, highp>			highp_f32vec2;
	typedef vec<3, f32, highp>			highp_f32vec3;
	typedef vec<4, f32, highp>			highp_f32vec4;

	typedef vec<1, f32, defaultp>		f32vec1;
	typedef vec<2, f32, defaultp>		f32vec2;
	typedef vec<3, f32, defaultp>		f32vec3;
	typedef vec<4, f32, defaultp>		f32vec4;

	typedef vec<1, f64, lowp>			lowp_dvec1;
	typedef vec<2, f64, lowp>			lowp_dvec2;
	typedef vec<3, f64, lowp>			lowp_dvec3;
	typedef vec<4, f64, lowp>			lowp_dvec4;

	typedef vec<1, f64, mediump>		mediump_dvec1;
	typedef vec<2, f64, mediump>		mediump_dvec2;
	typedef vec<3, f64, mediump>		mediump_dvec3;
	typedef vec<4, f64, mediump>		mediump_dvec4;

	typedef vec<1, f64, highp>			highp_dvec1;
	typedef vec<2, f64, highp>			highp_dvec2;
	typedef vec<3, f64, highp>			highp_dvec3;
	typedef vec<4, f64, highp>			highp_dvec4;

	typedef vec<1, f64, defaultp>		dvec1;
	typedef vec<2, f64, defaultp>		dvec2;
	typedef vec<3, f64, defaultp>		dvec3;
	typedef vec<4, f64, defaultp>		dvec4;

	typedef vec<1, f64, lowp>			lowp_f64vec1;
	typedef vec<2, f64, lowp>			lowp_f64vec2;
	typedef vec<3, f64, lowp>			lowp_f64vec3;
	typedef vec<4, f64, lowp>			lowp_f64vec4;

	typedef vec<1, f64, mediump>		mediump_f64vec1;
	typedef vec<2, f64, mediump>		mediump_f64vec2;
	typedef vec<3, f64, mediump>		mediump_f64vec3;
	typedef vec<4, f64, mediump>		mediump_f64vec4;

	typedef vec<1, f64, highp>			highp_f64vec1;
	typedef vec<2, f64, highp>			highp_f64vec2;
	typedef vec<3, f64, highp>			highp_f64vec3;
	typedef vec<4, f64, highp>			highp_f64vec4;

	typedef vec<1, f64, defaultp>		f64vec1;
	typedef vec<2, f64, defaultp>		f64vec2;
	typedef vec<3, f64, defaultp>		f64vec3;
	typedef vec<4, f64, defaultp>		f64vec4;

	

	typedef mat<2, 2, f32, lowp>		lowp_mat2;
	typedef mat<3, 3, f32, lowp>		lowp_mat3;
	typedef mat<4, 4, f32, lowp>		lowp_mat4;

	typedef mat<2, 2, f32, mediump>		mediump_mat2;
	typedef mat<3, 3, f32, mediump>		mediump_mat3;
	typedef mat<4, 4, f32, mediump>		mediump_mat4;

	typedef mat<2, 2, f32, highp>		highp_mat2;
	typedef mat<3, 3, f32, highp>		highp_mat3;
	typedef mat<4, 4, f32, highp>		highp_mat4;

	typedef mat<2, 2, f32, defaultp>	mat2;
	typedef mat<3, 3, f32, defaultp>	mat3;
	typedef mat<4, 4, f32, defaultp>	mat4;

	typedef mat<2, 2, f32, lowp>		lowp_fmat2;
	typedef mat<3, 3, f32, lowp>		lowp_fmat3;
	typedef mat<4, 4, f32, lowp>		lowp_fmat4;

	typedef mat<2, 2, f32, mediump>		mediump_fmat2;
	typedef mat<3, 3, f32, mediump>		mediump_fmat3;
	typedef mat<4, 4, f32, mediump>		mediump_fmat4;

	typedef mat<2, 2, f32, highp>		highp_fmat2;
	typedef mat<3, 3, f32, highp>		highp_fmat3;
	typedef mat<4, 4, f32, highp>		highp_fmat4;

	typedef mat<2, 2, f32, defaultp>	fmat2;
	typedef mat<3, 3, f32, defaultp>	fmat3;
	typedef mat<4, 4, f32, defaultp>	fmat4;

	typedef mat<2, 2, f32, lowp>		lowp_f32mat2;
	typedef mat<3, 3, f32, lowp>		lowp_f32mat3;
	typedef mat<4, 4, f32, lowp>		lowp_f32mat4;

	typedef mat<2, 2, f32, mediump>		mediump_f32mat2;
	typedef mat<3, 3, f32, mediump>		mediump_f32mat3;
	typedef mat<4, 4, f32, mediump>		mediump_f32mat4;

	typedef mat<2, 2, f32, highp>		highp_f32mat2;
	typedef mat<3, 3, f32, highp>		highp_f32mat3;
	typedef mat<4, 4, f32, highp>		highp_f32mat4;

	typedef mat<2, 2, f32, defaultp>	f32mat2;
	typedef mat<3, 3, f32, defaultp>	f32mat3;
	typedef mat<4, 4, f32, defaultp>	f32mat4;

	typedef mat<2, 2, f64, lowp>		lowp_dmat2;
	typedef mat<3, 3, f64, lowp>		lowp_dmat3;
	typedef mat<4, 4, f64, lowp>		lowp_dmat4;

	typedef mat<2, 2, f64, mediump>		mediump_dmat2;
	typedef mat<3, 3, f64, mediump>		mediump_dmat3;
	typedef mat<4, 4, f64, mediump>		mediump_dmat4;

	typedef mat<2, 2, f64, highp>		highp_dmat2;
	typedef mat<3, 3, f64, highp>		highp_dmat3;
	typedef mat<4, 4, f64, highp>		highp_dmat4;

	typedef mat<2, 2, f64, defaultp>	dmat2;
	typedef mat<3, 3, f64, defaultp>	dmat3;
	typedef mat<4, 4, f64, defaultp>	dmat4;

	typedef mat<2, 2, f64, lowp>		lowp_f64mat2;
	typedef mat<3, 3, f64, lowp>		lowp_f64mat3;
	typedef mat<4, 4, f64, lowp>		lowp_f64mat4;

	typedef mat<2, 2, f64, mediump>		mediump_f64mat2;
	typedef mat<3, 3, f64, mediump>		mediump_f64mat3;
	typedef mat<4, 4, f64, mediump>		mediump_f64mat4;

	typedef mat<2, 2, f64, highp>		highp_f64mat2;
	typedef mat<3, 3, f64, highp>		highp_f64mat3;
	typedef mat<4, 4, f64, highp>		highp_f64mat4;

	typedef mat<2, 2, f64, defaultp>	f64mat2;
	typedef mat<3, 3, f64, defaultp>	f64mat3;
	typedef mat<4, 4, f64, defaultp>	f64mat4;

	

	typedef mat<2, 2, f32, lowp>		lowp_mat2x2;
	typedef mat<2, 3, f32, lowp>		lowp_mat2x3;
	typedef mat<2, 4, f32, lowp>		lowp_mat2x4;
	typedef mat<3, 2, f32, lowp>		lowp_mat3x2;
	typedef mat<3, 3, f32, lowp>		lowp_mat3x3;
	typedef mat<3, 4, f32, lowp>		lowp_mat3x4;
	typedef mat<4, 2, f32, lowp>		lowp_mat4x2;
	typedef mat<4, 3, f32, lowp>		lowp_mat4x3;
	typedef mat<4, 4, f32, lowp>		lowp_mat4x4;

	typedef mat<2, 2, f32, mediump>		mediump_mat2x2;
	typedef mat<2, 3, f32, mediump>		mediump_mat2x3;
	typedef mat<2, 4, f32, mediump>		mediump_mat2x4;
	typedef mat<3, 2, f32, mediump>		mediump_mat3x2;
	typedef mat<3, 3, f32, mediump>		mediump_mat3x3;
	typedef mat<3, 4, f32, mediump>		mediump_mat3x4;
	typedef mat<4, 2, f32, mediump>		mediump_mat4x2;
	typedef mat<4, 3, f32, mediump>		mediump_mat4x3;
	typedef mat<4, 4, f32, mediump>		mediump_mat4x4;

	typedef mat<2, 2, f32, highp>		highp_mat2x2;
	typedef mat<2, 3, f32, highp>		highp_mat2x3;
	typedef mat<2, 4, f32, highp>		highp_mat2x4;
	typedef mat<3, 2, f32, highp>		highp_mat3x2;
	typedef mat<3, 3, f32, highp>		highp_mat3x3;
	typedef mat<3, 4, f32, highp>		highp_mat3x4;
	typedef mat<4, 2, f32, highp>		highp_mat4x2;
	typedef mat<4, 3, f32, highp>		highp_mat4x3;
	typedef mat<4, 4, f32, highp>		highp_mat4x4;

	typedef mat<2, 2, f32, defaultp>	mat2x2;
	typedef mat<3, 2, f32, defaultp>	mat3x2;
	typedef mat<4, 2, f32, defaultp>	mat4x2;
	typedef mat<2, 3, f32, defaultp>	mat2x3;
	typedef mat<3, 3, f32, defaultp>	mat3x3;
	typedef mat<4, 3, f32, defaultp>	mat4x3;
	typedef mat<2, 4, f32, defaultp>	mat2x4;
	typedef mat<3, 4, f32, defaultp>	mat3x4;
	typedef mat<4, 4, f32, defaultp>	mat4x4;

	typedef mat<2, 2, f32, lowp>		lowp_fmat2x2;
	typedef mat<2, 3, f32, lowp>		lowp_fmat2x3;
	typedef mat<2, 4, f32, lowp>		lowp_fmat2x4;
	typedef mat<3, 2, f32, lowp>		lowp_fmat3x2;
	typedef mat<3, 3, f32, lowp>		lowp_fmat3x3;
	typedef mat<3, 4, f32, lowp>		lowp_fmat3x4;
	typedef mat<4, 2, f32, lowp>		lowp_fmat4x2;
	typedef mat<4, 3, f32, lowp>		lowp_fmat4x3;
	typedef mat<4, 4, f32, lowp>		lowp_fmat4x4;

	typedef mat<2, 2, f32, mediump>		mediump_fmat2x2;
	typedef mat<2, 3, f32, mediump>		mediump_fmat2x3;
	typedef mat<2, 4, f32, mediump>		mediump_fmat2x4;
	typedef mat<3, 2, f32, mediump>		mediump_fmat3x2;
	typedef mat<3, 3, f32, mediump>		mediump_fmat3x3;
	typedef mat<3, 4, f32, mediump>		mediump_fmat3x4;
	typedef mat<4, 2, f32, mediump>		mediump_fmat4x2;
	typedef mat<4, 3, f32, mediump>		mediump_fmat4x3;
	typedef mat<4, 4, f32, mediump>		mediump_fmat4x4;

	typedef mat<2, 2, f32, highp>		highp_fmat2x2;
	typedef mat<2, 3, f32, highp>		highp_fmat2x3;
	typedef mat<2, 4, f32, highp>		highp_fmat2x4;
	typedef mat<3, 2, f32, highp>		highp_fmat3x2;
	typedef mat<3, 3, f32, highp>		highp_fmat3x3;
	typedef mat<3, 4, f32, highp>		highp_fmat3x4;
	typedef mat<4, 2, f32, highp>		highp_fmat4x2;
	typedef mat<4, 3, f32, highp>		highp_fmat4x3;
	typedef mat<4, 4, f32, highp>		highp_fmat4x4;

	typedef mat<2, 2, f32, defaultp>	fmat2x2;
	typedef mat<3, 2, f32, defaultp>	fmat3x2;
	typedef mat<4, 2, f32, defaultp>	fmat4x2;
	typedef mat<2, 3, f32, defaultp>	fmat2x3;
	typedef mat<3, 3, f32, defaultp>	fmat3x3;
	typedef mat<4, 3, f32, defaultp>	fmat4x3;
	typedef mat<2, 4, f32, defaultp>	fmat2x4;
	typedef mat<3, 4, f32, defaultp>	fmat3x4;
	typedef mat<4, 4, f32, defaultp>	fmat4x4;

	typedef mat<2, 2, f32, lowp>		lowp_f32mat2x2;
	typedef mat<2, 3, f32, lowp>		lowp_f32mat2x3;
	typedef mat<2, 4, f32, lowp>		lowp_f32mat2x4;
	typedef mat<3, 2, f32, lowp>		lowp_f32mat3x2;
	typedef mat<3, 3, f32, lowp>		lowp_f32mat3x3;
	typedef mat<3, 4, f32, lowp>		lowp_f32mat3x4;
	typedef mat<4, 2, f32, lowp>		lowp_f32mat4x2;
	typedef mat<4, 3, f32, lowp>		lowp_f32mat4x3;
	typedef mat<4, 4, f32, lowp>		lowp_f32mat4x4;
	
	typedef mat<2, 2, f32, mediump>		mediump_f32mat2x2;
	typedef mat<2, 3, f32, mediump>		mediump_f32mat2x3;
	typedef mat<2, 4, f32, mediump>		mediump_f32mat2x4;
	typedef mat<3, 2, f32, mediump>		mediump_f32mat3x2;
	typedef mat<3, 3, f32, mediump>		mediump_f32mat3x3;
	typedef mat<3, 4, f32, mediump>		mediump_f32mat3x4;
	typedef mat<4, 2, f32, mediump>		mediump_f32mat4x2;
	typedef mat<4, 3, f32, mediump>		mediump_f32mat4x3;
	typedef mat<4, 4, f32, mediump>		mediump_f32mat4x4;

	typedef mat<2, 2, f32, highp>		highp_f32mat2x2;
	typedef mat<2, 3, f32, highp>		highp_f32mat2x3;
	typedef mat<2, 4, f32, highp>		highp_f32mat2x4;
	typedef mat<3, 2, f32, highp>		highp_f32mat3x2;
	typedef mat<3, 3, f32, highp>		highp_f32mat3x3;
	typedef mat<3, 4, f32, highp>		highp_f32mat3x4;
	typedef mat<4, 2, f32, highp>		highp_f32mat4x2;
	typedef mat<4, 3, f32, highp>		highp_f32mat4x3;
	typedef mat<4, 4, f32, highp>		highp_f32mat4x4;

	typedef mat<2, 2, f32, defaultp>	f32mat2x2;
	typedef mat<3, 2, f32, defaultp>	f32mat3x2;
	typedef mat<4, 2, f32, defaultp>	f32mat4x2;
	typedef mat<2, 3, f32, defaultp>	f32mat2x3;
	typedef mat<3, 3, f32, defaultp>	f32mat3x3;
	typedef mat<4, 3, f32, defaultp>	f32mat4x3;
	typedef mat<2, 4, f32, defaultp>	f32mat2x4;
	typedef mat<3, 4, f32, defaultp>	f32mat3x4;
	typedef mat<4, 4, f32, defaultp>	f32mat4x4;

	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;
	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;
	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;
	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;
	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;
	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;
	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;
	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;
	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;

	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;
	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;
	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;
	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;
	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;
	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;
	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;
	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;
	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;

	typedef mat<2, 2, double, highp>	highp_dmat2x2;
	typedef mat<2, 3, double, highp>	highp_dmat2x3;
	typedef mat<2, 4, double, highp>	highp_dmat2x4;
	typedef mat<3, 2, double, highp>	highp_dmat3x2;
	typedef mat<3, 3, double, highp>	highp_dmat3x3;
	typedef mat<3, 4, double, highp>	highp_dmat3x4;
	typedef mat<4, 2, double, highp>	highp_dmat4x2;
	typedef mat<4, 3, double, highp>	highp_dmat4x3;
	typedef mat<4, 4, double, highp>	highp_dmat4x4;

	typedef mat<2, 2, double, defaultp>	dmat2x2;
	typedef mat<3, 2, double, defaultp>	dmat3x2;
	typedef mat<4, 2, double, defaultp>	dmat4x2;
	typedef mat<2, 3, double, defaultp>	dmat2x3;
	typedef mat<3, 3, double, defaultp>	dmat3x3;
	typedef mat<4, 3, double, defaultp>	dmat4x3;
	typedef mat<2, 4, double, defaultp>	dmat2x4;
	typedef mat<3, 4, double, defaultp>	dmat3x4;
	typedef mat<4, 4, double, defaultp>	dmat4x4;

	typedef mat<2, 2, f64, lowp>		lowp_f64mat2x2;
	typedef mat<2, 3, f64, lowp>		lowp_f64mat2x3;
	typedef mat<2, 4, f64, lowp>		lowp_f64mat2x4;
	typedef mat<3, 2, f64, lowp>		lowp_f64mat3x2;
	typedef mat<3, 3, f64, lowp>		lowp_f64mat3x3;
	typedef mat<3, 4, f64, lowp>		lowp_f64mat3x4;
	typedef mat<4, 2, f64, lowp>		lowp_f64mat4x2;
	typedef mat<4, 3, f64, lowp>		lowp_f64mat4x3;
	typedef mat<4, 4, f64, lowp>		lowp_f64mat4x4;

	typedef mat<2, 2, f64, mediump>		mediump_f64mat2x2;
	typedef mat<2, 3, f64, mediump>		mediump_f64mat2x3;
	typedef mat<2, 4, f64, mediump>		mediump_f64mat2x4;
	typedef mat<3, 2, f64, mediump>		mediump_f64mat3x2;
	typedef mat<3, 3, f64, mediump>		mediump_f64mat3x3;
	typedef mat<3, 4, f64, mediump>		mediump_f64mat3x4;
	typedef mat<4, 2, f64, mediump>		mediump_f64mat4x2;
	typedef mat<4, 3, f64, mediump>		mediump_f64mat4x3;
	typedef mat<4, 4, f64, mediump>		mediump_f64mat4x4;

	typedef mat<2, 2, f64, highp>		highp_f64mat2x2;
	typedef mat<2, 3, f64, highp>		highp_f64mat2x3;
	typedef mat<2, 4, f64, highp>		highp_f64mat2x4;
	typedef mat<3, 2, f64, highp>		highp_f64mat3x2;
	typedef mat<3, 3, f64, highp>		highp_f64mat3x3;
	typedef mat<3, 4, f64, highp>		highp_f64mat3x4;
	typedef mat<4, 2, f64, highp>		highp_f64mat4x2;
	typedef mat<4, 3, f64, highp>		highp_f64mat4x3;
	typedef mat<4, 4, f64, highp>		highp_f64mat4x4;

	typedef mat<2, 2, f64, defaultp>	f64mat2x2;
	typedef mat<3, 2, f64, defaultp>	f64mat3x2;
	typedef mat<4, 2, f64, defaultp>	f64mat4x2;
	typedef mat<2, 3, f64, defaultp>	f64mat2x3;
	typedef mat<3, 3, f64, defaultp>	f64mat3x3;
	typedef mat<4, 3, f64, defaultp>	f64mat4x3;
	typedef mat<2, 4, f64, defaultp>	f64mat2x4;
	typedef mat<3, 4, f64, defaultp>	f64mat3x4;
	typedef mat<4, 4, f64, defaultp>	f64mat4x4;

	

	typedef qua<float, lowp>			lowp_quat;
	typedef qua<float, mediump>			mediump_quat;
	typedef qua<float, highp>			highp_quat;
	typedef qua<float, defaultp>		quat;

	typedef qua<float, lowp>			lowp_fquat;
	typedef qua<float, mediump>			mediump_fquat;
	typedef qua<float, highp>			highp_fquat;
	typedef qua<float, defaultp>		fquat;

	typedef qua<f32, lowp>				lowp_f32quat;
	typedef qua<f32, mediump>			mediump_f32quat;
	typedef qua<f32, highp>				highp_f32quat;
	typedef qua<f32, defaultp>			f32quat;

	typedef qua<double, lowp>			lowp_dquat;
	typedef qua<double, mediump>		mediump_dquat;
	typedef qua<double, highp>			highp_dquat;
	typedef qua<double, defaultp>		dquat;

	typedef qua<f64, lowp>				lowp_f64quat;
	typedef qua<f64, mediump>			mediump_f64quat;
	typedef qua<f64, highp>				highp_f64quat;
	typedef qua<f64, defaultp>			f64quat;
}


#line 115 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool2.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"



#pragma once




#line 10 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"

#line 12 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"


namespace glm
{
	template<typename T, qualifier Q>
	struct vec<2, T, Q>
	{
		

		typedef T value_type;
		typedef vec<2, T, Q> type;
		typedef vec<2, bool, Q> bool_type;

		













#line 40 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"



#line 44 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"




















#line 65 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"
			union {T x, r, s;};
			union {T y, g, t;};



#line 71 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"
#line 72 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"









#line 82 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"

		

		
		typedef length_t length_type;
		 static constexpr length_type length(){return 2;}

		 constexpr T& operator[](length_type i);
		 constexpr T const& operator[](length_type i) const;

		

		 constexpr vec() = default;
		 constexpr vec(vec const& v) = default;
		template<qualifier P>
		 constexpr vec(vec<2, T, P> const& v);

		

		 constexpr explicit vec(T scalar);
		 constexpr vec(T x, T y);

		

		template<typename U, qualifier P>
		 constexpr explicit vec(vec<1, U, P> const& v);

		
		template<typename A, typename B>
		 constexpr vec(A x, B y);
		template<typename A, typename B>
		 constexpr vec(vec<1, A, Q> const& x, B y);
		template<typename A, typename B>
		 constexpr vec(A x, vec<1, B, Q> const& y);
		template<typename A, typename B>
		 constexpr vec(vec<1, A, Q> const& x, vec<1, B, Q> const& y);

		

		
		template<typename U, qualifier P>
		 constexpr  vec(vec<3, U, P> const& v);
		
		template<typename U, qualifier P>
		 constexpr  vec(vec<4, U, P> const& v);

		
		template<typename U, qualifier P>
		 constexpr  vec(vec<2, U, P> const& v);

		






#line 140 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"

		

		 constexpr vec<2, T, Q> & operator=(vec const& v) = default;

		template<typename U>
		 constexpr vec<2, T, Q> & operator=(vec<2, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator+=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator+=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator+=(vec<2, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator-=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator-=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator-=(vec<2, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator*=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator*=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator*=(vec<2, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator/=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator/=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator/=(vec<2, U, Q> const& v);

		

		 constexpr vec<2, T, Q> & operator++();
		 constexpr vec<2, T, Q> & operator--();
		 constexpr vec<2, T, Q> operator++(int);
		 constexpr vec<2, T, Q> operator--(int);

		

		template<typename U>
		 constexpr vec<2, T, Q> & operator%=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator%=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator%=(vec<2, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator&=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator&=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator&=(vec<2, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator|=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator|=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator|=(vec<2, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator^=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator^=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator^=(vec<2, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator<<=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator<<=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator<<=(vec<2, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator>>=(U scalar);
		template<typename U>
		 constexpr vec<2, T, Q> & operator>>=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<2, T, Q> & operator>>=(vec<2, U, Q> const& v);
	};

	

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator+(vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator-(vec<2, T, Q> const& v);

	

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator+(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator+(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator+(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator-(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator-(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator-(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator*(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator*(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator*(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator/(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator/(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator/(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator/(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator/(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator%(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator%(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator%(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator&(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator&(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator&(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator|(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator|(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator|(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator^(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator^(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator^(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator<<(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator<<(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator<<(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator>>(vec<2, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator>>(T scalar, vec<2, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator>>(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<2, T, Q> operator~(vec<2, T, Q> const& v);

	

	template<typename T, qualifier Q>
	 constexpr bool operator==(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr bool operator!=(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2);

	template<qualifier Q>
	 constexpr vec<2, bool, Q> operator&&(vec<2, bool, Q> const& v1, vec<2, bool, Q> const& v2);

	template<qualifier Q>
	 constexpr vec<2, bool, Q> operator||(vec<2, bool, Q> const& v1, vec<2, bool, Q> const& v2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.inl"


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\compute_vector_relational.hpp"
#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 5 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\compute_vector_relational.hpp"


namespace glm{
namespace detail
{
	template <typename T, bool isFloat>
	struct compute_equal
	{
		 inline constexpr static bool call(T a, T b)
		{
			return a == b;
		}
	};











}
}
#line 4 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.inl"

namespace glm
{
	













#line 22 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr vec<2, T, Q>::vec(vec<2, T, P> const& v)
		: x(v.x), y(v.y)
	{}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q>::vec(T scalar)
		: x(scalar), y(scalar)
	{}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q>::vec(T _x, T _y)
		: x(_x), y(_y)
	{}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<2, T, Q>::vec(vec<1, U, P> const& v)
		: x(static_cast<T>(v.x))
		, y(static_cast<T>(v.x))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B>
	 inline constexpr vec<2, T, Q>::vec(A _x, B _y)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B>
	 inline constexpr vec<2, T, Q>::vec(vec<1, A, Q> const& _x, B _y)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B>
	 inline constexpr vec<2, T, Q>::vec(A _x, vec<1, B, Q> const& _y)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y.x))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B>
	 inline constexpr vec<2, T, Q>::vec(vec<1, A, Q> const& _x, vec<1, B, Q> const& _y)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y.x))
	{}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<2, T, Q>::vec(vec<2, U, P> const& v)
		: x(static_cast<T>(v.x))
		, y(static_cast<T>(v.y))
	{}

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<2, T, Q>::vec(vec<3, U, P> const& v)
		: x(static_cast<T>(v.x))
		, y(static_cast<T>(v.y))
	{}

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<2, T, Q>::vec(vec<4, U, P> const& v)
		: x(static_cast<T>(v.x))
		, y(static_cast<T>(v.y))
	{}

	

	template<typename T, qualifier Q>
	 inline constexpr T & vec<2, T, Q>::operator[](typename vec<2, T, Q>::length_type i)
	{
		(void)( (!!(i >= 0 && i < this->length())) || (_wassert(L"i >= 0 && i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.inl", (unsigned)(106)), 0) );
		switch(i)
		{
		default:
		case 0:
			return x;
		case 1:
			return y;
		}
	}

	template<typename T, qualifier Q>
	 inline constexpr T const& vec<2, T, Q>::operator[](typename vec<2, T, Q>::length_type i) const
	{
		(void)( (!!(i >= 0 && i < this->length())) || (_wassert(L"i >= 0 && i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.inl", (unsigned)(120)), 0) );
		switch(i)
		{
		default:
		case 0:
			return x;
		case 1:
			return y;
		}
	}

	









#line 142 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.inl"

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator=(vec<2, U, Q> const& v)
	{
		this->x = static_cast<T>(v.x);
		this->y = static_cast<T>(v.y);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator+=(U scalar)
	{
		this->x += static_cast<T>(scalar);
		this->y += static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator+=(vec<1, U, Q> const& v)
	{
		this->x += static_cast<T>(v.x);
		this->y += static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator+=(vec<2, U, Q> const& v)
	{
		this->x += static_cast<T>(v.x);
		this->y += static_cast<T>(v.y);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator-=(U scalar)
	{
		this->x -= static_cast<T>(scalar);
		this->y -= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator-=(vec<1, U, Q> const& v)
	{
		this->x -= static_cast<T>(v.x);
		this->y -= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator-=(vec<2, U, Q> const& v)
	{
		this->x -= static_cast<T>(v.x);
		this->y -= static_cast<T>(v.y);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator*=(U scalar)
	{
		this->x *= static_cast<T>(scalar);
		this->y *= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator*=(vec<1, U, Q> const& v)
	{
		this->x *= static_cast<T>(v.x);
		this->y *= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator*=(vec<2, U, Q> const& v)
	{
		this->x *= static_cast<T>(v.x);
		this->y *= static_cast<T>(v.y);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator/=(U scalar)
	{
		this->x /= static_cast<T>(scalar);
		this->y /= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator/=(vec<1, U, Q> const& v)
	{
		this->x /= static_cast<T>(v.x);
		this->y /= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator/=(vec<2, U, Q> const& v)
	{
		this->x /= static_cast<T>(v.x);
		this->y /= static_cast<T>(v.y);
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator++()
	{
		++this->x;
		++this->y;
		return *this;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator--()
	{
		--this->x;
		--this->y;
		return *this;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> vec<2, T, Q>::operator++(int)
	{
		vec<2, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> vec<2, T, Q>::operator--(int)
	{
		vec<2, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator%=(U scalar)
	{
		this->x %= static_cast<T>(scalar);
		this->y %= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator%=(vec<1, U, Q> const& v)
	{
		this->x %= static_cast<T>(v.x);
		this->y %= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator%=(vec<2, U, Q> const& v)
	{
		this->x %= static_cast<T>(v.x);
		this->y %= static_cast<T>(v.y);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator&=(U scalar)
	{
		this->x &= static_cast<T>(scalar);
		this->y &= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator&=(vec<1, U, Q> const& v)
	{
		this->x &= static_cast<T>(v.x);
		this->y &= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator&=(vec<2, U, Q> const& v)
	{
		this->x &= static_cast<T>(v.x);
		this->y &= static_cast<T>(v.y);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator|=(U scalar)
	{
		this->x |= static_cast<T>(scalar);
		this->y |= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator|=(vec<1, U, Q> const& v)
	{
		this->x |= static_cast<T>(v.x);
		this->y |= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator|=(vec<2, U, Q> const& v)
	{
		this->x |= static_cast<T>(v.x);
		this->y |= static_cast<T>(v.y);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator^=(U scalar)
	{
		this->x ^= static_cast<T>(scalar);
		this->y ^= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator^=(vec<1, U, Q> const& v)
	{
		this->x ^= static_cast<T>(v.x);
		this->y ^= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator^=(vec<2, U, Q> const& v)
	{
		this->x ^= static_cast<T>(v.x);
		this->y ^= static_cast<T>(v.y);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator<<=(U scalar)
	{
		this->x <<= static_cast<T>(scalar);
		this->y <<= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator<<=(vec<1, U, Q> const& v)
	{
		this->x <<= static_cast<T>(v.x);
		this->y <<= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator<<=(vec<2, U, Q> const& v)
	{
		this->x <<= static_cast<T>(v.x);
		this->y <<= static_cast<T>(v.y);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator>>=(U scalar)
	{
		this->x >>= static_cast<T>(scalar);
		this->y >>= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator>>=(vec<1, U, Q> const& v)
	{
		this->x >>= static_cast<T>(v.x);
		this->y >>= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<2, T, Q> & vec<2, T, Q>::operator>>=(vec<2, U, Q> const& v)
	{
		this->x >>= static_cast<T>(v.x);
		this->y >>= static_cast<T>(v.y);
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator+(vec<2, T, Q> const& v)
	{
		return v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator-(vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			-v.x,
			-v.y);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator+(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x + scalar,
			v.y + scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x + v2.x,
			v1.y + v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator+(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar + v.x,
			scalar + v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator+(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x + v2.x,
			v1.x + v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x + v2.x,
			v1.y + v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator-(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x - scalar,
			v.y - scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x - v2.x,
			v1.y - v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator-(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar - v.x,
			scalar - v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator-(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x - v2.x,
			v1.x - v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x - v2.x,
			v1.y - v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator*(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x * scalar,
			v.y * scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x * v2.x,
			v1.y * v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator*(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar * v.x,
			scalar * v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator*(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x * v2.x,
			v1.x * v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x * v2.x,
			v1.y * v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator/(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x / scalar,
			v.y / scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator/(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x / v2.x,
			v1.y / v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator/(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar / v.x,
			scalar / v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator/(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x / v2.x,
			v1.x / v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator/(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x / v2.x,
			v1.y / v2.y);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator%(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x % scalar,
			v.y % scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x % v2.x,
			v1.y % v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator%(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar % v.x,
			scalar % v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator%(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x % v2.x,
			v1.x % v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x % v2.x,
			v1.y % v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator&(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x & scalar,
			v.y & scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x & v2.x,
			v1.y & v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator&(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar & v.x,
			scalar & v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator&(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x & v2.x,
			v1.x & v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x & v2.x,
			v1.y & v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator|(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x | scalar,
			v.y | scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x | v2.x,
			v1.y | v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator|(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar | v.x,
			scalar | v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator|(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x | v2.x,
			v1.x | v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x | v2.x,
			v1.y | v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator^(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x ^ scalar,
			v.y ^ scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x ^ v2.x,
			v1.y ^ v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator^(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar ^ v.x,
			scalar ^ v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator^(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x ^ v2.x,
			v1.x ^ v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x ^ v2.x,
			v1.y ^ v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator<<(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x << scalar,
			v.y << scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x << v2.x,
			v1.y << v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator<<(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar << v.x,
			scalar << v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator<<(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x << v2.x,
			v1.x << v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x << v2.x,
			v1.y << v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator>>(vec<2, T, Q> const& v, T scalar)
	{
		return vec<2, T, Q>(
			v.x >> scalar,
			v.y >> scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x >> v2.x,
			v1.y >> v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator>>(T scalar, vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			scalar >> v.x,
			scalar >> v.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator>>(vec<1, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x >> v2.x,
			v1.x >> v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return vec<2, T, Q>(
			v1.x >> v2.x,
			v1.y >> v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<2, T, Q> operator~(vec<2, T, Q> const& v)
	{
		return vec<2, T, Q>(
			~v.x,
			~v.y);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr bool operator==(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return
			detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.x, v2.x) &&
			detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.y, v2.y);
	}

	template<typename T, qualifier Q>
	 inline constexpr bool operator!=(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2)
	{
		return !(v1 == v2);
	}

	template<qualifier Q>
	 inline constexpr vec<2, bool, Q> operator&&(vec<2, bool, Q> const& v1, vec<2, bool, Q> const& v2)
	{
		return vec<2, bool, Q>(v1.x && v2.x, v1.y && v2.y);
	}

	template<qualifier Q>
	 inline constexpr vec<2, bool, Q> operator||(vec<2, bool, Q> const& v1, vec<2, bool, Q> const& v2)
	{
		return vec<2, bool, Q>(v1.x || v2.x, v1.y || v2.y);
	}
}
#line 399 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"
#line 400 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec2.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool2.hpp"

namespace glm
{
	
	

	
	
	
	typedef vec<2, bool, defaultp>		bvec2;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<2, bool, highp>		highp_bvec2;

	
	
	
	
	typedef vec<2, bool, mediump>	mediump_bvec2;

	
	
	
	
	typedef vec<2, bool, lowp>		lowp_bvec2;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float2.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<2, float, defaultp>	vec2;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<2, float, highp>		highp_vec2;

	
	
	
	
	typedef vec<2, float, mediump>		mediump_vec2;

	
	
	
	
	typedef vec<2, float, lowp>			lowp_vec2;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double2.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<2, double, defaultp>		dvec2;

	
}
#line 10 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<2, double, highp>		highp_dvec2;

	
	
	
	
	typedef vec<2, double, mediump>		mediump_dvec2;

	
	
	
	
	typedef vec<2, double, lowp>		lowp_dvec2;

	
}
#line 11 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int2.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<2, int, defaultp>		ivec2;

	
}
#line 12 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<2, int, highp>		highp_ivec2;

	
	
	
	
	typedef vec<2, int, mediump>	mediump_ivec2;

	
	
	
	
	typedef vec<2, int, lowp>		lowp_ivec2;

	
}
#line 13 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint2.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<2, unsigned int, defaultp>		uvec2;

	
}
#line 14 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<2, unsigned int, highp>		highp_uvec2;

	
	
	
	
	typedef vec<2, unsigned int, mediump>	mediump_uvec2;

	
	
	
	
	typedef vec<2, unsigned int, lowp>		lowp_uvec2;

	
}
#line 15 "d:\\vsprojects\\openglproject\\includes\\glm\\vec2.hpp"
#line 117 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool3.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"



#pragma once




#line 10 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"

#line 12 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"


namespace glm
{
	template<typename T, qualifier Q>
	struct vec<3, T, Q>
	{
		

		typedef T value_type;
		typedef vec<3, T, Q> type;
		typedef vec<3, bool, Q> bool_type;

		
















#line 43 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"



#line 47 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"




















#line 68 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"
			union { T x, r, s; };
			union { T y, g, t; };
			union { T z, b, p; };



#line 75 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"
#line 76 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"









#line 86 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"

		

		
		typedef length_t length_type;
		 static constexpr length_type length(){return 3;}

		 constexpr T & operator[](length_type i);
		 constexpr T const& operator[](length_type i) const;

		

		 constexpr vec() = default;
		 constexpr vec(vec const& v) = default;
		template<qualifier P>
		 constexpr vec(vec<3, T, P> const& v);

		

		 constexpr explicit vec(T scalar);
		 constexpr vec(T a, T b, T c);

		

		template<typename U, qualifier P>
		 constexpr explicit vec(vec<1, U, P> const& v);

		
		template<typename X, typename Y, typename Z>
		 constexpr vec(X x, Y y, Z z);
		template<typename X, typename Y, typename Z>
		 constexpr vec(vec<1, X, Q> const& _x, Y _y, Z _z);
		template<typename X, typename Y, typename Z>
		 constexpr vec(X _x, vec<1, Y, Q> const& _y, Z _z);
		template<typename X, typename Y, typename Z>
		 constexpr vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z);
		template<typename X, typename Y, typename Z>
		 constexpr vec(X _x, Y _y, vec<1, Z, Q> const& _z);
		template<typename X, typename Y, typename Z>
		 constexpr vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z);
		template<typename X, typename Y, typename Z>
		 constexpr vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z);
		template<typename X, typename Y, typename Z>
		 constexpr vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z);

		

		
		template<typename A, typename B, qualifier P>
		 constexpr vec(vec<2, A, P> const& _xy, B _z);
		
		template<typename A, typename B, qualifier P>
		 constexpr vec(vec<2, A, P> const& _xy, vec<1, B, P> const& _z);
		
		template<typename A, typename B, qualifier P>
		 constexpr vec(A _x, vec<2, B, P> const& _yz);
		
		template<typename A, typename B, qualifier P>
		 constexpr vec(vec<1, A, P> const& _x, vec<2, B, P> const& _yz);
		
		template<typename U, qualifier P>
		 constexpr  vec(vec<4, U, P> const& v);

		
		template<typename U, qualifier P>
		 constexpr  vec(vec<3, U, P> const& v);

		


















#line 173 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"

		

		 constexpr vec<3, T, Q>& operator=(vec<3, T, Q> const& v) = default;

		template<typename U>
		 constexpr vec<3, T, Q> & operator=(vec<3, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator+=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator+=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator+=(vec<3, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator-=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator-=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator-=(vec<3, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator*=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator*=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator*=(vec<3, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator/=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator/=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator/=(vec<3, U, Q> const& v);

		

		 constexpr vec<3, T, Q> & operator++();
		 constexpr vec<3, T, Q> & operator--();
		 constexpr vec<3, T, Q> operator++(int);
		 constexpr vec<3, T, Q> operator--(int);

		

		template<typename U>
		 constexpr vec<3, T, Q> & operator%=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator%=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator%=(vec<3, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator&=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator&=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator&=(vec<3, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator|=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator|=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator|=(vec<3, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator^=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator^=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator^=(vec<3, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator<<=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator<<=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator<<=(vec<3, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator>>=(U scalar);
		template<typename U>
		 constexpr vec<3, T, Q> & operator>>=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<3, T, Q> & operator>>=(vec<3, U, Q> const& v);
	};

	

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator+(vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator-(vec<3, T, Q> const& v);

	

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator+(vec<3, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator+(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator+(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator+(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator+(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator-(vec<3, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator-(vec<3, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator-(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator-(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator-(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator*(vec<3, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator*(vec<3, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator*(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator*(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator*(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator/(vec<3, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator/(vec<3, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator/(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator/(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator/(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator%(vec<3, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator%(vec<3, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator%(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator%(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator%(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator&(vec<3, T, Q> const& v1, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator&(vec<3, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator&(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator&(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator&(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator|(vec<3, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator|(vec<3, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator|(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator|(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator|(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator^(vec<3, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator^(vec<3, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator^(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator^(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator^(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator<<(vec<3, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator<<(vec<3, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator<<(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator<<(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator<<(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator>>(vec<3, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator>>(vec<3, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator>>(T scalar, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator>>(vec<1, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator>>(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<3, T, Q> operator~(vec<3, T, Q> const& v);

	

	template<typename T, qualifier Q>
	 constexpr bool operator==(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr bool operator!=(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2);

	template<qualifier Q>
	 constexpr vec<3, bool, Q> operator&&(vec<3, bool, Q> const& v1, vec<3, bool, Q> const& v2);

	template<qualifier Q>
	 constexpr vec<3, bool, Q> operator||(vec<3, bool, Q> const& v1, vec<3, bool, Q> const& v2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.inl"




namespace glm
{
	













#line 22 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr vec<3, T, Q>::vec(vec<3, T, P> const& v)
		: x(v.x), y(v.y), z(v.z)
	{}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q>::vec(T scalar)
		: x(scalar), y(scalar), z(scalar)
	{}

	template <typename T, qualifier Q>
	 inline constexpr vec<3, T, Q>::vec(T _x, T _y, T _z)
		: x(_x), y(_y), z(_z)
	{}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<3, T, Q>::vec(vec<1, U, P> const& v)
		: x(static_cast<T>(v.x))
		, y(static_cast<T>(v.x))
		, z(static_cast<T>(v.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z>
	 inline constexpr vec<3, T, Q>::vec(X _x, Y _y, Z _z)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z>
	 inline constexpr vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z>
	 inline constexpr vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z>
	 inline constexpr vec<3, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z>
	 inline constexpr vec<3, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z>
	 inline constexpr vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z>
	 inline constexpr vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z>
	 inline constexpr vec<3, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z.x))
	{}

	

	template<typename T, qualifier Q>
	template<typename A, typename B, qualifier P>
	 inline constexpr vec<3, T, Q>::vec(vec<2, A, P> const& _xy, B _z)
		: x(static_cast<T>(_xy.x))
		, y(static_cast<T>(_xy.y))
		, z(static_cast<T>(_z))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, qualifier P>
	 inline constexpr vec<3, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const& _z)
		: x(static_cast<T>(_xy.x))
		, y(static_cast<T>(_xy.y))
		, z(static_cast<T>(_z.x))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, qualifier P>
	 inline constexpr vec<3, T, Q>::vec(A _x, vec<2, B, P> const& _yz)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_yz.x))
		, z(static_cast<T>(_yz.y))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, qualifier P>
	 inline constexpr vec<3, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& _yz)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_yz.x))
		, z(static_cast<T>(_yz.y))
	{}

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<3, T, Q>::vec(vec<3, U, P> const& v)
		: x(static_cast<T>(v.x))
		, y(static_cast<T>(v.y))
		, z(static_cast<T>(v.z))
	{}

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<3, T, Q>::vec(vec<4, U, P> const& v)
		: x(static_cast<T>(v.x))
		, y(static_cast<T>(v.y))
		, z(static_cast<T>(v.z))
	{}

	

	template<typename T, qualifier Q>
	 inline constexpr T & vec<3, T, Q>::operator[](typename vec<3, T, Q>::length_type i)
	{
		(void)( (!!(i >= 0 && i < this->length())) || (_wassert(L"i >= 0 && i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.inl", (unsigned)(170)), 0) );
		switch(i)
		{
		default:
			case 0:
		return x;
			case 1:
		return y;
			case 2:
		return z;
		}
	}

	template<typename T, qualifier Q>
	 inline constexpr T const& vec<3, T, Q>::operator[](typename vec<3, T, Q>::length_type i) const
	{
		(void)( (!!(i >= 0 && i < this->length())) || (_wassert(L"i >= 0 && i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.inl", (unsigned)(186)), 0) );
		switch(i)
		{
		default:
		case 0:
			return x;
		case 1:
			return y;
		case 2:
			return z;
		}
	}

	










#line 211 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.inl"

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q>& vec<3, T, Q>::operator=(vec<3, U, Q> const& v)
	{
		this->x = static_cast<T>(v.x);
		this->y = static_cast<T>(v.y);
		this->z = static_cast<T>(v.z);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator+=(U scalar)
	{
		this->x += static_cast<T>(scalar);
		this->y += static_cast<T>(scalar);
		this->z += static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<1, U, Q> const& v)
	{
		this->x += static_cast<T>(v.x);
		this->y += static_cast<T>(v.x);
		this->z += static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<3, U, Q> const& v)
	{
		this->x += static_cast<T>(v.x);
		this->y += static_cast<T>(v.y);
		this->z += static_cast<T>(v.z);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator-=(U scalar)
	{
		this->x -= static_cast<T>(scalar);
		this->y -= static_cast<T>(scalar);
		this->z -= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<1, U, Q> const& v)
	{
		this->x -= static_cast<T>(v.x);
		this->y -= static_cast<T>(v.x);
		this->z -= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<3, U, Q> const& v)
	{
		this->x -= static_cast<T>(v.x);
		this->y -= static_cast<T>(v.y);
		this->z -= static_cast<T>(v.z);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator*=(U scalar)
	{
		this->x *= static_cast<T>(scalar);
		this->y *= static_cast<T>(scalar);
		this->z *= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<1, U, Q> const& v)
	{
		this->x *= static_cast<T>(v.x);
		this->y *= static_cast<T>(v.x);
		this->z *= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<3, U, Q> const& v)
	{
		this->x *= static_cast<T>(v.x);
		this->y *= static_cast<T>(v.y);
		this->z *= static_cast<T>(v.z);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator/=(U v)
	{
		this->x /= static_cast<T>(v);
		this->y /= static_cast<T>(v);
		this->z /= static_cast<T>(v);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator/=(vec<1, U, Q> const& v)
	{
		this->x /= static_cast<T>(v.x);
		this->y /= static_cast<T>(v.x);
		this->z /= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator/=(vec<3, U, Q> const& v)
	{
		this->x /= static_cast<T>(v.x);
		this->y /= static_cast<T>(v.y);
		this->z /= static_cast<T>(v.z);
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator++()
	{
		++this->x;
		++this->y;
		++this->z;
		return *this;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator--()
	{
		--this->x;
		--this->y;
		--this->z;
		return *this;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> vec<3, T, Q>::operator++(int)
	{
		vec<3, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> vec<3, T, Q>::operator--(int)
	{
		vec<3, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator%=(U scalar)
	{
		this->x %= scalar;
		this->y %= scalar;
		this->z %= scalar;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<1, U, Q> const& v)
	{
		this->x %= v.x;
		this->y %= v.x;
		this->z %= v.x;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<3, U, Q> const& v)
	{
		this->x %= v.x;
		this->y %= v.y;
		this->z %= v.z;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator&=(U scalar)
	{
		this->x &= scalar;
		this->y &= scalar;
		this->z &= scalar;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<1, U, Q> const& v)
	{
		this->x &= v.x;
		this->y &= v.x;
		this->z &= v.x;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<3, U, Q> const& v)
	{
		this->x &= v.x;
		this->y &= v.y;
		this->z &= v.z;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator|=(U scalar)
	{
		this->x |= scalar;
		this->y |= scalar;
		this->z |= scalar;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<1, U, Q> const& v)
	{
		this->x |= v.x;
		this->y |= v.x;
		this->z |= v.x;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<3, U, Q> const& v)
	{
		this->x |= v.x;
		this->y |= v.y;
		this->z |= v.z;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator^=(U scalar)
	{
		this->x ^= scalar;
		this->y ^= scalar;
		this->z ^= scalar;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<1, U, Q> const& v)
	{
		this->x ^= v.x;
		this->y ^= v.x;
		this->z ^= v.x;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<3, U, Q> const& v)
	{
		this->x ^= v.x;
		this->y ^= v.y;
		this->z ^= v.z;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator<<=(U scalar)
	{
		this->x <<= scalar;
		this->y <<= scalar;
		this->z <<= scalar;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<1, U, Q> const& v)
	{
		this->x <<= static_cast<T>(v.x);
		this->y <<= static_cast<T>(v.x);
		this->z <<= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<3, U, Q> const& v)
	{
		this->x <<= static_cast<T>(v.x);
		this->y <<= static_cast<T>(v.y);
		this->z <<= static_cast<T>(v.z);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator>>=(U scalar)
	{
		this->x >>= static_cast<T>(scalar);
		this->y >>= static_cast<T>(scalar);
		this->z >>= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<1, U, Q> const& v)
	{
		this->x >>= static_cast<T>(v.x);
		this->y >>= static_cast<T>(v.x);
		this->z >>= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<3, U, Q> const& v)
	{
		this->x >>= static_cast<T>(v.x);
		this->y >>= static_cast<T>(v.y);
		this->z >>= static_cast<T>(v.z);
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator+(vec<3, T, Q> const& v)
	{
		return v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator-(vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			-v.x,
			-v.y,
			-v.z);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator+(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x + scalar,
			v.y + scalar,
			v.z + scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator+(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x + scalar.x,
			v.y + scalar.x,
			v.z + scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator+(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar + v.x,
			scalar + v.y,
			scalar + v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator+(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x + v.x,
			scalar.x + v.y,
			scalar.x + v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator+(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x + v2.x,
			v1.y + v2.y,
			v1.z + v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator-(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x - scalar,
			v.y - scalar,
			v.z - scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator-(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x - scalar.x,
			v.y - scalar.x,
			v.z - scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator-(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar - v.x,
			scalar - v.y,
			scalar - v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator-(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x - v.x,
			scalar.x - v.y,
			scalar.x - v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator-(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x - v2.x,
			v1.y - v2.y,
			v1.z - v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator*(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x * scalar,
			v.y * scalar,
			v.z * scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator*(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x * scalar.x,
			v.y * scalar.x,
			v.z * scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator*(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar * v.x,
			scalar * v.y,
			scalar * v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator*(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x * v.x,
			scalar.x * v.y,
			scalar.x * v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator*(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x * v2.x,
			v1.y * v2.y,
			v1.z * v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator/(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x / scalar,
			v.y / scalar,
			v.z / scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator/(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x / scalar.x,
			v.y / scalar.x,
			v.z / scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator/(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar / v.x,
			scalar / v.y,
			scalar / v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator/(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x / v.x,
			scalar.x / v.y,
			scalar.x / v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator/(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x / v2.x,
			v1.y / v2.y,
			v1.z / v2.z);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator%(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x % scalar,
			v.y % scalar,
			v.z % scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator%(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x % scalar.x,
			v.y % scalar.x,
			v.z % scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator%(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar % v.x,
			scalar % v.y,
			scalar % v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator%(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x % v.x,
			scalar.x % v.y,
			scalar.x % v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator%(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x % v2.x,
			v1.y % v2.y,
			v1.z % v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator&(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x & scalar,
			v.y & scalar,
			v.z & scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator&(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x & scalar.x,
			v.y & scalar.x,
			v.z & scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator&(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar & v.x,
			scalar & v.y,
			scalar & v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator&(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x & v.x,
			scalar.x & v.y,
			scalar.x & v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator&(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x & v2.x,
			v1.y & v2.y,
			v1.z & v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator|(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x | scalar,
			v.y | scalar,
			v.z | scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator|(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x | scalar.x,
			v.y | scalar.x,
			v.z | scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator|(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar | v.x,
			scalar | v.y,
			scalar | v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator|(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x | v.x,
			scalar.x | v.y,
			scalar.x | v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator|(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x | v2.x,
			v1.y | v2.y,
			v1.z | v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator^(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x ^ scalar,
			v.y ^ scalar,
			v.z ^ scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator^(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x ^ scalar.x,
			v.y ^ scalar.x,
			v.z ^ scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator^(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar ^ v.x,
			scalar ^ v.y,
			scalar ^ v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator^(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x ^ v.x,
			scalar.x ^ v.y,
			scalar.x ^ v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator^(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x ^ v2.x,
			v1.y ^ v2.y,
			v1.z ^ v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator<<(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x << scalar,
			v.y << scalar,
			v.z << scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator<<(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x << scalar.x,
			v.y << scalar.x,
			v.z << scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator<<(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar << v.x,
			scalar << v.y,
			scalar << v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator<<(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x << v.x,
			scalar.x << v.y,
			scalar.x << v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator<<(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x << v2.x,
			v1.y << v2.y,
			v1.z << v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator>>(vec<3, T, Q> const& v, T scalar)
	{
		return vec<3, T, Q>(
			v.x >> scalar,
			v.y >> scalar,
			v.z >> scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator>>(vec<3, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<3, T, Q>(
			v.x >> scalar.x,
			v.y >> scalar.x,
			v.z >> scalar.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator>>(T scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar >> v.x,
			scalar >> v.y,
			scalar >> v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator>>(vec<1, T, Q> const& scalar, vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			scalar.x >> v.x,
			scalar.x >> v.y,
			scalar.x >> v.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator>>(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return vec<3, T, Q>(
			v1.x >> v2.x,
			v1.y >> v2.y,
			v1.z >> v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<3, T, Q> operator~(vec<3, T, Q> const& v)
	{
		return vec<3, T, Q>(
			~v.x,
			~v.y,
			~v.z);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr bool operator==(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return
			detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.x, v2.x) &&
			detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.y, v2.y) &&
			detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.z, v2.z);
	}

	template<typename T, qualifier Q>
	 inline constexpr bool operator!=(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2)
	{
		return !(v1 == v2);
	}

	template<qualifier Q>
	 inline constexpr vec<3, bool, Q> operator&&(vec<3, bool, Q> const& v1, vec<3, bool, Q> const& v2)
	{
		return vec<3, bool, Q>(v1.x && v2.x, v1.y && v2.y, v1.z && v2.z);
	}

	template<qualifier Q>
	 inline constexpr vec<3, bool, Q> operator||(vec<3, bool, Q> const& v1, vec<3, bool, Q> const& v2)
	{
		return vec<3, bool, Q>(v1.x || v2.x, v1.y || v2.y, v1.z || v2.z);
	}
}
#line 432 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"
#line 433 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec3.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool3.hpp"

namespace glm
{
	
	

	
	
	
	typedef vec<3, bool, defaultp>		bvec3;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<3, bool, highp>		highp_bvec3;

	
	
	
	
	typedef vec<3, bool, mediump>	mediump_bvec3;

	
	
	
	
	typedef vec<3, bool, lowp>		lowp_bvec3;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float3.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<3, float, defaultp>		vec3;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<3, float, highp>		highp_vec3;

	
	
	
	
	typedef vec<3, float, mediump>		mediump_vec3;

	
	
	
	
	typedef vec<3, float, lowp>			lowp_vec3;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double3.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<3, double, defaultp>		dvec3;

	
}
#line 10 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	
	typedef vec<3, double, highp>		highp_dvec3;

	
	
	
	
	
	typedef vec<3, double, mediump>		mediump_dvec3;

	
	
	
	
	
	typedef vec<3, double, lowp>		lowp_dvec3;

	
}
#line 11 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int3.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<3, int, defaultp>		ivec3;

	
}
#line 12 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<3, int, highp>		highp_ivec3;

	
	
	
	
	typedef vec<3, int, mediump>	mediump_ivec3;

	
	
	
	
	typedef vec<3, int, lowp>		lowp_ivec3;

	
}
#line 13 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint3.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<3, unsigned int, defaultp>		uvec3;

	
}
#line 14 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<3, unsigned int, highp>		highp_uvec3;

	
	
	
	
	typedef vec<3, unsigned int, mediump>	mediump_uvec3;

	
	
	
	
	typedef vec<3, unsigned int, lowp>		lowp_uvec3;

	
}
#line 15 "d:\\vsprojects\\openglproject\\includes\\glm\\vec3.hpp"
#line 118 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool4.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"



#pragma once




#line 10 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"

#line 12 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"


namespace glm
{
	template<typename T, qualifier Q>
	struct vec<4, T, Q>
	{
		

		typedef T value_type;
		typedef vec<4, T, Q> type;
		typedef vec<4, bool, Q> bool_type;

		













#line 40 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"



#line 44 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"




















#line 65 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"
			union { T x, r, s; };
			union { T y, g, t; };
			union { T z, b, p; };
			union { T w, a, q; };



#line 73 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"
#line 74 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"









#line 84 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"

		

		typedef length_t length_type;

		
		 static constexpr length_type length(){return 4;}

		 constexpr T & operator[](length_type i);
		 constexpr T const& operator[](length_type i) const;

		

		 constexpr vec() = default;
		 constexpr vec(vec<4, T, Q> const& v) = default;
		template<qualifier P>
		 constexpr vec(vec<4, T, P> const& v);

		

		 constexpr explicit vec(T scalar);
		 constexpr vec(T x, T y, T z, T w);

		

		template<typename U, qualifier P>
		 constexpr explicit vec(vec<1, U, P> const& v);

		
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(X _x, Y _y, Z _z, W _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(vec<1, X, Q> const& _x, Y _y, Z _z, W _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(X _x, vec<1, Y, Q> const& _y, Z _z, W _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z, W _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(X _x, Y _y, vec<1, Z, Q> const& _z, W _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z, W _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, W _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, W _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(vec<1, X, Q> const& _x, Y _y, Z _z, vec<1, W, Q> const& _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(X _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W, Q> const& _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W, Q> const& _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(X _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w);
		template<typename X, typename Y, typename Z, typename W>
		 constexpr vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _Y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w);

		

		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(vec<2, A, P> const& _xy, B _z, C _w);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(vec<2, A, P> const& _xy, vec<1, B, P> const& _z, C _w);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(vec<2, A, P> const& _xy, B _z, vec<1, C, P> const& _w);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(vec<2, A, P> const& _xy, vec<1, B, P> const& _z, vec<1, C, P> const& _w);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(A _x, vec<2, B, P> const& _yz, C _w);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(vec<1, A, P> const& _x, vec<2, B, P> const& _yz, C _w);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(A _x, vec<2, B, P> const& _yz, vec<1, C, P> const& _w);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(vec<1, A, P> const& _x, vec<2, B, P> const& _yz, vec<1, C, P> const& _w);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(A _x, B _y, vec<2, C, P> const& _zw);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(vec<1, A, P> const& _x, B _y, vec<2, C, P> const& _zw);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(A _x, vec<1, B, P> const& _y, vec<2, C, P> const& _zw);
		
		template<typename A, typename B, typename C, qualifier P>
		 constexpr vec(vec<1, A, P> const& _x, vec<1, B, P> const& _y, vec<2, C, P> const& _zw);
		
		template<typename A, typename B, qualifier P>
		 constexpr vec(vec<3, A, P> const& _xyz, B _w);
		
		template<typename A, typename B, qualifier P>
		 constexpr vec(vec<3, A, P> const& _xyz, vec<1, B, P> const& _w);
		
		template<typename A, typename B, qualifier P>
		 constexpr vec(A _x, vec<3, B, P> const& _yzw);
		
		template<typename A, typename B, qualifier P>
		 constexpr vec(vec<1, A, P> const& _x, vec<3, B, P> const& _yzw);
		
		template<typename A, typename B, qualifier P>
		 constexpr vec(vec<2, A, P> const& _xy, vec<2, B, P> const& _zw);

		
		template<typename U, qualifier P>
		 constexpr  vec(vec<4, U, P> const& v);

		










































#line 246 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"

		

		 constexpr vec<4, T, Q>& operator=(vec<4, T, Q> const& v) = default;

		template<typename U>
		 constexpr vec<4, T, Q>& operator=(vec<4, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q>& operator+=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q>& operator+=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q>& operator+=(vec<4, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q>& operator-=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q>& operator-=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q>& operator-=(vec<4, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q>& operator*=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q>& operator*=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q>& operator*=(vec<4, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q>& operator/=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q>& operator/=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q>& operator/=(vec<4, U, Q> const& v);

		

		 constexpr vec<4, T, Q> & operator++();
		 constexpr vec<4, T, Q> & operator--();
		 constexpr vec<4, T, Q> operator++(int);
		 constexpr vec<4, T, Q> operator--(int);

		

		template<typename U>
		 constexpr vec<4, T, Q> & operator%=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q> & operator%=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator%=(vec<4, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator&=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q> & operator&=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator&=(vec<4, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator|=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q> & operator|=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator|=(vec<4, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator^=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q> & operator^=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator^=(vec<4, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator<<=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q> & operator<<=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator<<=(vec<4, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator>>=(U scalar);
		template<typename U>
		 constexpr vec<4, T, Q> & operator>>=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<4, T, Q> & operator>>=(vec<4, U, Q> const& v);
	};

	

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator+(vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator-(vec<4, T, Q> const& v);

	

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator+(vec<4, T, Q> const& v, T const & scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator+(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator+(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator-(vec<4, T, Q> const& v, T const & scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator-(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator-(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator*(vec<4, T, Q> const& v, T const & scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator*(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator*(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator/(vec<4, T, Q> const& v, T const & scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator/(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator/(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator/(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator/(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator%(vec<4, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator%(vec<4, T, Q> const& v, vec<1, T, Q> const& scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator%(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator%(vec<1, T, Q> const& scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator&(vec<4, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator&(vec<4, T, Q> const& v, vec<1, T, Q> const& scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator&(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator&(vec<1, T, Q> const& scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator&(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator|(vec<4, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator|(vec<4, T, Q> const& v, vec<1, T, Q> const& scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator|(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator|(vec<1, T, Q> const& scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator^(vec<4, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator^(vec<4, T, Q> const& v, vec<1, T, Q> const& scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator^(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator^(vec<1, T, Q> const& scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator<<(vec<4, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator<<(vec<4, T, Q> const& v, vec<1, T, Q> const& scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator<<(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator<<(vec<1, T, Q> const& scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator>>(vec<4, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator>>(vec<4, T, Q> const& v, vec<1, T, Q> const& scalar);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator>>(T scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator>>(vec<1, T, Q> const& scalar, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<4, T, Q> operator~(vec<4, T, Q> const& v);

	

	template<typename T, qualifier Q>
	 constexpr bool operator==(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr bool operator!=(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2);

	template<qualifier Q>
	 constexpr vec<4, bool, Q> operator&&(vec<4, bool, Q> const& v1, vec<4, bool, Q> const& v2);

	template<qualifier Q>
	 constexpr vec<4, bool, Q> operator||(vec<4, bool, Q> const& v1, vec<4, bool, Q> const& v2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.inl"




namespace glm{
namespace detail
{
	template<typename T, qualifier Q, bool Aligned>
	struct compute_vec4_add
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_vec4_sub
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_vec4_mul
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_vec4_div
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_vec4_mod
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x % b.x, a.y % b.y, a.z % b.z, a.w % b.w);
		}
	};

	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned>
	struct compute_vec4_and
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x & b.x, a.y & b.y, a.z & b.z, a.w & b.w);
		}
	};

	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned>
	struct compute_vec4_or
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x | b.x, a.y | b.y, a.z | b.z, a.w | b.w);
		}
	};

	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned>
	struct compute_vec4_xor
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x ^ b.x, a.y ^ b.y, a.z ^ b.z, a.w ^ b.w);
		}
	};

	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned>
	struct compute_vec4_shift_left
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x << b.x, a.y << b.y, a.z << b.z, a.w << b.w);
		}
	};

	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned>
	struct compute_vec4_shift_right
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(a.x >> b.x, a.y >> b.y, a.z >> b.z, a.w >> b.w);
		}
	};

	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned>
	struct compute_vec4_equal
	{
		 inline constexpr static bool call(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
		{
			return
				detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.x, v2.x) &&
				detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.y, v2.y) &&
				detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.z, v2.z) &&
				detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.w, v2.w);
		}
	};

	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned>
	struct compute_vec4_nequal
	{
		 inline constexpr static bool call(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
		{
			return !compute_vec4_equal<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(v1, v2);
		}
	};

	template<typename T, qualifier Q, int IsInt, std::size_t Size, bool Aligned>
	struct compute_vec4_bitwise_not
	{
		 inline constexpr static vec<4, T, Q> call(vec<4, T, Q> const& v)
		{
			return vec<4, T, Q>(~v.x, ~v.y, ~v.z, ~v.w);
		}
	};
}

	













#line 145 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<4, T, P> const& v)
		: x(v.x), y(v.y), z(v.z), w(v.w)
	{}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q>::vec(T scalar)
		: x(scalar), y(scalar), z(scalar), w(scalar)
	{}

	template <typename T, qualifier Q>
	 inline constexpr vec<4, T, Q>::vec(T _x, T _y, T _z, T _w)
		: x(_x), y(_y), z(_z), w(_w)
	{}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<1, U, P> const& v)
		: x(static_cast<T>(v.x))
		, y(static_cast<T>(v.x))
		, z(static_cast<T>(v.x))
		, w(static_cast<T>(v.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(X _x, Y _y, Z _z, W _w)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, W _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, W _w)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z, W _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, W _w)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z, W _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, W _w)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, W _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, vec<1, W, Q> const& _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W, Q> const& _w)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W, Q> const& _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename X, typename Y, typename Z, typename W>
	 inline constexpr vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> const& _z, vec<1, W, Q> const& _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w.x))
	{}

	

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, C _w)
		: x(static_cast<T>(_xy.x))
		, y(static_cast<T>(_xy.y))
		, z(static_cast<T>(_z))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const& _z, C _w)
		: x(static_cast<T>(_xy.x))
		, y(static_cast<T>(_xy.y))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, vec<1, C, P> const& _w)
		: x(static_cast<T>(_xy.x))
		, y(static_cast<T>(_xy.y))
		, z(static_cast<T>(_z))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const& _z, vec<1, C, P> const& _w)
		: x(static_cast<T>(_xy.x))
		, y(static_cast<T>(_xy.y))
		, z(static_cast<T>(_z.x))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, C _w)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_yz.x))
		, z(static_cast<T>(_yz.y))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& _yz, C _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_yz.x))
		, z(static_cast<T>(_yz.y))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, vec<1, C, P> const& _w)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_yz.x))
		, z(static_cast<T>(_yz.y))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& _yz, vec<1, C, P> const& _w)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_yz.x))
		, z(static_cast<T>(_yz.y))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(A _x, B _y, vec<2, C, P> const& _zw)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_zw.x))
		, w(static_cast<T>(_zw.y))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<1, A, P> const& _x, B _y, vec<2, C, P> const& _zw)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y))
		, z(static_cast<T>(_zw.x))
		, w(static_cast<T>(_zw.y))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(A _x, vec<1, B, P> const& _y, vec<2, C, P> const& _zw)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_zw.x))
		, w(static_cast<T>(_zw.y))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, typename C, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<1, B, P> const& _y, vec<2, C, P> const& _zw)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_y.x))
		, z(static_cast<T>(_zw.x))
		, w(static_cast<T>(_zw.y))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, B _w)
		: x(static_cast<T>(_xyz.x))
		, y(static_cast<T>(_xyz.y))
		, z(static_cast<T>(_xyz.z))
		, w(static_cast<T>(_w))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, vec<1, B, P> const& _w)
		: x(static_cast<T>(_xyz.x))
		, y(static_cast<T>(_xyz.y))
		, z(static_cast<T>(_xyz.z))
		, w(static_cast<T>(_w.x))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(A _x, vec<3, B, P> const& _yzw)
		: x(static_cast<T>(_x))
		, y(static_cast<T>(_yzw.x))
		, z(static_cast<T>(_yzw.y))
		, w(static_cast<T>(_yzw.z))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<3, B, P> const& _yzw)
		: x(static_cast<T>(_x.x))
		, y(static_cast<T>(_yzw.x))
		, z(static_cast<T>(_yzw.y))
		, w(static_cast<T>(_yzw.z))
	{}

	template<typename T, qualifier Q>
	template<typename A, typename B, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<2, B, P> const& _zw)
		: x(static_cast<T>(_xy.x))
		, y(static_cast<T>(_xy.y))
		, z(static_cast<T>(_zw.x))
		, w(static_cast<T>(_zw.y))
	{}

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<4, T, Q>::vec(vec<4, U, P> const& v)
		: x(static_cast<T>(v.x))
		, y(static_cast<T>(v.y))
		, z(static_cast<T>(v.z))
		, w(static_cast<T>(v.w))
	{}

	

	template<typename T, qualifier Q>
	 inline constexpr T& vec<4, T, Q>::operator[](typename vec<4, T, Q>::length_type i)
	{
		(void)( (!!(i >= 0 && i < this->length())) || (_wassert(L"i >= 0 && i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.inl", (unsigned)(479)), 0) );
		switch(i)
		{
		default:
		case 0:
			return x;
		case 1:
			return y;
		case 2:
			return z;
		case 3:
			return w;
		}
	}

	template<typename T, qualifier Q>
	 inline constexpr T const& vec<4, T, Q>::operator[](typename vec<4, T, Q>::length_type i) const
	{
		(void)( (!!(i >= 0 && i < this->length())) || (_wassert(L"i >= 0 && i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.inl", (unsigned)(497)), 0) );
		switch(i)
		{
		default:
		case 0:
			return x;
		case 1:
			return y;
		case 2:
			return z;
		case 3:
			return w;
		}
	}

	











#line 525 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.inl"

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q>& vec<4, T, Q>::operator=(vec<4, U, Q> const& v)
	{
		this->x = static_cast<T>(v.x);
		this->y = static_cast<T>(v.y);
		this->z = static_cast<T>(v.z);
		this->w = static_cast<T>(v.w);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator+=(U scalar)
	{
		return (*this = detail::compute_vec4_add<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_add<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v.x)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_add<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator-=(U scalar)
	{
		return (*this = detail::compute_vec4_sub<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_sub<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v.x)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_sub<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator*=(U scalar)
	{
		return (*this = detail::compute_vec4_mul<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_mul<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v.x)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_mul<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator/=(U scalar)
	{
		return (*this = detail::compute_vec4_div<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator/=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_div<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v.x)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator/=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_div<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator++()
	{
		++this->x;
		++this->y;
		++this->z;
		++this->w;
		return *this;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator--()
	{
		--this->x;
		--this->y;
		--this->z;
		--this->w;
		return *this;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> vec<4, T, Q>::operator++(int)
	{
		vec<4, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> vec<4, T, Q>::operator--(int)
	{
		vec<4, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator%=(U scalar)
	{
		return (*this = detail::compute_vec4_mod<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_mod<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_mod<T, Q, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator&=(U scalar)
	{
		return (*this = detail::compute_vec4_and<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_and<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_and<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator|=(U scalar)
	{
		return (*this = detail::compute_vec4_or<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_or<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_or<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator^=(U scalar)
	{
		return (*this = detail::compute_vec4_xor<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_xor<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_xor<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator<<=(U scalar)
	{
		return (*this = detail::compute_vec4_shift_left<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_shift_left<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_shift_left<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator>>=(U scalar)
	{
		return (*this = detail::compute_vec4_shift_right<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(scalar)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<1, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_shift_right<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<4, U, Q> const& v)
	{
		return (*this = detail::compute_vec4_shift_right<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(*this, vec<4, T, Q>(v)));
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator+(vec<4, T, Q> const& v)
	{
		return v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator-(vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(0) -= v;
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator+(vec<4, T, Q> const& v, T const & scalar)
	{
		return vec<4, T, Q>(v) += scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) += v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator+(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(v) += scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator+(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v2) += v1;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) += v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator-(vec<4, T, Q> const& v, T const & scalar)
	{
		return vec<4, T, Q>(v) -= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) -= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator-(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(scalar) -= v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator-(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1.x) -= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) -= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator*(vec<4, T, Q> const& v, T const & scalar)
	{
		return vec<4, T, Q>(v) *= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) *= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator*(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(v) *= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator*(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v2) *= v1;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) *= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator/(vec<4, T, Q> const& v, T const & scalar)
	{
		return vec<4, T, Q>(v) /= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator/(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) /= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator/(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(scalar) /= v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator/(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1.x) /= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator/(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) /= v2;
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator%(vec<4, T, Q> const& v, T scalar)
	{
		return vec<4, T, Q>(v) %= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) %= v2.x;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator%(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(scalar) %= v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator%(vec<1, T, Q> const& scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(scalar.x) %= v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) %= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator&(vec<4, T, Q> const& v, T scalar)
	{
		return vec<4, T, Q>(v) &= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator&(vec<4, T, Q> const& v, vec<1, T, Q> const& scalar)
	{
		return vec<4, T, Q>(v) &= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator&(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(scalar) &= v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator&(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1.x) &= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator&(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) &= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator|(vec<4, T, Q> const& v, T scalar)
	{
		return vec<4, T, Q>(v) |= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) |= v2.x;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator|(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(scalar) |= v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator|(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1.x) |= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) |= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator^(vec<4, T, Q> const& v, T scalar)
	{
		return vec<4, T, Q>(v) ^= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) ^= v2.x;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator^(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(scalar) ^= v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator^(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1.x) ^= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) ^= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator<<(vec<4, T, Q> const& v, T scalar)
	{
		return vec<4, T, Q>(v) <<= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) <<= v2.x;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator<<(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(scalar) <<= v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator<<(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1.x) <<= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) <<= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator>>(vec<4, T, Q> const& v, T scalar)
	{
		return vec<4, T, Q>(v) >>= scalar;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) >>= v2.x;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator>>(T scalar, vec<4, T, Q> const& v)
	{
		return vec<4, T, Q>(scalar) >>= v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator>>(vec<1, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1.x) >>= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return vec<4, T, Q>(v1) >>= v2;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<4, T, Q> operator~(vec<4, T, Q> const& v)
	{
		return detail::compute_vec4_bitwise_not<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(v);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr bool operator==(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return detail::compute_vec4_equal<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(v1, v2);
	}

	template<typename T, qualifier Q>
	 inline constexpr bool operator!=(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2)
	{
		return detail::compute_vec4_nequal<T, Q, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<Q>::value>::call(v1, v2);
	}

	template<qualifier Q>
	 inline constexpr vec<4, bool, Q> operator&&(vec<4, bool, Q> const& v1, vec<4, bool, Q> const& v2)
	{
		return vec<4, bool, Q>(v1.x && v2.x, v1.y && v2.y, v1.z && v2.z, v1.w && v2.w);
	}

	template<qualifier Q>
	 inline constexpr vec<4, bool, Q> operator||(vec<4, bool, Q> const& v1, vec<4, bool, Q> const& v2)
	{
		return vec<4, bool, Q>(v1.x || v2.x, v1.y || v2.y, v1.z || v2.z, v1.w || v2.w);
	}
}



#line 1141 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.inl"
#line 505 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"
#line 506 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec4.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool4.hpp"

namespace glm
{
	
	

	
	
	
	typedef vec<4, bool, defaultp>		bvec4;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<4, bool, highp>		highp_bvec4;

	
	
	
	
	typedef vec<4, bool, mediump>	mediump_bvec4;

	
	
	
	
	typedef vec<4, bool, lowp>		lowp_bvec4;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float4.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<4, float, defaultp>		vec4;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<4, float, highp>		highp_vec4;

	
	
	
	
	typedef vec<4, float, mediump>		mediump_vec4;

	
	
	
	
	typedef vec<4, float, lowp>			lowp_vec4;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double4.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<4, double, defaultp>		dvec4;

	
}
#line 10 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double4_precision.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double4_precision.hpp"


namespace glm
{
	
	

	
	
	
	
	
	typedef vec<4, double, highp>		highp_dvec4;

	
	
	
	
	
	typedef vec<4, double, mediump>		mediump_dvec4;

	
	
	
	
	
	typedef vec<4, double, lowp>		lowp_dvec4;

	
}
#line 11 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int4.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<4, int, defaultp>		ivec4;

	
}
#line 12 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<4, int, highp>		highp_ivec4;

	
	
	
	
	typedef vec<4, int, mediump>	mediump_ivec4;

	
	
	
	
	typedef vec<4, int, lowp>		lowp_ivec4;

	
}
#line 13 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint4.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef vec<4, unsigned int, defaultp>		uvec4;

	
}
#line 14 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef vec<4, unsigned int, highp>		highp_uvec4;

	
	
	
	
	typedef vec<4, unsigned int, mediump>	mediump_uvec4;

	
	
	
	
	typedef vec<4, unsigned int, lowp>		lowp_uvec4;

	
}
#line 15 "d:\\vsprojects\\openglproject\\includes\\glm\\vec4.hpp"

#line 119 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x2.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double2x2.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.hpp"



#pragma once





namespace glm
{
	template<typename T, qualifier Q>
	struct mat<2, 2, T, Q>
	{
		typedef vec<2, T, Q> col_type;
		typedef vec<2, T, Q> row_type;
		typedef mat<2, 2, T, Q> type;
		typedef mat<2, 2, T, Q> transpose_type;
		typedef T value_type;

	private:
		col_type value[2];

	public:
		

		typedef length_t length_type;
		 static constexpr length_type length() { return 2; }

		 col_type & operator[](length_type i);
		 constexpr col_type const& operator[](length_type i) const;

		

		 constexpr mat() = default;
		template<qualifier P>
		 constexpr mat(mat<2, 2, T, P> const& m);

		 explicit constexpr mat(T scalar);
		 constexpr mat(
			T const& x1, T const& y1,
			T const& x2, T const& y2);
		 constexpr mat(
			col_type const& v1,
			col_type const& v2);

		

		template<typename U, typename V, typename M, typename N>
		 constexpr mat(
			U const& x1, V const& y1,
			M const& x2, N const& y2);

		template<typename U, typename V>
		 constexpr mat(
			vec<2, U, Q> const& v1,
			vec<2, V, Q> const& v2);

		

		template<typename U, qualifier P>
		  constexpr mat(mat<2, 2, U, P> const& m);

		  constexpr mat(mat<3, 3, T, Q> const& x);
		  constexpr mat(mat<4, 4, T, Q> const& x);
		  constexpr mat(mat<2, 3, T, Q> const& x);
		  constexpr mat(mat<3, 2, T, Q> const& x);
		  constexpr mat(mat<2, 4, T, Q> const& x);
		  constexpr mat(mat<4, 2, T, Q> const& x);
		  constexpr mat(mat<3, 4, T, Q> const& x);
		  constexpr mat(mat<4, 3, T, Q> const& x);

		

		template<typename U>
		 mat<2, 2, T, Q> & operator=(mat<2, 2, U, Q> const& m);
		template<typename U>
		 mat<2, 2, T, Q> & operator+=(U s);
		template<typename U>
		 mat<2, 2, T, Q> & operator+=(mat<2, 2, U, Q> const& m);
		template<typename U>
		 mat<2, 2, T, Q> & operator-=(U s);
		template<typename U>
		 mat<2, 2, T, Q> & operator-=(mat<2, 2, U, Q> const& m);
		template<typename U>
		 mat<2, 2, T, Q> & operator*=(U s);
		template<typename U>
		 mat<2, 2, T, Q> & operator*=(mat<2, 2, U, Q> const& m);
		template<typename U>
		 mat<2, 2, T, Q> & operator/=(U s);
		template<typename U>
		 mat<2, 2, T, Q> & operator/=(mat<2, 2, U, Q> const& m);

		

		 mat<2, 2, T, Q> & operator++ ();
		 mat<2, 2, T, Q> & operator-- ();
		 mat<2, 2, T, Q> operator++(int);
		 mat<2, 2, T, Q> operator--(int);
	};

	

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator+(T scalar, mat<2, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator-(T scalar, mat<2, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator*(T scalar, mat<2, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<2, 2, T, Q>::col_type operator*(mat<2, 2, T, Q> const& m, typename mat<2, 2, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<2, 2, T, Q>::row_type operator*(typename mat<2, 2, T, Q>::col_type const& v, mat<2, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator/(mat<2, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator/(T scalar, mat<2, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<2, 2, T, Q>::col_type operator/(mat<2, 2, T, Q> const& m, typename mat<2, 2, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<2, 2, T, Q>::row_type operator/(typename mat<2, 2, T, Q>::col_type const& v, mat<2, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator/(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2);

	

	template<typename T, qualifier Q>
	 bool operator==(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 bool operator!=(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2);
} 


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"












#pragma once



#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"




#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x3.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double2x3.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.hpp"



#pragma once






namespace glm
{
	template<typename T, qualifier Q>
	struct mat<2, 3, T, Q>
	{
		typedef vec<3, T, Q> col_type;
		typedef vec<2, T, Q> row_type;
		typedef mat<2, 3, T, Q> type;
		typedef mat<3, 2, T, Q> transpose_type;
		typedef T value_type;

	private:
		col_type value[2];

	public:
		

		typedef length_t length_type;
		 static constexpr length_type length() { return 2; }

		 col_type & operator[](length_type i);
		 constexpr col_type const& operator[](length_type i) const;

		

		 constexpr mat() = default;
		template<qualifier P>
		 constexpr mat(mat<2, 3, T, P> const& m);

		 explicit constexpr mat(T scalar);
		 constexpr mat(
			T x0, T y0, T z0,
			T x1, T y1, T z1);
		 constexpr mat(
			col_type const& v0,
			col_type const& v1);

		

		template<typename X1, typename Y1, typename Z1, typename X2, typename Y2, typename Z2>
		 constexpr mat(
			X1 x1, Y1 y1, Z1 z1,
			X2 x2, Y2 y2, Z2 z2);

		template<typename U, typename V>
		 constexpr mat(
			vec<3, U, Q> const& v1,
			vec<3, V, Q> const& v2);

		

		template<typename U, qualifier P>
		  constexpr mat(mat<2, 3, U, P> const& m);

		  constexpr mat(mat<2, 2, T, Q> const& x);
		  constexpr mat(mat<3, 3, T, Q> const& x);
		  constexpr mat(mat<4, 4, T, Q> const& x);
		  constexpr mat(mat<2, 4, T, Q> const& x);
		  constexpr mat(mat<3, 2, T, Q> const& x);
		  constexpr mat(mat<3, 4, T, Q> const& x);
		  constexpr mat(mat<4, 2, T, Q> const& x);
		  constexpr mat(mat<4, 3, T, Q> const& x);

		

		template<typename U>
		 mat<2, 3, T, Q> & operator=(mat<2, 3, U, Q> const& m);
		template<typename U>
		 mat<2, 3, T, Q> & operator+=(U s);
		template<typename U>
		 mat<2, 3, T, Q> & operator+=(mat<2, 3, U, Q> const& m);
		template<typename U>
		 mat<2, 3, T, Q> & operator-=(U s);
		template<typename U>
		 mat<2, 3, T, Q> & operator-=(mat<2, 3, U, Q> const& m);
		template<typename U>
		 mat<2, 3, T, Q> & operator*=(U s);
		template<typename U>
		 mat<2, 3, T, Q> & operator/=(U s);

		

		 mat<2, 3, T, Q> & operator++ ();
		 mat<2, 3, T, Q> & operator-- ();
		 mat<2, 3, T, Q> operator++(int);
		 mat<2, 3, T, Q> operator--(int);
	};

	

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator*(T scalar, mat<2, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<2, 3, T, Q>::col_type operator*(mat<2, 3, T, Q> const& m, typename mat<2, 3, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<2, 3, T, Q>::row_type operator*(typename mat<2, 3, T, Q>::col_type const& v, mat<2, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<2, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<3, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<4, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator/(mat<2, 3, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator/(T scalar, mat<2, 3, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 bool operator==(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 bool operator!=(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
namespace glm
{
	













#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr mat<2, 3, T, Q>::mat(mat<2, 3, T, P> const& m)

			: value{m.value[0], m.value[1]}
#line 25 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 30 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat(T scalar)

			: value{col_type(scalar, 0, 0), col_type(0, scalar, 0)}
#line 37 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 42 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat
	(
		T x0, T y0, T z0,
		T x1, T y1, T z1
	)

			: value{col_type(x0, y0, z0), col_type(x1, y1, z1)}
#line 53 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 58 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat(col_type const& v0, col_type const& v1)

			: value{col_type(v0), col_type(v1)}
#line 65 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 70 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	

	template<typename T, qualifier Q>
	template<
		typename X1, typename Y1, typename Z1,
		typename X2, typename Y2, typename Z2>
	 inline constexpr mat<2, 3, T, Q>::mat
	(
		X1 x1, Y1 y1, Z1 z1,
		X2 x2, Y2 y2, Z2 z2
	)

			: value{col_type(x1, y1, z1), col_type(x2, y2, z2)}
#line 86 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 91 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	template<typename V1, typename V2>
	 inline constexpr mat<2, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> const& v2)

			: value{col_type(v1), col_type(v2)}
#line 99 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 104 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr mat<2, 3, T, Q>::mat(mat<2, 3, U, P> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 114 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 119 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0)}
#line 126 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 131 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr  mat<2, 3, T, Q>::mat(mat<3, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 138 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 143 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)

		: value{col_type(m[0]), col_type(m[1])}
#line 150 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 155 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 162 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 167 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0)}
#line 174 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 179 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 186 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 191 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0)}
#line 198 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 203 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 3, T, Q>::mat(mat<4, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 210 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	{



#line 215 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl"
	}

	

	template<typename T, qualifier Q>
	 inline typename mat<2, 3, T, Q>::col_type & mat<2, 3, T, Q>::operator[](typename mat<2, 3, T, Q>::length_type i)
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl", (unsigned)(222)), 0) );
		return this->value[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr typename mat<2, 3, T, Q>::col_type const& mat<2, 3, T, Q>::operator[](typename mat<2, 3, T, Q>::length_type i) const
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.inl", (unsigned)(229)), 0) );
		return this->value[i];
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator=(mat<2, 3, U, Q> const& m)
	{
		this->value[0] = m[0];
		this->value[1] = m[1];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator+=(U s)
	{
		this->value[0] += s;
		this->value[1] += s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator+=(mat<2, 3, U, Q> const& m)
	{
		this->value[0] += m[0];
		this->value[1] += m[1];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator-=(U s)
	{
		this->value[0] -= s;
		this->value[1] -= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator-=(mat<2, 3, U, Q> const& m)
	{
		this->value[0] -= m[0];
		this->value[1] -= m[1];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator*=(U s)
	{
		this->value[0] *= s;
		this->value[1] *= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator/=(U s)
	{
		this->value[0] /= s;
		this->value[1] /= s;
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator++()
	{
		++this->value[0];
		++this->value[1];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator--()
	{
		--this->value[0];
		--this->value[1];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> mat<2, 3, T, Q>::operator++(int)
	{
		mat<2, 3, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> mat<2, 3, T, Q>::operator--(int)
	{
		mat<2, 3, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m)
	{
		return m;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m)
	{
		return mat<2, 3, T, Q>(
			-m[0],
			-m[1]);
	}

	

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m, T scalar)
	{
		return mat<2, 3, T, Q>(
			m[0] + scalar,
			m[1] + scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)
	{
		return mat<2, 3, T, Q>(
			m1[0] + m2[0],
			m1[1] + m2[1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m, T scalar)
	{
		return mat<2, 3, T, Q>(
			m[0] - scalar,
			m[1] - scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)
	{
		return mat<2, 3, T, Q>(
			m1[0] - m2[0],
			m1[1] - m2[1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m, T scalar)
	{
		return mat<2, 3, T, Q>(
			m[0] * scalar,
			m[1] * scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator*(T scalar, mat<2, 3, T, Q> const& m)
	{
		return mat<2, 3, T, Q>(
			m[0] * scalar,
			m[1] * scalar);
	}

	template<typename T, qualifier Q>
	 inline typename mat<2, 3, T, Q>::col_type operator*
	(
		mat<2, 3, T, Q> const& m,
		typename mat<2, 3, T, Q>::row_type const& v)
	{
		return typename mat<2, 3, T, Q>::col_type(
			m[0][0] * v.x + m[1][0] * v.y,
			m[0][1] * v.x + m[1][1] * v.y,
			m[0][2] * v.x + m[1][2] * v.y);
	}

	template<typename T, qualifier Q>
	 inline typename mat<2, 3, T, Q>::row_type operator*
	(
		typename mat<2, 3, T, Q>::col_type const& v,
		mat<2, 3, T, Q> const& m)
	{
		return typename mat<2, 3, T, Q>::row_type(
			v.x * m[0][0] + v.y * m[0][1] + v.z * m[0][2],
			v.x * m[1][0] + v.y * m[1][1] + v.z * m[1][2]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<2, 2, T, Q> const& m2)
	{
		return mat<2, 3, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<3, 2, T, Q> const& m2)
	{
		T SrcA00 = m1[0][0];
		T SrcA01 = m1[0][1];
		T SrcA02 = m1[0][2];
		T SrcA10 = m1[1][0];
		T SrcA11 = m1[1][1];
		T SrcA12 = m1[1][2];

		T SrcB00 = m2[0][0];
		T SrcB01 = m2[0][1];
		T SrcB10 = m2[1][0];
		T SrcB11 = m2[1][1];
		T SrcB20 = m2[2][0];
		T SrcB21 = m2[2][1];

		mat<3, 3, T, Q> Result;
		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01;
		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01;
		Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01;
		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11;
		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11;
		Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11;
		Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21;
		Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21;
		Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<4, 2, T, Q> const& m2)
	{
		return mat<4, 3, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1],
			m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1],
			m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1],
			m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1],
			m1[0][2] * m2[3][0] + m1[1][2] * m2[3][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator/(mat<2, 3, T, Q> const& m, T scalar)
	{
		return mat<2, 3, T, Q>(
			m[0] / scalar,
			m[1] / scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator/(T scalar, mat<2, 3, T, Q> const& m)
	{
		return mat<2, 3, T, Q>(
			scalar / m[0],
			scalar / m[1]);
	}

	

	template<typename T, qualifier Q>
	 inline bool operator==(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)
	{
		return (m1[0] == m2[0]) && (m1[1] == m2[1]);
	}

	template<typename T, qualifier Q>
	 inline bool operator!=(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)
	{
		return (m1[0] != m2[0]) || (m1[1] != m2[1]);
	}
} 
#line 159 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.hpp"
#line 160 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x3.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double2x3.hpp"

namespace glm
{
	
	

	
	
	
	typedef mat<2, 3, double, defaultp>		dmat2x3;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double2x3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;

	
	
	
	
	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;

	
	
	
	
	typedef mat<2, 3, double, highp>	highp_dmat2x3;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float2x3.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef mat<2, 3, float, defaultp>		mat2x3;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float2x3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<2, 3, float, lowp>		lowp_mat2x3;

	
	
	
	
	typedef mat<2, 3, float, mediump>	mediump_mat2x3;

	
	
	
	
	typedef mat<2, 3, float, highp>		highp_mat2x3;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x3.hpp"

#line 23 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x4.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double2x4.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.hpp"



#pragma once






namespace glm
{
	template<typename T, qualifier Q>
	struct mat<2, 4, T, Q>
	{
		typedef vec<4, T, Q> col_type;
		typedef vec<2, T, Q> row_type;
		typedef mat<2, 4, T, Q> type;
		typedef mat<4, 2, T, Q> transpose_type;
		typedef T value_type;

	private:
		col_type value[2];

	public:
		

		typedef length_t length_type;
		 static constexpr length_type length() { return 2; }

		 col_type & operator[](length_type i);
		 constexpr col_type const& operator[](length_type i) const;

		

		 constexpr mat() = default;
		template<qualifier P>
		 constexpr mat(mat<2, 4, T, P> const& m);

		 explicit constexpr mat(T scalar);
		 constexpr mat(
			T x0, T y0, T z0, T w0,
			T x1, T y1, T z1, T w1);
		 constexpr mat(
			col_type const& v0,
			col_type const& v1);

		

		template<
			typename X1, typename Y1, typename Z1, typename W1,
			typename X2, typename Y2, typename Z2, typename W2>
		 constexpr mat(
			X1 x1, Y1 y1, Z1 z1, W1 w1,
			X2 x2, Y2 y2, Z2 z2, W2 w2);

		template<typename U, typename V>
		 constexpr mat(
			vec<4, U, Q> const& v1,
			vec<4, V, Q> const& v2);

		

		template<typename U, qualifier P>
		  constexpr mat(mat<2, 4, U, P> const& m);

		  constexpr mat(mat<2, 2, T, Q> const& x);
		  constexpr mat(mat<3, 3, T, Q> const& x);
		  constexpr mat(mat<4, 4, T, Q> const& x);
		  constexpr mat(mat<2, 3, T, Q> const& x);
		  constexpr mat(mat<3, 2, T, Q> const& x);
		  constexpr mat(mat<3, 4, T, Q> const& x);
		  constexpr mat(mat<4, 2, T, Q> const& x);
		  constexpr mat(mat<4, 3, T, Q> const& x);

		

		template<typename U>
		 mat<2, 4, T, Q> & operator=(mat<2, 4, U, Q> const& m);
		template<typename U>
		 mat<2, 4, T, Q> & operator+=(U s);
		template<typename U>
		 mat<2, 4, T, Q> & operator+=(mat<2, 4, U, Q> const& m);
		template<typename U>
		 mat<2, 4, T, Q> & operator-=(U s);
		template<typename U>
		 mat<2, 4, T, Q> & operator-=(mat<2, 4, U, Q> const& m);
		template<typename U>
		 mat<2, 4, T, Q> & operator*=(U s);
		template<typename U>
		 mat<2, 4, T, Q> & operator/=(U s);

		

		 mat<2, 4, T, Q> & operator++ ();
		 mat<2, 4, T, Q> & operator-- ();
		 mat<2, 4, T, Q> operator++(int);
		 mat<2, 4, T, Q> operator--(int);
	};

	

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator*(T scalar, mat<2, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<2, 4, T, Q>::col_type operator*(mat<2, 4, T, Q> const& m, typename mat<2, 4, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<2, 4, T, Q>::row_type operator*(typename mat<2, 4, T, Q>::col_type const& v, mat<2, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<4, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<2, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<3, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator/(mat<2, 4, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator/(T scalar, mat<2, 4, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 bool operator==(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 bool operator!=(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
namespace glm
{
	













#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<2, 4, T, P> const& m)

			: value{m[0], m[1]}
#line 25 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 30 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(T s)

			: value{col_type(s, 0, 0, 0), col_type(0, s, 0, 0)}
#line 37 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 42 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat
	(
		T x0, T y0, T z0, T w0,
		T x1, T y1, T z1, T w1
	)

			: value{col_type(x0, y0, z0, w0), col_type(x1, y1, z1, w1)}
#line 53 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 58 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(col_type const& v0, col_type const& v1)

			: value{col_type(v0), col_type(v1)}
#line 65 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 70 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	

	template<typename T, qualifier Q>
	template<
		typename X1, typename Y1, typename Z1, typename W1,
		typename X2, typename Y2, typename Z2, typename W2>
	 inline constexpr mat<2, 4, T, Q>::mat
	(
		X1 x1, Y1 y1, Z1 z1, W1 w1,
		X2 x2, Y2 y2, Z2 z2, W2 w2
	)

			: value{
				col_type(x1, y1, z1, w1),
				col_type(x2, y2, z2, w2)}
#line 88 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 93 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	template<typename V1, typename V2>
	 inline constexpr mat<2, 4, T, Q>::mat(vec<4, V1, Q> const& v1, vec<4, V2, Q> const& v2)

			: value{col_type(v1), col_type(v2)}
#line 101 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 106 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<2, 4, U, P> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 116 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 121 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)

			: value{col_type(m[0], 0, 0), col_type(m[1], 0, 0)}
#line 128 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 133 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0)}
#line 140 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 145 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<4, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 152 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 157 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0)}
#line 164 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 169 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)

			: value{col_type(m[0], 0, 0), col_type(m[1], 0, 0)}
#line 176 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 181 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<3, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 188 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 193 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)

			: value{col_type(m[0], 0, 0), col_type(m[1], 0, 0)}
#line 200 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 205 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0)}
#line 212 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	{



#line 217 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl"
	}

	

	template<typename T, qualifier Q>
	 inline typename mat<2, 4, T, Q>::col_type & mat<2, 4, T, Q>::operator[](typename mat<2, 4, T, Q>::length_type i)
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl", (unsigned)(224)), 0) );
		return this->value[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr typename mat<2, 4, T, Q>::col_type const& mat<2, 4, T, Q>::operator[](typename mat<2, 4, T, Q>::length_type i) const
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.inl", (unsigned)(231)), 0) );
		return this->value[i];
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator=(mat<2, 4, U, Q> const& m)
	{
		this->value[0] = m[0];
		this->value[1] = m[1];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator+=(U s)
	{
		this->value[0] += s;
		this->value[1] += s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator+=(mat<2, 4, U, Q> const& m)
	{
		this->value[0] += m[0];
		this->value[1] += m[1];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator-=(U s)
	{
		this->value[0] -= s;
		this->value[1] -= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator-=(mat<2, 4, U, Q> const& m)
	{
		this->value[0] -= m[0];
		this->value[1] -= m[1];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator*=(U s)
	{
		this->value[0] *= s;
		this->value[1] *= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 4, T, Q> & mat<2, 4, T, Q>::operator/=(U s)
	{
		this->value[0] /= s;
		this->value[1] /= s;
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator++()
	{
		++this->value[0];
		++this->value[1];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator--()
	{
		--this->value[0];
		--this->value[1];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> mat<2, 4, T, Q>::operator++(int)
	{
		mat<2, 4, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> mat<2, 4, T, Q>::operator--(int)
	{
		mat<2, 4, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m)
	{
		return m;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m)
	{
		return mat<2, 4, T, Q>(
			-m[0],
			-m[1]);
	}

	

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m, T scalar)
	{
		return mat<2, 4, T, Q>(
			m[0] + scalar,
			m[1] + scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)
	{
		return mat<2, 4, T, Q>(
			m1[0] + m2[0],
			m1[1] + m2[1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m, T scalar)
	{
		return mat<2, 4, T, Q>(
			m[0] - scalar,
			m[1] - scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)
	{
		return mat<2, 4, T, Q>(
			m1[0] - m2[0],
			m1[1] - m2[1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m, T scalar)
	{
		return mat<2, 4, T, Q>(
			m[0] * scalar,
			m[1] * scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator*(T scalar, mat<2, 4, T, Q> const& m)
	{
		return mat<2, 4, T, Q>(
			m[0] * scalar,
			m[1] * scalar);
	}

	template<typename T, qualifier Q>
	 inline typename mat<2, 4, T, Q>::col_type operator*(mat<2, 4, T, Q> const& m, typename mat<2, 4, T, Q>::row_type const& v)
	{
		return typename mat<2, 4, T, Q>::col_type(
			m[0][0] * v.x + m[1][0] * v.y,
			m[0][1] * v.x + m[1][1] * v.y,
			m[0][2] * v.x + m[1][2] * v.y,
			m[0][3] * v.x + m[1][3] * v.y);
	}

	template<typename T, qualifier Q>
	 inline typename mat<2, 4, T, Q>::row_type operator*(typename mat<2, 4, T, Q>::col_type const& v, mat<2, 4, T, Q> const& m)
	{
		return typename mat<2, 4, T, Q>::row_type(
			v.x * m[0][0] + v.y * m[0][1] + v.z * m[0][2] + v.w * m[0][3],
			v.x * m[1][0] + v.y * m[1][1] + v.z * m[1][2] + v.w * m[1][3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<4, 2, T, Q> const& m2)
	{
		T SrcA00 = m1[0][0];
		T SrcA01 = m1[0][1];
		T SrcA02 = m1[0][2];
		T SrcA03 = m1[0][3];
		T SrcA10 = m1[1][0];
		T SrcA11 = m1[1][1];
		T SrcA12 = m1[1][2];
		T SrcA13 = m1[1][3];

		T SrcB00 = m2[0][0];
		T SrcB01 = m2[0][1];
		T SrcB10 = m2[1][0];
		T SrcB11 = m2[1][1];
		T SrcB20 = m2[2][0];
		T SrcB21 = m2[2][1];
		T SrcB30 = m2[3][0];
		T SrcB31 = m2[3][1];

		mat<4, 4, T, Q> Result;
		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01;
		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01;
		Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01;
		Result[0][3] = SrcA03 * SrcB00 + SrcA13 * SrcB01;
		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11;
		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11;
		Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11;
		Result[1][3] = SrcA03 * SrcB10 + SrcA13 * SrcB11;
		Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21;
		Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21;
		Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21;
		Result[2][3] = SrcA03 * SrcB20 + SrcA13 * SrcB21;
		Result[3][0] = SrcA00 * SrcB30 + SrcA10 * SrcB31;
		Result[3][1] = SrcA01 * SrcB30 + SrcA11 * SrcB31;
		Result[3][2] = SrcA02 * SrcB30 + SrcA12 * SrcB31;
		Result[3][3] = SrcA03 * SrcB30 + SrcA13 * SrcB31;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<2, 2, T, Q> const& m2)
	{
		return mat<2, 4, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1],
			m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1],
			m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<3, 2, T, Q> const& m2)
	{
		return mat<3, 4, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1],
			m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1],
			m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1],
			m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1],
			m1[0][3] * m2[2][0] + m1[1][3] * m2[2][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator/(mat<2, 4, T, Q> const& m, T scalar)
	{
		return mat<2, 4, T, Q>(
			m[0] / scalar,
			m[1] / scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator/(T scalar, mat<2, 4, T, Q> const& m)
	{
		return mat<2, 4, T, Q>(
			scalar / m[0],
			scalar / m[1]);
	}

	

	template<typename T, qualifier Q>
	 inline bool operator==(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)
	{
		return (m1[0] == m2[0]) && (m1[1] == m2[1]);
	}

	template<typename T, qualifier Q>
	 inline bool operator!=(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)
	{
		return (m1[0] != m2[0]) || (m1[1] != m2[1]);
	}
} 
#line 161 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.hpp"
#line 162 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x4.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double2x4.hpp"

namespace glm
{
	
	

	
	
	
	typedef mat<2, 4, double, defaultp>		dmat2x4;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double2x4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;

	
	
	
	
	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;

	
	
	
	
	typedef mat<2, 4, double, highp>	highp_dmat2x4;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float2x4.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef mat<2, 4, float, defaultp>		mat2x4;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float2x4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<2, 4, float, lowp>		lowp_mat2x4;

	
	
	
	
	typedef mat<2, 4, float, mediump>	mediump_mat2x4;

	
	
	
	
	typedef mat<2, 4, float, highp>		highp_mat2x4;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x4.hpp"

#line 24 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x2.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double3x2.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.hpp"



#pragma once






namespace glm
{
	template<typename T, qualifier Q>
	struct mat<3, 2, T, Q>
	{
		typedef vec<2, T, Q> col_type;
		typedef vec<3, T, Q> row_type;
		typedef mat<3, 2, T, Q> type;
		typedef mat<2, 3, T, Q> transpose_type;
		typedef T value_type;

	private:
		col_type value[3];

	public:
		

		typedef length_t length_type;
		 static constexpr length_type length() { return 3; }

		 col_type & operator[](length_type i);
		 constexpr col_type const& operator[](length_type i) const;

		

		 constexpr mat() = default;
		template<qualifier P>
		 constexpr mat(mat<3, 2, T, P> const& m);

		 explicit constexpr mat(T scalar);
		 constexpr mat(
			T x0, T y0,
			T x1, T y1,
			T x2, T y2);
		 constexpr mat(
			col_type const& v0,
			col_type const& v1,
			col_type const& v2);

		

		template<
			typename X1, typename Y1,
			typename X2, typename Y2,
			typename X3, typename Y3>
		 constexpr mat(
			X1 x1, Y1 y1,
			X2 x2, Y2 y2,
			X3 x3, Y3 y3);

		template<typename V1, typename V2, typename V3>
		 constexpr mat(
			vec<2, V1, Q> const& v1,
			vec<2, V2, Q> const& v2,
			vec<2, V3, Q> const& v3);

		

		template<typename U, qualifier P>
		  constexpr mat(mat<3, 2, U, P> const& m);

		  constexpr mat(mat<2, 2, T, Q> const& x);
		  constexpr mat(mat<3, 3, T, Q> const& x);
		  constexpr mat(mat<4, 4, T, Q> const& x);
		  constexpr mat(mat<2, 3, T, Q> const& x);
		  constexpr mat(mat<2, 4, T, Q> const& x);
		  constexpr mat(mat<3, 4, T, Q> const& x);
		  constexpr mat(mat<4, 2, T, Q> const& x);
		  constexpr mat(mat<4, 3, T, Q> const& x);

		

		template<typename U>
		 mat<3, 2, T, Q> & operator=(mat<3, 2, U, Q> const& m);
		template<typename U>
		 mat<3, 2, T, Q> & operator+=(U s);
		template<typename U>
		 mat<3, 2, T, Q> & operator+=(mat<3, 2, U, Q> const& m);
		template<typename U>
		 mat<3, 2, T, Q> & operator-=(U s);
		template<typename U>
		 mat<3, 2, T, Q> & operator-=(mat<3, 2, U, Q> const& m);
		template<typename U>
		 mat<3, 2, T, Q> & operator*=(U s);
		template<typename U>
		 mat<3, 2, T, Q> & operator/=(U s);

		

		 mat<3, 2, T, Q> & operator++ ();
		 mat<3, 2, T, Q> & operator-- ();
		 mat<3, 2, T, Q> operator++(int);
		 mat<3, 2, T, Q> operator--(int);
	};

	

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator*(T scalar, mat<3, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<3, 2, T, Q>::col_type operator*(mat<3, 2, T, Q> const& m, typename mat<3, 2, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<3, 2, T, Q>::row_type operator*(typename mat<3, 2, T, Q>::col_type const& v, mat<3, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<2, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<3, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<4, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator/(mat<3, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator/(T scalar, mat<3, 2, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 bool operator==(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 bool operator!=(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2);

}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
namespace glm
{
	














#line 19 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<3, 2, T, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 26 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 32 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(T s)

			: value{col_type(s, 0), col_type(0, s), col_type(0, 0)}
#line 39 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 45 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat
	(
		T x0, T y0,
		T x1, T y1,
		T x2, T y2
	)

			: value{col_type(x0, y0), col_type(x1, y1), col_type(x2, y2)}
#line 57 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 63 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(col_type const& v0, col_type const& v1, col_type const& v2)

			: value{col_type(v0), col_type(v1), col_type(v2)}
#line 70 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 76 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	

	template<typename T, qualifier Q>
	template<
		typename X0, typename Y0,
		typename X1, typename Y1,
		typename X2, typename Y2>
	 inline constexpr mat<3, 2, T, Q>::mat
	(
		X0 x0, Y0 y0,
		X1 x1, Y1 y1,
		X2 x2, Y2 y2
	)

			: value{col_type(x0, y0), col_type(x1, y1), col_type(x2, y2)}
#line 94 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 100 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	template<typename V0, typename V1, typename V2>
	 inline constexpr mat<3, 2, T, Q>::mat(vec<2, V0, Q> const& v0, vec<2, V1, Q> const& v1, vec<2, V2, Q> const& v2)

			: value{col_type(v0), col_type(v1), col_type(v2)}
#line 108 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 114 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<3, 2, U, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 124 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 130 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<2, 2, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0)}
#line 137 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 143 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 150 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 156 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 163 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 169 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0)}
#line 176 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 182 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0)}
#line 189 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 195 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 202 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 208 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<4, 2, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 215 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 221 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 228 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	{




#line 234 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl"
	}

	

	template<typename T, qualifier Q>
	 inline typename mat<3, 2, T, Q>::col_type & mat<3, 2, T, Q>::operator[](typename mat<3, 2, T, Q>::length_type i)
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl", (unsigned)(241)), 0) );
		return this->value[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr typename mat<3, 2, T, Q>::col_type const& mat<3, 2, T, Q>::operator[](typename mat<3, 2, T, Q>::length_type i) const
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.inl", (unsigned)(248)), 0) );
		return this->value[i];
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator=(mat<3, 2, U, Q> const& m)
	{
		this->value[0] = m[0];
		this->value[1] = m[1];
		this->value[2] = m[2];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator+=(U s)
	{
		this->value[0] += s;
		this->value[1] += s;
		this->value[2] += s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator+=(mat<3, 2, U, Q> const& m)
	{
		this->value[0] += m[0];
		this->value[1] += m[1];
		this->value[2] += m[2];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator-=(U s)
	{
		this->value[0] -= s;
		this->value[1] -= s;
		this->value[2] -= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator-=(mat<3, 2, U, Q> const& m)
	{
		this->value[0] -= m[0];
		this->value[1] -= m[1];
		this->value[2] -= m[2];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator*=(U s)
	{
		this->value[0] *= s;
		this->value[1] *= s;
		this->value[2] *= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 2, T, Q> & mat<3, 2, T, Q>::operator/=(U s)
	{
		this->value[0] /= s;
		this->value[1] /= s;
		this->value[2] /= s;
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator++()
	{
		++this->value[0];
		++this->value[1];
		++this->value[2];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator--()
	{
		--this->value[0];
		--this->value[1];
		--this->value[2];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> mat<3, 2, T, Q>::operator++(int)
	{
		mat<3, 2, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> mat<3, 2, T, Q>::operator--(int)
	{
		mat<3, 2, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m)
	{
		return m;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m)
	{
		return mat<3, 2, T, Q>(
			-m[0],
			-m[1],
			-m[2]);
	}

	

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m, T scalar)
	{
		return mat<3, 2, T, Q>(
			m[0] + scalar,
			m[1] + scalar,
			m[2] + scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)
	{
		return mat<3, 2, T, Q>(
			m1[0] + m2[0],
			m1[1] + m2[1],
			m1[2] + m2[2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m, T scalar)
	{
		return mat<3, 2, T, Q>(
			m[0] - scalar,
			m[1] - scalar,
			m[2] - scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)
	{
		return mat<3, 2, T, Q>(
			m1[0] - m2[0],
			m1[1] - m2[1],
			m1[2] - m2[2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m, T scalar)
	{
		return mat<3, 2, T, Q>(
			m[0] * scalar,
			m[1] * scalar,
			m[2] * scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator*(T scalar, mat<3, 2, T, Q> const& m)
	{
		return mat<3, 2, T, Q>(
			m[0] * scalar,
			m[1] * scalar,
			m[2] * scalar);
	}

	template<typename T, qualifier Q>
	 inline typename mat<3, 2, T, Q>::col_type operator*(mat<3, 2, T, Q> const& m, typename mat<3, 2, T, Q>::row_type const& v)
	{
		return typename mat<3, 2, T, Q>::col_type(
			m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
			m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z);
	}

	template<typename T, qualifier Q>
	 inline typename mat<3, 2, T, Q>::row_type operator*(typename mat<3, 2, T, Q>::col_type const& v, mat<3, 2, T, Q> const& m)
	{
		return typename mat<3, 2, T, Q>::row_type(
			v.x * m[0][0] + v.y * m[0][1],
			v.x * m[1][0] + v.y * m[1][1],
			v.x * m[2][0] + v.y * m[2][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<2, 3, T, Q> const& m2)
	{
		const T SrcA00 = m1[0][0];
		const T SrcA01 = m1[0][1];
		const T SrcA10 = m1[1][0];
		const T SrcA11 = m1[1][1];
		const T SrcA20 = m1[2][0];
		const T SrcA21 = m1[2][1];

		const T SrcB00 = m2[0][0];
		const T SrcB01 = m2[0][1];
		const T SrcB02 = m2[0][2];
		const T SrcB10 = m2[1][0];
		const T SrcB11 = m2[1][1];
		const T SrcB12 = m2[1][2];

		mat<2, 2, T, Q> Result;
		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02;
		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02;
		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12;
		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<3, 3, T, Q> const& m2)
	{
		return mat<3, 2, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<4, 3, T, Q> const& m2)
	{
		return mat<4, 2, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2],
			m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1] + m1[2][0] * m2[3][2],
			m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1] + m1[2][1] * m2[3][2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator/(mat<3, 2, T, Q> const& m, T scalar)
	{
		return mat<3, 2, T, Q>(
			m[0] / scalar,
			m[1] / scalar,
			m[2] / scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator/(T scalar, mat<3, 2, T, Q> const& m)
	{
		return mat<3, 2, T, Q>(
			scalar / m[0],
			scalar / m[1],
			scalar / m[2]);
	}

	

	template<typename T, qualifier Q>
	 inline bool operator==(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)
	{
		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);
	}

	template<typename T, qualifier Q>
	 inline bool operator!=(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)
	{
		return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]);
	}
} 
#line 167 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.hpp"
#line 168 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x2.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double3x2.hpp"

namespace glm
{
	
	

	
	
	
	typedef mat<3, 2, double, defaultp>		dmat3x2;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double3x2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;

	
	
	
	
	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;

	
	
	
	
	typedef mat<3, 2, double, highp>	highp_dmat3x2;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float3x2.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef mat<3, 2, float, defaultp>			mat3x2;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float3x2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<3, 2, float, lowp>		lowp_mat3x2;

	
	
	
	
	typedef mat<3, 2, float, mediump>	mediump_mat3x2;

	
	
	
	
	typedef mat<3, 2, float, highp>		highp_mat3x2;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x2.hpp"

#line 25 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x3.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double3x3.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.hpp"



#pragma once





namespace glm
{
	template<typename T, qualifier Q>
	struct mat<3, 3, T, Q>
	{
		typedef vec<3, T, Q> col_type;
		typedef vec<3, T, Q> row_type;
		typedef mat<3, 3, T, Q> type;
		typedef mat<3, 3, T, Q> transpose_type;
		typedef T value_type;

	private:
		col_type value[3];

	public:
		

		typedef length_t length_type;
		 static constexpr length_type length() { return 3; }

		 col_type & operator[](length_type i);
		 constexpr col_type const& operator[](length_type i) const;

		

		 constexpr mat() = default;
		template<qualifier P>
		 constexpr mat(mat<3, 3, T, P> const& m);

		 explicit constexpr mat(T scalar);
		 constexpr mat(
			T x0, T y0, T z0,
			T x1, T y1, T z1,
			T x2, T y2, T z2);
		 constexpr mat(
			col_type const& v0,
			col_type const& v1,
			col_type const& v2);

		

		template<
			typename X1, typename Y1, typename Z1,
			typename X2, typename Y2, typename Z2,
			typename X3, typename Y3, typename Z3>
		 constexpr mat(
			X1 x1, Y1 y1, Z1 z1,
			X2 x2, Y2 y2, Z2 z2,
			X3 x3, Y3 y3, Z3 z3);

		template<typename V1, typename V2, typename V3>
		 constexpr mat(
			vec<3, V1, Q> const& v1,
			vec<3, V2, Q> const& v2,
			vec<3, V3, Q> const& v3);

		

		template<typename U, qualifier P>
		  constexpr mat(mat<3, 3, U, P> const& m);

		  constexpr mat(mat<2, 2, T, Q> const& x);
		  constexpr mat(mat<4, 4, T, Q> const& x);
		  constexpr mat(mat<2, 3, T, Q> const& x);
		  constexpr mat(mat<3, 2, T, Q> const& x);
		  constexpr mat(mat<2, 4, T, Q> const& x);
		  constexpr mat(mat<4, 2, T, Q> const& x);
		  constexpr mat(mat<3, 4, T, Q> const& x);
		  constexpr mat(mat<4, 3, T, Q> const& x);

		

		template<typename U>
		 mat<3, 3, T, Q> & operator=(mat<3, 3, U, Q> const& m);
		template<typename U>
		 mat<3, 3, T, Q> & operator+=(U s);
		template<typename U>
		 mat<3, 3, T, Q> & operator+=(mat<3, 3, U, Q> const& m);
		template<typename U>
		 mat<3, 3, T, Q> & operator-=(U s);
		template<typename U>
		 mat<3, 3, T, Q> & operator-=(mat<3, 3, U, Q> const& m);
		template<typename U>
		 mat<3, 3, T, Q> & operator*=(U s);
		template<typename U>
		 mat<3, 3, T, Q> & operator*=(mat<3, 3, U, Q> const& m);
		template<typename U>
		 mat<3, 3, T, Q> & operator/=(U s);
		template<typename U>
		 mat<3, 3, T, Q> & operator/=(mat<3, 3, U, Q> const& m);

		

		 mat<3, 3, T, Q> & operator++();
		 mat<3, 3, T, Q> & operator--();
		 mat<3, 3, T, Q> operator++(int);
		 mat<3, 3, T, Q> operator--(int);
	};

	

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator+(T scalar, mat<3, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator-(T scalar, mat<3, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator*(T scalar, mat<3, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<3, 3, T, Q>::col_type operator*(mat<3, 3, T, Q> const& m, typename mat<3, 3, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<3, 3, T, Q>::row_type operator*(typename mat<3, 3, T, Q>::col_type const& v, mat<3, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator/(mat<3, 3, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator/(T scalar, mat<3, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<3, 3, T, Q>::col_type operator/(mat<3, 3, T, Q> const& m, typename mat<3, 3, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<3, 3, T, Q>::row_type operator/(typename mat<3, 3, T, Q>::col_type const& v, mat<3, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator/(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2);

	

	template<typename T, qualifier Q>
	 constexpr bool operator==(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 bool operator!=(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"


namespace glm
{
	














#line 21 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<3, 3, T, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 28 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 34 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(T s)

			: value{col_type(s, 0, 0), col_type(0, s, 0), col_type(0, 0, s)}
#line 41 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 47 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat
	(
		T x0, T y0, T z0,
		T x1, T y1, T z1,
		T x2, T y2, T z2
	)

			: value{col_type(x0, y0, z0), col_type(x1, y1, z1), col_type(x2, y2, z2)}
#line 59 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 65 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(col_type const& v0, col_type const& v1, col_type const& v2)

			: value{col_type(v0), col_type(v1), col_type(v2)}
#line 72 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 78 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	

	template<typename T, qualifier Q>
	template<
		typename X1, typename Y1, typename Z1,
		typename X2, typename Y2, typename Z2,
		typename X3, typename Y3, typename Z3>
	 inline constexpr mat<3, 3, T, Q>::mat
	(
		X1 x1, Y1 y1, Z1 z1,
		X2 x2, Y2 y2, Z2 z2,
		X3 x3, Y3 y3, Z3 z3
	)

			: value{col_type(x1, y1, z1), col_type(x2, y2, z2), col_type(x3, y3, z3)}
#line 96 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 102 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	template<typename V1, typename V2, typename V3>
	 inline constexpr mat<3, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> const& v2, vec<3, V3, Q> const& v3)

			: value{col_type(v1), col_type(v2), col_type(v3)}
#line 110 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 116 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<3, 3, U, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 126 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 132 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(0, 0, 1)}
#line 139 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 145 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 152 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 158 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<2, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0, 0, 1)}
#line 165 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 171 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(m[2], 1)}
#line 178 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 184 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0, 0, 1)}
#line 191 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 197 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(m[2], 1)}
#line 204 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 210 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 217 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 223 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 3, T, Q>::mat(mat<4, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 230 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	{




#line 236 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl"
	}

	

	template<typename T, qualifier Q>
	 inline typename mat<3, 3, T, Q>::col_type & mat<3, 3, T, Q>::operator[](typename mat<3, 3, T, Q>::length_type i)
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl", (unsigned)(243)), 0) );
		return this->value[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr typename mat<3, 3, T, Q>::col_type const& mat<3, 3, T, Q>::operator[](typename mat<3, 3, T, Q>::length_type i) const
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.inl", (unsigned)(250)), 0) );
		return this->value[i];
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator=(mat<3, 3, U, Q> const& m)
	{
		this->value[0] = m[0];
		this->value[1] = m[1];
		this->value[2] = m[2];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(U s)
	{
		this->value[0] += s;
		this->value[1] += s;
		this->value[2] += s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(mat<3, 3, U, Q> const& m)
	{
		this->value[0] += m[0];
		this->value[1] += m[1];
		this->value[2] += m[2];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(U s)
	{
		this->value[0] -= s;
		this->value[1] -= s;
		this->value[2] -= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(mat<3, 3, U, Q> const& m)
	{
		this->value[0] -= m[0];
		this->value[1] -= m[1];
		this->value[2] -= m[2];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(U s)
	{
		this->value[0] *= s;
		this->value[1] *= s;
		this->value[2] *= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(mat<3, 3, U, Q> const& m)
	{
		return (*this = *this * m);
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator/=(U s)
	{
		this->value[0] /= s;
		this->value[1] /= s;
		this->value[2] /= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator/=(mat<3, 3, U, Q> const& m)
	{
		return *this *= inverse(m);
	}

	

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator++()
	{
		++this->value[0];
		++this->value[1];
		++this->value[2];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator--()
	{
		--this->value[0];
		--this->value[1];
		--this->value[2];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> mat<3, 3, T, Q>::operator++(int)
	{
		mat<3, 3, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> mat<3, 3, T, Q>::operator--(int)
	{
		mat<3, 3, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m)
	{
		return m;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m)
	{
		return mat<3, 3, T, Q>(
			-m[0],
			-m[1],
			-m[2]);
	}

	

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m, T scalar)
	{
		return mat<3, 3, T, Q>(
			m[0] + scalar,
			m[1] + scalar,
			m[2] + scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator+(T scalar, mat<3, 3, T, Q> const& m)
	{
		return mat<3, 3, T, Q>(
			m[0] + scalar,
			m[1] + scalar,
			m[2] + scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)
	{
		return mat<3, 3, T, Q>(
			m1[0] + m2[0],
			m1[1] + m2[1],
			m1[2] + m2[2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m, T scalar)
	{
		return mat<3, 3, T, Q>(
			m[0] - scalar,
			m[1] - scalar,
			m[2] - scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator-(T scalar, mat<3, 3, T, Q> const& m)
	{
		return mat<3, 3, T, Q>(
			scalar - m[0],
			scalar - m[1],
			scalar - m[2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)
	{
		return mat<3, 3, T, Q>(
			m1[0] - m2[0],
			m1[1] - m2[1],
			m1[2] - m2[2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m, T scalar)
	{
		return mat<3, 3, T, Q>(
			m[0] * scalar,
			m[1] * scalar,
			m[2] * scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator*(T scalar, mat<3, 3, T, Q> const& m)
	{
		return mat<3, 3, T, Q>(
			m[0] * scalar,
			m[1] * scalar,
			m[2] * scalar);
	}

	template<typename T, qualifier Q>
	 inline typename mat<3, 3, T, Q>::col_type operator*(mat<3, 3, T, Q> const& m, typename mat<3, 3, T, Q>::row_type const& v)
	{
		return typename mat<3, 3, T, Q>::col_type(
			m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
			m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z,
			m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z);
	}

	template<typename T, qualifier Q>
	 inline typename mat<3, 3, T, Q>::row_type operator*(typename mat<3, 3, T, Q>::col_type const& v, mat<3, 3, T, Q> const& m)
	{
		return typename mat<3, 3, T, Q>::row_type(
			m[0][0] * v.x + m[0][1] * v.y + m[0][2] * v.z,
			m[1][0] * v.x + m[1][1] * v.y + m[1][2] * v.z,
			m[2][0] * v.x + m[2][1] * v.y + m[2][2] * v.z);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)
	{
		T const SrcA00 = m1[0][0];
		T const SrcA01 = m1[0][1];
		T const SrcA02 = m1[0][2];
		T const SrcA10 = m1[1][0];
		T const SrcA11 = m1[1][1];
		T const SrcA12 = m1[1][2];
		T const SrcA20 = m1[2][0];
		T const SrcA21 = m1[2][1];
		T const SrcA22 = m1[2][2];

		T const SrcB00 = m2[0][0];
		T const SrcB01 = m2[0][1];
		T const SrcB02 = m2[0][2];
		T const SrcB10 = m2[1][0];
		T const SrcB11 = m2[1][1];
		T const SrcB12 = m2[1][2];
		T const SrcB20 = m2[2][0];
		T const SrcB21 = m2[2][1];
		T const SrcB22 = m2[2][2];

		mat<3, 3, T, Q> Result;
		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02;
		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02;
		Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01 + SrcA22 * SrcB02;
		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12;
		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12;
		Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11 + SrcA22 * SrcB12;
		Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21 + SrcA20 * SrcB22;
		Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21 + SrcA21 * SrcB22;
		Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21 + SrcA22 * SrcB22;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<2, 3, T, Q> const& m2)
	{
		return mat<2, 3, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)
	{
		return mat<4, 3, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2],
			m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1] + m1[2][2] * m2[2][2],
			m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1] + m1[2][0] * m2[3][2],
			m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1] + m1[2][1] * m2[3][2],
			m1[0][2] * m2[3][0] + m1[1][2] * m2[3][1] + m1[2][2] * m2[3][2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator/(mat<3, 3, T, Q> const& m,	T scalar)
	{
		return mat<3, 3, T, Q>(
			m[0] / scalar,
			m[1] / scalar,
			m[2] / scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator/(T scalar, mat<3, 3, T, Q> const& m)
	{
		return mat<3, 3, T, Q>(
			scalar / m[0],
			scalar / m[1],
			scalar / m[2]);
	}

	template<typename T, qualifier Q>
	 inline typename mat<3, 3, T, Q>::col_type operator/(mat<3, 3, T, Q> const& m, typename mat<3, 3, T, Q>::row_type const& v)
	{
		return  inverse(m) * v;
	}

	template<typename T, qualifier Q>
	 inline typename mat<3, 3, T, Q>::row_type operator/(typename mat<3, 3, T, Q>::col_type const& v, mat<3, 3, T, Q> const& m)
	{
		return v * inverse(m);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator/(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)
	{
		mat<3, 3, T, Q> m1_copy(m1);
		return m1_copy /= m2;
	}

	

	template<typename T, qualifier Q>
	 inline constexpr bool operator==(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)
	{
		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);
	}

	template<typename T, qualifier Q>
	 inline bool operator!=(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> const& m2)
	{
		return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]);
	}
} 
#line 184 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.hpp"
#line 185 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x3.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double3x3.hpp"

namespace glm
{
	
	

	
	
	
	typedef mat<3, 3, double, defaultp>		dmat3x3;

	
	
	
	typedef mat<3, 3, double, defaultp>		dmat3;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double3x3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<3, 3, double, lowp>		lowp_dmat3;

	
	
	
	
	typedef mat<3, 3, double, mediump>	mediump_dmat3;

	
	
	
	
	typedef mat<3, 3, double, highp>	highp_dmat3;

	
	
	
	
	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;

	
	
	
	
	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;

	
	
	
	
	typedef mat<3, 3, double, highp>	highp_dmat3x3;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float3x3.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef mat<3, 3, float, defaultp>			mat3x3;

	
	
	
	typedef mat<3, 3, float, defaultp>			mat3;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float3x3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<3, 3, float, lowp>		lowp_mat3;

	
	
	
	
	typedef mat<3, 3, float, mediump>	mediump_mat3;

	
	
	
	
	typedef mat<3, 3, float, highp>		highp_mat3;

	
	
	
	
	typedef mat<3, 3, float, lowp>		lowp_mat3x3;

	
	
	
	
	typedef mat<3, 3, float, mediump>	mediump_mat3x3;

	
	
	
	
	typedef mat<3, 3, float, highp>		highp_mat3x3;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x3.hpp"
#line 26 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x4.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double3x4.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.hpp"



#pragma once






namespace glm
{
	template<typename T, qualifier Q>
	struct mat<3, 4, T, Q>
	{
		typedef vec<4, T, Q> col_type;
		typedef vec<3, T, Q> row_type;
		typedef mat<3, 4, T, Q> type;
		typedef mat<4, 3, T, Q> transpose_type;
		typedef T value_type;

	private:
		col_type value[3];

	public:
		

		typedef length_t length_type;
		 static constexpr length_type length() { return 3; }

		 col_type & operator[](length_type i);
		 constexpr col_type const& operator[](length_type i) const;

		

		 constexpr mat() = default;
		template<qualifier P>
		 constexpr mat(mat<3, 4, T, P> const& m);

		 explicit constexpr mat(T scalar);
		 constexpr mat(
			T x0, T y0, T z0, T w0,
			T x1, T y1, T z1, T w1,
			T x2, T y2, T z2, T w2);
		 constexpr mat(
			col_type const& v0,
			col_type const& v1,
			col_type const& v2);

		

		template<
			typename X1, typename Y1, typename Z1, typename W1,
			typename X2, typename Y2, typename Z2, typename W2,
			typename X3, typename Y3, typename Z3, typename W3>
		 constexpr mat(
			X1 x1, Y1 y1, Z1 z1, W1 w1,
			X2 x2, Y2 y2, Z2 z2, W2 w2,
			X3 x3, Y3 y3, Z3 z3, W3 w3);

		template<typename V1, typename V2, typename V3>
		 constexpr mat(
			vec<4, V1, Q> const& v1,
			vec<4, V2, Q> const& v2,
			vec<4, V3, Q> const& v3);

		

		template<typename U, qualifier P>
		  constexpr mat(mat<3, 4, U, P> const& m);

		  constexpr mat(mat<2, 2, T, Q> const& x);
		  constexpr mat(mat<3, 3, T, Q> const& x);
		  constexpr mat(mat<4, 4, T, Q> const& x);
		  constexpr mat(mat<2, 3, T, Q> const& x);
		  constexpr mat(mat<3, 2, T, Q> const& x);
		  constexpr mat(mat<2, 4, T, Q> const& x);
		  constexpr mat(mat<4, 2, T, Q> const& x);
		  constexpr mat(mat<4, 3, T, Q> const& x);

		

		template<typename U>
		 mat<3, 4, T, Q> & operator=(mat<3, 4, U, Q> const& m);
		template<typename U>
		 mat<3, 4, T, Q> & operator+=(U s);
		template<typename U>
		 mat<3, 4, T, Q> & operator+=(mat<3, 4, U, Q> const& m);
		template<typename U>
		 mat<3, 4, T, Q> & operator-=(U s);
		template<typename U>
		 mat<3, 4, T, Q> & operator-=(mat<3, 4, U, Q> const& m);
		template<typename U>
		 mat<3, 4, T, Q> & operator*=(U s);
		template<typename U>
		 mat<3, 4, T, Q> & operator/=(U s);

		

		 mat<3, 4, T, Q> & operator++();
		 mat<3, 4, T, Q> & operator--();
		 mat<3, 4, T, Q> operator++(int);
		 mat<3, 4, T, Q> operator--(int);
	};

	

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator*(T scalar, mat<3, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<3, 4, T, Q>::col_type operator*(mat<3, 4, T, Q> const& m, typename mat<3, 4, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<3, 4, T, Q>::row_type operator*(typename mat<3, 4, T, Q>::col_type const& v, mat<3, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1,	mat<4, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<2, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1,	mat<3, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator/(mat<3, 4, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator/(T scalar, mat<3, 4, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 bool operator==(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 bool operator!=(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
namespace glm
{
	














#line 19 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<3, 4, T, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 26 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 32 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(T s)

			: value{col_type(s, 0, 0, 0), col_type(0, s, 0, 0), col_type(0, 0, s, 0)}
#line 39 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 45 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat
	(
		T x0, T y0, T z0, T w0,
		T x1, T y1, T z1, T w1,
		T x2, T y2, T z2, T w2
	)

			: value{
				col_type(x0, y0, z0, w0),
				col_type(x1, y1, z1, w1),
				col_type(x2, y2, z2, w2)}
#line 60 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 66 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(col_type const& v0, col_type const& v1, col_type const& v2)

			: value{col_type(v0), col_type(v1), col_type(v2)}
#line 73 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 79 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	

	template<typename T, qualifier Q>
	template<
		typename X0, typename Y0, typename Z0, typename W0,
		typename X1, typename Y1, typename Z1, typename W1,
		typename X2, typename Y2, typename Z2, typename W2>
	 inline constexpr mat<3, 4, T, Q>::mat
	(
		X0 x0, Y0 y0, Z0 z0, W0 w0,
		X1 x1, Y1 y1, Z1 z1, W1 w1,
		X2 x2, Y2 y2, Z2 z2, W2 w2
	)

			: value{
				col_type(x0, y0, z0, w0),
				col_type(x1, y1, z1, w1),
				col_type(x2, y2, z2, w2)}
#line 100 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 106 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	template<typename V1, typename V2, typename V3>
	 inline constexpr mat<3, 4, T, Q>::mat(vec<4, V1, Q> const& v0, vec<4, V2, Q> const& v1, vec<4, V3, Q> const& v2)

			: value{col_type(v0), col_type(v1), col_type(v2)}
#line 114 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 120 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<3, 4, U, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 130 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)

			: value{col_type(m[0], 0, 0), col_type(m[1], 0, 0), col_type(0, 0, 1, 0)}
#line 143 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 149 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(m[2], 0)}
#line 156 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 162 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<4, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2])}
#line 169 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 175 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(0, 0, 1, 0)}
#line 182 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 188 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)

			: value{col_type(m[0], 0, 0), col_type(m[1], 0, 0), col_type(m[2], 1, 0)}
#line 195 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 201 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<2, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0, 0, 1, 0)}
#line 208 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 214 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)

			: value{col_type(m[0], 0, 0), col_type(m[1], 0, 0), col_type(m[2], 1, 0)}
#line 221 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 227 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<3, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(m[2], 0)}
#line 234 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	{




#line 240 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl"
	}

	

	template<typename T, qualifier Q>
	 inline typename mat<3, 4, T, Q>::col_type & mat<3, 4, T, Q>::operator[](typename mat<3, 4, T, Q>::length_type i)
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl", (unsigned)(247)), 0) );
		return this->value[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr typename mat<3, 4, T, Q>::col_type const& mat<3, 4, T, Q>::operator[](typename mat<3, 4, T, Q>::length_type i) const
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.inl", (unsigned)(254)), 0) );
		return this->value[i];
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator=(mat<3, 4, U, Q> const& m)
	{
		this->value[0] = m[0];
		this->value[1] = m[1];
		this->value[2] = m[2];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator+=(U s)
	{
		this->value[0] += s;
		this->value[1] += s;
		this->value[2] += s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator+=(mat<3, 4, U, Q> const& m)
	{
		this->value[0] += m[0];
		this->value[1] += m[1];
		this->value[2] += m[2];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator-=(U s)
	{
		this->value[0] -= s;
		this->value[1] -= s;
		this->value[2] -= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator-=(mat<3, 4, U, Q> const& m)
	{
		this->value[0] -= m[0];
		this->value[1] -= m[1];
		this->value[2] -= m[2];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator*=(U s)
	{
		this->value[0] *= s;
		this->value[1] *= s;
		this->value[2] *= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<3, 4, T, Q> & mat<3, 4, T, Q>::operator/=(U s)
	{
		this->value[0] /= s;
		this->value[1] /= s;
		this->value[2] /= s;
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator++()
	{
		++this->value[0];
		++this->value[1];
		++this->value[2];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator--()
	{
		--this->value[0];
		--this->value[1];
		--this->value[2];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> mat<3, 4, T, Q>::operator++(int)
	{
		mat<3, 4, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> mat<3, 4, T, Q>::operator--(int)
	{
		mat<3, 4, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m)
	{
		return m;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m)
	{
		return mat<3, 4, T, Q>(
			-m[0],
			-m[1],
			-m[2]);
	}

	

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m, T scalar)
	{
		return mat<3, 4, T, Q>(
			m[0] + scalar,
			m[1] + scalar,
			m[2] + scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)
	{
		return mat<3, 4, T, Q>(
			m1[0] + m2[0],
			m1[1] + m2[1],
			m1[2] + m2[2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m,	T scalar)
	{
		return mat<3, 4, T, Q>(
			m[0] - scalar,
			m[1] - scalar,
			m[2] - scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)
	{
		return mat<3, 4, T, Q>(
			m1[0] - m2[0],
			m1[1] - m2[1],
			m1[2] - m2[2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m, T scalar)
	{
		return mat<3, 4, T, Q>(
			m[0] * scalar,
			m[1] * scalar,
			m[2] * scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator*(T scalar, mat<3, 4, T, Q> const& m)
	{
		return mat<3, 4, T, Q>(
			m[0] * scalar,
			m[1] * scalar,
			m[2] * scalar);
	}

	template<typename T, qualifier Q>
	 inline typename mat<3, 4, T, Q>::col_type operator*
	(
		mat<3, 4, T, Q> const& m,
		typename mat<3, 4, T, Q>::row_type const& v
	)
	{
		return typename mat<3, 4, T, Q>::col_type(
			m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
			m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z,
			m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z,
			m[0][3] * v.x + m[1][3] * v.y + m[2][3] * v.z);
	}

	template<typename T, qualifier Q>
	 inline typename mat<3, 4, T, Q>::row_type operator*
	(
		typename mat<3, 4, T, Q>::col_type const& v,
		mat<3, 4, T, Q> const& m
	)
	{
		return typename mat<3, 4, T, Q>::row_type(
			v.x * m[0][0] + v.y * m[0][1] + v.z * m[0][2] + v.w * m[0][3],
			v.x * m[1][0] + v.y * m[1][1] + v.z * m[1][2] + v.w * m[1][3],
			v.x * m[2][0] + v.y * m[2][1] + v.z * m[2][2] + v.w * m[2][3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<4, 3, T, Q> const& m2)
	{
		const T SrcA00 = m1[0][0];
		const T SrcA01 = m1[0][1];
		const T SrcA02 = m1[0][2];
		const T SrcA03 = m1[0][3];
		const T SrcA10 = m1[1][0];
		const T SrcA11 = m1[1][1];
		const T SrcA12 = m1[1][2];
		const T SrcA13 = m1[1][3];
		const T SrcA20 = m1[2][0];
		const T SrcA21 = m1[2][1];
		const T SrcA22 = m1[2][2];
		const T SrcA23 = m1[2][3];

		const T SrcB00 = m2[0][0];
		const T SrcB01 = m2[0][1];
		const T SrcB02 = m2[0][2];
		const T SrcB10 = m2[1][0];
		const T SrcB11 = m2[1][1];
		const T SrcB12 = m2[1][2];
		const T SrcB20 = m2[2][0];
		const T SrcB21 = m2[2][1];
		const T SrcB22 = m2[2][2];
		const T SrcB30 = m2[3][0];
		const T SrcB31 = m2[3][1];
		const T SrcB32 = m2[3][2];

		mat<4, 4, T, Q> Result;
		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02;
		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02;
		Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01 + SrcA22 * SrcB02;
		Result[0][3] = SrcA03 * SrcB00 + SrcA13 * SrcB01 + SrcA23 * SrcB02;
		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12;
		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12;
		Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11 + SrcA22 * SrcB12;
		Result[1][3] = SrcA03 * SrcB10 + SrcA13 * SrcB11 + SrcA23 * SrcB12;
		Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21 + SrcA20 * SrcB22;
		Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21 + SrcA21 * SrcB22;
		Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21 + SrcA22 * SrcB22;
		Result[2][3] = SrcA03 * SrcB20 + SrcA13 * SrcB21 + SrcA23 * SrcB22;
		Result[3][0] = SrcA00 * SrcB30 + SrcA10 * SrcB31 + SrcA20 * SrcB32;
		Result[3][1] = SrcA01 * SrcB30 + SrcA11 * SrcB31 + SrcA21 * SrcB32;
		Result[3][2] = SrcA02 * SrcB30 + SrcA12 * SrcB31 + SrcA22 * SrcB32;
		Result[3][3] = SrcA03 * SrcB30 + SrcA13 * SrcB31 + SrcA23 * SrcB32;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<2, 3, T, Q> const& m2)
	{
		return mat<2, 4, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2],
			m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1] + m1[2][3] * m2[0][2],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2],
			m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1] + m1[2][3] * m2[1][2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<3, 3, T, Q> const& m2)
	{
		return mat<3, 4, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2],
			m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1] + m1[2][3] * m2[0][2],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2],
			m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1] + m1[2][3] * m2[1][2],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2],
			m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1] + m1[2][2] * m2[2][2],
			m1[0][3] * m2[2][0] + m1[1][3] * m2[2][1] + m1[2][3] * m2[2][2]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator/(mat<3, 4, T, Q> const& m,	T scalar)
	{
		return mat<3, 4, T, Q>(
			m[0] / scalar,
			m[1] / scalar,
			m[2] / scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator/(T scalar, mat<3, 4, T, Q> const& m)
	{
		return mat<3, 4, T, Q>(
			scalar / m[0],
			scalar / m[1],
			scalar / m[2]);
	}

	

	template<typename T, qualifier Q>
	 inline bool operator==(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)
	{
		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);
	}

	template<typename T, qualifier Q>
	 inline bool operator!=(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)
	{
		return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]);
	}
} 
#line 166 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.hpp"
#line 167 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat3x4.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double3x4.hpp"

namespace glm
{
	
	

	
	
	
	typedef mat<3, 4, double, defaultp>		dmat3x4;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double3x4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;

	
	
	
	
	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;

	
	
	
	
	typedef mat<3, 4, double, highp>	highp_dmat3x4;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float3x4.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef mat<3, 4, float, defaultp>			mat3x4;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float3x4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<3, 4, float, lowp>		lowp_mat3x4;

	
	
	
	
	typedef mat<3, 4, float, mediump>	mediump_mat3x4;

	
	
	
	
	typedef mat<3, 4, float, highp>		highp_mat3x4;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\mat3x4.hpp"
#line 27 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x2.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double4x2.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.hpp"



#pragma once






namespace glm
{
	template<typename T, qualifier Q>
	struct mat<4, 2, T, Q>
	{
		typedef vec<2, T, Q> col_type;
		typedef vec<4, T, Q> row_type;
		typedef mat<4, 2, T, Q> type;
		typedef mat<2, 4, T, Q> transpose_type;
		typedef T value_type;

	private:
		col_type value[4];

	public:
		

		typedef length_t length_type;
		 static constexpr length_type length() { return 4; }

		 col_type & operator[](length_type i);
		 constexpr col_type const& operator[](length_type i) const;

		

		 constexpr mat() = default;
		template<qualifier P>
		 constexpr mat(mat<4, 2, T, P> const& m);

		 explicit constexpr mat(T scalar);
		 constexpr mat(
			T x0, T y0,
			T x1, T y1,
			T x2, T y2,
			T x3, T y3);
		 constexpr mat(
			col_type const& v0,
			col_type const& v1,
			col_type const& v2,
			col_type const& v3);

		

		template<
			typename X0, typename Y0,
			typename X1, typename Y1,
			typename X2, typename Y2,
			typename X3, typename Y3>
		 constexpr mat(
			X0 x0, Y0 y0,
			X1 x1, Y1 y1,
			X2 x2, Y2 y2,
			X3 x3, Y3 y3);

		template<typename V1, typename V2, typename V3, typename V4>
		 constexpr mat(
			vec<2, V1, Q> const& v1,
			vec<2, V2, Q> const& v2,
			vec<2, V3, Q> const& v3,
			vec<2, V4, Q> const& v4);

		

		template<typename U, qualifier P>
		  constexpr mat(mat<4, 2, U, P> const& m);

		  constexpr mat(mat<2, 2, T, Q> const& x);
		  constexpr mat(mat<3, 3, T, Q> const& x);
		  constexpr mat(mat<4, 4, T, Q> const& x);
		  constexpr mat(mat<2, 3, T, Q> const& x);
		  constexpr mat(mat<3, 2, T, Q> const& x);
		  constexpr mat(mat<2, 4, T, Q> const& x);
		  constexpr mat(mat<4, 3, T, Q> const& x);
		  constexpr mat(mat<3, 4, T, Q> const& x);

		

		template<typename U>
		 mat<4, 2, T, Q> & operator=(mat<4, 2, U, Q> const& m);
		template<typename U>
		 mat<4, 2, T, Q> & operator+=(U s);
		template<typename U>
		 mat<4, 2, T, Q> & operator+=(mat<4, 2, U, Q> const& m);
		template<typename U>
		 mat<4, 2, T, Q> & operator-=(U s);
		template<typename U>
		 mat<4, 2, T, Q> & operator-=(mat<4, 2, U, Q> const& m);
		template<typename U>
		 mat<4, 2, T, Q> & operator*=(U s);
		template<typename U>
		 mat<4, 2, T, Q> & operator/=(U s);

		

		 mat<4, 2, T, Q> & operator++ ();
		 mat<4, 2, T, Q> & operator-- ();
		 mat<4, 2, T, Q> operator++(int);
		 mat<4, 2, T, Q> operator--(int);
	};

	

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m1,	mat<4, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator*(T scalar, mat<4, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<4, 2, T, Q>::col_type operator*(mat<4, 2, T, Q> const& m, typename mat<4, 2, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<4, 2, T, Q>::row_type operator*(typename mat<4, 2, T, Q>::col_type const& v, mat<4, 2, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<2, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<3, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<4, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator/(mat<4, 2, T, Q> const& m, T scalar);

	template<typename T, qualifier Q>
	 mat<4, 2, T, Q> operator/(T scalar, mat<4, 2, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 bool operator==(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2);

	template<typename T, qualifier Q>
	 bool operator!=(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
namespace glm
{
	















#line 20 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<4, 2, T, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(m[3])}
#line 27 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 34 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(T s)

			: value{col_type(s, 0), col_type(0, s), col_type(0, 0), col_type(0, 0)}
#line 41 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 48 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat
	(
		T x0, T y0,
		T x1, T y1,
		T x2, T y2,
		T x3, T y3
	)

			: value{col_type(x0, y0), col_type(x1, y1), col_type(x2, y2), col_type(x3, y3)}
#line 61 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 68 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(col_type const& v0, col_type const& v1, col_type const& v2, col_type const& v3)

			: value{col_type(v0), col_type(v1), col_type(v2), col_type(v3)}
#line 75 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 82 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	

	template<typename T, qualifier Q>
	template<
		typename X0, typename Y0,
		typename X1, typename Y1,
		typename X2, typename Y2,
		typename X3, typename Y3>
	 inline constexpr mat<4, 2, T, Q>::mat
	(
		X0 x0, Y0 y0,
		X1 x1, Y1 y1,
		X2 x2, Y2 y2,
		X3 x3, Y3 y3
	)

			: value{col_type(x0, y0), col_type(x1, y1), col_type(x2, y2), col_type(x3, y3)}
#line 102 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 109 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	template<typename V0, typename V1, typename V2, typename V3>
	 inline constexpr mat<4, 2, T, Q>::mat(vec<2, V0, Q> const& v0, vec<2, V1, Q> const& v1, vec<2, V2, Q> const& v2, vec<2, V3, Q> const& v3)

			: value{col_type(v0), col_type(v1), col_type(v2), col_type(v3)}
#line 117 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 124 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<4, 2, U, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(m[3])}
#line 134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 141 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<2, 2, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0), col_type(0)}
#line 148 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 155 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(0)}
#line 162 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 169 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(m[3])}
#line 176 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 183 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0), col_type(0)}
#line 190 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 197 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<3, 2, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(0)}
#line 204 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 211 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0), col_type(0)}
#line 218 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 225 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(m[3])}
#line 232 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 239 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(0)}
#line 246 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	{





#line 253 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl"
	}

	

	template<typename T, qualifier Q>
	 inline typename mat<4, 2, T, Q>::col_type & mat<4, 2, T, Q>::operator[](typename mat<4, 2, T, Q>::length_type i)
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl", (unsigned)(260)), 0) );
		return this->value[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr typename mat<4, 2, T, Q>::col_type const& mat<4, 2, T, Q>::operator[](typename mat<4, 2, T, Q>::length_type i) const
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.inl", (unsigned)(267)), 0) );
		return this->value[i];
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 2, T, Q>& mat<4, 2, T, Q>::operator=(mat<4, 2, U, Q> const& m)
	{
		this->value[0] = m[0];
		this->value[1] = m[1];
		this->value[2] = m[2];
		this->value[3] = m[3];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator+=(U s)
	{
		this->value[0] += s;
		this->value[1] += s;
		this->value[2] += s;
		this->value[3] += s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator+=(mat<4, 2, U, Q> const& m)
	{
		this->value[0] += m[0];
		this->value[1] += m[1];
		this->value[2] += m[2];
		this->value[3] += m[3];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator-=(U s)
	{
		this->value[0] -= s;
		this->value[1] -= s;
		this->value[2] -= s;
		this->value[3] -= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator-=(mat<4, 2, U, Q> const& m)
	{
		this->value[0] -= m[0];
		this->value[1] -= m[1];
		this->value[2] -= m[2];
		this->value[3] -= m[3];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator*=(U s)
	{
		this->value[0] *= s;
		this->value[1] *= s;
		this->value[2] *= s;
		this->value[3] *= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator/=(U s)
	{
		this->value[0] /= s;
		this->value[1] /= s;
		this->value[2] /= s;
		this->value[3] /= s;
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator++()
	{
		++this->value[0];
		++this->value[1];
		++this->value[2];
		++this->value[3];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator--()
	{
		--this->value[0];
		--this->value[1];
		--this->value[2];
		--this->value[3];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> mat<4, 2, T, Q>::operator++(int)
	{
		mat<4, 2, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> mat<4, 2, T, Q>::operator--(int)
	{
		mat<4, 2, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m)
	{
		return m;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m)
	{
		return mat<4, 2, T, Q>(
			-m[0],
			-m[1],
			-m[2],
			-m[3]);
	}

	

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m, T scalar)
	{
		return mat<4, 2, T, Q>(
			m[0] + scalar,
			m[1] + scalar,
			m[2] + scalar,
			m[3] + scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)
	{
		return mat<4, 2, T, Q>(
			m1[0] + m2[0],
			m1[1] + m2[1],
			m1[2] + m2[2],
			m1[3] + m2[3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m, T scalar)
	{
		return mat<4, 2, T, Q>(
			m[0] - scalar,
			m[1] - scalar,
			m[2] - scalar,
			m[3] - scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)
	{
		return mat<4, 2, T, Q>(
			m1[0] - m2[0],
			m1[1] - m2[1],
			m1[2] - m2[2],
			m1[3] - m2[3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m, T scalar)
	{
		return mat<4, 2, T, Q>(
			m[0] * scalar,
			m[1] * scalar,
			m[2] * scalar,
			m[3] * scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator*(T scalar, mat<4, 2, T, Q> const& m)
	{
		return mat<4, 2, T, Q>(
			m[0] * scalar,
			m[1] * scalar,
			m[2] * scalar,
			m[3] * scalar);
	}

	template<typename T, qualifier Q>
	 inline typename mat<4, 2, T, Q>::col_type operator*(mat<4, 2, T, Q> const& m, typename mat<4, 2, T, Q>::row_type const& v)
	{
		return typename mat<4, 2, T, Q>::col_type(
			m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z + m[3][0] * v.w,
			m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z + m[3][1] * v.w);
	}

	template<typename T, qualifier Q>
	 inline typename mat<4, 2, T, Q>::row_type operator*(typename mat<4, 2, T, Q>::col_type const& v, mat<4, 2, T, Q> const& m)
	{
		return typename mat<4, 2, T, Q>::row_type(
			v.x * m[0][0] + v.y * m[0][1],
			v.x * m[1][0] + v.y * m[1][1],
			v.x * m[2][0] + v.y * m[2][1],
			v.x * m[3][0] + v.y * m[3][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<2, 4, T, Q> const& m2)
	{
		T const SrcA00 = m1[0][0];
		T const SrcA01 = m1[0][1];
		T const SrcA10 = m1[1][0];
		T const SrcA11 = m1[1][1];
		T const SrcA20 = m1[2][0];
		T const SrcA21 = m1[2][1];
		T const SrcA30 = m1[3][0];
		T const SrcA31 = m1[3][1];

		T const SrcB00 = m2[0][0];
		T const SrcB01 = m2[0][1];
		T const SrcB02 = m2[0][2];
		T const SrcB03 = m2[0][3];
		T const SrcB10 = m2[1][0];
		T const SrcB11 = m2[1][1];
		T const SrcB12 = m2[1][2];
		T const SrcB13 = m2[1][3];

		mat<2, 2, T, Q> Result;
		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02 + SrcA30 * SrcB03;
		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02 + SrcA31 * SrcB03;
		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12 + SrcA30 * SrcB13;
		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12 + SrcA31 * SrcB13;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<3, 4, T, Q> const& m2)
	{
		return mat<3, 2, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2] + m1[3][0] * m2[2][3],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2] + m1[3][1] * m2[2][3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<4, 4, T, Q> const& m2)
	{
		return mat<4, 2, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2] + m1[3][0] * m2[2][3],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2] + m1[3][1] * m2[2][3],
			m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1] + m1[2][0] * m2[3][2] + m1[3][0] * m2[3][3],
			m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1] + m1[2][1] * m2[3][2] + m1[3][1] * m2[3][3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator/(mat<4, 2, T, Q> const& m, T scalar)
	{
		return mat<4, 2, T, Q>(
			m[0] / scalar,
			m[1] / scalar,
			m[2] / scalar,
			m[3] / scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator/(T scalar, mat<4, 2, T, Q> const& m)
	{
		return mat<4, 2, T, Q>(
			scalar / m[0],
			scalar / m[1],
			scalar / m[2],
			scalar / m[3]);
	}

	

	template<typename T, qualifier Q>
	 inline bool operator==(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)
	{
		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);
	}

	template<typename T, qualifier Q>
	 inline bool operator!=(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)
	{
		return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]) || (m1[3] != m2[3]);
	}
} 
#line 171 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.hpp"
#line 172 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x2.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double4x2.hpp"

namespace glm
{
	
	

	
	
	
	typedef mat<4, 2, double, defaultp>		dmat4x2;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double4x2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;

	
	
	
	
	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;

	
	
	
	
	typedef mat<4, 2, double, highp>	highp_dmat4x2;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float4x2.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef mat<4, 2, float, defaultp>			mat4x2;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float4x2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<4, 2, float, lowp>		lowp_mat4x2;

	
	
	
	
	typedef mat<4, 2, float, mediump>	mediump_mat4x2;

	
	
	
	
	typedef mat<4, 2, float, highp>		highp_mat4x2;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x2.hpp"

#line 28 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x3.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double4x3.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.hpp"



#pragma once






namespace glm
{
	template<typename T, qualifier Q>
	struct mat<4, 3, T, Q>
	{
		typedef vec<3, T, Q> col_type;
		typedef vec<4, T, Q> row_type;
		typedef mat<4, 3, T, Q> type;
		typedef mat<3, 4, T, Q> transpose_type;
		typedef T value_type;

	private:
		col_type value[4];

	public:
		

		typedef length_t length_type;
		 static constexpr length_type length() { return 4; }

		 col_type & operator[](length_type i);
		 constexpr col_type const& operator[](length_type i) const;

		

		 constexpr mat() = default;
		template<qualifier P>
		 constexpr mat(mat<4, 3, T, P> const& m);

		 explicit constexpr mat(T const& x);
		 constexpr mat(
			T const& x0, T const& y0, T const& z0,
			T const& x1, T const& y1, T const& z1,
			T const& x2, T const& y2, T const& z2,
			T const& x3, T const& y3, T const& z3);
		 constexpr mat(
			col_type const& v0,
			col_type const& v1,
			col_type const& v2,
			col_type const& v3);

		

		template<
			typename X1, typename Y1, typename Z1,
			typename X2, typename Y2, typename Z2,
			typename X3, typename Y3, typename Z3,
			typename X4, typename Y4, typename Z4>
		 constexpr mat(
			X1 const& x1, Y1 const& y1, Z1 const& z1,
			X2 const& x2, Y2 const& y2, Z2 const& z2,
			X3 const& x3, Y3 const& y3, Z3 const& z3,
			X4 const& x4, Y4 const& y4, Z4 const& z4);

		template<typename V1, typename V2, typename V3, typename V4>
		 constexpr mat(
			vec<3, V1, Q> const& v1,
			vec<3, V2, Q> const& v2,
			vec<3, V3, Q> const& v3,
			vec<3, V4, Q> const& v4);

		

		template<typename U, qualifier P>
		  constexpr mat(mat<4, 3, U, P> const& m);

		  constexpr mat(mat<2, 2, T, Q> const& x);
		  constexpr mat(mat<3, 3, T, Q> const& x);
		  constexpr mat(mat<4, 4, T, Q> const& x);
		  constexpr mat(mat<2, 3, T, Q> const& x);
		  constexpr mat(mat<3, 2, T, Q> const& x);
		  constexpr mat(mat<2, 4, T, Q> const& x);
		  constexpr mat(mat<4, 2, T, Q> const& x);
		  constexpr mat(mat<3, 4, T, Q> const& x);

		

		template<typename U>
		 mat<4, 3, T, Q> & operator=(mat<4, 3, U, Q> const& m);
		template<typename U>
		 mat<4, 3, T, Q> & operator+=(U s);
		template<typename U>
		 mat<4, 3, T, Q> & operator+=(mat<4, 3, U, Q> const& m);
		template<typename U>
		 mat<4, 3, T, Q> & operator-=(U s);
		template<typename U>
		 mat<4, 3, T, Q> & operator-=(mat<4, 3, U, Q> const& m);
		template<typename U>
		 mat<4, 3, T, Q> & operator*=(U s);
		template<typename U>
		 mat<4, 3, T, Q> & operator/=(U s);

		

		 mat<4, 3, T, Q>& operator++();
		 mat<4, 3, T, Q>& operator--();
		 mat<4, 3, T, Q> operator++(int);
		 mat<4, 3, T, Q> operator--(int);
	};

	

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m, T const& s);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m, T const& s);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m, T const& s);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator*(T const& s, mat<4, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<4, 3, T, Q>::col_type operator*(mat<4, 3, T, Q> const& m, typename mat<4, 3, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<4, 3, T, Q>::row_type operator*(typename mat<4, 3, T, Q>::col_type const& v, mat<4, 3, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<2, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1,	mat<3, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<4, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator/(mat<4, 3, T, Q> const& m, T const& s);

	template<typename T, qualifier Q>
	 mat<4, 3, T, Q> operator/(T const& s, mat<4, 3, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 bool operator==(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2);

	template<typename T, qualifier Q>
	 bool operator!=(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
namespace glm
{
	















#line 20 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<4, 3, T, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(m[3])}
#line 27 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 34 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(T const& s)

			: value{col_type(s, 0, 0), col_type(0, s, 0), col_type(0, 0, s), col_type(0, 0, 0)}
#line 41 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 48 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat
	(
		T const& x0, T const& y0, T const& z0,
		T const& x1, T const& y1, T const& z1,
		T const& x2, T const& y2, T const& z2,
		T const& x3, T const& y3, T const& z3
	)

			: value{col_type(x0, y0, z0), col_type(x1, y1, z1), col_type(x2, y2, z2), col_type(x3, y3, z3)}
#line 61 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 68 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(col_type const& v0, col_type const& v1, col_type const& v2, col_type const& v3)

			: value{col_type(v0), col_type(v1), col_type(v2), col_type(v3)}
#line 75 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 82 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	

	template<typename T, qualifier Q>
	template<
		typename X0, typename Y0, typename Z0,
		typename X1, typename Y1, typename Z1,
		typename X2, typename Y2, typename Z2,
		typename X3, typename Y3, typename Z3>
	 inline constexpr mat<4, 3, T, Q>::mat
	(
		X0 const& x0, Y0 const& y0, Z0 const& z0,
		X1 const& x1, Y1 const& y1, Z1 const& z1,
		X2 const& x2, Y2 const& y2, Z2 const& z2,
		X3 const& x3, Y3 const& y3, Z3 const& z3
	)

			: value{col_type(x0, y0, z0), col_type(x1, y1, z1), col_type(x2, y2, z2), col_type(x3, y3, z3)}
#line 102 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 109 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	template<typename V1, typename V2, typename V3, typename V4>
	 inline constexpr mat<4, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> const& v2, vec<3, V3, Q> const& v3, vec<3, V4, Q> const& v4)

			: value{col_type(v1), col_type(v2), col_type(v3), col_type(v4)}
#line 117 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 124 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<4, 3, U, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(m[3])}
#line 134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 141 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(0, 0, 1), col_type(0)}
#line 148 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 155 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<3, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(0)}
#line 162 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 169 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(m[3])}
#line 176 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 183 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<2, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0, 0, 1), col_type(0)}
#line 190 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 197 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(m[2], 1), col_type(0)}
#line 204 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 211 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0, 0, 1), col_type(0)}
#line 218 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 225 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(m[2], 1), col_type(m[3], 0)}
#line 232 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 239 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(0)}
#line 246 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	{





#line 253 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl"
	}

	

	template<typename T, qualifier Q>
	 inline typename mat<4, 3, T, Q>::col_type & mat<4, 3, T, Q>::operator[](typename mat<4, 3, T, Q>::length_type i)
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl", (unsigned)(260)), 0) );
		return this->value[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr typename mat<4, 3, T, Q>::col_type const& mat<4, 3, T, Q>::operator[](typename mat<4, 3, T, Q>::length_type i) const
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.inl", (unsigned)(267)), 0) );
		return this->value[i];
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 3, T, Q>& mat<4, 3, T, Q>::operator=(mat<4, 3, U, Q> const& m)
	{
		this->value[0] = m[0];
		this->value[1] = m[1];
		this->value[2] = m[2];
		this->value[3] = m[3];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator+=(U s)
	{
		this->value[0] += s;
		this->value[1] += s;
		this->value[2] += s;
		this->value[3] += s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator+=(mat<4, 3, U, Q> const& m)
	{
		this->value[0] += m[0];
		this->value[1] += m[1];
		this->value[2] += m[2];
		this->value[3] += m[3];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator-=(U s)
	{
		this->value[0] -= s;
		this->value[1] -= s;
		this->value[2] -= s;
		this->value[3] -= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator-=(mat<4, 3, U, Q> const& m)
	{
		this->value[0] -= m[0];
		this->value[1] -= m[1];
		this->value[2] -= m[2];
		this->value[3] -= m[3];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator*=(U s)
	{
		this->value[0] *= s;
		this->value[1] *= s;
		this->value[2] *= s;
		this->value[3] *= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator/=(U s)
	{
		this->value[0] /= s;
		this->value[1] /= s;
		this->value[2] /= s;
		this->value[3] /= s;
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator++()
	{
		++this->value[0];
		++this->value[1];
		++this->value[2];
		++this->value[3];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator--()
	{
		--this->value[0];
		--this->value[1];
		--this->value[2];
		--this->value[3];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> mat<4, 3, T, Q>::operator++(int)
	{
		mat<4, 3, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> mat<4, 3, T, Q>::operator--(int)
	{
		mat<4, 3, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m)
	{
		return m;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m)
	{
		return mat<4, 3, T, Q>(
			-m[0],
			-m[1],
			-m[2],
			-m[3]);
	}

	

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m, T const& s)
	{
		return mat<4, 3, T, Q>(
			m[0] + s,
			m[1] + s,
			m[2] + s,
			m[3] + s);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)
	{
		return mat<4, 3, T, Q>(
			m1[0] + m2[0],
			m1[1] + m2[1],
			m1[2] + m2[2],
			m1[3] + m2[3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m, T const& s)
	{
		return mat<4, 3, T, Q>(
			m[0] - s,
			m[1] - s,
			m[2] - s,
			m[3] - s);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)
	{
		return mat<4, 3, T, Q>(
			m1[0] - m2[0],
			m1[1] - m2[1],
			m1[2] - m2[2],
			m1[3] - m2[3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m, T const& s)
	{
		return mat<4, 3, T, Q>(
			m[0] * s,
			m[1] * s,
			m[2] * s,
			m[3] * s);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator*(T const& s, mat<4, 3, T, Q> const& m)
	{
		return mat<4, 3, T, Q>(
			m[0] * s,
			m[1] * s,
			m[2] * s,
			m[3] * s);
	}

	template<typename T, qualifier Q>
	 inline typename mat<4, 3, T, Q>::col_type operator*
	(
		mat<4, 3, T, Q> const& m,
		typename mat<4, 3, T, Q>::row_type const& v)
	{
		return typename mat<4, 3, T, Q>::col_type(
			m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z + m[3][0] * v.w,
			m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z + m[3][1] * v.w,
			m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z + m[3][2] * v.w);
	}

	template<typename T, qualifier Q>
	 inline typename mat<4, 3, T, Q>::row_type operator*
	(
		typename mat<4, 3, T, Q>::col_type const& v,
		mat<4, 3, T, Q> const& m)
	{
		return typename mat<4, 3, T, Q>::row_type(
			v.x * m[0][0] + v.y * m[0][1] + v.z * m[0][2],
			v.x * m[1][0] + v.y * m[1][1] + v.z * m[1][2],
			v.x * m[2][0] + v.y * m[2][1] + v.z * m[2][2],
			v.x * m[3][0] + v.y * m[3][1] + v.z * m[3][2]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<2, 4, T, Q> const& m2)
	{
		return mat<2, 3, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2] + m1[3][2] * m2[0][3],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2] + m1[3][2] * m2[1][3]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<3, 4, T, Q> const& m2)
	{
		T const SrcA00 = m1[0][0];
		T const SrcA01 = m1[0][1];
		T const SrcA02 = m1[0][2];
		T const SrcA10 = m1[1][0];
		T const SrcA11 = m1[1][1];
		T const SrcA12 = m1[1][2];
		T const SrcA20 = m1[2][0];
		T const SrcA21 = m1[2][1];
		T const SrcA22 = m1[2][2];
		T const SrcA30 = m1[3][0];
		T const SrcA31 = m1[3][1];
		T const SrcA32 = m1[3][2];

		T const SrcB00 = m2[0][0];
		T const SrcB01 = m2[0][1];
		T const SrcB02 = m2[0][2];
		T const SrcB03 = m2[0][3];
		T const SrcB10 = m2[1][0];
		T const SrcB11 = m2[1][1];
		T const SrcB12 = m2[1][2];
		T const SrcB13 = m2[1][3];
		T const SrcB20 = m2[2][0];
		T const SrcB21 = m2[2][1];
		T const SrcB22 = m2[2][2];
		T const SrcB23 = m2[2][3];

		mat<3, 3, T, Q> Result;
		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02 + SrcA30 * SrcB03;
		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02 + SrcA31 * SrcB03;
		Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01 + SrcA22 * SrcB02 + SrcA32 * SrcB03;
		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12 + SrcA30 * SrcB13;
		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12 + SrcA31 * SrcB13;
		Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11 + SrcA22 * SrcB12 + SrcA32 * SrcB13;
		Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21 + SrcA20 * SrcB22 + SrcA30 * SrcB23;
		Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21 + SrcA21 * SrcB22 + SrcA31 * SrcB23;
		Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21 + SrcA22 * SrcB22 + SrcA32 * SrcB23;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<4, 4, T, Q> const& m2)
	{
		return mat<4, 3, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2] + m1[3][2] * m2[0][3],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2] + m1[3][2] * m2[1][3],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2] + m1[3][0] * m2[2][3],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2] + m1[3][1] * m2[2][3],
			m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1] + m1[2][2] * m2[2][2] + m1[3][2] * m2[2][3],
			m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1] + m1[2][0] * m2[3][2] + m1[3][0] * m2[3][3],
			m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1] + m1[2][1] * m2[3][2] + m1[3][1] * m2[3][3],
			m1[0][2] * m2[3][0] + m1[1][2] * m2[3][1] + m1[2][2] * m2[3][2] + m1[3][2] * m2[3][3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator/(mat<4, 3, T, Q> const& m, T const& s)
	{
		return mat<4, 3, T, Q>(
			m[0] / s,
			m[1] / s,
			m[2] / s,
			m[3] / s);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 3, T, Q> operator/(T const& s, mat<4, 3, T, Q> const& m)
	{
		return mat<4, 3, T, Q>(
			s / m[0],
			s / m[1],
			s / m[2],
			s / m[3]);
	}

	

	template<typename T, qualifier Q>
	 inline bool operator==(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)
	{
		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);
	}

	template<typename T, qualifier Q>
	 inline bool operator!=(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> const& m2)
	{
		return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]) || (m1[3] != m2[3]);
	}
} 
#line 171 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.hpp"
#line 172 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x3.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double4x3.hpp"

namespace glm
{
	
	

	
	
	
	typedef mat<4, 3, double, defaultp>		dmat4x3;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double4x3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;

	
	
	
	
	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;

	
	
	
	
	typedef mat<4, 3, double, highp>	highp_dmat4x3;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float4x3.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef mat<4, 3, float, defaultp>			mat4x3;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x3.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float4x3_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<4, 3, float, lowp>		lowp_mat4x3;

	
	
	
	
	typedef mat<4, 3, float, mediump>	mediump_mat4x3;

	
	
	
	
	typedef mat<4, 3, float, highp>		highp_mat4x3;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x3.hpp"
#line 29 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x4.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double4x4.hpp"



#pragma once
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.hpp"



#pragma once





namespace glm
{
	template<typename T, qualifier Q>
	struct mat<4, 4, T, Q>
	{
		typedef vec<4, T, Q> col_type;
		typedef vec<4, T, Q> row_type;
		typedef mat<4, 4, T, Q> type;
		typedef mat<4, 4, T, Q> transpose_type;
		typedef T value_type;

	private:
		col_type value[4];

	public:
		

		typedef length_t length_type;
		 static constexpr length_type length(){return 4;}

		 col_type & operator[](length_type i);
		 constexpr col_type const& operator[](length_type i) const;

		

		 constexpr mat() = default;
		template<qualifier P>
		 constexpr mat(mat<4, 4, T, P> const& m);

		 explicit constexpr mat(T const& x);
		 constexpr mat(
			T const& x0, T const& y0, T const& z0, T const& w0,
			T const& x1, T const& y1, T const& z1, T const& w1,
			T const& x2, T const& y2, T const& z2, T const& w2,
			T const& x3, T const& y3, T const& z3, T const& w3);
		 constexpr mat(
			col_type const& v0,
			col_type const& v1,
			col_type const& v2,
			col_type const& v3);

		

		template<
			typename X1, typename Y1, typename Z1, typename W1,
			typename X2, typename Y2, typename Z2, typename W2,
			typename X3, typename Y3, typename Z3, typename W3,
			typename X4, typename Y4, typename Z4, typename W4>
		 constexpr mat(
			X1 const& x1, Y1 const& y1, Z1 const& z1, W1 const& w1,
			X2 const& x2, Y2 const& y2, Z2 const& z2, W2 const& w2,
			X3 const& x3, Y3 const& y3, Z3 const& z3, W3 const& w3,
			X4 const& x4, Y4 const& y4, Z4 const& z4, W4 const& w4);

		template<typename V1, typename V2, typename V3, typename V4>
		 constexpr mat(
			vec<4, V1, Q> const& v1,
			vec<4, V2, Q> const& v2,
			vec<4, V3, Q> const& v3,
			vec<4, V4, Q> const& v4);

		

		template<typename U, qualifier P>
		  constexpr mat(mat<4, 4, U, P> const& m);

		  constexpr mat(mat<2, 2, T, Q> const& x);
		  constexpr mat(mat<3, 3, T, Q> const& x);
		  constexpr mat(mat<2, 3, T, Q> const& x);
		  constexpr mat(mat<3, 2, T, Q> const& x);
		  constexpr mat(mat<2, 4, T, Q> const& x);
		  constexpr mat(mat<4, 2, T, Q> const& x);
		  constexpr mat(mat<3, 4, T, Q> const& x);
		  constexpr mat(mat<4, 3, T, Q> const& x);

		

		template<typename U>
		 mat<4, 4, T, Q> & operator=(mat<4, 4, U, Q> const& m);
		template<typename U>
		 mat<4, 4, T, Q> & operator+=(U s);
		template<typename U>
		 mat<4, 4, T, Q> & operator+=(mat<4, 4, U, Q> const& m);
		template<typename U>
		 mat<4, 4, T, Q> & operator-=(U s);
		template<typename U>
		 mat<4, 4, T, Q> & operator-=(mat<4, 4, U, Q> const& m);
		template<typename U>
		 mat<4, 4, T, Q> & operator*=(U s);
		template<typename U>
		 mat<4, 4, T, Q> & operator*=(mat<4, 4, U, Q> const& m);
		template<typename U>
		 mat<4, 4, T, Q> & operator/=(U s);
		template<typename U>
		 mat<4, 4, T, Q> & operator/=(mat<4, 4, U, Q> const& m);

		

		 mat<4, 4, T, Q> & operator++();
		 mat<4, 4, T, Q> & operator--();
		 mat<4, 4, T, Q> operator++(int);
		 mat<4, 4, T, Q> operator--(int);
	};

	

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m);

	

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m, T const& s);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator+(T const& s, mat<4, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m, T const& s);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator-(T const& s, mat<4, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m1,	mat<4, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m, T const& s);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator*(T const& s, mat<4, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<4, 4, T, Q>::col_type operator*(mat<4, 4, T, Q> const& m, typename mat<4, 4, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<4, 4, T, Q>::row_type operator*(typename mat<4, 4, T, Q>::col_type const& v, mat<4, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<2, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<3, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator/(mat<4, 4, T, Q> const& m, T const& s);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator/(T const& s, mat<4, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 typename mat<4, 4, T, Q>::col_type operator/(mat<4, 4, T, Q> const& m, typename mat<4, 4, T, Q>::row_type const& v);

	template<typename T, qualifier Q>
	 typename mat<4, 4, T, Q>::row_type operator/(typename mat<4, 4, T, Q>::col_type const& v, mat<4, 4, T, Q> const& m);

	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> operator/(mat<4, 4, T, Q> const& m1,	mat<4, 4, T, Q> const& m2);

	

	template<typename T, qualifier Q>
	 bool operator==(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2);

	template<typename T, qualifier Q>
	 bool operator!=(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"


namespace glm
{
	















#line 22 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<4, 4, T, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(m[3])}
#line 29 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 36 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(T const& s)

			: value{col_type(s, 0, 0, 0), col_type(0, s, 0, 0), col_type(0, 0, s, 0), col_type(0, 0, 0, s)}
#line 43 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 50 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat
	(
		T const& x0, T const& y0, T const& z0, T const& w0,
		T const& x1, T const& y1, T const& z1, T const& w1,
		T const& x2, T const& y2, T const& z2, T const& w2,
		T const& x3, T const& y3, T const& z3, T const& w3
	)

			: value{
				col_type(x0, y0, z0, w0),
				col_type(x1, y1, z1, w1),
				col_type(x2, y2, z2, w2),
				col_type(x3, y3, z3, w3)}
#line 67 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 74 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(col_type const& v0, col_type const& v1, col_type const& v2, col_type const& v3)

			: value{col_type(v0), col_type(v1), col_type(v2), col_type(v3)}
#line 81 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 88 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<4, 4, U, P> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(m[3])}
#line 96 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 103 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	

	template<typename T, qualifier Q>
	template<
		typename X1, typename Y1, typename Z1, typename W1,
		typename X2, typename Y2, typename Z2, typename W2,
		typename X3, typename Y3, typename Z3, typename W3,
		typename X4, typename Y4, typename Z4, typename W4>
	 inline constexpr mat<4, 4, T, Q>::mat
	(
		X1 const& x1, Y1 const& y1, Z1 const& z1, W1 const& w1,
		X2 const& x2, Y2 const& y2, Z2 const& z2, W2 const& w2,
		X3 const& x3, Y3 const& y3, Z3 const& z3, W3 const& w3,
		X4 const& x4, Y4 const& y4, Z4 const& z4, W4 const& w4
	)

			: value{col_type(x1, y1, z1, w1), col_type(x2, y2, z2, w2), col_type(x3, y3, z3, w3), col_type(x4, y4, z4, w4)}
#line 123 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{
		static_assert(std::numeric_limits<X1>::is_iec559 || std::numeric_limits<X1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 1st parameter type invalid.");
		static_assert(std::numeric_limits<Y1>::is_iec559 || std::numeric_limits<Y1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 2nd parameter type invalid.");
		static_assert(std::numeric_limits<Z1>::is_iec559 || std::numeric_limits<Z1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 3rd parameter type invalid.");
		static_assert(std::numeric_limits<W1>::is_iec559 || std::numeric_limits<W1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 4th parameter type invalid.");

		static_assert(std::numeric_limits<X2>::is_iec559 || std::numeric_limits<X2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 5th parameter type invalid.");
		static_assert(std::numeric_limits<Y2>::is_iec559 || std::numeric_limits<Y2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 6th parameter type invalid.");
		static_assert(std::numeric_limits<Z2>::is_iec559 || std::numeric_limits<Z2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 7th parameter type invalid.");
		static_assert(std::numeric_limits<W2>::is_iec559 || std::numeric_limits<W2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 8th parameter type invalid.");

		static_assert(std::numeric_limits<X3>::is_iec559 || std::numeric_limits<X3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 9th parameter type invalid.");
		static_assert(std::numeric_limits<Y3>::is_iec559 || std::numeric_limits<Y3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 10th parameter type invalid.");
		static_assert(std::numeric_limits<Z3>::is_iec559 || std::numeric_limits<Z3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 11th parameter type invalid.");
		static_assert(std::numeric_limits<W3>::is_iec559 || std::numeric_limits<W3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 12th parameter type invalid.");

		static_assert(std::numeric_limits<X4>::is_iec559 || std::numeric_limits<X4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 13th parameter type invalid.");
		static_assert(std::numeric_limits<Y4>::is_iec559 || std::numeric_limits<Y4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 14th parameter type invalid.");
		static_assert(std::numeric_limits<Z4>::is_iec559 || std::numeric_limits<Z4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 15th parameter type invalid.");
		static_assert(std::numeric_limits<W4>::is_iec559 || std::numeric_limits<W4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 16th parameter type invalid.");






#line 150 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	template<typename V1, typename V2, typename V3, typename V4>
	 inline constexpr mat<4, 4, T, Q>::mat(vec<4, V1, Q> const& v1, vec<4, V2, Q> const& v2, vec<4, V3, Q> const& v3, vec<4, V4, Q> const& v4)

			: value{col_type(v1), col_type(v2), col_type(v3), col_type(v4)}
#line 158 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{
		static_assert(std::numeric_limits<V1>::is_iec559 || std::numeric_limits<V1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 1st parameter type invalid.");
		static_assert(std::numeric_limits<V2>::is_iec559 || std::numeric_limits<V2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 2nd parameter type invalid.");
		static_assert(std::numeric_limits<V3>::is_iec559 || std::numeric_limits<V3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 3rd parameter type invalid.");
		static_assert(std::numeric_limits<V4>::is_iec559 || std::numeric_limits<V4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 4th parameter type invalid.");






#line 170 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)

			: value{col_type(m[0], 0, 0), col_type(m[1], 0, 0), col_type(0, 0, 1, 0), col_type(0, 0, 0, 1)}
#line 179 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 186 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(m[2], 0), col_type(0, 0, 0, 1)}
#line 193 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 200 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(0, 0, 1, 0), col_type(0, 0, 0, 1)}
#line 207 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 214 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)

			: value{col_type(m[0], 0, 0), col_type(m[1], 0, 0), col_type(m[2], 1, 0), col_type(0, 0, 0, 1)}
#line 221 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 228 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<2, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(0, 0, 1, 0), col_type(0, 0, 0, 1)}
#line 235 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 242 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)

			: value{col_type(m[0], 0, 0), col_type(m[1], 0, 0), col_type(0, 0, 1, 0), col_type(0, 0, 0, 1)}
#line 249 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 256 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<3, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1]), col_type(m[2]), col_type(0, 0, 0, 1)}
#line 263 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 270 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<4, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)

			: value{col_type(m[0], 0), col_type(m[1], 0), col_type(m[2], 0), col_type(m[3], 1)}
#line 277 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	{





#line 284 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
	}

	

	template<typename T, qualifier Q>
	 inline typename mat<4, 4, T, Q>::col_type & mat<4, 4, T, Q>::operator[](typename mat<4, 4, T, Q>::length_type i)
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl", (unsigned)(291)), 0) );
		return this->value[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr typename mat<4, 4, T, Q>::col_type const& mat<4, 4, T, Q>::operator[](typename mat<4, 4, T, Q>::length_type i) const
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl", (unsigned)(298)), 0) );
		return this->value[i];
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator=(mat<4, 4, U, Q> const& m)
	{
		
		
		this->value[0] = m[0];
		this->value[1] = m[1];
		this->value[2] = m[2];
		this->value[3] = m[3];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(U s)
	{
		this->value[0] += s;
		this->value[1] += s;
		this->value[2] += s;
		this->value[3] += s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(mat<4, 4, U, Q> const& m)
	{
		this->value[0] += m[0];
		this->value[1] += m[1];
		this->value[2] += m[2];
		this->value[3] += m[3];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(U s)
	{
		this->value[0] -= s;
		this->value[1] -= s;
		this->value[2] -= s;
		this->value[3] -= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(mat<4, 4, U, Q> const& m)
	{
		this->value[0] -= m[0];
		this->value[1] -= m[1];
		this->value[2] -= m[2];
		this->value[3] -= m[3];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(U s)
	{
		this->value[0] *= s;
		this->value[1] *= s;
		this->value[2] *= s;
		this->value[3] *= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(mat<4, 4, U, Q> const& m)
	{
		return (*this = *this * m);
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator/=(U s)
	{
		this->value[0] /= s;
		this->value[1] /= s;
		this->value[2] /= s;
		this->value[3] /= s;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator/=(mat<4, 4, U, Q> const& m)
	{
		return *this *= inverse(m);
	}

	

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator++()
	{
		++this->value[0];
		++this->value[1];
		++this->value[2];
		++this->value[3];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator--()
	{
		--this->value[0];
		--this->value[1];
		--this->value[2];
		--this->value[3];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> mat<4, 4, T, Q>::operator++(int)
	{
		mat<4, 4, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> mat<4, 4, T, Q>::operator--(int)
	{
		mat<4, 4, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m)
	{
		return m;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m)
	{
		return mat<4, 4, T, Q>(
			-m[0],
			-m[1],
			-m[2],
			-m[3]);
	}

	

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m, T const& s)
	{
		return mat<4, 4, T, Q>(
			m[0] + s,
			m[1] + s,
			m[2] + s,
			m[3] + s);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator+(T const& s, mat<4, 4, T, Q> const& m)
	{
		return mat<4, 4, T, Q>(
			m[0] + s,
			m[1] + s,
			m[2] + s,
			m[3] + s);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)
	{
		return mat<4, 4, T, Q>(
			m1[0] + m2[0],
			m1[1] + m2[1],
			m1[2] + m2[2],
			m1[3] + m2[3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m, T const& s)
	{
		return mat<4, 4, T, Q>(
			m[0] - s,
			m[1] - s,
			m[2] - s,
			m[3] - s);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator-(T const& s, mat<4, 4, T, Q> const& m)
	{
		return mat<4, 4, T, Q>(
			s - m[0],
			s - m[1],
			s - m[2],
			s - m[3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)
	{
		return mat<4, 4, T, Q>(
			m1[0] - m2[0],
			m1[1] - m2[1],
			m1[2] - m2[2],
			m1[3] - m2[3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m, T const  & s)
	{
		return mat<4, 4, T, Q>(
			m[0] * s,
			m[1] * s,
			m[2] * s,
			m[3] * s);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator*(T const& s, mat<4, 4, T, Q> const& m)
	{
		return mat<4, 4, T, Q>(
			m[0] * s,
			m[1] * s,
			m[2] * s,
			m[3] * s);
	}

	template<typename T, qualifier Q>
	 inline typename mat<4, 4, T, Q>::col_type operator*
	(
		mat<4, 4, T, Q> const& m,
		typename mat<4, 4, T, Q>::row_type const& v
	)
	{



















		typename mat<4, 4, T, Q>::col_type const Mov0(v[0]);
		typename mat<4, 4, T, Q>::col_type const Mov1(v[1]);
		typename mat<4, 4, T, Q>::col_type const Mul0 = m[0] * Mov0;
		typename mat<4, 4, T, Q>::col_type const Mul1 = m[1] * Mov1;
		typename mat<4, 4, T, Q>::col_type const Add0 = Mul0 + Mul1;
		typename mat<4, 4, T, Q>::col_type const Mov2(v[2]);
		typename mat<4, 4, T, Q>::col_type const Mov3(v[3]);
		typename mat<4, 4, T, Q>::col_type const Mul2 = m[2] * Mov2;
		typename mat<4, 4, T, Q>::col_type const Mul3 = m[3] * Mov3;
		typename mat<4, 4, T, Q>::col_type const Add1 = Mul2 + Mul3;
		typename mat<4, 4, T, Q>::col_type const Add2 = Add0 + Add1;
		return Add2;








	}

	template<typename T, qualifier Q>
	 inline typename mat<4, 4, T, Q>::row_type operator*
	(
		typename mat<4, 4, T, Q>::col_type const& v,
		mat<4, 4, T, Q> const& m
	)
	{
		return typename mat<4, 4, T, Q>::row_type(
			m[0][0] * v[0] + m[0][1] * v[1] + m[0][2] * v[2] + m[0][3] * v[3],
			m[1][0] * v[0] + m[1][1] * v[1] + m[1][2] * v[2] + m[1][3] * v[3],
			m[2][0] * v[0] + m[2][1] * v[1] + m[2][2] * v[2] + m[2][3] * v[3],
			m[3][0] * v[0] + m[3][1] * v[1] + m[3][2] * v[2] + m[3][3] * v[3]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<2, 4, T, Q> const& m2)
	{
		return mat<2, 4, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2] + m1[3][2] * m2[0][3],
			m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1] + m1[2][3] * m2[0][2] + m1[3][3] * m2[0][3],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2] + m1[3][2] * m2[1][3],
			m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1] + m1[2][3] * m2[1][2] + m1[3][3] * m2[1][3]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<3, 4, T, Q> const& m2)
	{
		return mat<3, 4, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
			m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2] + m1[3][2] * m2[0][3],
			m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1] + m1[2][3] * m2[0][2] + m1[3][3] * m2[0][3],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
			m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2] + m1[3][2] * m2[1][3],
			m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1] + m1[2][3] * m2[1][2] + m1[3][3] * m2[1][3],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2] + m1[3][0] * m2[2][3],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2] + m1[3][1] * m2[2][3],
			m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1] + m1[2][2] * m2[2][2] + m1[3][2] * m2[2][3],
			m1[0][3] * m2[2][0] + m1[1][3] * m2[2][1] + m1[2][3] * m2[2][2] + m1[3][3] * m2[2][3]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)
	{
		typename mat<4, 4, T, Q>::col_type const SrcA0 = m1[0];
		typename mat<4, 4, T, Q>::col_type const SrcA1 = m1[1];
		typename mat<4, 4, T, Q>::col_type const SrcA2 = m1[2];
		typename mat<4, 4, T, Q>::col_type const SrcA3 = m1[3];

		typename mat<4, 4, T, Q>::col_type const SrcB0 = m2[0];
		typename mat<4, 4, T, Q>::col_type const SrcB1 = m2[1];
		typename mat<4, 4, T, Q>::col_type const SrcB2 = m2[2];
		typename mat<4, 4, T, Q>::col_type const SrcB3 = m2[3];

		mat<4, 4, T, Q> Result;
		Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];
		Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];
		Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];
		Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator/(mat<4, 4, T, Q> const& m, T const& s)
	{
		return mat<4, 4, T, Q>(
			m[0] / s,
			m[1] / s,
			m[2] / s,
			m[3] / s);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator/(T const& s,	mat<4, 4, T, Q> const& m)
	{
		return mat<4, 4, T, Q>(
			s / m[0],
			s / m[1],
			s / m[2],
			s / m[3]);
	}

	template<typename T, qualifier Q>
	 inline typename mat<4, 4, T, Q>::col_type operator/(mat<4, 4, T, Q> const& m, typename mat<4, 4, T, Q>::row_type const& v)
	{
		return inverse(m) * v;
	}

	template<typename T, qualifier Q>
	 inline typename mat<4, 4, T, Q>::row_type operator/(typename mat<4, 4, T, Q>::col_type const& v, mat<4, 4, T, Q> const& m)
	{
		return v * inverse(m);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> operator/(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)
	{
		mat<4, 4, T, Q> m1_copy(m1);
		return m1_copy /= m2;
	}

	

	template<typename T, qualifier Q>
	 inline bool operator==(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)
	{
		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);
	}

	template<typename T, qualifier Q>
	 inline bool operator!=(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const& m2)
	{
		return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]) || (m1[3] != m2[3]);
	}
}



#line 707 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.inl"
#line 189 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.hpp"
#line 190 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat4x4.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double4x4.hpp"

namespace glm
{
	
	

	
	
	
	typedef mat<4, 4, double, defaultp>		dmat4x4;

	
	
	
	typedef mat<4, 4, double, defaultp>		dmat4;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double4x4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<4, 4, double, lowp>		lowp_dmat4;

	
	
	
	
	typedef mat<4, 4, double, mediump>	mediump_dmat4;

	
	
	
	
	typedef mat<4, 4, double, highp>	highp_dmat4;

	
	
	
	
	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;

	
	
	
	
	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;

	
	
	
	
	typedef mat<4, 4, double, highp>	highp_dmat4x4;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float4x4.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef mat<4, 4, float, defaultp>			mat4x4;

	
	
	
	typedef mat<4, 4, float, defaultp>			mat4;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x4.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float4x4_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<4, 4, float, lowp>		lowp_mat4;

	
	
	
	
	typedef mat<4, 4, float, mediump>	mediump_mat4;

	
	
	
	
	typedef mat<4, 4, float, highp>		highp_mat4;

	
	
	
	
	typedef mat<4, 4, float, lowp>		lowp_mat4x4;

	
	
	
	
	typedef mat<4, 4, float, mediump>	mediump_mat4x4;

	
	
	
	
	typedef mat<4, 4, float, highp>		highp_mat4x4;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\mat4x4.hpp"

#line 30 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"

namespace glm {
namespace detail
{
	template<length_t C, length_t R, typename T, qualifier Q>
	struct outerProduct_trait{};

	template<typename T, qualifier Q>
	struct outerProduct_trait<2, 2, T, Q>
	{
		typedef mat<2, 2, T, Q> type;
	};

	template<typename T, qualifier Q>
	struct outerProduct_trait<2, 3, T, Q>
	{
		typedef mat<3, 2, T, Q> type;
	};

	template<typename T, qualifier Q>
	struct outerProduct_trait<2, 4, T, Q>
	{
		typedef mat<4, 2, T, Q> type;
	};

	template<typename T, qualifier Q>
	struct outerProduct_trait<3, 2, T, Q>
	{
		typedef mat<2, 3, T, Q> type;
	};

	template<typename T, qualifier Q>
	struct outerProduct_trait<3, 3, T, Q>
	{
		typedef mat<3, 3, T, Q> type;
	};

	template<typename T, qualifier Q>
	struct outerProduct_trait<3, 4, T, Q>
	{
		typedef mat<4, 3, T, Q> type;
	};

	template<typename T, qualifier Q>
	struct outerProduct_trait<4, 2, T, Q>
	{
		typedef mat<2, 4, T, Q> type;
	};

	template<typename T, qualifier Q>
	struct outerProduct_trait<4, 3, T, Q>
	{
		typedef mat<3, 4, T, Q> type;
	};

	template<typename T, qualifier Q>
	struct outerProduct_trait<4, 4, T, Q>
	{
		typedef mat<4, 4, T, Q> type;
	};
}

	 
	 

	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	template<length_t C, length_t R, typename T, qualifier Q>
	 mat<C, R, T, Q> matrixCompMult(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const& y);

	
	
	
	
	
	
	
	
	
	
	
	template<length_t C, length_t R, typename T, qualifier Q>
	 typename detail::outerProduct_trait<C, R, T, Q>::type outerProduct(vec<C, T, Q> const& c, vec<R, T, Q> const& r);

	
	
	
	
	
	
	
	
	
	template<length_t C, length_t R, typename T, qualifier Q>
	 typename mat<C, R, T, Q>::transpose_type transpose(mat<C, R, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	template<length_t C, length_t R, typename T, qualifier Q>
	 T determinant(mat<C, R, T, Q> const& m);

	
	
	
	
	
	
	
	
	
	template<length_t C, length_t R, typename T, qualifier Q>
	 mat<C, R, T, Q> inverse(mat<C, R, T, Q> const& m);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_matrix.inl"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\geometric.hpp"












#pragma once



namespace glm
{
	
	

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 T length(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 T distance(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1);

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 T dot(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 vec<3, T, Q> cross(vec<3, T, Q> const& x, vec<3, T, Q> const& y);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> normalize(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> faceforward(
		vec<L, T, Q> const& N,
		vec<L, T, Q> const& I,
		vec<L, T, Q> const& Nref);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> reflect(
		vec<L, T, Q> const& I,
		vec<L, T, Q> const& N);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> refract(
		vec<L, T, Q> const& I,
		vec<L, T, Q> const& N,
		T eta);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_geometric.inl"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\exponential.hpp"














#pragma once

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"



#pragma once




#line 10 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"

#line 12 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"


namespace glm
{
	template<typename T, qualifier Q>
	struct vec<1, T, Q>
	{
		

		typedef T value_type;
		typedef vec<1, T, Q> type;
		typedef vec<1, bool, Q> bool_type;

		













#line 40 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"



#line 44 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"





















#line 66 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"
			union {T x, r, s;};





#line 73 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"









#line 83 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"

		

		
		typedef length_t length_type;
		 static constexpr length_type length(){return 1;}

		 constexpr T & operator[](length_type i);
		 constexpr T const& operator[](length_type i) const;

		

		 constexpr vec() = default;
		 constexpr vec(vec const& v) = default;
		template<qualifier P>
		 constexpr vec(vec<1, T, P> const& v);

		

		 constexpr explicit vec(T scalar);

		

		
		template<typename U, qualifier P>
		 constexpr  vec(vec<2, U, P> const& v);
		
		template<typename U, qualifier P>
		 constexpr  vec(vec<3, U, P> const& v);
		
		template<typename U, qualifier P>
		 constexpr  vec(vec<4, U, P> const& v);

		
		template<typename U, qualifier P>
		 constexpr  vec(vec<1, U, P> const& v);

		









		

		 constexpr vec<1, T, Q> & operator=(vec const& v) = default;

		template<typename U>
		 constexpr vec<1, T, Q> & operator=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<1, T, Q> & operator+=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator+=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<1, T, Q> & operator-=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator-=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<1, T, Q> & operator*=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator*=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<1, T, Q> & operator/=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator/=(vec<1, U, Q> const& v);

		

		 constexpr vec<1, T, Q> & operator++();
		 constexpr vec<1, T, Q> & operator--();
		 constexpr vec<1, T, Q> operator++(int);
		 constexpr vec<1, T, Q> operator--(int);

		

		template<typename U>
		 constexpr vec<1, T, Q> & operator%=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator%=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<1, T, Q> & operator&=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator&=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<1, T, Q> & operator|=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator|=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<1, T, Q> & operator^=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator^=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<1, T, Q> & operator<<=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator<<=(vec<1, U, Q> const& v);
		template<typename U>
		 constexpr vec<1, T, Q> & operator>>=(U scalar);
		template<typename U>
		 constexpr vec<1, T, Q> & operator>>=(vec<1, U, Q> const& v);
	};

	

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator+(vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator-(vec<1, T, Q> const& v);

	

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator+(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator+(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator+(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator-(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator-(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator-(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator*(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator*(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator*(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator/(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator/(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator/(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator%(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator%(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator%(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator&(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator&(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator&(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator|(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator|(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator|(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator^(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator^(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator^(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator<<(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator<<(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator<<(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator>>(vec<1, T, Q> const& v, T scalar);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator>>(T scalar, vec<1, T, Q> const& v);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator>>(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr vec<1, T, Q> operator~(vec<1, T, Q> const& v);

	

	template<typename T, qualifier Q>
	 constexpr bool operator==(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<typename T, qualifier Q>
	 constexpr bool operator!=(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2);

	template<qualifier Q>
	 constexpr vec<1, bool, Q> operator&&(vec<1, bool, Q> const& v1, vec<1, bool, Q> const& v2);

	template<qualifier Q>
	 constexpr vec<1, bool, Q> operator||(vec<1, bool, Q> const& v1, vec<1, bool, Q> const& v2);
}


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.inl"




namespace glm
{
	













#line 22 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr vec<1, T, Q>::vec(vec<1, T, P> const& v)
		: x(v.x)
	{}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q>::vec(T scalar)
		: x(scalar)
	{}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<1, T, Q>::vec(vec<1, U, P> const& v)
		: x(static_cast<T>(v.x))
	{}

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<1, T, Q>::vec(vec<2, U, P> const& v)
		: x(static_cast<T>(v.x))
	{}

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<1, T, Q>::vec(vec<3, U, P> const& v)
		: x(static_cast<T>(v.x))
	{}

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr vec<1, T, Q>::vec(vec<4, U, P> const& v)
		: x(static_cast<T>(v.x))
	{}

	

	template<typename T, qualifier Q>
	 inline constexpr T & vec<1, T, Q>::operator[](typename vec<1, T, Q>::length_type)
	{
		return x;
	}

	template<typename T, qualifier Q>
	 inline constexpr T const& vec<1, T, Q>::operator[](typename vec<1, T, Q>::length_type) const
	{
		return x;
	}

	








#line 86 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.inl"

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator=(vec<1, U, Q> const& v)
	{
		this->x = static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator+=(U scalar)
	{
		this->x += static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator+=(vec<1, U, Q> const& v)
	{
		this->x += static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator-=(U scalar)
	{
		this->x -= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator-=(vec<1, U, Q> const& v)
	{
		this->x -= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator*=(U scalar)
	{
		this->x *= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator*=(vec<1, U, Q> const& v)
	{
		this->x *= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator/=(U scalar)
	{
		this->x /= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator/=(vec<1, U, Q> const& v)
	{
		this->x /= static_cast<T>(v.x);
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator++()
	{
		++this->x;
		return *this;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator--()
	{
		--this->x;
		return *this;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> vec<1, T, Q>::operator++(int)
	{
		vec<1, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> vec<1, T, Q>::operator--(int)
	{
		vec<1, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator%=(U scalar)
	{
		this->x %= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator%=(vec<1, U, Q> const& v)
	{
		this->x %= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator&=(U scalar)
	{
		this->x &= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator&=(vec<1, U, Q> const& v)
	{
		this->x &= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator|=(U scalar)
	{
		this->x |= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator|=(vec<1, U, Q> const& v)
	{
		this->x |= U(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator^=(U scalar)
	{
		this->x ^= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator^=(vec<1, U, Q> const& v)
	{
		this->x ^= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator<<=(U scalar)
	{
		this->x <<= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator<<=(vec<1, U, Q> const& v)
	{
		this->x <<= static_cast<T>(v.x);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator>>=(U scalar)
	{
		this->x >>= static_cast<T>(scalar);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline constexpr vec<1, T, Q> & vec<1, T, Q>::operator>>=(vec<1, U, Q> const& v)
	{
		this->x >>= static_cast<T>(v.x);
		return *this;
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator+(vec<1, T, Q> const& v)
	{
		return v;
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator-(vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			-v.x);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator+(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			v.x + scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator+(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar + v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator+(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x + v2.x);
	}

	
	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator-(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			v.x - scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator-(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar - v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator-(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x - v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator*(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			v.x * scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator*(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar * v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator*(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x * v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator/(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			v.x / scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator/(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar / v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator/(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x / v2.x);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator%(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			v.x % scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator%(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar % v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator%(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x % v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator&(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			v.x & scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator&(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar & v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator&(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x & v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator|(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			v.x | scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator|(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar | v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator|(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x | v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator^(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			v.x ^ scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator^(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar ^ v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator^(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x ^ v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator<<(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			static_cast<T>(v.x << scalar));
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator<<(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar << v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator<<(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x << v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator>>(vec<1, T, Q> const& v, T scalar)
	{
		return vec<1, T, Q>(
			v.x >> scalar);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator>>(T scalar, vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			scalar >> v.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator>>(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return vec<1, T, Q>(
			v1.x >> v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr vec<1, T, Q> operator~(vec<1, T, Q> const& v)
	{
		return vec<1, T, Q>(
			~v.x);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr bool operator==(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return detail::compute_equal<T, std::numeric_limits<T>::is_iec559>::call(v1.x, v2.x);
	}

	template<typename T, qualifier Q>
	 inline constexpr bool operator!=(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2)
	{
		return !(v1 == v2);
	}

	template<qualifier Q>
	 inline constexpr vec<1, bool, Q> operator&&(vec<1, bool, Q> const& v1, vec<1, bool, Q> const& v2)
	{
		return vec<1, bool, Q>(v1.x && v2.x);
	}

	template<qualifier Q>
	 inline constexpr vec<1, bool, Q> operator||(vec<1, bool, Q> const& v1, vec<1, bool, Q> const& v2)
	{
		return vec<1, bool, Q>(v1.x || v2.x);
	}
}
#line 308 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"
#line 309 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_vec1.hpp"
#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\exponential.hpp"





namespace glm
{
	
	

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> pow(vec<L, T, Q> const& base, vec<L, T, Q> const& exponent);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> exp(vec<L, T, Q> const& v);

	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> log(vec<L, T, Q> const& v);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> exp2(vec<L, T, Q> const& v);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> log2(vec<L, T, Q> const& v);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> sqrt(vec<L, T, Q> const& v);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> inversesqrt(vec<L, T, Q> const& v);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_exponential.inl"



#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\vector_relational.hpp"



















#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 24 "d:\\vsprojects\\openglproject\\includes\\glm\\vector_relational.hpp"

namespace glm
{
	
	

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> lessThan(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> lessThanEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> greaterThan(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> greaterThanEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 constexpr bool any(vec<L, bool, Q> const& v);

	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 constexpr bool all(vec<L, bool, Q> const& v);

	
	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 constexpr vec<L, bool, Q> not_(vec<L, bool, Q> const& v);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_vector_relational.inl"
namespace glm
{
	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> lessThan(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
	{
		vec<L, bool, Q> Result(true);
		for(length_t i = 0; i < L; ++i)
			Result[i] = x[i] < y[i];
		return Result;
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> lessThanEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
	{
		vec<L, bool, Q> Result(true);
		for(length_t i = 0; i < L; ++i)
			Result[i] = x[i] <= y[i];
		return Result;
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> greaterThan(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
	{
		vec<L, bool, Q> Result(true);
		for(length_t i = 0; i < L; ++i)
			Result[i] = x[i] > y[i];
		return Result;
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> greaterThanEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
	{
		vec<L, bool, Q> Result(true);
		for(length_t i = 0; i < L; ++i)
			Result[i] = x[i] >= y[i];
		return Result;
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
	{
		vec<L, bool, Q> Result(true);
		for(length_t i = 0; i < L; ++i)
			Result[i] = x[i] == y[i];
		return Result;
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
	{
		vec<L, bool, Q> Result(true);
		for(length_t i = 0; i < L; ++i)
			Result[i] = x[i] != y[i];
		return Result;
	}

	template<length_t L, qualifier Q>
	 inline constexpr bool any(vec<L, bool, Q> const& v)
	{
		bool Result = false;
		for(length_t i = 0; i < L; ++i)
			Result = Result || v[i];
		return Result;
	}

	template<length_t L, qualifier Q>
	 inline constexpr bool all(vec<L, bool, Q> const& v)
	{
		bool Result = true;
		for(length_t i = 0; i < L; ++i)
			Result = Result && v[i];
		return Result;
	}

	template<length_t L, qualifier Q>
	 inline constexpr vec<L, bool, Q> not_(vec<L, bool, Q> const& v)
	{
		vec<L, bool, Q> Result(true);
		for(length_t i = 0; i < L; ++i)
			Result[i] = !v[i];
		return Result;
	}
}



#line 88 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_vector_relational.inl"
#line 122 "d:\\vsprojects\\openglproject\\includes\\glm\\vector_relational.hpp"
#line 5 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_exponential.inl"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\_vectorize.hpp"
#pragma once

namespace glm{
namespace detail
{
	template<template<length_t L, typename T, qualifier Q> class vec, length_t L, typename R, typename T, qualifier Q>
	struct functor1{};

	template<template<length_t L, typename T, qualifier Q> class vec, typename R, typename T, qualifier Q>
	struct functor1<vec, 1, R, T, Q>
	{
		 inline constexpr static vec<1, R, Q> call(R (*Func) (T x), vec<1, T, Q> const& v)
		{
			return vec<1, R, Q>(Func(v.x));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, typename R, typename T, qualifier Q>
	struct functor1<vec, 2, R, T, Q>
	{
		 inline constexpr static vec<2, R, Q> call(R (*Func) (T x), vec<2, T, Q> const& v)
		{
			return vec<2, R, Q>(Func(v.x), Func(v.y));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, typename R, typename T, qualifier Q>
	struct functor1<vec, 3, R, T, Q>
	{
		 inline constexpr static vec<3, R, Q> call(R (*Func) (T x), vec<3, T, Q> const& v)
		{
			return vec<3, R, Q>(Func(v.x), Func(v.y), Func(v.z));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, typename R, typename T, qualifier Q>
	struct functor1<vec, 4, R, T, Q>
	{
		 inline constexpr static vec<4, R, Q> call(R (*Func) (T x), vec<4, T, Q> const& v)
		{
			return vec<4, R, Q>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, length_t L, typename T, qualifier Q>
	struct functor2{};

	template<template<length_t L, typename T, qualifier Q> class vec, typename T, qualifier Q>
	struct functor2<vec, 1, T, Q>
	{
		 inline static vec<1, T, Q> call(T (*Func) (T x, T y), vec<1, T, Q> const& a, vec<1, T, Q> const& b)
		{
			return vec<1, T, Q>(Func(a.x, b.x));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, typename T, qualifier Q>
	struct functor2<vec, 2, T, Q>
	{
		 inline static vec<2, T, Q> call(T (*Func) (T x, T y), vec<2, T, Q> const& a, vec<2, T, Q> const& b)
		{
			return vec<2, T, Q>(Func(a.x, b.x), Func(a.y, b.y));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, typename T, qualifier Q>
	struct functor2<vec, 3, T, Q>
	{
		 inline static vec<3, T, Q> call(T (*Func) (T x, T y), vec<3, T, Q> const& a, vec<3, T, Q> const& b)
		{
			return vec<3, T, Q>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, typename T, qualifier Q>
	struct functor2<vec, 4, T, Q>
	{
		 inline static vec<4, T, Q> call(T (*Func) (T x, T y), vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			return vec<4, T, Q>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, length_t L, typename T, qualifier Q>
	struct functor2_vec_sca{};

	template<template<length_t L, typename T, qualifier Q> class vec, typename T, qualifier Q>
	struct functor2_vec_sca<vec, 1, T, Q>
	{
		 inline static vec<1, T, Q> call(T (*Func) (T x, T y), vec<1, T, Q> const& a, T b)
		{
			return vec<1, T, Q>(Func(a.x, b));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, typename T, qualifier Q>
	struct functor2_vec_sca<vec, 2, T, Q>
	{
		 inline static vec<2, T, Q> call(T (*Func) (T x, T y), vec<2, T, Q> const& a, T b)
		{
			return vec<2, T, Q>(Func(a.x, b), Func(a.y, b));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, typename T, qualifier Q>
	struct functor2_vec_sca<vec, 3, T, Q>
	{
		 inline static vec<3, T, Q> call(T (*Func) (T x, T y), vec<3, T, Q> const& a, T b)
		{
			return vec<3, T, Q>(Func(a.x, b), Func(a.y, b), Func(a.z, b));
		}
	};

	template<template<length_t L, typename T, qualifier Q> class vec, typename T, qualifier Q>
	struct functor2_vec_sca<vec, 4, T, Q>
	{
		 inline static vec<4, T, Q> call(T (*Func) (T x, T y), vec<4, T, Q> const& a, T b)
		{
			return vec<4, T, Q>(Func(a.x, b), Func(a.y, b), Func(a.z, b), Func(a.w, b));
		}
	};

	template<length_t L, typename T, qualifier Q>
	struct functor2_vec_int {};

	template<typename T, qualifier Q>
	struct functor2_vec_int<1, T, Q>
	{
		 inline static vec<1, int, Q> call(int (*Func) (T x, int y), vec<1, T, Q> const& a, vec<1, int, Q> const& b)
		{
			return vec<1, int, Q>(Func(a.x, b.x));
		}
	};

	template<typename T, qualifier Q>
	struct functor2_vec_int<2, T, Q>
	{
		 inline static vec<2, int, Q> call(int (*Func) (T x, int y), vec<2, T, Q> const& a, vec<2, int, Q> const& b)
		{
			return vec<2, int, Q>(Func(a.x, b.x), Func(a.y, b.y));
		}
	};

	template<typename T, qualifier Q>
	struct functor2_vec_int<3, T, Q>
	{
		 inline static vec<3, int, Q> call(int (*Func) (T x, int y), vec<3, T, Q> const& a, vec<3, int, Q> const& b)
		{
			return vec<3, int, Q>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z));
		}
	};

	template<typename T, qualifier Q>
	struct functor2_vec_int<4, T, Q>
	{
		 inline static vec<4, int, Q> call(int (*Func) (T x, int y), vec<4, T, Q> const& a, vec<4, int, Q> const& b)
		{
			return vec<4, int, Q>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));
		}
	};
}
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_exponential.inl"


#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cassert"



#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\assert.h"









#line 11 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\assert.h"



__pragma(pack(push, 8)) extern "C" {











    __declspec(dllimport) void __cdecl _wassert(
          wchar_t const* _Message,
          wchar_t const* _File,
            unsigned       _Line
        );

    




#line 38 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.17134.0\\ucrt\\assert.h"



} __pragma(pack(pop))
#line 5 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\cassert"





#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_exponential.inl"

namespace glm{
namespace detail
{

		using std::log2;






#line 22 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_exponential.inl"

	template<length_t L, typename T, qualifier Q, bool isFloat, bool Aligned>
	struct compute_log2
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& v)
		{
			static_assert(std::numeric_limits<T>::is_iec559, "'log2' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");

			return detail::functor1<vec, L, T, T, Q>::call(log2, v);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_sqrt
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			return detail::functor1<vec, L, T, T, Q>::call(std::sqrt, x);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_inversesqrt
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			return static_cast<T>(1) / sqrt(x);
		}
	};

	template<length_t L, bool Aligned>
	struct compute_inversesqrt<L, float, lowp, Aligned>
	{
		 inline static vec<L, float, lowp> call(vec<L, float, lowp> const& x)
		{
			vec<L, float, lowp> tmp(x);
			vec<L, float, lowp> xhalf(tmp * 0.5f);
			vec<L, uint, lowp>* p = reinterpret_cast<vec<L, uint, lowp>*>(const_cast<vec<L, float, lowp>*>(&x));
			vec<L, uint, lowp> i = vec<L, uint, lowp>(0x5f375a86) - (*p >> vec<L, uint, lowp>(1));
			vec<L, float, lowp>* ptmp = reinterpret_cast<vec<L, float, lowp>*>(&i);
			tmp = *ptmp;
			tmp = tmp * (1.5f - xhalf * tmp * tmp);
			return tmp;
		}
	};
}

	
	using std::pow;
	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> pow(vec<L, T, Q> const& base, vec<L, T, Q> const& exponent)
	{
		return detail::functor2<vec, L, T, Q>::call(pow, base, exponent);
	}

	
	using std::exp;
	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> exp(vec<L, T, Q> const& x)
	{
		return detail::functor1<vec, L, T, T, Q>::call(exp, x);
	}

	
	using std::log;
	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> log(vec<L, T, Q> const& x)
	{
		return detail::functor1<vec, L, T, T, Q>::call(log, x);
	}


    using std::exp2;









#line 105 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_exponential.inl"

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> exp2(vec<L, T, Q> const& x)
	{
		return detail::functor1<vec, L, T, T, Q>::call(exp2, x);
	}

	
	template<typename genType>
	 inline genType log2(genType x)
	{
		return log2(vec<1, genType>(x)).x;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> log2(vec<L, T, Q> const& x)
	{
		return detail::compute_log2<L, T, Q, std::numeric_limits<T>::is_iec559, detail::is_aligned<Q>::value>::call(x);
	}

	
	using std::sqrt;
	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> sqrt(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'sqrt' only accept floating-point inputs");
		return detail::compute_sqrt<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}

	
	template<typename genType>
	 inline genType inversesqrt(genType x)
	{
		return static_cast<genType>(1) / sqrt(x);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> inversesqrt(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'inversesqrt' only accept floating-point inputs");
		return detail::compute_inversesqrt<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}
}



#line 152 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_exponential.inl"

#line 111 "d:\\vsprojects\\openglproject\\includes\\glm\\exponential.hpp"
#line 2 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_geometric.inl"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\common.hpp"














#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\_fixes.hpp"



























#line 19 "d:\\vsprojects\\openglproject\\includes\\glm\\common.hpp"

namespace glm
{
	
	

	
	
	
	
	
	
	template<typename genType>
	 constexpr genType abs(genType x);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, T, Q> abs(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> sign(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> floor(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> trunc(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> round(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> roundEven(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> ceil(vec<L, T, Q> const& x);

	
	
	
	
	
	
	template<typename genType>
	 genType fract(genType x);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> fract(vec<L, T, Q> const& x);

	template<typename genType>
	 genType mod(genType x, genType y);

	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> mod(vec<L, T, Q> const& x, T y);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> mod(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	
	
	
	template<typename genType>
	 genType modf(genType x, genType& i);

	
	
	
	
	
	
	template<typename genType>
	 constexpr genType min(genType x, genType y);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, T, Q> min(vec<L, T, Q> const& x, T y);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, T, Q> min(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	template<typename genType>
	 constexpr genType max(genType x, genType y);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, T, Q> max(vec<L, T, Q> const& x, T y);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, T, Q> max(vec<L, T, Q> const& x, vec<L, T, Q> const& y);

	
	
	
	
	
	
	
	template<typename genType>
	 constexpr genType clamp(genType x, genType minVal, genType maxVal);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, T, Q> clamp(vec<L, T, Q> const& x, T minVal, T maxVal);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, T, Q> clamp(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L, T, Q> const& maxVal);

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	template<typename genTypeT, typename genTypeU>
	 genTypeT mix(genTypeT x, genTypeT y, genTypeU a);

	template<length_t L, typename T, typename U, qualifier Q>
	 vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, U, Q> const& a);

	template<length_t L, typename T, typename U, qualifier Q>
	 vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U a);

	
	
	
	
	template<typename genType>
	 genType step(genType edge, genType x);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> step(T edge, vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> step(vec<L, T, Q> const& edge, vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	template<typename genType>
	 genType smoothstep(genType edge0, genType edge1, genType x);

	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> smoothstep(T edge0, T edge1, vec<L, T, Q> const& x);

	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> smoothstep(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1, vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, bool, Q> isnan(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, bool, Q> isinf(vec<L, T, Q> const& x);

	
	
	
	
	
	
	 int floatBitsToInt(float const& v);

	
	
	
	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 vec<L, int, Q> floatBitsToInt(vec<L, float, Q> const& v);

	
	
	
	
	
	
	 uint floatBitsToUint(float const& v);

	
	
	
	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 vec<L, uint, Q> floatBitsToUint(vec<L, float, Q> const& v);

	
	
	
	
	
	
	
	
	 float intBitsToFloat(int const& v);

	
	
	
	
	
	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 vec<L, float, Q> intBitsToFloat(vec<L, int, Q> const& v);

	
	
	
	
	
	
	
	
	 float uintBitsToFloat(uint const& v);

	
	
	
	
	
	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 vec<L, float, Q> uintBitsToFloat(vec<L, uint, Q> const& v);

	
	
	
	
	
	
	template<typename genType>
	 genType fma(genType const& a, genType const& b, genType const& c);

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	template<typename genType>
	 genType frexp(genType x, int& exp);
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> frexp(vec<L, T, Q> const& v, vec<L, int, Q>& exp);

	
	
	
	
	
	
	
	
	
	
	
	template<typename genType>
	 genType ldexp(genType const& x, int const& exp);
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> ldexp(vec<L, T, Q> const& v, vec<L, int, Q> const& exp);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"




#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\compute_common.hpp"
#pragma once

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 4 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\compute_common.hpp"


namespace glm{
namespace detail
{
	template<typename genFIType, bool >
	struct compute_abs
	{};

	template<typename genFIType>
	struct compute_abs<genFIType, true>
	{
		 inline constexpr static genFIType call(genFIType x)
		{
			static_assert(std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed, "'abs' only accept floating-point and integer scalar or vector inputs");
#line 21 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\compute_common.hpp"

			return x >= genFIType(0) ? x : -x;
			
		}
	};










#line 37 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\compute_common.hpp"

	template<typename genFIType>
	struct compute_abs<genFIType, false>
	{
		 inline constexpr static genFIType call(genFIType x)
		{
			static_assert((!std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer), "'abs' only accept floating-point and integer scalar or vector inputs");
#line 46 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\compute_common.hpp"
			return x;
		}
	};
}
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"







namespace glm
{
	
	template<typename genType>
	 inline constexpr genType min(genType x, genType y)
	{
		static_assert(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer, "'min' only accept floating-point or integer inputs");
		return (y < x) ? y : x;
	}

	
	template<typename genType>
	 inline constexpr genType max(genType x, genType y)
	{
		static_assert(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer, "'max' only accept floating-point or integer inputs");

		return (x < y) ? y : x;
	}

	
	template<>
	 inline constexpr int abs(int x)
	{
		int const y = x >> (sizeof(int) * 8 - 1);
		return (x ^ y) - y;
	}

	

		using ::std::round;








#line 52 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"

	

		using ::std::trunc;








#line 65 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"

}

namespace glm{
namespace detail
{
	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_abs_vector
	{
		 inline constexpr static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			return detail::functor1<vec, L, T, T, Q>::call(abs, x);
		}
	};

	template<length_t L, typename T, typename U, qualifier Q, bool Aligned>
	struct compute_mix_vector
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, U, Q> const& a)
		{
			static_assert(std::numeric_limits<U>::is_iec559 || 0, "'mix' only accept floating-point inputs for the interpolator a");

			return vec<L, T, Q>(vec<L, U, Q>(x) * (static_cast<U>(1) - a) + vec<L, U, Q>(y) * a);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_mix_vector<L, T, bool, Q, Aligned>
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, bool, Q> const& a)
		{
			vec<L, T, Q> Result;
			for(length_t i = 0; i < x.length(); ++i)
				Result[i] = a[i] ? y[i] : x[i];
			return Result;
		}
	};

	template<length_t L, typename T, typename U, qualifier Q, bool Aligned>
	struct compute_mix_scalar
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U const& a)
		{
			static_assert(std::numeric_limits<U>::is_iec559 || 0, "'mix' only accept floating-point inputs for the interpolator a");

			return vec<L, T, Q>(vec<L, U, Q>(x) * (static_cast<U>(1) - a) + vec<L, U, Q>(y) * a);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_mix_scalar<L, T, bool, Q, Aligned>
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, bool const& a)
		{
			return a ? y : x;
		}
	};

	template<typename T, typename U>
	struct compute_mix
	{
		 inline static T call(T const& x, T const& y, U const& a)
		{
			static_assert(std::numeric_limits<U>::is_iec559 || 0, "'mix' only accept floating-point inputs for the interpolator a");

			return static_cast<T>(static_cast<U>(x) * (static_cast<U>(1) - a) + static_cast<U>(y) * a);
		}
	};

	template<typename T>
	struct compute_mix<T, bool>
	{
		 inline static T call(T const& x, T const& y, bool const& a)
		{
			return a ? y : x;
		}
	};

	template<length_t L, typename T, qualifier Q, bool isFloat, bool Aligned>
	struct compute_sign
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			return vec<L, T, Q>(glm::lessThan(vec<L, T, Q>(0), x)) - vec<L, T, Q>(glm::lessThan(x, vec<L, T, Q>(0)));
		}
	};


	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_sign<L, T, Q, false, Aligned>
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			T const Shift(static_cast<T>(sizeof(T) * 8 - 1));
			vec<L, T, Q> const y(vec<L, typename detail::make_unsigned<T>::type, Q>(-x) >> typename detail::make_unsigned<T>::type(Shift));

			return (x >> Shift) | y;
		}
	};
#line 165 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_floor
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			return detail::functor1<vec, L, T, T, Q>::call(std::floor, x);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_ceil
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			return detail::functor1<vec, L, T, T, Q>::call(std::ceil, x);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_fract
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			return x - floor(x);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_trunc
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			return detail::functor1<vec, L, T, T, Q>::call(trunc, x);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_round
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x)
		{
			return detail::functor1<vec, L, T, T, Q>::call(round, x);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_mod
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)
		{
			static_assert(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
			return a - b * floor(a / b);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_min_vector
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
		{
			return detail::functor2<vec, L, T, Q>::call(min, x, y);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_max_vector
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
		{
			return detail::functor2<vec, L, T, Q>::call(max, x, y);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_clamp_vector
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L, T, Q> const& maxVal)
		{
			return min(max(x, minVal), maxVal);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_step_vector
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)
		{
			return mix(vec<L, T, Q>(1), vec<L, T, Q>(0), glm::lessThan(x, edge));
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_smoothstep_vector
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1, vec<L, T, Q> const& x)
		{
			static_assert(std::numeric_limits<T>::is_iec559 || 0, "'smoothstep' only accept floating-point inputs");
			vec<L, T, Q> const tmp(clamp((x - edge0) / (edge1 - edge0), static_cast<T>(0), static_cast<T>(1)));
			return tmp * tmp * (static_cast<T>(3) - static_cast<T>(2) * tmp);
		}
	};
}

	template<typename genFIType>
	 inline constexpr genFIType abs(genFIType x)
	{
		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, T, Q> abs(vec<L, T, Q> const& x)
	{
		return detail::compute_abs_vector<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}

	
	
	template<typename genFIType>
	 inline genFIType sign(genFIType x)
	{
		static_assert(std::numeric_limits<genFIType>::is_iec559 || (std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer), "'sign' only accept signed inputs");
#line 289 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"

		return detail::compute_sign<1, genFIType, defaultp, std::numeric_limits<genFIType>::is_iec559, highp>::call(vec<1, genFIType>(x)).x;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> sign(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || (std::numeric_limits<T>::is_signed && std::numeric_limits<T>::is_integer), "'sign' only accept signed inputs");
#line 299 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"

		return detail::compute_sign<L, T, Q, std::numeric_limits<T>::is_iec559, detail::is_aligned<Q>::value>::call(x);
	}

	
	using ::std::floor;
	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> floor(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
		return detail::compute_floor<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> trunc(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'trunc' only accept floating-point inputs");
		return detail::compute_trunc<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> round(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'round' only accept floating-point inputs");
		return detail::compute_round<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}












	
	template<typename genType>
	 inline genType roundEven(genType x)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'roundEven' only accept floating-point inputs");

		int Integer = static_cast<int>(x);
		genType IntegerPart = static_cast<genType>(Integer);
		genType FractionalPart = fract(x);

		if(FractionalPart > static_cast<genType>(0.5) || FractionalPart < static_cast<genType>(0.5))
		{
			return round(x);
		}
		else if((Integer % 2) == 0)
		{
			return IntegerPart;
		}
		else if(x <= static_cast<genType>(0)) 
		{
			return IntegerPart - static_cast<genType>(1);
		}
		else
		{
			return IntegerPart + static_cast<genType>(1);
		}
		
		
		
		
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> roundEven(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'roundEven' only accept floating-point inputs");
		return detail::functor1<vec, L, T, T, Q>::call(roundEven, x);
	}

	
	using ::std::ceil;
	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> ceil(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'ceil' only accept floating-point inputs");
		return detail::compute_ceil<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}

	
	template<typename genType>
	 inline genType fract(genType x)
	{
		return fract(vec<1, genType>(x)).x;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> fract(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'fract' only accept floating-point inputs");
		return detail::compute_fract<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}

	
	template<typename genType>
	 inline genType mod(genType x, genType y)
	{




#line 408 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"
			return mod(vec<1, genType, defaultp>(x), y).x;
#line 410 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> mod(vec<L, T, Q> const& x, T y)
	{
		return detail::compute_mod<L, T, Q, detail::is_aligned<Q>::value>::call(x, vec<L, T, Q>(y));
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> mod(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
	{
		return detail::compute_mod<L, T, Q, detail::is_aligned<Q>::value>::call(x, y);
	}

	
	template<typename genType>
	 inline genType modf(genType x, genType & i)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'modf' only accept floating-point inputs");
		return std::modf(x, &i);
	}

	template<typename T, qualifier Q>
	 inline vec<1, T, Q> modf(vec<1, T, Q> const& x, vec<1, T, Q> & i)
	{
		return vec<1, T, Q>(
			modf(x.x, i.x));
	}

	template<typename T, qualifier Q>
	 inline vec<2, T, Q> modf(vec<2, T, Q> const& x, vec<2, T, Q> & i)
	{
		return vec<2, T, Q>(
			modf(x.x, i.x),
			modf(x.y, i.y));
	}

	template<typename T, qualifier Q>
	 inline vec<3, T, Q> modf(vec<3, T, Q> const& x, vec<3, T, Q> & i)
	{
		return vec<3, T, Q>(
			modf(x.x, i.x),
			modf(x.y, i.y),
			modf(x.z, i.z));
	}

	template<typename T, qualifier Q>
	 inline vec<4, T, Q> modf(vec<4, T, Q> const& x, vec<4, T, Q> & i)
	{
		return vec<4, T, Q>(
			modf(x.x, i.x),
			modf(x.y, i.y),
			modf(x.z, i.z),
			modf(x.w, i.w));
	}

	
	
	
	
	
	
	

	
	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, T, Q> min(vec<L, T, Q> const& a, T b)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer, "'min' only accept floating-point or integer inputs");
		return detail::compute_min_vector<L, T, Q, detail::is_aligned<Q>::value>::call(a, vec<L, T, Q>(b));
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, T, Q> min(vec<L, T, Q> const& a, vec<L, T, Q> const& b)
	{
		return detail::compute_min_vector<L, T, Q, detail::is_aligned<Q>::value>::call(a, b);
	}

	
	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, T, Q> max(vec<L, T, Q> const& a, T b)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer, "'max' only accept floating-point or integer inputs");
		return detail::compute_max_vector<L, T, Q, detail::is_aligned<Q>::value>::call(a, vec<L, T, Q>(b));
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, T, Q> max(vec<L, T, Q> const& a, vec<L, T, Q> const& b)
	{
		return detail::compute_max_vector<L, T, Q, detail::is_aligned<Q>::value>::call(a, b);
	}

	
	template<typename genType>
	 inline constexpr genType clamp(genType x, genType minVal, genType maxVal)
	{
		static_assert(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer, "'clamp' only accept floating-point or integer inputs");
		return min(max(x, minVal), maxVal);
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, T, Q> clamp(vec<L, T, Q> const& x, T minVal, T maxVal)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer, "'clamp' only accept floating-point or integer inputs");
		return detail::compute_clamp_vector<L, T, Q, detail::is_aligned<Q>::value>::call(x, vec<L, T, Q>(minVal), vec<L, T, Q>(maxVal));
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, T, Q> clamp(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L, T, Q> const& maxVal)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer, "'clamp' only accept floating-point or integer inputs");
		return detail::compute_clamp_vector<L, T, Q, detail::is_aligned<Q>::value>::call(x, minVal, maxVal);
	}

	template<typename genTypeT, typename genTypeU>
	 inline genTypeT mix(genTypeT x, genTypeT y, genTypeU a)
	{
		return detail::compute_mix<genTypeT, genTypeU>::call(x, y, a);
	}

	template<length_t L, typename T, typename U, qualifier Q>
	 inline vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U a)
	{
		return detail::compute_mix_scalar<L, T, U, Q, detail::is_aligned<Q>::value>::call(x, y, a);
	}

	template<length_t L, typename T, typename U, qualifier Q>
	 inline vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, U, Q> const& a)
	{
		return detail::compute_mix_vector<L, T, U, Q, detail::is_aligned<Q>::value>::call(x, y, a);
	}

	
	template<typename genType>
	 inline genType step(genType edge, genType x)
	{
		return mix(static_cast<genType>(1), static_cast<genType>(0), x < edge);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> step(T edge, vec<L, T, Q> const& x)
	{
		return detail::compute_step_vector<L, T, Q, detail::is_aligned<Q>::value>::call(vec<L, T, Q>(edge), x);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> step(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)
	{
		return detail::compute_step_vector<L, T, Q, detail::is_aligned<Q>::value>::call(edge, x);
	}

	
	template<typename genType>
	 inline genType smoothstep(genType edge0, genType edge1, genType x)
	{
		static_assert(std::numeric_limits<genType>::is_iec559 || 0, "'smoothstep' only accept floating-point inputs");

		genType const tmp(clamp((x - edge0) / (edge1 - edge0), genType(0), genType(1)));
		return tmp * tmp * (genType(3) - genType(2) * tmp);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> smoothstep(T edge0, T edge1, vec<L, T, Q> const& x)
	{
		return detail::compute_smoothstep_vector<L, T, Q, detail::is_aligned<Q>::value>::call(vec<L, T, Q>(edge0), vec<L, T, Q>(edge1), x);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> smoothstep(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1, vec<L, T, Q> const& x)
	{
		return detail::compute_smoothstep_vector<L, T, Q, detail::is_aligned<Q>::value>::call(edge0, edge1, x);
	}


		using std::isnan;
























#line 610 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, bool, Q> isnan(vec<L, T, Q> const& v)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");

		vec<L, bool, Q> Result;
		for (length_t l = 0; l < v.length(); ++l)
			Result[l] = glm::isnan(v[l]);
		return Result;
	}


		using std::isinf;



























#line 652 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, bool, Q> isinf(vec<L, T, Q> const& v)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'isinf' only accept floating-point inputs");

		vec<L, bool, Q> Result;
		for (length_t l = 0; l < v.length(); ++l)
			Result[l] = glm::isinf(v[l]);
		return Result;
	}

	 inline int floatBitsToInt(float const& v)
	{
		union
		{
			float in;
			int out;
		} u;

		u.in = v;

		return u.out;
	}

	template<length_t L, qualifier Q>
	 inline vec<L, int, Q> floatBitsToInt(vec<L, float, Q> const& v)
	{
		return reinterpret_cast<vec<L, int, Q>&>(const_cast<vec<L, float, Q>&>(v));
	}

	 inline uint floatBitsToUint(float const& v)
	{
		union
		{
			float in;
			uint out;
		} u;

		u.in = v;

		return u.out;
	}

	template<length_t L, qualifier Q>
	 inline vec<L, uint, Q> floatBitsToUint(vec<L, float, Q> const& v)
	{
		return reinterpret_cast<vec<L, uint, Q>&>(const_cast<vec<L, float, Q>&>(v));
	}

	 inline float intBitsToFloat(int const& v)
	{
		union
		{
			int in;
			float out;
		} u;

		u.in = v;

		return u.out;
	}

	template<length_t L, qualifier Q>
	 inline vec<L, float, Q> intBitsToFloat(vec<L, int, Q> const& v)
	{
		return reinterpret_cast<vec<L, float, Q>&>(const_cast<vec<L, int, Q>&>(v));
	}

	 inline float uintBitsToFloat(uint const& v)
	{
		union
		{
			uint in;
			float out;
		} u;

		u.in = v;

		return u.out;
	}

	template<length_t L, qualifier Q>
	 inline vec<L, float, Q> uintBitsToFloat(vec<L, uint, Q> const& v)
	{
		return reinterpret_cast<vec<L, float, Q>&>(const_cast<vec<L, uint, Q>&>(v));
	}

	template<typename genType>
	 inline genType fma(genType const& a, genType const& b, genType const& c)
	{
		return a * b + c;
	}

	template<typename genType>
	 inline genType frexp(genType x, int& exp)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'frexp' only accept floating-point inputs");

		return std::frexp(x, &exp);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> frexp(vec<L, T, Q> const& v, vec<L, int, Q>& exp)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'frexp' only accept floating-point inputs");

		vec<L, T, Q> Result;
		for (length_t l = 0; l < v.length(); ++l)
			Result[l] = std::frexp(v[l], &exp[l]);
		return Result;
	}

	template<typename genType>
	 inline genType ldexp(genType const& x, int const& exp)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'ldexp' only accept floating-point inputs");

		return std::ldexp(x, exp);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> ldexp(vec<L, T, Q> const& v, vec<L, int, Q> const& exp)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'ldexp' only accept floating-point inputs");

		vec<L, T, Q> Result;
		for (length_t l = 0; l < v.length(); ++l)
			Result[l] = std::ldexp(v[l], exp[l]);
		return Result;
	}
}



#line 788 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_common.inl"
#line 539 "d:\\vsprojects\\openglproject\\includes\\glm\\common.hpp"

#line 3 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_geometric.inl"

namespace glm{
namespace detail
{
	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_length
	{
		 inline static T call(vec<L, T, Q> const& v)
		{
			return sqrt(dot(v, v));
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_distance
	{
		 inline static T call(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)
		{
			return length(p1 - p0);
		}
	};

	template<typename V, typename T, bool Aligned>
	struct compute_dot{};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_dot<vec<1, T, Q>, T, Aligned>
	{
		 inline static T call(vec<1, T, Q> const& a, vec<1, T, Q> const& b)
		{
			return a.x * b.x;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_dot<vec<2, T, Q>, T, Aligned>
	{
		 inline static T call(vec<2, T, Q> const& a, vec<2, T, Q> const& b)
		{
			vec<2, T, Q> tmp(a * b);
			return tmp.x + tmp.y;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_dot<vec<3, T, Q>, T, Aligned>
	{
		 inline static T call(vec<3, T, Q> const& a, vec<3, T, Q> const& b)
		{
			vec<3, T, Q> tmp(a * b);
			return tmp.x + tmp.y + tmp.z;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_dot<vec<4, T, Q>, T, Aligned>
	{
		 inline static T call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)
		{
			vec<4, T, Q> tmp(a * b);
			return (tmp.x + tmp.y) + (tmp.z + tmp.w);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_cross
	{
		 inline static vec<3, T, Q> call(vec<3, T, Q> const& x, vec<3, T, Q> const& y)
		{
			static_assert(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");

			return vec<3, T, Q>(
				x.y * y.z - y.y * x.z,
				x.z * y.x - y.z * x.x,
				x.x * y.y - y.x * x.y);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_normalize
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& v)
		{
			static_assert(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");

			return v * inversesqrt(dot(v, v));
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_faceforward
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& N, vec<L, T, Q> const& I, vec<L, T, Q> const& Nref)
		{
			static_assert(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");

			return dot(Nref, I) < static_cast<T>(0) ? N : -N;
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_reflect
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& I, vec<L, T, Q> const& N)
		{
			return I - N * dot(N, I) * static_cast<T>(2);
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_refract
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& I, vec<L, T, Q> const& N, T eta)
		{
			T const dotValue(dot(N, I));
			T const k(static_cast<T>(1) - eta * eta * (static_cast<T>(1) - dotValue * dotValue));
			vec<L, T, Q> const Result =
                (k >= static_cast<T>(0)) ? (eta * I - (eta * dotValue + std::sqrt(k)) * N) : vec<L, T, Q>(0);
			return Result;
		}
	};
}

	
	template<typename genType>
	 inline genType length(genType x)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'length' accepts only floating-point inputs");

		return abs(x);
	}

	template<length_t L, typename T, qualifier Q>
	 inline T length(vec<L, T, Q> const& v)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");

		return detail::compute_length<L, T, Q, detail::is_aligned<Q>::value>::call(v);
	}

	
	template<typename genType>
	 inline genType distance(genType const& p0, genType const& p1)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'distance' accepts only floating-point inputs");

		return length(p1 - p0);
	}

	template<length_t L, typename T, qualifier Q>
	 inline T distance(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)
	{
		return detail::compute_distance<L, T, Q, detail::is_aligned<Q>::value>::call(p0, p1);
	}

	
	template<typename T>
	 inline T dot(T x, T y)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
		return x * y;
	}

	template<length_t L, typename T, qualifier Q>
	 inline T dot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
		return detail::compute_dot<vec<L, T, Q>, T, detail::is_aligned<Q>::value>::call(x, y);
	}

	
	template<typename T, qualifier Q>
	 inline vec<3, T, Q> cross(vec<3, T, Q> const& x, vec<3, T, Q> const& y)
	{
		return detail::compute_cross<T, Q, detail::is_aligned<Q>::value>::call(x, y);
	}










	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> normalize(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");

		return detail::compute_normalize<L, T, Q, detail::is_aligned<Q>::value>::call(x);
	}

	
	template<typename genType>
	 inline genType faceforward(genType const& N, genType const& I, genType const& Nref)
	{
		return dot(Nref, I) < static_cast<genType>(0) ? N : -N;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> faceforward(vec<L, T, Q> const& N, vec<L, T, Q> const& I, vec<L, T, Q> const& Nref)
	{
		return detail::compute_faceforward<L, T, Q, detail::is_aligned<Q>::value>::call(N, I, Nref);
	}

	
	template<typename genType>
	 inline genType reflect(genType const& I, genType const& N)
	{
		return I - N * dot(N, I) * genType(2);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> reflect(vec<L, T, Q> const& I, vec<L, T, Q> const& N)
	{
		return detail::compute_reflect<L, T, Q, detail::is_aligned<Q>::value>::call(I, N);
	}

	
	template<typename genType>
	 inline genType refract(genType const& I, genType const& N, genType eta)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'refract' accepts only floating-point inputs");
		genType const dotValue(dot(N, I));
		genType const k(static_cast<genType>(1) - eta * eta * (static_cast<genType>(1) - dotValue * dotValue));
		return (eta * I - (eta * dotValue + sqrt(k)) * N) * static_cast<genType>(k >= static_cast<genType>(0));
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> refract(vec<L, T, Q> const& I, vec<L, T, Q> const& N, T eta)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'refract' accepts only floating-point inputs");
		return detail::compute_refract<L, T, Q, detail::is_aligned<Q>::value>::call(I, N, eta);
	}
}



#line 244 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_geometric.inl"
#line 117 "d:\\vsprojects\\openglproject\\includes\\glm\\geometric.hpp"
#line 2 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_matrix.inl"


namespace glm{
namespace detail
{
	template<length_t C, length_t R, typename T, qualifier Q, bool Aligned>
	struct compute_matrixCompMult
	{
		 inline static mat<C, R, T, Q> call(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const& y)
		{
			mat<C, R, T, Q> Result;
			for(length_t i = 0; i < Result.length(); ++i)
				Result[i] = x[i] * y[i];
			return Result;
		}
	};

	template<length_t C, length_t R, typename T, qualifier Q, bool Aligned>
	struct compute_transpose{};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_transpose<2, 2, T, Q, Aligned>
	{
		 inline static mat<2, 2, T, Q> call(mat<2, 2, T, Q> const& m)
		{
			mat<2, 2, T, Q> Result;
			Result[0][0] = m[0][0];
			Result[0][1] = m[1][0];
			Result[1][0] = m[0][1];
			Result[1][1] = m[1][1];
			return Result;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_transpose<2, 3, T, Q, Aligned>
	{
		 inline static mat<3, 2, T, Q> call(mat<2, 3, T, Q> const& m)
		{
			mat<3,2, T, Q> Result;
			Result[0][0] = m[0][0];
			Result[0][1] = m[1][0];
			Result[1][0] = m[0][1];
			Result[1][1] = m[1][1];
			Result[2][0] = m[0][2];
			Result[2][1] = m[1][2];
			return Result;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_transpose<2, 4, T, Q, Aligned>
	{
		 inline static mat<4, 2, T, Q> call(mat<2, 4, T, Q> const& m)
		{
			mat<4, 2, T, Q> Result;
			Result[0][0] = m[0][0];
			Result[0][1] = m[1][0];
			Result[1][0] = m[0][1];
			Result[1][1] = m[1][1];
			Result[2][0] = m[0][2];
			Result[2][1] = m[1][2];
			Result[3][0] = m[0][3];
			Result[3][1] = m[1][3];
			return Result;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_transpose<3, 2, T, Q, Aligned>
	{
		 inline static mat<2, 3, T, Q> call(mat<3, 2, T, Q> const& m)
		{
			mat<2, 3, T, Q> Result;
			Result[0][0] = m[0][0];
			Result[0][1] = m[1][0];
			Result[0][2] = m[2][0];
			Result[1][0] = m[0][1];
			Result[1][1] = m[1][1];
			Result[1][2] = m[2][1];
			return Result;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_transpose<3, 3, T, Q, Aligned>
	{
		 inline static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m)
		{
			mat<3, 3, T, Q> Result;
			Result[0][0] = m[0][0];
			Result[0][1] = m[1][0];
			Result[0][2] = m[2][0];

			Result[1][0] = m[0][1];
			Result[1][1] = m[1][1];
			Result[1][2] = m[2][1];

			Result[2][0] = m[0][2];
			Result[2][1] = m[1][2];
			Result[2][2] = m[2][2];
			return Result;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_transpose<3, 4, T, Q, Aligned>
	{
		 inline static mat<4, 3, T, Q> call(mat<3, 4, T, Q> const& m)
		{
			mat<4, 3, T, Q> Result;
			Result[0][0] = m[0][0];
			Result[0][1] = m[1][0];
			Result[0][2] = m[2][0];
			Result[1][0] = m[0][1];
			Result[1][1] = m[1][1];
			Result[1][2] = m[2][1];
			Result[2][0] = m[0][2];
			Result[2][1] = m[1][2];
			Result[2][2] = m[2][2];
			Result[3][0] = m[0][3];
			Result[3][1] = m[1][3];
			Result[3][2] = m[2][3];
			return Result;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_transpose<4, 2, T, Q, Aligned>
	{
		 inline static mat<2, 4, T, Q> call(mat<4, 2, T, Q> const& m)
		{
			mat<2, 4, T, Q> Result;
			Result[0][0] = m[0][0];
			Result[0][1] = m[1][0];
			Result[0][2] = m[2][0];
			Result[0][3] = m[3][0];
			Result[1][0] = m[0][1];
			Result[1][1] = m[1][1];
			Result[1][2] = m[2][1];
			Result[1][3] = m[3][1];
			return Result;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_transpose<4, 3, T, Q, Aligned>
	{
		 inline static mat<3, 4, T, Q> call(mat<4, 3, T, Q> const& m)
		{
			mat<3, 4, T, Q> Result;
			Result[0][0] = m[0][0];
			Result[0][1] = m[1][0];
			Result[0][2] = m[2][0];
			Result[0][3] = m[3][0];
			Result[1][0] = m[0][1];
			Result[1][1] = m[1][1];
			Result[1][2] = m[2][1];
			Result[1][3] = m[3][1];
			Result[2][0] = m[0][2];
			Result[2][1] = m[1][2];
			Result[2][2] = m[2][2];
			Result[2][3] = m[3][2];
			return Result;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_transpose<4, 4, T, Q, Aligned>
	{
		 inline static mat<4, 4, T, Q> call(mat<4, 4, T, Q> const& m)
		{
			mat<4, 4, T, Q> Result;
			Result[0][0] = m[0][0];
			Result[0][1] = m[1][0];
			Result[0][2] = m[2][0];
			Result[0][3] = m[3][0];

			Result[1][0] = m[0][1];
			Result[1][1] = m[1][1];
			Result[1][2] = m[2][1];
			Result[1][3] = m[3][1];

			Result[2][0] = m[0][2];
			Result[2][1] = m[1][2];
			Result[2][2] = m[2][2];
			Result[2][3] = m[3][2];

			Result[3][0] = m[0][3];
			Result[3][1] = m[1][3];
			Result[3][2] = m[2][3];
			Result[3][3] = m[3][3];
			return Result;
		}
	};

	template<length_t C, length_t R, typename T, qualifier Q, bool Aligned>
	struct compute_determinant{};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_determinant<2, 2, T, Q, Aligned>
	{
		 inline static T call(mat<2, 2, T, Q> const& m)
		{
			return m[0][0] * m[1][1] - m[1][0] * m[0][1];
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_determinant<3, 3, T, Q, Aligned>
	{
		 inline static T call(mat<3, 3, T, Q> const& m)
		{
			return
				+ m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2])
				- m[1][0] * (m[0][1] * m[2][2] - m[2][1] * m[0][2])
				+ m[2][0] * (m[0][1] * m[1][2] - m[1][1] * m[0][2]);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_determinant<4, 4, T, Q, Aligned>
	{
		 inline static T call(mat<4, 4, T, Q> const& m)
		{
			T SubFactor00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];
			T SubFactor01 = m[2][1] * m[3][3] - m[3][1] * m[2][3];
			T SubFactor02 = m[2][1] * m[3][2] - m[3][1] * m[2][2];
			T SubFactor03 = m[2][0] * m[3][3] - m[3][0] * m[2][3];
			T SubFactor04 = m[2][0] * m[3][2] - m[3][0] * m[2][2];
			T SubFactor05 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

			vec<4, T, Q> DetCof(
				+ (m[1][1] * SubFactor00 - m[1][2] * SubFactor01 + m[1][3] * SubFactor02),
				- (m[1][0] * SubFactor00 - m[1][2] * SubFactor03 + m[1][3] * SubFactor04),
				+ (m[1][0] * SubFactor01 - m[1][1] * SubFactor03 + m[1][3] * SubFactor05),
				- (m[1][0] * SubFactor02 - m[1][1] * SubFactor04 + m[1][2] * SubFactor05));

			return
				m[0][0] * DetCof[0] + m[0][1] * DetCof[1] +
				m[0][2] * DetCof[2] + m[0][3] * DetCof[3];
		}
	};

	template<length_t C, length_t R, typename T, qualifier Q, bool Aligned>
	struct compute_inverse{};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_inverse<2, 2, T, Q, Aligned>
	{
		 inline static mat<2, 2, T, Q> call(mat<2, 2, T, Q> const& m)
		{
			T OneOverDeterminant = static_cast<T>(1) / (
				+ m[0][0] * m[1][1]
				- m[1][0] * m[0][1]);

			mat<2, 2, T, Q> Inverse(
				+ m[1][1] * OneOverDeterminant,
				- m[0][1] * OneOverDeterminant,
				- m[1][0] * OneOverDeterminant,
				+ m[0][0] * OneOverDeterminant);

			return Inverse;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_inverse<3, 3, T, Q, Aligned>
	{
		 inline static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m)
		{
			T OneOverDeterminant = static_cast<T>(1) / (
				+ m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2])
				- m[1][0] * (m[0][1] * m[2][2] - m[2][1] * m[0][2])
				+ m[2][0] * (m[0][1] * m[1][2] - m[1][1] * m[0][2]));

			mat<3, 3, T, Q> Inverse;
			Inverse[0][0] = + (m[1][1] * m[2][2] - m[2][1] * m[1][2]) * OneOverDeterminant;
			Inverse[1][0] = - (m[1][0] * m[2][2] - m[2][0] * m[1][2]) * OneOverDeterminant;
			Inverse[2][0] = + (m[1][0] * m[2][1] - m[2][0] * m[1][1]) * OneOverDeterminant;
			Inverse[0][1] = - (m[0][1] * m[2][2] - m[2][1] * m[0][2]) * OneOverDeterminant;
			Inverse[1][1] = + (m[0][0] * m[2][2] - m[2][0] * m[0][2]) * OneOverDeterminant;
			Inverse[2][1] = - (m[0][0] * m[2][1] - m[2][0] * m[0][1]) * OneOverDeterminant;
			Inverse[0][2] = + (m[0][1] * m[1][2] - m[1][1] * m[0][2]) * OneOverDeterminant;
			Inverse[1][2] = - (m[0][0] * m[1][2] - m[1][0] * m[0][2]) * OneOverDeterminant;
			Inverse[2][2] = + (m[0][0] * m[1][1] - m[1][0] * m[0][1]) * OneOverDeterminant;

			return Inverse;
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_inverse<4, 4, T, Q, Aligned>
	{
		 inline static mat<4, 4, T, Q> call(mat<4, 4, T, Q> const& m)
		{
			T Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];
			T Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];
			T Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];

			T Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];
			T Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];
			T Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];

			T Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];
			T Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];
			T Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];

			T Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];
			T Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];
			T Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];

			T Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];
			T Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];
			T Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];

			T Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];
			T Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];
			T Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];

			vec<4, T, Q> Fac0(Coef00, Coef00, Coef02, Coef03);
			vec<4, T, Q> Fac1(Coef04, Coef04, Coef06, Coef07);
			vec<4, T, Q> Fac2(Coef08, Coef08, Coef10, Coef11);
			vec<4, T, Q> Fac3(Coef12, Coef12, Coef14, Coef15);
			vec<4, T, Q> Fac4(Coef16, Coef16, Coef18, Coef19);
			vec<4, T, Q> Fac5(Coef20, Coef20, Coef22, Coef23);

			vec<4, T, Q> Vec0(m[1][0], m[0][0], m[0][0], m[0][0]);
			vec<4, T, Q> Vec1(m[1][1], m[0][1], m[0][1], m[0][1]);
			vec<4, T, Q> Vec2(m[1][2], m[0][2], m[0][2], m[0][2]);
			vec<4, T, Q> Vec3(m[1][3], m[0][3], m[0][3], m[0][3]);

			vec<4, T, Q> Inv0(Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);
			vec<4, T, Q> Inv1(Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);
			vec<4, T, Q> Inv2(Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);
			vec<4, T, Q> Inv3(Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);

			vec<4, T, Q> SignA(+1, -1, +1, -1);
			vec<4, T, Q> SignB(-1, +1, -1, +1);
			mat<4, 4, T, Q> Inverse(Inv0 * SignA, Inv1 * SignB, Inv2 * SignA, Inv3 * SignB);

			vec<4, T, Q> Row0(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);

			vec<4, T, Q> Dot0(m[0] * Row0);
			T Dot1 = (Dot0.x + Dot0.y) + (Dot0.z + Dot0.w);

			T OneOverDeterminant = static_cast<T>(1) / Dot1;

			return Inverse * OneOverDeterminant;
		}
	};
}

	template<length_t C, length_t R, typename T, qualifier Q>
	 inline mat<C, R, T, Q> matrixCompMult(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const& y)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || 0, "'matrixCompMult' only accept floating-point inputs");
		return detail::compute_matrixCompMult<C, R, T, Q, detail::is_aligned<Q>::value>::call(x, y);
	}

	template<length_t DA, length_t DB, typename T, qualifier Q>
	 inline typename detail::outerProduct_trait<DA, DB, T, Q>::type outerProduct(vec<DA, T, Q> const& c, vec<DB, T, Q> const& r)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || 0, "'outerProduct' only accept floating-point inputs");

		typename detail::outerProduct_trait<DA, DB, T, Q>::type m;
		for(length_t i = 0; i < m.length(); ++i)
			m[i] = c * r[i];
		return m;
	}

	template<length_t C, length_t R, typename T, qualifier Q>
	 inline typename mat<C, R, T, Q>::transpose_type transpose(mat<C, R, T, Q> const& m)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || 0, "'transpose' only accept floating-point inputs");
		return detail::compute_transpose<C, R, T, Q, detail::is_aligned<Q>::value>::call(m);
	}

	template<length_t C, length_t R, typename T, qualifier Q>
	 inline T determinant(mat<C, R, T, Q> const& m)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || 0, "'determinant' only accept floating-point inputs");
		return detail::compute_determinant<C, R, T, Q, detail::is_aligned<Q>::value>::call(m);
	}

	template<length_t C, length_t R, typename T, qualifier Q>
	 inline mat<C, R, T, Q> inverse(mat<C, R, T, Q> const& m)
	{
		static_assert(std::numeric_limits<T>::is_iec559 || 0, "'inverse' only accept floating-point inputs");
		return detail::compute_inverse<C, R, T, Q, detail::is_aligned<Q>::value>::call(m);
	}
}



#line 398 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_matrix.inl"

#line 162 "d:\\vsprojects\\openglproject\\includes\\glm\\matrix.hpp"
#line 2 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"

namespace glm
{
	













#line 20 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<2, 2, T, P> const& m)

			: value{m[0], m[1]}
#line 27 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 32 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(T scalar)

			: value{col_type(scalar, 0), col_type(0, scalar)}
#line 39 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 44 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat
	(
		T const& x0, T const& y0,
		T const& x1, T const& y1
	)

			: value{col_type(x0, y0), col_type(x1, y1)}
#line 55 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 60 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(col_type const& v0, col_type const& v1)

			: value{v0, v1}
#line 67 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 72 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	

	template<typename T, qualifier Q>
	template<typename X1, typename Y1, typename X2, typename Y2>
	 inline constexpr mat<2, 2, T, Q>::mat
	(
		X1 const& x1, Y1 const& y1,
		X2 const& x2, Y2 const& y2
	)

			: value{col_type(static_cast<T>(x1), value_type(y1)), col_type(static_cast<T>(x2), value_type(y2)) }
#line 86 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 91 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	template<typename V1, typename V2>
	 inline constexpr mat<2, 2, T, Q>::mat(vec<2, V1, Q> const& v1, vec<2, V2, Q> const& v2)

			: value{col_type(v1), col_type(v2)}
#line 99 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 104 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<2, 2, U, P> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 114 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 119 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 126 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 131 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 138 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 143 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 150 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 155 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<3, 2, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 162 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 167 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 174 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 179 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<4, 2, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 186 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 191 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 198 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 203 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	template<typename T, qualifier Q>
	 inline constexpr mat<2, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)

			: value{col_type(m[0]), col_type(m[1])}
#line 210 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	{



#line 215 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl"
	}

	

	template<typename T, qualifier Q>
	 inline typename mat<2, 2, T, Q>::col_type& mat<2, 2, T, Q>::operator[](typename mat<2, 2, T, Q>::length_type i)
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl", (unsigned)(222)), 0) );
		return this->value[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr typename mat<2, 2, T, Q>::col_type const& mat<2, 2, T, Q>::operator[](typename mat<2, 2, T, Q>::length_type i) const
	{
		(void)( (!!(i < this->length())) || (_wassert(L"i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.inl", (unsigned)(229)), 0) );
		return this->value[i];
	}

	

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator=(mat<2, 2, U, Q> const& m)
	{
		this->value[0] = m[0];
		this->value[1] = m[1];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(U scalar)
	{
		this->value[0] += scalar;
		this->value[1] += scalar;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(mat<2, 2, U, Q> const& m)
	{
		this->value[0] += m[0];
		this->value[1] += m[1];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(U scalar)
	{
		this->value[0] -= scalar;
		this->value[1] -= scalar;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(mat<2, 2, U, Q> const& m)
	{
		this->value[0] -= m[0];
		this->value[1] -= m[1];
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(U scalar)
	{
		this->value[0] *= scalar;
		this->value[1] *= scalar;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(mat<2, 2, U, Q> const& m)
	{
		return (*this = *this * m);
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator/=(U scalar)
	{
		this->value[0] /= scalar;
		this->value[1] /= scalar;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator/=(mat<2, 2, U, Q> const& m)
	{
		return *this *= inverse(m);
	}

	

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator++()
	{
		++this->value[0];
		++this->value[1];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator--()
	{
		--this->value[0];
		--this->value[1];
		return *this;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> mat<2, 2, T, Q>::operator++(int)
	{
		mat<2, 2, T, Q> Result(*this);
		++*this;
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> mat<2, 2, T, Q>::operator--(int)
	{
		mat<2, 2, T, Q> Result(*this);
		--*this;
		return Result;
	}

	

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m)
	{
		return m;
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m)
	{
		return mat<2, 2, T, Q>(
			-m[0],
			-m[1]);
	}

	

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m, T scalar)
	{
		return mat<2, 2, T, Q>(
			m[0] + scalar,
			m[1] + scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator+(T scalar, mat<2, 2, T, Q> const& m)
	{
		return mat<2, 2, T, Q>(
			m[0] + scalar,
			m[1] + scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)
	{
		return mat<2, 2, T, Q>(
			m1[0] + m2[0],
			m1[1] + m2[1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m, T scalar)
	{
		return mat<2, 2, T, Q>(
			m[0] - scalar,
			m[1] - scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator-(T scalar, mat<2, 2, T, Q> const& m)
	{
		return mat<2, 2, T, Q>(
			scalar - m[0],
			scalar - m[1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)
	{
		return mat<2, 2, T, Q>(
			m1[0] - m2[0],
			m1[1] - m2[1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m, T scalar)
	{
		return mat<2, 2, T, Q>(
			m[0] * scalar,
			m[1] * scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator*(T scalar, mat<2, 2, T, Q> const& m)
	{
		return mat<2, 2, T, Q>(
			m[0] * scalar,
			m[1] * scalar);
	}

	template<typename T, qualifier Q>
	 inline typename mat<2, 2, T, Q>::col_type operator*
	(
		mat<2, 2, T, Q> const& m,
		typename mat<2, 2, T, Q>::row_type const& v
	)
	{
		return vec<2, T, Q>(
			m[0][0] * v.x + m[1][0] * v.y,
			m[0][1] * v.x + m[1][1] * v.y);
	}

	template<typename T, qualifier Q>
	 inline typename mat<2, 2, T, Q>::row_type operator*
	(
		typename mat<2, 2, T, Q>::col_type const& v,
		mat<2, 2, T, Q> const& m
	)
	{
		return vec<2, T, Q>(
			v.x * m[0][0] + v.y * m[0][1],
			v.x * m[1][0] + v.y * m[1][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)
	{
		return mat<2, 2, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<3, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<3, 2, T, Q> const& m2)
	{
		return mat<3, 2, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<4, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<4, 2, T, Q> const& m2)
	{
		return mat<4, 2, T, Q>(
			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
			m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1],
			m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1],
			m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1],
			m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1]);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator/(mat<2, 2, T, Q> const& m, T scalar)
	{
		return mat<2, 2, T, Q>(
			m[0] / scalar,
			m[1] / scalar);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator/(T scalar, mat<2, 2, T, Q> const& m)
	{
		return mat<2, 2, T, Q>(
			scalar / m[0],
			scalar / m[1]);
	}

	template<typename T, qualifier Q>
	 inline typename mat<2, 2, T, Q>::col_type operator/(mat<2, 2, T, Q> const& m, typename mat<2, 2, T, Q>::row_type const& v)
	{
		return inverse(m) * v;
	}

	template<typename T, qualifier Q>
	 inline typename mat<2, 2, T, Q>::row_type operator/(typename mat<2, 2, T, Q>::col_type const& v, mat<2, 2, T, Q> const& m)
	{
		return v *  inverse(m);
	}

	template<typename T, qualifier Q>
	 inline mat<2, 2, T, Q> operator/(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)
	{
		mat<2, 2, T, Q> m1_copy(m1);
		return m1_copy /= m2;
	}

	

	template<typename T, qualifier Q>
	 inline bool operator==(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)
	{
		return (m1[0] == m2[0]) && (m1[1] == m2[1]);
	}

	template<typename T, qualifier Q>
	 inline bool operator!=(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> const& m2)
	{
		return (m1[0] != m2[0]) || (m1[1] != m2[1]);
	}
} 
#line 177 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.hpp"
#line 178 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_mat2x2.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double2x2.hpp"

namespace glm
{
	
	

	
	
	
	typedef mat<2, 2, double, defaultp>		dmat2x2;

	
	
	
	typedef mat<2, 2, double, defaultp>		dmat2;

	
}
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_double2x2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<2, 2, double, lowp>		lowp_dmat2;

	
	
	
	
	typedef mat<2, 2, double, mediump>	mediump_dmat2;

	
	
	
	
	typedef mat<2, 2, double, highp>	highp_dmat2;

	
	
	
	
	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;

	
	
	
	
	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;

	
	
	
	
	typedef mat<2, 2, double, highp>	highp_dmat2x2;

	
}
#line 7 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float2x2.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	typedef mat<2, 2, float, defaultp>		mat2x2;

	
	
	
	typedef mat<2, 2, float, defaultp>		mat2;

	
}
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x2.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_float2x2_precision.hpp"



#pragma once


namespace glm
{
	
	

	
	
	
	
	typedef mat<2, 2, float, lowp>		lowp_mat2;

	
	
	
	
	typedef mat<2, 2, float, mediump>	mediump_mat2;

	
	
	
	
	typedef mat<2, 2, float, highp>		highp_mat2;

	
	
	
	
	typedef mat<2, 2, float, lowp>		lowp_mat2x2;

	
	
	
	
	typedef mat<2, 2, float, mediump>	mediump_mat2x2;

	
	
	
	
	typedef mat<2, 2, float, highp>		highp_mat2x2;

	
}
#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\mat2x2.hpp"

#line 120 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"









#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\trigonometric.hpp"


















#pragma once

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 22 "d:\\vsprojects\\openglproject\\includes\\glm\\trigonometric.hpp"


namespace glm
{
	
	

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, T, Q> radians(vec<L, T, Q> const& degrees);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, T, Q> degrees(vec<L, T, Q> const& radians);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> sin(vec<L, T, Q> const& angle);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> cos(vec<L, T, Q> const& angle);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> tan(vec<L, T, Q> const& angle);

	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> asin(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> acos(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> atan(vec<L, T, Q> const& y, vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> atan(vec<L, T, Q> const& y_over_x);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> sinh(vec<L, T, Q> const& angle);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> cosh(vec<L, T, Q> const& angle);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> tanh(vec<L, T, Q> const& angle);

	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> asinh(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> acosh(vec<L, T, Q> const& x);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> atanh(vec<L, T, Q> const& x);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_trigonometric.inl"




namespace glm
{
	
	template<typename genType>
	 inline constexpr genType radians(genType degrees)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'radians' only accept floating-point input");

		return degrees * static_cast<genType>(0.01745329251994329576923690768489);
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, T, Q> radians(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(radians, v);
	}

	
	template<typename genType>
	 inline constexpr genType degrees(genType radians)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'degrees' only accept floating-point input");

		return radians * static_cast<genType>(57.295779513082320876798154814105);
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, T, Q> degrees(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(degrees, v);
	}

	
	using ::std::sin;

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> sin(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(sin, v);
	}

	
	using std::cos;

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> cos(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(cos, v);
	}

	
	using std::tan;

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> tan(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(tan, v);
	}

	
	using std::asin;

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> asin(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(asin, v);
	}

	
	using std::acos;

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> acos(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(acos, v);
	}

	
	template<typename genType>
	 inline genType atan(genType y, genType x)
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'atan' only accept floating-point input");

		return ::std::atan2(y, x);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> atan(vec<L, T, Q> const& a, vec<L, T, Q> const& b)
	{
		return detail::functor2<vec, L, T, Q>::call(::std::atan2, a, b);
	}

	using std::atan;

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> atan(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(atan, v);
	}

	
	using std::sinh;

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> sinh(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(sinh, v);
	}

	
	using std::cosh;

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> cosh(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(cosh, v);
	}

	
	using std::tanh;

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> tanh(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(tanh, v);
	}

	

		using std::asinh;








#line 144 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_trigonometric.inl"

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> asinh(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(asinh, v);
	}

	

		using std::acosh;










#line 165 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_trigonometric.inl"

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> acosh(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(acosh, v);
	}

	

		using std::atanh;










#line 186 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_trigonometric.inl"

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> atanh(vec<L, T, Q> const& v)
	{
		return detail::functor1<vec, L, T, T, Q>::call(atanh, v);
	}
}



#line 197 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_trigonometric.inl"

#line 211 "d:\\vsprojects\\openglproject\\includes\\glm\\trigonometric.hpp"
#line 130 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\packing.hpp"















#pragma once





namespace glm
{
	
	

	
	
	
	
	
	
	
	
	
	
	
	 uint packUnorm2x16(vec2 const& v);

	
	
	
	
	
	
	
	
	
	
	
	 uint packSnorm2x16(vec2 const& v);

	
	
	
	
	
	
	
	
	
	
	
	 uint packUnorm4x8(vec4 const& v);

	
	
	
	
	
	
	
	
	
	
	
	 uint packSnorm4x8(vec4 const& v);

	
	
	
	
	
	
	
	
	
	
	
	 vec2 unpackUnorm2x16(uint p);

	
	
	
	
	
	
	
	
	
	
	
	 vec2 unpackSnorm2x16(uint p);

	
	
	
	
	
	
	
	
	
	
	
	 vec4 unpackUnorm4x8(uint p);

	
	
	
	
	
	
	
	
	
	
	
	 vec4 unpackSnorm4x8(uint p);

	
	
	
	
	
	
	
	
	 double packDouble2x32(uvec2 const& v);

	
	
	
	
	
	
	
	 uvec2 unpackDouble2x32(double v);

	
	
	
	
	
	
	
	
	 uint packHalf2x16(vec2 const& v);

	
	
	
	
	
	
	
	
	 vec2 unpackHalf2x16(uint v);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_packing.inl"




#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_half.hpp"
#pragma once

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 4 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_half.hpp"

namespace glm{
namespace detail
{
	typedef short hdata;

	 float toFloat32(hdata value);
	 hdata toFloat16(float const& value);

}
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_half.inl"
namespace glm{
namespace detail
{
	 inline float overflow()
	{
		volatile float f = 1e10;

		for(int i = 0; i < 10; ++i)
			f *= f; 
		return f;
	}

	union uif32
	{
		 inline uif32() :
			i(0)
		{}

		 inline uif32(float f_) :
			f(f_)
		{}

		 inline uif32(unsigned int i_) :
			i(i_)
		{}

		float f;
		unsigned int i;
	};

	 inline float toFloat32(hdata value)
	{
		int s = (value >> 15) & 0x00000001;
		int e = (value >> 10) & 0x0000001f;
		int m =  value        & 0x000003ff;

		if(e == 0)
		{
			if(m == 0)
			{
				
				
				

				detail::uif32 result;
				result.i = static_cast<unsigned int>(s << 31);
				return result.f;
			}
			else
			{
				
				
				

				while(!(m & 0x00000400))
				{
					m <<= 1;
					e -=  1;
				}

				e += 1;
				m &= ~0x00000400;
			}
		}
		else if(e == 31)
		{
			if(m == 0)
			{
				
				
				

				uif32 result;
				result.i = static_cast<unsigned int>((s << 31) | 0x7f800000);
				return result.f;
			}
			else
			{
				
				
				

				uif32 result;
				result.i = static_cast<unsigned int>((s << 31) | 0x7f800000 | (m << 13));
				return result.f;
			}
		}

		
		
		

		e = e + (127 - 15);
		m = m << 13;

		
		
		

		uif32 Result;
		Result.i = static_cast<unsigned int>((s << 31) | (e << 23) | m);
		return Result.f;
	}

	 inline hdata toFloat16(float const& f)
	{
		uif32 Entry;
		Entry.f = f;
		int i = static_cast<int>(Entry.i);

		
		
		
		
		
		
		
		
		

		int s =  (i >> 16) & 0x00008000;
		int e = ((i >> 23) & 0x000000ff) - (127 - 15);
		int m =   i        & 0x007fffff;

		
		
		

		if(e <= 0)
		{
			if(e < -10)
			{
				
				
				
				
				
				
				

				return hdata(s);
			}

			
			
			
			
			
			

			m = (m | 0x00800000) >> (1 - e);

			
			
			
			
			
			
			
			

			if(m & 0x00001000)
				m += 0x00002000;

			
			
			

			return hdata(s | (m >> 13));
		}
		else if(e == 0xff - (127 - 15))
		{
			if(m == 0)
			{
				
				
				
				

				return hdata(s | 0x7c00);
			}
			else
			{
				
				
				
				
				
				
				
				

				m >>= 13;

				return hdata(s | 0x7c00 | m | (m == 0));
			}
		}
		else
		{
			
			
			
			

			
			
			

			if(m &  0x00001000)
			{
				m += 0x00002000;

				if(m & 0x00800000)
				{
					m =  0;     
					e += 1;     
				}
			}

			
			
			

			if (e > 30)
			{
				overflow();        

				return hdata(s | 0x7c00);
				
			}   

			
			
			

			return hdata(s | (e << 10) | (m >> 13));
		}
	}

}
}
#line 17 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_half.hpp"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_packing.inl"

namespace glm
{
	 inline uint packUnorm2x16(vec2 const& v)
	{
		union
		{
			unsigned short in[2];
			uint out;
		} u;

		vec<2, unsigned short, defaultp> result(round(clamp(v, 0.0f, 1.0f) * 65535.0f));

		u.in[0] = result[0];
		u.in[1] = result[1];

		return u.out;
	}

	 inline vec2 unpackUnorm2x16(uint p)
	{
		union
		{
			uint in;
			unsigned short out[2];
		} u;

		u.in = p;

		return vec2(u.out[0], u.out[1]) * 1.5259021896696421759365224689097e-5f;
	}

	 inline uint packSnorm2x16(vec2 const& v)
	{
		union
		{
			signed short in[2];
			uint out;
		} u;
 
		vec<2, short, defaultp> result(round(clamp(v, -1.0f, 1.0f) * 32767.0f));

		u.in[0] = result[0];
		u.in[1] = result[1];

		return u.out;
	}

	 inline vec2 unpackSnorm2x16(uint p)
	{
		union
		{
			uint in;
			signed short out[2];
		} u;

		u.in = p;

		return clamp(vec2(u.out[0], u.out[1]) * 3.0518509475997192297128208258309e-5f, -1.0f, 1.0f);
	}

	 inline uint packUnorm4x8(vec4 const& v)
	{
		union
		{
			unsigned char in[4];
			uint out;
		} u;

		vec<4, unsigned char, defaultp> result(round(clamp(v, 0.0f, 1.0f) * 255.0f));

		u.in[0] = result[0];
		u.in[1] = result[1];
		u.in[2] = result[2];
		u.in[3] = result[3];

		return u.out;
	}

	 inline vec4 unpackUnorm4x8(uint p)
	{
		union
		{
			uint in;
			unsigned char out[4];
		} u;

		u.in = p;

		return vec4(u.out[0], u.out[1], u.out[2], u.out[3]) * 0.0039215686274509803921568627451f;
	}

	 inline uint packSnorm4x8(vec4 const& v)
	{
		union
		{
			signed char in[4];
			uint out;
		} u;

		vec<4, signed char, defaultp> result(round(clamp(v, -1.0f, 1.0f) * 127.0f));

		u.in[0] = result[0];
		u.in[1] = result[1];
		u.in[2] = result[2];
		u.in[3] = result[3];

		return u.out;
	}

	 inline glm::vec4 unpackSnorm4x8(uint p)
	{
		union
		{
			uint in;
			signed char out[4];
		} u;

		u.in = p;

		return clamp(vec4(u.out[0], u.out[1], u.out[2], u.out[3]) * 0.0078740157480315f, -1.0f, 1.0f);
	}

	 inline double packDouble2x32(uvec2 const& v)
	{
		union
		{
			uint   in[2];
			double out;
		} u;

		u.in[0] = v[0];
		u.in[1] = v[1];

		return u.out;
	}

	 inline uvec2 unpackDouble2x32(double v)
	{
		union
		{
			double in;
			uint   out[2];
		} u;

		u.in = v;

		return uvec2(u.out[0], u.out[1]);
	}

	 inline uint packHalf2x16(vec2 const& v)
	{
		union
		{
			signed short in[2];
			uint out;
		} u;

		u.in[0] = detail::toFloat16(v.x);
		u.in[1] = detail::toFloat16(v.y);

		return u.out;
	}

	 inline vec2 unpackHalf2x16(uint v)
	{
		union
		{
			uint in;
			signed short out[2];
		} u;

		u.in = v;

		return vec2(
			detail::toFloat32(u.out[0]),
			detail::toFloat32(u.out[1]));
	}
}



#line 189 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_packing.inl"

#line 174 "d:\\vsprojects\\openglproject\\includes\\glm\\packing.hpp"
#line 133 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"



#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\integer.hpp"
















#pragma once





namespace glm
{
	
	

	
	
	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 vec<L, uint, Q> uaddCarry(
		vec<L, uint, Q> const& x,
		vec<L, uint, Q> const& y,
		vec<L, uint, Q> & carry);

	
	
	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 vec<L, uint, Q> usubBorrow(
		vec<L, uint, Q> const& x,
		vec<L, uint, Q> const& y,
		vec<L, uint, Q> & borrow);

	
	
	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 void umulExtended(
		vec<L, uint, Q> const& x,
		vec<L, uint, Q> const& y,
		vec<L, uint, Q> & msb,
		vec<L, uint, Q> & lsb);

	
	
	
	
	
	
	
	
	template<length_t L, qualifier Q>
	 void imulExtended(
		vec<L, int, Q> const& x,
		vec<L, int, Q> const& y,
		vec<L, int, Q> & msb,
		vec<L, int, Q> & lsb);

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> bitfieldExtract(
		vec<L, T, Q> const& Value,
		int Offset,
		int Bits);

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> bitfieldInsert(
		vec<L, T, Q> const& Base,
		vec<L, T, Q> const& Insert,
		int Offset,
		int Bits);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, T, Q> bitfieldReverse(vec<L, T, Q> const& v);

	
	
	
	
	
	
	template<typename genType>
	 int bitCount(genType v);

	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, int, Q> bitCount(vec<L, T, Q> const& v);

	
	
	
	
	
	
	
	
	template<typename genIUType>
	 int findLSB(genIUType x);

	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, int, Q> findLSB(vec<L, T, Q> const& v);

	
	
	
	
	
	
	
	
	
	template<typename genIUType>
	 int findMSB(genIUType x);

	
	
	
	
	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, int, Q> findMSB(vec<L, T, Q> const& v);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_integer.inl"




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"












#pragma once






#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\setjmp.h"







#pragma once












__pragma(pack(push, 8)) extern "C" {






    
    

    typedef struct __JUMP_BUFFER
    {
        unsigned long Ebp;
        unsigned long Ebx;
        unsigned long Edi;
        unsigned long Esi;
        unsigned long Esp;
        unsigned long Eip;
        unsigned long Registration;
        unsigned long TryLevel;
        unsigned long Cookie;
        unsigned long UnwindFunc;
        unsigned long UnwindData[6];
    } _JUMP_BUFFER;





























































































#line 139 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\setjmp.h"





    
    typedef int jmp_buf[16];
#line 147 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\setjmp.h"




    
#line 153 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\setjmp.h"




int __cdecl _setjmp(
      jmp_buf _Buf
    );


    __declspec(noreturn) void __cdecl longjmp(
          jmp_buf _Buf,
          int     _Value
        ) noexcept(false);





#line 172 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\setjmp.h"


} __pragma(pack(pop))
#line 21 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"



#line 25 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"



    
        #line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"













#pragma once



#line 19 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"







#line 27 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\wmmintrin.h"
















#pragma once



#line 22 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\wmmintrin.h"







#line 30 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\wmmintrin.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"

















#pragma once



#line 23 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"







#line 31 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"

















#pragma once



#line 23 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"







#line 31 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"










#pragma once



#line 16 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"







#line 24 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\pmmintrin.h"
















#pragma once



#line 22 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\pmmintrin.h"







#line 30 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\pmmintrin.h"




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"




















#pragma once



#line 26 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"







#line 34 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"



#line 38 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"



























#pragma once



#line 33 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"







#line 41 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"





#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mmintrin.h"














#pragma once






#line 23 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mmintrin.h"



#line 27 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mmintrin.h"


extern "C" { 


#line 33 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64    m64_u64;
    float               m64_f32[2];
    __int8              m64_i8[8];
    __int16             m64_i16[4];
    __int32             m64_i32[2];
    __int64             m64_i64;
    unsigned __int8     m64_u8[8];
    unsigned __int16    m64_u16[4];
    unsigned __int32    m64_u32[2];
} __m64;



void  _m_empty(void);
__m64 _m_from_int(int _I);
int   _m_to_int(__m64 _M);
__m64 _m_packsswb(__m64 _MM1, __m64 _MM2);
__m64 _m_packssdw(__m64 _MM1, __m64 _MM2);
__m64 _m_packuswb(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhdq(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckldq(__m64 _MM1, __m64 _MM2);


__m64 _m_paddb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddd(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubd(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmaddwd(__m64 _MM1, __m64 _MM2);
__m64 _m_pmulhw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmullw(__m64 _MM1, __m64 _MM2);


__m64 _m_psllw(__m64 _M, __m64 _Count);
__m64 _m_psllwi(__m64 _M, int _Count);
__m64 _m_pslld(__m64 _M, __m64 _Count);
__m64 _m_pslldi(__m64 _M, int _Count);
__m64 _m_psllq(__m64 _M, __m64 _Count);
__m64 _m_psllqi(__m64 _M, int _Count);
__m64 _m_psraw(__m64 _M, __m64 _Count);
__m64 _m_psrawi(__m64 _M, int _Count);
__m64 _m_psrad(__m64 _M, __m64 _Count);
__m64 _m_psradi(__m64 _M, int _Count);
__m64 _m_psrlw(__m64 _M, __m64 _Count);
__m64 _m_psrlwi(__m64 _M, int _Count);
__m64 _m_psrld(__m64 _M, __m64 _Count);
__m64 _m_psrldi(__m64 _M, int _Count);
__m64 _m_psrlq(__m64 _M, __m64 _Count);
__m64 _m_psrlqi(__m64 _M, int _Count);


__m64 _m_pand(__m64 _MM1, __m64 _MM2);
__m64 _m_pandn(__m64 _MM1, __m64 _MM2);
__m64 _m_por(__m64 _MM1, __m64 _MM2);
__m64 _m_pxor(__m64 _MM1, __m64 _MM2);


__m64 _m_pcmpeqb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqd(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtd(__m64 _MM1, __m64 _MM2);


__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int _I1, int _I0);
__m64 _mm_set_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_set_pi8(char _B7, char _B6, char _B5, char _B4,
                  char _B3, char _B2, char _B1, char _B0);
__m64 _mm_set1_pi32(int _I);
__m64 _mm_set1_pi16(short _S);
__m64 _mm_set1_pi8(char _B);
__m64 _mm_setr_pi32(int _I1, int _I0);
__m64 _mm_setr_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_setr_pi8(char _B7, char _B6, char _B5, char _B4,
                   char _B3, char _B2, char _B1, char _B0);

























































#line 184 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mmintrin.h"


}; 
#line 188 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mmintrin.h"

#line 190 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mmintrin.h"
#line 191 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mmintrin.h"
#line 192 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mmintrin.h"
#line 47 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"
#line 48 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"

















typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float               m128_f32[4];
     unsigned __int64    m128_u64[2];
     __int8              m128_i8[16];
     __int16             m128_i16[8];
     __int32             m128_i32[4];
     __int64             m128_i64[2];
     unsigned __int8     m128_u8[16];
     unsigned __int16    m128_u16[8];
     unsigned __int32    m128_u32[4];
 } __m128;




#line 81 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"
#line 82 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"

 
 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 












































































 
 
 


extern "C" { 
  
#line 191 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"





extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern float _mm_cvtss_f32(__m128 _A);





extern __m64 _mm_cvt_ps2pi(__m128 _A);
extern __m64 _mm_cvtt_ps2pi(__m128 _A);
extern __m128 _mm_cvt_pi2ps(__m128, __m64);
#line 282 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"








#line 291 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"





extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);






extern int _m_pextrw(__m64, int);
extern __m64 _m_pinsrw(__m64, int, int);
extern __m64 _m_pmaxsw(__m64, __m64);
extern __m64 _m_pmaxub(__m64, __m64);
extern __m64 _m_pminsw(__m64, __m64);
extern __m64 _m_pminub(__m64, __m64);
extern int _m_pmovmskb(__m64);
extern __m64 _m_pmulhuw(__m64, __m64);
extern __m64 _m_pshufw(__m64, int);
extern void _m_maskmovq(__m64, __m64, char *);
extern __m64 _m_pavgb(__m64, __m64);
extern __m64 _m_pavgw(__m64, __m64);
extern __m64 _m_psadbw(__m64, __m64);
#line 326 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);

extern void _mm_stream_pi(__m64 *, __m64);
#line 350 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
























#line 381 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"







 
 
 


 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi16_ps(__m64 _A)
{
  __m128 _Tmp;
  __m64  _Ext_val = _m_pcmpgtw(_mm_setzero_si64(), _A);

  _Tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(_A, _Ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(_Tmp, _Tmp),
                        _m_punpcklwd(_A, _Ext_val)));
}


 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpu16_ps(__m64 _A)
{
  __m128 _Tmp;
  __m64  _Ext_val = _mm_setzero_si64();

  _Tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(_A, _Ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(_Tmp, _Tmp),
                        _m_punpcklwd(_A, _Ext_val)));
}


 
 
 
 
 
 
 
 
__inline __m64 _mm_cvtps_pi16(__m128 _A)
{
  return _m_packssdw(_mm_cvt_ps2pi(_A),
                        _mm_cvt_ps2pi(_mm_movehl_ps(_A, _A)));
}


 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi8_ps(__m64 _A)
{
  __m64  _Ext_val = _m_pcmpgtb(_mm_setzero_si64(), _A);

  return _mm_cvtpi16_ps(_m_punpcklbw(_A, _Ext_val));
}


 
 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpu8_ps(__m64 _A)
{
  return _mm_cvtpu16_ps(_m_punpcklbw(_A, _mm_setzero_si64()));
}


 
 
 
 
 
 
 
 
__inline __m64 _mm_cvtps_pi8(__m128 _A)
{
  return _m_packsswb(_mm_cvtps_pi16(_A), _mm_setzero_si64());
}


 
 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi32x2_ps(__m64 _A, __m64 _B)
{
  return _mm_movelh_ps(_mm_cvt_pi2ps(_mm_setzero_ps(), _A),
                       _mm_cvt_pi2ps(_mm_setzero_ps(), _B));
}
#line 506 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"



}; 
#line 511 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"

#line 513 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"
#line 514 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"
#line 515 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\xmmintrin.h"
#line 43 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8              m128i_i8[16];
    __int16             m128i_i16[8];
    __int32             m128i_i32[4];
    __int64             m128i_i64[2];
    unsigned __int8     m128i_u8[16];
    unsigned __int16    m128i_u16[8];
    unsigned __int32    m128i_u32[4];
    unsigned __int64    m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double              m128d_f64[2];
} __m128d;






 
 
 


extern "C" { 
  
#line 72 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"





extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);


extern __m64 _mm_cvtpd_pi32(__m128d _A);
extern __m64 _mm_cvttpd_pi32(__m128d _A);
extern __m128d _mm_cvtpi32_pd(__m64 _A);
#line 166 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);

extern __m64 _mm_add_si64(__m64 _A, __m64 _B);
#line 221 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);

extern __m64 _mm_mul_su32(__m64 _A, __m64 _B);
#line 239 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);

extern __m64 _mm_sub_si64(__m64 _A, __m64 _B);
#line 247 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);

extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);

extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);






extern __m128i _mm_set_epi64(__m64 _Q1, __m64 _Q0);
#line 345 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_set_epi64x(__int64 _I1,__int64 _I0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);

extern __m128i _mm_set1_epi64(__m64 _Q);
#line 356 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_set1_epi64x(__int64 i);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);

extern __m128i _mm_setr_epi64(__m64 _Q0, __m64 _Q1);
#line 364 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);

extern __m128i _mm_movpi64_epi64(__m64 _Q);
extern __m64 _mm_movepi64_pi64(__m128i _Q);
#line 391 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128  _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128  _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);













#line 436 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"


}; 
#line 440 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"

#line 442 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"
#line 443 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"
#line 444 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\emmintrin.h"
#line 35 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\pmmintrin.h"

 
 
 














 
 
 


extern "C" { 
  
#line 61 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\pmmintrin.h"





extern __m128 _mm_addsub_ps(__m128 , __m128 );
extern __m128 _mm_hadd_ps(__m128 , __m128 );
extern __m128 _mm_hsub_ps(__m128 , __m128 );
extern __m128 _mm_movehdup_ps(__m128 );
extern __m128 _mm_moveldup_ps(__m128 );





extern __m128d _mm_addsub_pd(__m128d , __m128d );
extern __m128d _mm_hadd_pd(__m128d , __m128d );
extern __m128d _mm_hsub_pd(__m128d , __m128d );
extern __m128d _mm_loaddup_pd(double const * );
extern __m128d _mm_movedup_pd(__m128d );




extern __m128i _mm_lddqu_si128(__m128i const * );







extern void _mm_monitor(void const * , unsigned , unsigned );




extern void _mm_mwait(unsigned , unsigned );


}; 
#line 103 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\pmmintrin.h"

#line 105 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\pmmintrin.h"
#line 106 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\pmmintrin.h"
#line 107 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\pmmintrin.h"
#line 26 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"









extern "C" {
#line 37 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

    
    
    
    
    
    

    extern __m128i _mm_hadd_epi16 (__m128i, __m128i);
    extern __m128i _mm_hadd_epi32 (__m128i, __m128i);
    extern __m128i _mm_hadds_epi16 (__m128i, __m128i);


    extern __m64 _mm_hadd_pi16 (__m64, __m64);
    extern __m64 _mm_hadd_pi32 (__m64, __m64);
    extern __m64 _mm_hadds_pi16 (__m64, __m64);
#line 54 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

    
    
    
    
    
    
    

    extern __m128i _mm_hsub_epi16 (__m128i, __m128i);
    extern __m128i _mm_hsub_epi32 (__m128i, __m128i);
    extern __m128i _mm_hsubs_epi16 (__m128i, __m128i);


    extern __m64 _mm_hsub_pi16 (__m64, __m64);
    extern __m64 _mm_hsub_pi32 (__m64, __m64);
    extern __m64 _mm_hsubs_pi16 (__m64, __m64);
#line 72 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

    
    
    
    
    
    
    
    

    extern __m128i _mm_maddubs_epi16 (__m128i, __m128i);


    extern __m64 _mm_maddubs_pi16 (__m64, __m64);
#line 87 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_mulhrs_epi16 (__m128i, __m128i);


    extern __m64 _mm_mulhrs_pi16 (__m64, __m64);
#line 96 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_shuffle_epi8 (__m128i, __m128i);


    extern __m64 _mm_shuffle_pi8 (__m64, __m64);
#line 105 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_sign_epi8 (__m128i, __m128i);
    extern __m128i _mm_sign_epi16 (__m128i, __m128i);
    extern __m128i _mm_sign_epi32 (__m128i, __m128i);


    extern __m64 _mm_sign_pi8 (__m64, __m64);
    extern __m64 _mm_sign_pi16 (__m64, __m64);
    extern __m64 _mm_sign_pi32 (__m64, __m64);
#line 118 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_alignr_epi8 (__m128i, __m128i, int);


    extern __m64 _mm_alignr_pi8 (__m64, __m64, int);
#line 127 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_abs_epi8 (__m128i);
    extern __m128i _mm_abs_epi16 (__m128i);
    extern __m128i _mm_abs_epi32 (__m128i);


    extern __m64 _mm_abs_pi8 (__m64);
    extern __m64 _mm_abs_pi16 (__m64);
    extern __m64 _mm_abs_pi32 (__m64);
#line 140 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"


};
#line 144 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"

#line 146 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"
#line 147 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"
#line 148 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\tmmintrin.h"
#line 33 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"


















































extern "C" {
#line 85 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"

        
        

        extern __m128i _mm_blend_epi16 (__m128i, __m128i, const int );
        extern __m128i _mm_blendv_epi8 (__m128i, __m128i, __m128i mask);

        
        

        extern __m128  _mm_blend_ps (__m128, __m128, const int );
        extern __m128  _mm_blendv_ps(__m128, __m128, __m128 );

        
        

        extern __m128d _mm_blend_pd (__m128d, __m128d, const int );
        extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d );

        
        

        extern __m128  _mm_dp_ps(__m128, __m128, const int );
        extern __m128d _mm_dp_pd(__m128d, __m128d, const int );

        
        

        extern __m128i _mm_cmpeq_epi64(__m128i, __m128i);

        

        extern __m128i _mm_min_epi8 (__m128i, __m128i);
        extern __m128i _mm_max_epi8 (__m128i, __m128i);

        extern __m128i _mm_min_epu16(__m128i, __m128i);
        extern __m128i _mm_max_epu16(__m128i, __m128i);

        extern __m128i _mm_min_epi32(__m128i, __m128i);
        extern __m128i _mm_max_epi32(__m128i, __m128i);
        extern __m128i _mm_min_epu32(__m128i, __m128i);
        extern __m128i _mm_max_epu32(__m128i, __m128i);

        
        

        extern __m128i _mm_mullo_epi32(__m128i, __m128i);

        
        

        extern __m128i _mm_mul_epi32(__m128i, __m128i);

        
        

        extern int _mm_testz_si128(__m128i , __m128i );

        
        

        extern int _mm_testc_si128(__m128i , __m128i );

        
        
        

        extern int _mm_testnzc_si128(__m128i , __m128i );

        
        
        
        
        

        extern __m128 _mm_insert_ps(__m128 , __m128 , const int );

        




        
        

        extern int _mm_extract_ps(__m128 , const int );

        
        




        
        





        
        

        extern __m128i _mm_insert_epi8 (__m128i , int , const int );
        extern __m128i _mm_insert_epi32(__m128i , int , const int );



#line 194 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"
        
        

        extern int   _mm_extract_epi8 (__m128i , const int );
        extern int   _mm_extract_epi32(__m128i , const int );



#line 203 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"

        
        

        extern __m128i _mm_minpos_epu16(__m128i);

        

        extern __m128d _mm_round_pd(__m128d , int );
        extern __m128d _mm_round_sd(__m128d , __m128d , int );

        

        extern __m128  _mm_round_ps(__m128  , int );
        extern __m128  _mm_round_ss(__m128 , __m128  , int );

        

        extern __m128i _mm_cvtepi8_epi32 (__m128i);
        extern __m128i _mm_cvtepi16_epi32(__m128i);
        extern __m128i _mm_cvtepi8_epi64 (__m128i);
        extern __m128i _mm_cvtepi32_epi64(__m128i);
        extern __m128i _mm_cvtepi16_epi64(__m128i);
        extern __m128i _mm_cvtepi8_epi16 (__m128i);

        

        extern __m128i _mm_cvtepu8_epi32 (__m128i);
        extern __m128i _mm_cvtepu16_epi32(__m128i);
        extern __m128i _mm_cvtepu8_epi64 (__m128i);
        extern __m128i _mm_cvtepu32_epi64(__m128i);
        extern __m128i _mm_cvtepu16_epi64(__m128i);
        extern __m128i _mm_cvtepu8_epi16 (__m128i);


        
        

        extern __m128i _mm_packus_epi32(__m128i, __m128i);

        
        
        

        extern __m128i _mm_mpsadbw_epu8(__m128i , __m128i , const int );

        





#line 256 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"
        extern __m128i _mm_stream_load_si128(const __m128i*);
#line 258 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"


}; 
#line 262 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"

#line 264 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"
#line 265 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"
#line 266 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\smmintrin.h"
#line 33 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"



extern "C" {
#line 38 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"













































    extern __m128i _mm_cmpistrm (__m128i , __m128i , const int );
    extern int     _mm_cmpistri (__m128i , __m128i , const int );

    extern __m128i _mm_cmpestrm (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestri (__m128i , int , __m128i , int , const int );





    extern int     _mm_cmpistrz (__m128i , __m128i , const int );
    extern int     _mm_cmpistrc (__m128i , __m128i , const int );
    extern int     _mm_cmpistrs (__m128i , __m128i , const int );
    extern int     _mm_cmpistro (__m128i , __m128i , const int );
    extern int     _mm_cmpistra (__m128i , __m128i , const int );

    extern int     _mm_cmpestrz (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrc (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrs (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestro (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestra (__m128i , int , __m128i , int , const int );






    extern __m128i _mm_cmpgt_epi64(__m128i , __m128i );





    extern int _mm_popcnt_u32(unsigned int );



#line 121 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"





    extern unsigned int _mm_crc32_u8 (unsigned int , unsigned char );
    extern unsigned int _mm_crc32_u16(unsigned int , unsigned short );
    extern unsigned int _mm_crc32_u32(unsigned int , unsigned int );



#line 133 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"


}; 
#line 137 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"

#line 139 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"
#line 140 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"
#line 141 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\nmmintrin.h"
#line 32 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\wmmintrin.h"



extern "C" {
#line 37 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\wmmintrin.h"





extern __m128i _mm_aesdec_si128(__m128i , __m128i );





extern __m128i _mm_aesdeclast_si128(__m128i , __m128i );





extern __m128i _mm_aesenc_si128(__m128i , __m128i );





extern __m128i _mm_aesenclast_si128(__m128i , __m128i );





extern __m128i _mm_aesimc_si128(__m128i );






extern __m128i _mm_aeskeygenassist_si128(__m128i , const int );







extern __m128i _mm_clmulepi64_si128(__m128i , __m128i ,
                                            const int );



}; 
#line 88 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\wmmintrin.h"

#line 90 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\wmmintrin.h"
#line 91 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\wmmintrin.h"
#line 92 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\wmmintrin.h"
#line 29 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"


extern "C" {
#line 33 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"




typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union  __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8              m256i_i8[32];
    __int16             m256i_i16[16];
    __int32             m256i_i32[8];
    __int64             m256i_i64[4];
    unsigned __int8     m256i_u8[32];
    unsigned __int16    m256i_u16[16];
    unsigned __int32    m256i_u32[8];
    unsigned __int64    m256i_u64[4];
} __m256i;



















































extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_add_ps(__m256, __m256);












extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);












extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_and_ps(__m256, __m256);








extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);













extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);













extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);









extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);









extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);








extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_div_ps(__m256, __m256);














extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);








extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_max_ps(__m256, __m256);








extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_min_ps(__m256, __m256);









extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);








extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_or_ps(__m256, __m256);











extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);












extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);















extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);















extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);












extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);





extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int);












extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);





extern int __cdecl _mm_comi_ss(__m128, __m128, const int);








extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);








extern __m256  __cdecl _mm256_cvtepi32_ps(__m256i);









extern __m128  __cdecl _mm256_cvtpd_ps(__m256d);








extern __m256i __cdecl _mm256_cvtps_epi32(__m256);









extern __m256d __cdecl _mm256_cvtps_pd(__m128);












extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);








extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);












extern __m256i __cdecl _mm256_cvttps_epi32(__m256);



























#line 614 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"








extern __m128  __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);









extern __m256  __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128  __cdecl _mm_permutevar_ps(__m128, __m128i);









extern __m256  __cdecl _mm256_permute_ps(__m256, int);
extern __m128  __cdecl _mm_permute_ps(__m128, int);









extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);









extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);








extern __m256  __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);








extern __m256  __cdecl _mm256_broadcast_ss(float const *);
extern __m128  __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256  __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);









extern __m256  __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);








extern __m256d __cdecl _mm256_load_pd(double const *);
extern void    __cdecl _mm256_store_pd(double *, __m256d);








extern __m256  __cdecl _mm256_load_ps(float const *);
extern void    __cdecl _mm256_store_ps(float *, __m256);








extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void    __cdecl _mm256_storeu_pd(double *, __m256d);








extern __m256  __cdecl _mm256_loadu_ps(float const *);
extern void    __cdecl _mm256_storeu_ps(float *, __m256);








extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void    __cdecl _mm256_store_si256(__m256i *, __m256i);








extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void    __cdecl _mm256_storeu_si256(__m256i *, __m256i);







































































extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void    __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void    __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);



















extern __m256  __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void    __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128  __cdecl _mm_maskload_ps(float const *, __m128i);
extern void    __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256  __cdecl _mm256_movehdup_ps(__m256);







extern __m256  __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);









extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void    __cdecl _mm256_stream_si256(__m256i *, __m256i);








extern void    __cdecl _mm256_stream_pd(double *, __m256d);








extern void    __cdecl _mm256_stream_ps(float *, __m256);









extern __m256  __cdecl _mm256_rcp_ps(__m256);










extern __m256  __cdecl _mm256_rsqrt_ps(__m256);








extern __m256d __cdecl _mm256_sqrt_pd(__m256d);








extern __m256  __cdecl _mm256_sqrt_ps(__m256);












extern __m256d __cdecl _mm256_round_pd(__m256d, int);














extern __m256  __cdecl _mm256_round_ps(__m256, int);









extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpacklo_ps(__m256, __m256);









extern int     __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testnzc_si256(__m256i, __m256i);














extern int     __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int     __cdecl _mm_testz_pd(__m128d, __m128d);
extern int     __cdecl _mm_testc_pd(__m128d, __m128d);
extern int     __cdecl _mm_testnzc_pd(__m128d, __m128d);












extern int     __cdecl _mm256_testz_ps(__m256, __m256);
extern int     __cdecl _mm256_testc_ps(__m256, __m256);
extern int     __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int     __cdecl _mm_testz_ps(__m128, __m128);
extern int     __cdecl _mm_testc_ps(__m128, __m128);
extern int     __cdecl _mm_testnzc_ps(__m128, __m128);








extern int     __cdecl _mm256_movemask_pd(__m256d);








extern int     __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256  __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256  __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);










extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256  __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256  __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256  __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256  __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128  __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256  __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128  __cdecl _mm_cvtph_ps(__m128i);
extern __m256  __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 , const int );
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);




















extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);


#line 1262 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _xsaveopt(void *, unsigned __int64);


#line 1272 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"





extern void __cdecl _xsavec(void *, unsigned __int64);


#line 1281 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _xrstor(void const *, unsigned __int64);


#line 1291 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _xsaves(void *, unsigned __int64);


#line 1301 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _xrstors(void const *, unsigned __int64);


#line 1311 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"





extern void __cdecl _fxsave(void *);


#line 1320 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"





extern void __cdecl _fxrstor(void const *);


#line 1329 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"







extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);


#line 1341 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"

















#line 1359 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"




extern __m128  __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128  __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);


extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128  __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256  __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i     );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i         );

extern void __cdecl _mm_maskstore_epi32(int *   ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i   ,
                                        __m128i   );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i     );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i         );

extern void __cdecl _mm256_maskstore_epi32(int *   ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i   ,
                                           __m256i   );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256  __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i  __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d        ,
                                                double const * ,
                                                __m128i        ,
                                                __m256d        ,
                                                const int      );
extern __m256  __cdecl _mm256_mask_i32gather_ps(__m256         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m256         ,
                                                const int      );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d        ,
                                                double const * ,
                                                __m256i        ,
                                                __m256d        ,
                                                const int      );
extern __m128  __cdecl _mm256_mask_i64gather_ps(__m128         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m128         ,
                                                const int      );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i32gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i64gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i     ,
                                                   int const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m128i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i     ,
                                                   int     const * ,
                                                   __m256i     ,
                                                   __m128i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i         ,
                                                int const *     ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i         ,
                                                int     const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i        ,
                                           const int      );
extern __m256  __cdecl _mm256_i32gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i        ,
                                           const int      );
extern __m128  __cdecl _mm256_i64gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i32gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i64gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );

extern __m256i __cdecl _mm256_i32gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i         ,
                                              const int       );
extern __m128i __cdecl _mm256_i64gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i         ,
                                              const int       );

extern __m128i __cdecl _mm_i32gather_epi32(int const *     ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi32(int     const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );
















extern unsigned int     _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int     _blsi_u32(unsigned int);
extern unsigned int     _blsmsk_u32(unsigned int);
extern unsigned int     _blsr_u32(unsigned int);
extern unsigned int     _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int     _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int              _sarx_i32(int ,
                                  unsigned int );
extern unsigned int     _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _shrx_u32(unsigned int ,
                                          unsigned int );

























#line 1892 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"








extern unsigned int     _lzcnt_u32(unsigned int);


#line 1904 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"








extern unsigned int     _tzcnt_u32(unsigned int);


#line 1916 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandset_HLERelease(long *,long);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandreset_HLERelease(long *,long);




















#line 1975 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"











extern unsigned int     __cdecl _xbegin(void);
extern void             __cdecl _xend(void);
extern void             __cdecl _xabort(const unsigned int);
extern unsigned char    __cdecl _xtest(void);








extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);


#line 2003 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"










extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );







#line 2025 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"





extern unsigned short   __cdecl _load_be_u16(void const*);
extern unsigned int     __cdecl _load_be_u32(void const*);
extern unsigned __int64 __cdecl _load_be_u64(void const*);







extern void __cdecl _store_be_u16(void *, unsigned short);
extern void __cdecl _store_be_u32(void *, unsigned int);
extern void __cdecl _store_be_u64(void *, unsigned __int64);







extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int);

extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);




extern void * __cdecl _bnd_set_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t);
extern void * __cdecl _bnd_copy_ptr_bounds(const void *, const void *);
extern void * __cdecl _bnd_init_ptr_bounds(const void *);
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *);
extern void __cdecl _bnd_chk_ptr_lbounds(const void *);
extern void __cdecl _bnd_chk_ptr_ubounds(const void *);
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_load_ptr_bounds(const void **, const void *);
extern const void * __cdecl _bnd_get_ptr_lbound(const void *);
extern const void * __cdecl _bnd_get_ptr_ubound(const void *);


extern __m256i __cdecl _mm256_insert_epi8 (__m256i , int , const int );
extern __m256i __cdecl _mm256_insert_epi16(__m256i , int , const int );
extern __m256i __cdecl _mm256_insert_epi32(__m256i , int , const int );


#line 2081 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"


extern int __cdecl _mm256_extract_epi8 (__m256i , const int );
extern int __cdecl _mm256_extract_epi16(__m256i , const int );
extern int __cdecl _mm256_extract_epi32(__m256i , const int );


#line 2089 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"


extern __m256d __cdecl _mm256_zextpd128_pd256(__m128d);
extern __m256  __cdecl _mm256_zextps128_ps256(__m128);
extern __m256i __cdecl _mm256_zextsi128_si256(__m128i);


extern unsigned int __cdecl _rdpid_u32(void);

extern void         __cdecl _ptwrite32(unsigned int);


#line 2102 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"




extern void             __cdecl _incsspd (unsigned int);
extern unsigned int     __cdecl _rdsspd (void);
extern void             __cdecl _saveprevssp (void);
extern void             __cdecl _rstorssp (void *);
extern void             __cdecl _wrssd (unsigned int, void *);
extern void             __cdecl _wrussd (unsigned int, void *);
extern void             __cdecl _setssbsy (void);
extern void             __cdecl _clrssbsy (void *);
extern void *           __cdecl _switchssp(void *);





#line 2121 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"


}; 
#line 2125 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"

#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\zmmintrin.h"










































typedef unsigned char       __mmask8;
typedef unsigned short      __mmask16;
typedef unsigned int        __mmask32;
typedef unsigned __int64    __mmask64;

typedef union __declspec(intrin_type) __declspec(align(64)) __m512 {
    float m512_f32[16];
} __m512;

typedef struct __declspec(intrin_type) __declspec(align(64)) __m512d {
    double m512d_f64[8];
} __m512d;

typedef union  __declspec(intrin_type) __declspec(align(64)) __m512i {
    __int8              m512i_i8[64];
    __int16             m512i_i16[32];
    __int32             m512i_i32[16];
    __int64             m512i_i64[8];
    unsigned __int8     m512i_u8[64];
    unsigned __int16    m512i_u16[32];
    unsigned __int32    m512i_u32[16];
    unsigned __int64    m512i_u64[8];
} __m512i;



extern "C" {

#line 72 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\zmmintrin.h"


extern __m256  __cdecl _mm512_castps512_ps256(__m512);
extern __m512  __cdecl _mm512_castpd_ps(__m512d);
extern __m512  __cdecl _mm512_castps256_ps512(__m256);
extern __m512  __cdecl _mm512_castsi512_ps(__m512i);
extern __m512  __cdecl _mm512_castps128_ps512(__m128);

extern __m256d __cdecl _mm512_castpd512_pd256(__m512d);
extern __m512d __cdecl _mm512_castpd256_pd512(__m256d);
extern __m512d __cdecl _mm512_castps_pd(__m512);
extern __m512d __cdecl _mm512_castsi512_pd(__m512i);
extern __m512d __cdecl _mm512_castpd128_pd512(__m128d);

extern __m256i __cdecl _mm512_castsi512_si256(__m512i);
extern __m512i __cdecl _mm512_castpd_si512(__m512d);
extern __m512i __cdecl _mm512_castps_si512(__m512);
extern __m512i __cdecl _mm512_castsi256_si512(__m256i);






typedef enum {
    _MM_BROADCAST32_NONE,   

    _MM_BROADCAST_1X16,     
    _MM_BROADCAST_4X16      
} _MM_BROADCAST32_ENUM;


typedef enum {
    _MM_BROADCAST64_NONE,   

    _MM_BROADCAST_1X8,      
    _MM_BROADCAST_4X8       
} _MM_BROADCAST64_ENUM;






typedef enum {
    _MM_ROUND_MODE_NEAREST,             
    _MM_ROUND_MODE_DOWN,                
    _MM_ROUND_MODE_UP,                  
    _MM_ROUND_MODE_TOWARD_ZERO,         
    _MM_ROUND_MODE_DEFAULT,             
    _MM_ROUND_MODE_NO_EXC = 8,          
} _MM_ROUND_MODE_ENUM;


typedef enum {
    _MM_EXPADJ_NONE,               
    _MM_EXPADJ_4,                  
    _MM_EXPADJ_5,                  
    _MM_EXPADJ_8,                  
    _MM_EXPADJ_16,                 
    _MM_EXPADJ_24,                 
    _MM_EXPADJ_31,                 
    _MM_EXPADJ_32                  
} _MM_EXP_ADJ_ENUM;


typedef enum {
    _MM_SCALE_1 = 1,
    _MM_SCALE_2 = 2,
    _MM_SCALE_4 = 4,
    _MM_SCALE_8 = 8
} _MM_INDEX_SCALE_ENUM;


typedef enum {
    _MM_PERM_AAAA = 0x00, _MM_PERM_AAAB = 0x01, _MM_PERM_AAAC = 0x02,
    _MM_PERM_AAAD = 0x03, _MM_PERM_AABA = 0x04, _MM_PERM_AABB = 0x05,
    _MM_PERM_AABC = 0x06, _MM_PERM_AABD = 0x07, _MM_PERM_AACA = 0x08,
    _MM_PERM_AACB = 0x09, _MM_PERM_AACC = 0x0A, _MM_PERM_AACD = 0x0B,
    _MM_PERM_AADA = 0x0C, _MM_PERM_AADB = 0x0D, _MM_PERM_AADC = 0x0E,
    _MM_PERM_AADD = 0x0F, _MM_PERM_ABAA = 0x10, _MM_PERM_ABAB = 0x11,
    _MM_PERM_ABAC = 0x12, _MM_PERM_ABAD = 0x13, _MM_PERM_ABBA = 0x14,
    _MM_PERM_ABBB = 0x15, _MM_PERM_ABBC = 0x16, _MM_PERM_ABBD = 0x17,
    _MM_PERM_ABCA = 0x18, _MM_PERM_ABCB = 0x19, _MM_PERM_ABCC = 0x1A,
    _MM_PERM_ABCD = 0x1B, _MM_PERM_ABDA = 0x1C, _MM_PERM_ABDB = 0x1D,
    _MM_PERM_ABDC = 0x1E, _MM_PERM_ABDD = 0x1F, _MM_PERM_ACAA = 0x20,
    _MM_PERM_ACAB = 0x21, _MM_PERM_ACAC = 0x22, _MM_PERM_ACAD = 0x23,
    _MM_PERM_ACBA = 0x24, _MM_PERM_ACBB = 0x25, _MM_PERM_ACBC = 0x26,
    _MM_PERM_ACBD = 0x27, _MM_PERM_ACCA = 0x28, _MM_PERM_ACCB = 0x29,
    _MM_PERM_ACCC = 0x2A, _MM_PERM_ACCD = 0x2B, _MM_PERM_ACDA = 0x2C,
    _MM_PERM_ACDB = 0x2D, _MM_PERM_ACDC = 0x2E, _MM_PERM_ACDD = 0x2F,
    _MM_PERM_ADAA = 0x30, _MM_PERM_ADAB = 0x31, _MM_PERM_ADAC = 0x32,
    _MM_PERM_ADAD = 0x33, _MM_PERM_ADBA = 0x34, _MM_PERM_ADBB = 0x35,
    _MM_PERM_ADBC = 0x36, _MM_PERM_ADBD = 0x37, _MM_PERM_ADCA = 0x38,
    _MM_PERM_ADCB = 0x39, _MM_PERM_ADCC = 0x3A, _MM_PERM_ADCD = 0x3B,
    _MM_PERM_ADDA = 0x3C, _MM_PERM_ADDB = 0x3D, _MM_PERM_ADDC = 0x3E,
    _MM_PERM_ADDD = 0x3F, _MM_PERM_BAAA = 0x40, _MM_PERM_BAAB = 0x41,
    _MM_PERM_BAAC = 0x42, _MM_PERM_BAAD = 0x43, _MM_PERM_BABA = 0x44,
    _MM_PERM_BABB = 0x45, _MM_PERM_BABC = 0x46, _MM_PERM_BABD = 0x47,
    _MM_PERM_BACA = 0x48, _MM_PERM_BACB = 0x49, _MM_PERM_BACC = 0x4A,
    _MM_PERM_BACD = 0x4B, _MM_PERM_BADA = 0x4C, _MM_PERM_BADB = 0x4D,
    _MM_PERM_BADC = 0x4E, _MM_PERM_BADD = 0x4F, _MM_PERM_BBAA = 0x50,
    _MM_PERM_BBAB = 0x51, _MM_PERM_BBAC = 0x52, _MM_PERM_BBAD = 0x53,
    _MM_PERM_BBBA = 0x54, _MM_PERM_BBBB = 0x55, _MM_PERM_BBBC = 0x56,
    _MM_PERM_BBBD = 0x57, _MM_PERM_BBCA = 0x58, _MM_PERM_BBCB = 0x59,
    _MM_PERM_BBCC = 0x5A, _MM_PERM_BBCD = 0x5B, _MM_PERM_BBDA = 0x5C,
    _MM_PERM_BBDB = 0x5D, _MM_PERM_BBDC = 0x5E, _MM_PERM_BBDD = 0x5F,
    _MM_PERM_BCAA = 0x60, _MM_PERM_BCAB = 0x61, _MM_PERM_BCAC = 0x62,
    _MM_PERM_BCAD = 0x63, _MM_PERM_BCBA = 0x64, _MM_PERM_BCBB = 0x65,
    _MM_PERM_BCBC = 0x66, _MM_PERM_BCBD = 0x67, _MM_PERM_BCCA = 0x68,
    _MM_PERM_BCCB = 0x69, _MM_PERM_BCCC = 0x6A, _MM_PERM_BCCD = 0x6B,
    _MM_PERM_BCDA = 0x6C, _MM_PERM_BCDB = 0x6D, _MM_PERM_BCDC = 0x6E,
    _MM_PERM_BCDD = 0x6F, _MM_PERM_BDAA = 0x70, _MM_PERM_BDAB = 0x71,
    _MM_PERM_BDAC = 0x72, _MM_PERM_BDAD = 0x73, _MM_PERM_BDBA = 0x74,
    _MM_PERM_BDBB = 0x75, _MM_PERM_BDBC = 0x76, _MM_PERM_BDBD = 0x77,
    _MM_PERM_BDCA = 0x78, _MM_PERM_BDCB = 0x79, _MM_PERM_BDCC = 0x7A,
    _MM_PERM_BDCD = 0x7B, _MM_PERM_BDDA = 0x7C, _MM_PERM_BDDB = 0x7D,
    _MM_PERM_BDDC = 0x7E, _MM_PERM_BDDD = 0x7F, _MM_PERM_CAAA = 0x80,
    _MM_PERM_CAAB = 0x81, _MM_PERM_CAAC = 0x82, _MM_PERM_CAAD = 0x83,
    _MM_PERM_CABA = 0x84, _MM_PERM_CABB = 0x85, _MM_PERM_CABC = 0x86,
    _MM_PERM_CABD = 0x87, _MM_PERM_CACA = 0x88, _MM_PERM_CACB = 0x89,
    _MM_PERM_CACC = 0x8A, _MM_PERM_CACD = 0x8B, _MM_PERM_CADA = 0x8C,
    _MM_PERM_CADB = 0x8D, _MM_PERM_CADC = 0x8E, _MM_PERM_CADD = 0x8F,
    _MM_PERM_CBAA = 0x90, _MM_PERM_CBAB = 0x91, _MM_PERM_CBAC = 0x92,
    _MM_PERM_CBAD = 0x93, _MM_PERM_CBBA = 0x94, _MM_PERM_CBBB = 0x95,
    _MM_PERM_CBBC = 0x96, _MM_PERM_CBBD = 0x97, _MM_PERM_CBCA = 0x98,
    _MM_PERM_CBCB = 0x99, _MM_PERM_CBCC = 0x9A, _MM_PERM_CBCD = 0x9B,
    _MM_PERM_CBDA = 0x9C, _MM_PERM_CBDB = 0x9D, _MM_PERM_CBDC = 0x9E,
    _MM_PERM_CBDD = 0x9F, _MM_PERM_CCAA = 0xA0, _MM_PERM_CCAB = 0xA1,
    _MM_PERM_CCAC = 0xA2, _MM_PERM_CCAD = 0xA3, _MM_PERM_CCBA = 0xA4,
    _MM_PERM_CCBB = 0xA5, _MM_PERM_CCBC = 0xA6, _MM_PERM_CCBD = 0xA7,
    _MM_PERM_CCCA = 0xA8, _MM_PERM_CCCB = 0xA9, _MM_PERM_CCCC = 0xAA,
    _MM_PERM_CCCD = 0xAB, _MM_PERM_CCDA = 0xAC, _MM_PERM_CCDB = 0xAD,
    _MM_PERM_CCDC = 0xAE, _MM_PERM_CCDD = 0xAF, _MM_PERM_CDAA = 0xB0,
    _MM_PERM_CDAB = 0xB1, _MM_PERM_CDAC = 0xB2, _MM_PERM_CDAD = 0xB3,
    _MM_PERM_CDBA = 0xB4, _MM_PERM_CDBB = 0xB5, _MM_PERM_CDBC = 0xB6,
    _MM_PERM_CDBD = 0xB7, _MM_PERM_CDCA = 0xB8, _MM_PERM_CDCB = 0xB9,
    _MM_PERM_CDCC = 0xBA, _MM_PERM_CDCD = 0xBB, _MM_PERM_CDDA = 0xBC,
    _MM_PERM_CDDB = 0xBD, _MM_PERM_CDDC = 0xBE, _MM_PERM_CDDD = 0xBF,
    _MM_PERM_DAAA = 0xC0, _MM_PERM_DAAB = 0xC1, _MM_PERM_DAAC = 0xC2,
    _MM_PERM_DAAD = 0xC3, _MM_PERM_DABA = 0xC4, _MM_PERM_DABB = 0xC5,
    _MM_PERM_DABC = 0xC6, _MM_PERM_DABD = 0xC7, _MM_PERM_DACA = 0xC8,
    _MM_PERM_DACB = 0xC9, _MM_PERM_DACC = 0xCA, _MM_PERM_DACD = 0xCB,
    _MM_PERM_DADA = 0xCC, _MM_PERM_DADB = 0xCD, _MM_PERM_DADC = 0xCE,
    _MM_PERM_DADD = 0xCF, _MM_PERM_DBAA = 0xD0, _MM_PERM_DBAB = 0xD1,
    _MM_PERM_DBAC = 0xD2, _MM_PERM_DBAD = 0xD3, _MM_PERM_DBBA = 0xD4,
    _MM_PERM_DBBB = 0xD5, _MM_PERM_DBBC = 0xD6, _MM_PERM_DBBD = 0xD7,
    _MM_PERM_DBCA = 0xD8, _MM_PERM_DBCB = 0xD9, _MM_PERM_DBCC = 0xDA,
    _MM_PERM_DBCD = 0xDB, _MM_PERM_DBDA = 0xDC, _MM_PERM_DBDB = 0xDD,
    _MM_PERM_DBDC = 0xDE, _MM_PERM_DBDD = 0xDF, _MM_PERM_DCAA = 0xE0,
    _MM_PERM_DCAB = 0xE1, _MM_PERM_DCAC = 0xE2, _MM_PERM_DCAD = 0xE3,
    _MM_PERM_DCBA = 0xE4, _MM_PERM_DCBB = 0xE5, _MM_PERM_DCBC = 0xE6,
    _MM_PERM_DCBD = 0xE7, _MM_PERM_DCCA = 0xE8, _MM_PERM_DCCB = 0xE9,
    _MM_PERM_DCCC = 0xEA, _MM_PERM_DCCD = 0xEB, _MM_PERM_DCDA = 0xEC,
    _MM_PERM_DCDB = 0xED, _MM_PERM_DCDC = 0xEE, _MM_PERM_DCDD = 0xEF,
    _MM_PERM_DDAA = 0xF0, _MM_PERM_DDAB = 0xF1, _MM_PERM_DDAC = 0xF2,
    _MM_PERM_DDAD = 0xF3, _MM_PERM_DDBA = 0xF4, _MM_PERM_DDBB = 0xF5,
    _MM_PERM_DDBC = 0xF6, _MM_PERM_DDBD = 0xF7, _MM_PERM_DDCA = 0xF8,
    _MM_PERM_DDCB = 0xF9, _MM_PERM_DDCC = 0xFA, _MM_PERM_DDCD = 0xFB,
    _MM_PERM_DDDA = 0xFC, _MM_PERM_DDDB = 0xFD, _MM_PERM_DDDC = 0xFE,
    _MM_PERM_DDDD = 0xFF
} _MM_PERM_ENUM;





typedef enum {
    _MM_FIXUP_NO_CHANGE,
    _MM_FIXUP_NEG_INF,
    _MM_FIXUP_NEG_ZERO,
    _MM_FIXUP_POS_ZERO,
    _MM_FIXUP_POS_INF,
    _MM_FIXUP_NAN,
    _MM_FIXUP_MAX_FLOAT,
    _MM_FIXUP_MIN_FLOAT
} _MM_FIXUPRESULT_ENUM;





















typedef enum {
    _MM_MANT_NORM_1_2,      
    _MM_MANT_NORM_p5_2,     
    _MM_MANT_NORM_p5_1,     
    _MM_MANT_NORM_p75_1p5   
} _MM_MANTISSA_NORM_ENUM;

typedef enum {
    _MM_MANT_SIGN_src,      
    _MM_MANT_SIGN_zero,     
    _MM_MANT_SIGN_nan       
} _MM_MANTISSA_SIGN_ENUM;






typedef enum {
    _MM_CMPINT_EQ,      
    _MM_CMPINT_LT,      
    _MM_CMPINT_LE,      
    _MM_CMPINT_UNUSED,
    _MM_CMPINT_NE,      
    _MM_CMPINT_NLT,     

    _MM_CMPINT_NLE      

} _MM_CMPINT_ENUM;





extern __m512  __cdecl _mm512_setzero_ps(void);
extern __m512d __cdecl _mm512_setzero_pd(void);

extern __m512  __cdecl _mm512_set_ps(float , float, float, float, float, float, float, float, float, float, float, float, float, float, float, float );
extern __m512d __cdecl _mm512_set_pd(double , double, double, double, double, double, double, double );

extern __m512  __cdecl _mm512_set1_ps(float);
extern __m512d __cdecl _mm512_set1_pd(double);

extern __m512  __cdecl _mm512_maskz_load_ps(__mmask16, void const*);
extern __m512d __cdecl _mm512_maskz_load_pd(__mmask8, void const*);
extern __m512  __cdecl _mm512_mask_load_ps(__m512, __mmask16, void const*);
extern __m512d __cdecl _mm512_mask_load_pd(__m512d, __mmask8, void const*);
extern __m512  __cdecl _mm512_maskz_loadu_ps(__mmask16, void const*);
extern __m512d __cdecl _mm512_maskz_loadu_pd(__mmask8, void const*);
extern __m512  __cdecl _mm512_mask_loadu_ps(__m512, __mmask16, void const*);
extern __m512d __cdecl _mm512_mask_loadu_pd(__m512d, __mmask8, void const*);

extern void    __cdecl _mm512_storeu_ps(void*, __m512);
extern void    __cdecl _mm512_storeu_pd(void*, __m512d);
extern void    __cdecl _mm512_mask_store_ps(void*, __mmask16, __m512);
extern void    __cdecl _mm512_mask_store_pd(void*, __mmask8, __m512d);
extern void    __cdecl _mm512_mask_storeu_ps(void*, __mmask16, __m512);
extern void    __cdecl _mm512_mask_storeu_pd(void*, __mmask8, __m512d);

extern __m512  __cdecl _mm512_maskz_add_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_add_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_add_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_add_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_sub_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_sub_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_sub_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_sub_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_mul_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_mul_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_mul_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_mul_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512d __cdecl _mm512_maskz_div_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_maskz_div_round_ps(__mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask_div_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_div_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fmadd_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fmadd_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fmadd_round_ps(__mmask16, __m512, __m512, __m512, const int);
extern __m512d __cdecl _mm512_mask_fmadd_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fmadd_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fmadd_round_pd(__mmask8, __m512d, __m512d, __m512d, const int);

extern __m512  __cdecl _mm512_mask_fmsub_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fmsub_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fmsub_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fmsub_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fmsub_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fmsub_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fmaddsub_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fmaddsub_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fmaddsub_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fmaddsub_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fmaddsub_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fmaddsub_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fmsubadd_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fmsubadd_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fmsubadd_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fmsubadd_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fmsubadd_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fmsubadd_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fnmadd_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fnmadd_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fnmadd_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fnmadd_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fnmadd_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fnmadd_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fnmsub_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fnmsub_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fnmsub_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fnmsub_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fnmsub_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fnmsub_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_sqrt_round_ps(__mmask16, __m512, const int );
extern __m512d __cdecl _mm512_maskz_sqrt_round_pd(__mmask8, __m512d, const int );
extern __m512  __cdecl _mm512_mask_sqrt_round_ps(__m512, __mmask16, __m512, const int );
extern __m512d __cdecl _mm512_mask_sqrt_round_pd(__m512d, __mmask8, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_abs_ps(__mmask16, __m512);
extern __m512  __cdecl _mm512_mask_abs_ps(__m512, __mmask16, __m512);
extern __m512d __cdecl _mm512_maskz_abs_pd(__mmask8, __m512d);
extern __m512d __cdecl _mm512_mask_abs_pd(__m512d, __mmask8, __m512d);

extern __m512  __cdecl _mm512_maskz_max_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_max_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_max_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_max_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_min_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_min_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_min_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_min_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_rcp14_ps(__mmask16, __m512);
extern __m512d __cdecl _mm512_maskz_rcp14_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_rcp14_ps(__m512, __mmask16, __m512);
extern __m512d __cdecl _mm512_mask_rcp14_pd(__m512d, __mmask8, __m512d);

extern __m512  __cdecl _mm512_maskz_rsqrt14_ps(__mmask16, __m512);
extern __m512d __cdecl _mm512_maskz_rsqrt14_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_rsqrt14_ps(__m512, __mmask16, __m512);
extern __m512d __cdecl _mm512_mask_rsqrt14_pd(__m512d, __mmask8, __m512d);

extern __m512  __cdecl _mm512_mask_rcp28_round_ps(__m512, __mmask16, __m512, const int);
extern __m512  __cdecl _mm512_maskz_rcp28_round_ps(__mmask16, __m512, const int);
extern __m512d __cdecl _mm512_mask_rcp28_round_pd(__m512d, __mmask8, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_rcp28_round_pd(__mmask8, __m512d, const int);
extern __m512  __cdecl _mm512_mask_rsqrt28_round_ps(__m512, __mmask16, __m512, const int);
extern __m512  __cdecl _mm512_maskz_rsqrt28_round_ps(__mmask16, __m512, const int);
extern __m512d __cdecl _mm512_mask_rsqrt28_round_pd(__m512d, __mmask8, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_rsqrt28_round_pd(__mmask8, __m512d, const int);

extern __m512d __cdecl _mm512_maskz_cvt_roundps_pd(__mmask8, __m256, const int );
extern __m256  __cdecl _mm512_maskz_cvt_roundpd_ps(__mmask8, __m512d, const int );
extern __m512d __cdecl _mm512_mask_cvt_roundps_pd(__m512d, __mmask8, __m256, const int );
extern __m256  __cdecl _mm512_mask_cvt_roundpd_ps(__m256, __mmask8, __m512d, const int );

extern __mmask16 __cdecl _mm512_mask_cmp_round_ps_mask(__mmask16, __m512, __m512, const int, const int );
extern __mmask8  __cdecl _mm512_mask_cmp_round_pd_mask(__mmask8, __m512d, __m512d, const int, const int );

extern __m512  __cdecl _mm512_mask_broadcast_f32x2(__m512, __mmask16, __m128);
extern __m512  __cdecl _mm512_maskz_broadcast_f32x2(__mmask16, __m128);
extern __m512  __cdecl _mm512_mask_broadcast_f32x4(__m512, __mmask16, __m128);
extern __m512  __cdecl _mm512_maskz_broadcast_f32x4(__mmask16, __m128);
extern __m512  __cdecl _mm512_mask_broadcast_f32x8(__m512, __mmask16, __m256);
extern __m512  __cdecl _mm512_maskz_broadcast_f32x8(__mmask16, __m256);
extern __m512d __cdecl _mm512_mask_broadcast_f64x2(__m512d, __mmask8, __m128d);
extern __m512d __cdecl _mm512_maskz_broadcast_f64x2(__mmask8, __m128d);
extern __m512d __cdecl _mm512_mask_broadcast_f64x4(__m512d, __mmask8, __m256d);
extern __m512d __cdecl _mm512_maskz_broadcast_f64x4(__mmask8, __m256d);
extern __m512d __cdecl _mm512_mask_broadcastsd_pd(__m512d, __mmask8, __m128d);
extern __m512d __cdecl _mm512_maskz_broadcastsd_pd(__mmask8, __m128d);
extern __m512  __cdecl _mm512_mask_broadcastss_ps(__m512, __mmask16, __m128);
extern __m512  __cdecl _mm512_maskz_broadcastss_ps(__mmask16, __m128);

extern __m128  __cdecl _mm512_mask_extractf32x4_ps(__m128, __mmask8, __m512, const int);
extern __m128  __cdecl _mm512_maskz_extractf32x4_ps(__mmask8, __m512, int);
extern __m256  __cdecl _mm512_mask_extractf32x8_ps(__m256, __mmask8, __m512, const int);
extern __m256  __cdecl _mm512_maskz_extractf32x8_ps(__mmask8, __m512, int);
extern __m128d __cdecl _mm512_mask_extractf64x2_pd(__m128d, __mmask8, __m512d, const int);
extern __m128d __cdecl _mm512_maskz_extractf64x2_pd(__mmask8, __m512d, int);
extern __m256d __cdecl _mm512_mask_extractf64x4_pd(__m256d, __mmask8, __m512d, const int);
extern __m256d __cdecl _mm512_maskz_extractf64x4_pd(__mmask8, __m512d, int);

extern __m512  __cdecl _mm512_mask_insertf32x4(__m512, __mmask16, __m512, __m128, const int);
extern __m512  __cdecl _mm512_maskz_insertf32x4(__mmask16, __m512, __m128, int);
extern __m512  __cdecl _mm512_mask_insertf32x8(__m512, __mmask16, __m512, __m256, const int);
extern __m512  __cdecl _mm512_maskz_insertf32x8(__mmask16, __m512, __m256, int);
extern __m512d __cdecl _mm512_mask_insertf64x2(__m512d, __mmask8, __m512d, __m128d, const int);
extern __m512d __cdecl _mm512_maskz_insertf64x2(__mmask8, __m512d, __m128d, int);
extern __m512d __cdecl _mm512_mask_insertf64x4(__m512d, __mmask8, __m512d, __m256d, const int);
extern __m512d __cdecl _mm512_maskz_insertf64x4(__mmask8, __m512d, __m256d, int);

extern __m512  __cdecl _mm512_mask_shuffle_f32x4(__m512, __mmask16, __m512, __m512, const int);
extern __m512  __cdecl _mm512_maskz_shuffle_f32x4(__mmask16, __m512, __m512, const int);
extern __m512d __cdecl _mm512_mask_shuffle_f64x2(__m512d, __mmask8, __m512d, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_shuffle_f64x2(__mmask8, __m512d, __m512d, const int);
extern __m512d __cdecl _mm512_mask_shuffle_pd(__m512d, __mmask8, __m512d, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_shuffle_pd(__mmask8, __m512d, __m512d, const int);
extern __m512  __cdecl _mm512_mask_shuffle_ps(__m512, __mmask16, __m512, __m512, const int);
extern __m512  __cdecl _mm512_maskz_shuffle_ps(__mmask16, __m512, __m512, const int);
































































































































































































































































































































































































































extern __m512i __cdecl _mm512_setzero_si512(void);

extern __m512i __cdecl _mm512_set_epi8(char , char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char );
extern __m512i __cdecl _mm512_set_epi16(short , short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short );
extern __m512i __cdecl _mm512_set_epi32(int , int, int, int, int, int, int, int, int, int, int, int, int, int, int, int );
extern __m512i __cdecl _mm512_set_epi64(__int64 , __int64, __int64, __int64, __int64, __int64, __int64, __int64 );

extern __m512i __cdecl _mm512_mask_set1_epi8(__m512i, __mmask64, char);
extern __m512i __cdecl _mm512_maskz_set1_epi8(__mmask64, char);
extern __m512i __cdecl _mm512_mask_set1_epi16(__m512i, __mmask32, short);
extern __m512i __cdecl _mm512_maskz_set1_epi16(__mmask32, short);
extern __m512i __cdecl _mm512_mask_set1_epi32(__m512i, __mmask16, int);
extern __m512i __cdecl _mm512_maskz_set1_epi32(__mmask16, int);
extern __m512i __cdecl _mm512_mask_set1_epi64(__m512i, __mmask8, __int64);
extern __m512i __cdecl _mm512_maskz_set1_epi64(__mmask8, __int64);

extern __m512i __cdecl _mm512_mask_add_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_add_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_add_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_add_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_add_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_add_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_add_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_add_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_adds_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_adds_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_adds_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_adds_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_adds_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_adds_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_adds_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_adds_epu16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_abs_epi8(__m512i, __mmask64, __m512i);
extern __m512i __cdecl _mm512_maskz_abs_epi8(__mmask64, __m512i);
extern __m512i __cdecl _mm512_mask_abs_epi16(__m512i, __mmask32, __m512i);
extern __m512i __cdecl _mm512_maskz_abs_epi16(__mmask32, __m512i);
extern __m512i __cdecl _mm512_mask_abs_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_abs_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_abs_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_abs_epi64(__mmask8, __m512i);

extern __m512i  __cdecl _mm512_mask_broadcast_i32x2(__m512i, __mmask16, __m128i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i32x2(__mmask16, __m128i);
extern __m512i  __cdecl _mm512_mask_broadcast_i32x4(__m512i, __mmask16, __m128i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i32x4(__mmask16, __m128i);
extern __m512i  __cdecl _mm512_mask_broadcast_i32x8(__m512i, __mmask16, __m256i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i32x8(__mmask16, __m256i);
extern __m512i  __cdecl _mm512_mask_broadcast_i64x2(__m512i, __mmask8, __m128i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i64x2(__mmask8, __m128i);
extern __m512i  __cdecl _mm512_mask_broadcast_i64x4(__m512i, __mmask8, __m256i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i64x4(__mmask8, __m256i);
extern __m512i __cdecl _mm512_mask_broadcastb_epi8(__m512i, __mmask64, __m128i);
extern __m512i __cdecl _mm512_maskz_broadcastb_epi8(__mmask64, __m128i);
extern __m512i __cdecl _mm512_mask_broadcastw_epi16(__m512i, __mmask32, __m128i);
extern __m512i __cdecl _mm512_maskz_broadcastw_epi16(__mmask32, __m128i);
extern __m512i __cdecl _mm512_mask_broadcastd_epi32(__m512i, __mmask16, __m128i);
extern __m512i __cdecl _mm512_maskz_broadcastd_epi32(__mmask16, __m128i);
extern __m512i __cdecl _mm512_mask_broadcastq_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_broadcastq_epi64(__mmask8, __m128i);
extern __m512i __cdecl _mm512_broadcastmw_epi32(__mmask16);
extern __m512i __cdecl _mm512_broadcastmb_epi64(__mmask8);

extern __m512i __cdecl _mm512_mask_sub_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sub_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sub_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sub_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sub_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sub_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sub_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sub_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_subs_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_subs_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_subs_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_subs_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_subs_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_subs_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_subs_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_subs_epu16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_max_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epu16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epu32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epu32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epu64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epu64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_min_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epu16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epu32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epu32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epu64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epu64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_mul_epi32(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mul_epi32(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mul_epu32(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mul_epu32(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mulhi_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mulhi_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mulhi_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mulhi_epu16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mullo_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mullo_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mullo_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mullo_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mullo_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mullo_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mullox_epi64(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mullox_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mulhrs_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mulhrs_epi16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_load_epi32(__m512i, __mmask16, void const*);
extern __m512i __cdecl _mm512_maskz_load_epi32(__mmask16, void const*);
extern __m512i __cdecl _mm512_mask_load_epi64(__m512i, __mmask8, void const*);
extern __m512i __cdecl _mm512_maskz_load_epi64(__mmask8, void const*);
extern __m512i __cdecl _mm512_mask_loadu_epi8(__m512i, __mmask64, void const*);
extern __m512i __cdecl _mm512_maskz_loadu_epi8(__mmask64, void const*);
extern __m512i __cdecl _mm512_mask_loadu_epi16(__m512i, __mmask32, void const*);
extern __m512i __cdecl _mm512_maskz_loadu_epi16(__mmask32, void const*);
extern __m512i __cdecl _mm512_mask_loadu_epi32(__m512i, __mmask16, void const*);
extern __m512i __cdecl _mm512_maskz_loadu_epi32(__mmask16, void const*);
extern __m512i __cdecl _mm512_mask_loadu_epi64(__m512i, __mmask8, void const*);
extern __m512i __cdecl _mm512_maskz_loadu_epi64(__mmask8, void const*);

extern void    __cdecl _mm512_mask_store_epi32(void*, __mmask16, __m512i);
extern void    __cdecl _mm512_mask_store_epi64(void*, __mmask8, __m512i);
extern void    __cdecl _mm512_mask_storeu_epi8(void*, __mmask64, __m512i);
extern void    __cdecl _mm512_mask_storeu_epi16(void*, __mmask32, __m512i);
extern void    __cdecl _mm512_mask_storeu_epi32(void*, __mmask16, __m512i);
extern void    __cdecl _mm512_mask_storeu_epi64(void*, __mmask8, __m512i);

extern __m128i __cdecl _mm512_mask_extracti32x4_epi32(__m128i, __mmask8, __m512i, int);
extern __m128i __cdecl _mm512_maskz_extracti32x4_epi32(__mmask8, __m512i, int);
extern __m256i __cdecl _mm512_mask_extracti32x8_epi32(__m256i, __mmask8, __m512i, int);
extern __m256i __cdecl _mm512_maskz_extracti32x8_epi32(__mmask8, __m512i, int);
extern __m128i __cdecl _mm512_mask_extracti64x2_epi64(__m128i, __mmask8, __m512i, int);
extern __m128i __cdecl _mm512_maskz_extracti64x2_epi64(__mmask8, __m512i, int);
extern __m256i __cdecl _mm512_mask_extracti64x4_epi64(__m256i, __mmask8, __m512i, int);
extern __m256i __cdecl _mm512_maskz_extracti64x4_epi64(__mmask8, __m512i, int);

extern __m512i __cdecl _mm512_mask_inserti32x4(__m512i, __mmask16, __m512i, __m128i, int);
extern __m512i __cdecl _mm512_maskz_inserti32x4(__mmask16, __m512i, __m128i, int);
extern __m512i __cdecl _mm512_mask_inserti32x8(__m512i, __mmask16, __m512i, __m256i, int);
extern __m512i __cdecl _mm512_maskz_inserti32x8(__mmask16, __m512i, __m256i, int);
extern __m512i __cdecl _mm512_mask_inserti64x2(__m512i, __mmask8, __m512i, __m128i, int);
extern __m512i __cdecl _mm512_maskz_inserti64x2(__mmask8, __m512i, __m128i, int);
extern __m512i __cdecl _mm512_mask_inserti64x4(__m512i, __mmask8, __m512i, __m256i, int);
extern __m512i __cdecl _mm512_maskz_inserti64x4(__mmask8, __m512i, __m256i, int);

extern __m512i __cdecl _mm512_mask_shuffle_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_shuffle_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_shuffle_epi32(__m512i, __mmask16, __m512i, int);
extern __m512i __cdecl _mm512_maskz_shuffle_epi32(__mmask16, __m512i, int);
extern __m512i __cdecl _mm512_mask_shuffle_i32x4(__m512i, __mmask16, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_shuffle_i32x4(__mmask16, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_mask_shuffle_i64x2(__m512i, __mmask8, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_shuffle_i64x2(__mmask8, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_mask_shufflehi_epi16(__m512i, __mmask32, __m512i, int);
extern __m512i __cdecl _mm512_maskz_shufflehi_epi16(__mmask32, __m512i, int);
extern __m512i __cdecl _mm512_mask_shufflelo_epi16(__m512i, __mmask32, __m512i, int);
extern __m512i __cdecl _mm512_maskz_shufflelo_epi16(__mmask32, __m512i, int);

extern __m512  __cdecl _mm512_mask_mov_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_mov_ps(__mmask16, __m512);
extern __m512d __cdecl _mm512_mask_mov_pd(__m512d, __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_mov_pd(__mmask8, __m512d);
extern __m512i __cdecl _mm512_mask_mov_epi8(__m512i, __mmask64, __m512i);
extern __m512i __cdecl _mm512_maskz_mov_epi8(__mmask64, __m512i);
extern __m512i __cdecl _mm512_mask_mov_epi16(__m512i, __mmask32, __m512i);
extern __m512i __cdecl _mm512_maskz_mov_epi16(__mmask32, __m512i);
extern __m512i __cdecl _mm512_mask_mov_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_mov_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_mov_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_mov_epi64(__mmask8, __m512i);
extern __m512d __cdecl _mm512_mask_movedup_pd(__m512d, __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_movedup_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_movehdup_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_movehdup_ps(__mmask16, __m512);
extern __m512  __cdecl _mm512_mask_moveldup_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_moveldup_ps(__mmask16, __m512);

extern __m512i __cdecl _mm512_movm_epi8(__mmask64);
extern __m512i __cdecl _mm512_movm_epi16(__mmask32);
extern __m512i __cdecl _mm512_movm_epi32(__mmask16);
extern __m512i __cdecl _mm512_movm_epi64(__mmask8);
extern __mmask64 __cdecl _mm512_movepi8_mask(__m512i);
extern __mmask32 __cdecl _mm512_movepi16_mask(__m512i);
extern __mmask16 __cdecl _mm512_movepi32_mask(__m512i);
extern __mmask8  __cdecl _mm512_movepi64_mask(__m512i);

extern __m512i __cdecl _mm512_mask_alignr_epi8(__m512i, __mmask64, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_alignr_epi8(__mmask64, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_mask_alignr_epi32(__m512i, __mmask16, __m512i, __m512i, const int );
extern __m512i __cdecl _mm512_maskz_alignr_epi32(__mmask16, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_mask_alignr_epi64(__m512i, __mmask8, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_alignr_epi64(__mmask8, __m512i, __m512i, const int);

extern __m512d __cdecl _mm512_mask_and_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_and_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_and_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_and_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_and_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_and_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_and_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_and_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_andnot_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_andnot_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_andnot_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_andnot_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_andnot_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_andnot_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_andnot_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_andnot_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_or_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_or_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_or_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_or_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_or_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_or_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_or_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_or_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_xor_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_xor_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_xor_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_xor_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_xor_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_xor_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_xor_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_xor_epi64(__mmask8, __m512i, __m512i);

extern __m512  __cdecl _mm512_mask_blend_ps(__mmask16, __m512, __m512);
extern __m512d __cdecl _mm512_mask_blend_pd(__mmask8, __m512d, __m512d);
extern __m512i __cdecl _mm512_mask_blend_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_blend_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_blend_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_blend_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_sll_epi16(__m512i, __mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sll_epi16(__mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_sll_epi32(__m512i, __mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sll_epi32(__mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_sll_epi64(__m512i, __mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sll_epi64(__mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_slli_epi16(__m512i, __mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_slli_epi16(__mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_slli_epi32(__m512i, __mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_slli_epi32(__mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_slli_epi64(__m512i, __mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_slli_epi64(__mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_sllv_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sllv_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sllv_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sllv_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sllv_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sllv_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_srl_epi16(__m512i, __mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_srl_epi16(__mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_srl_epi32(__m512i, __mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_srl_epi32(__mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_srl_epi64(__m512i, __mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_srl_epi64(__mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_srli_epi16(__m512i, __mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srli_epi16(__mmask32, __m512i, int);
extern __m512i __cdecl _mm512_mask_srli_epi32(__m512i, __mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srli_epi32(__mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srli_epi64(__m512i, __mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srli_epi64(__mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srlv_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srlv_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_srlv_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srlv_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_srlv_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srlv_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_sra_epi16(__m512i, __mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sra_epi16(__mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_sra_epi32(__m512i, __mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sra_epi32(__mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_sra_epi64(__m512i, __mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sra_epi64(__mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_srai_epi16(__m512i, __mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srai_epi16(__mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srai_epi32(__m512i, __mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srai_epi32(__mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srai_epi64(__m512i, __mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srai_epi64(__mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srav_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srav_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_srav_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srav_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_srav_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srav_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_bslli_epi128(__m512i, int);
extern __m512i __cdecl _mm512_bsrli_epi128(__m512i, int);

extern __m512i __cdecl _mm512_mask_rol_epi32(__m512i, __mmask16, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_rol_epi32(__mmask16, __m512i, const int);
extern __m512i __cdecl _mm512_mask_rol_epi64(__m512i, __mmask8, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_rol_epi64(__mmask8, __m512i, const int);
extern __m512i __cdecl _mm512_mask_rolv_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_rolv_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_rolv_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_rolv_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_ror_epi32(__m512i, __mmask16, __m512i, int);
extern __m512i __cdecl _mm512_maskz_ror_epi32(__mmask16, __m512i, int);
extern __m512i __cdecl _mm512_mask_ror_epi64(__m512i, __mmask8, __m512i, int);
extern __m512i __cdecl _mm512_maskz_ror_epi64(__mmask8, __m512i, int);
extern __m512i __cdecl _mm512_mask_rorv_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_rorv_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_rorv_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_rorv_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_unpackhi_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_unpackhi_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_unpackhi_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_unpackhi_ps(__mmask16, __m512, __m512);
extern __m512d __cdecl _mm512_mask_unpacklo_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_unpacklo_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_unpacklo_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_unpacklo_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_unpackhi_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpackhi_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpackhi_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpackhi_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpackhi_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpackhi_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpackhi_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpackhi_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpacklo_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpacklo_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpacklo_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpacklo_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpacklo_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpacklo_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpacklo_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpacklo_epi64(__mmask8, __m512i, __m512i);

extern __m512  __cdecl _mm512_mask_getexp_round_ps(__m512, __mmask16, __m512, int);
extern __m512  __cdecl _mm512_maskz_getexp_round_ps(__mmask16, __m512, int);
extern __m512d __cdecl _mm512_mask_getexp_round_pd(__m512d, __mmask8, __m512d, int);
extern __m512d __cdecl _mm512_maskz_getexp_round_pd(__mmask8, __m512d, int);

extern __m512  __cdecl _mm512_mask_getmant_round_ps(__m512, __mmask16, __m512, int, int, int);
extern __m512  __cdecl _mm512_maskz_getmant_round_ps(__mmask16, __m512, int, int, int);
extern __m512d __cdecl _mm512_mask_getmant_round_pd(__m512d, __mmask8, __m512d, int, int, int);
extern __m512d __cdecl _mm512_maskz_getmant_round_pd(__mmask8, __m512d, int, int, int);

extern __m512d __cdecl _mm512_mask_permute_pd(__m512d, __mmask8, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_permute_pd(__mmask8, __m512d, const int);
extern __m512  __cdecl _mm512_mask_permute_ps(__m512, __mmask16, __m512, const int);
extern __m512  __cdecl _mm512_maskz_permute_ps(__mmask16, __m512, const int);
extern __m512d __cdecl _mm512_mask_permutevar_pd(__m512d, __mmask8, __m512d, __m512i);
extern __m512d __cdecl _mm512_maskz_permutevar_pd(__mmask8, __m512d, __m512i);
extern __m512  __cdecl _mm512_mask_permutevar_ps(__m512, __mmask16, __m512, __m512i);
extern __m512  __cdecl _mm512_maskz_permutevar_ps(__mmask16, __m512, __m512i);
extern __m512i __cdecl _mm512_permutevar_epi32(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutevar_epi32(__m512i, __mmask16, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_permutex_pd(__m512d, __mmask8, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_permutex_pd(__mmask8, __m512d, const int);
extern __m512i __cdecl _mm512_mask_permutex_epi64(__m512i, __mmask8, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_permutex_epi64(__mmask8, __m512i, const int);
extern __m512d __cdecl _mm512_mask_permutexvar_pd(__m512d, __mmask8, __m512i, __m512d);
extern __m512d __cdecl _mm512_maskz_permutexvar_pd(__mmask8, __m512i, __m512d);
extern __m512  __cdecl _mm512_mask_permutexvar_ps(__m512, __mmask16, __m512i, __m512);
extern __m512  __cdecl _mm512_maskz_permutexvar_ps(__mmask16, __m512i, __m512);
extern __m512i __cdecl _mm512_mask_permutexvar_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_permutexvar_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutexvar_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_permutexvar_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutexvar_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_permutexvar_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_permutex2var_pd(__m512d, __mmask8, __m512i , __m512d);
extern __m512d __cdecl _mm512_mask2_permutex2var_pd(__m512d, __m512i , __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_permutex2var_pd(__mmask8, __m512d, __m512i , __m512d);
extern __m512  __cdecl _mm512_mask_permutex2var_ps(__m512, __mmask16, __m512i , __m512);
extern __m512  __cdecl _mm512_mask2_permutex2var_ps(__m512, __m512i , __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_permutex2var_ps(__mmask16, __m512, __m512i , __m512);
extern __m512i __cdecl _mm512_mask_permutex2var_epi16(__m512i, __mmask32, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask2_permutex2var_epi16(__m512i, __m512i , __mmask32, __m512i);
extern __m512i __cdecl _mm512_maskz_permutex2var_epi16(__mmask32, __m512i, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask_permutex2var_epi32(__m512i, __mmask16, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask2_permutex2var_epi32(__m512i, __m512i , __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_permutex2var_epi32(__mmask16, __m512i, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask_permutex2var_epi64(__m512i, __mmask8, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask2_permutex2var_epi64(__m512i, __m512i , __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_permutex2var_epi64(__mmask8, __m512i, __m512i , __m512i);

extern __m512d __cdecl _mm512_mask_compress_pd(__m512d, __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_compress_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_compress_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_compress_ps(__mmask16, __m512);
extern __m512i __cdecl _mm512_mask_compress_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_compress_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_compress_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_compress_epi64(__mmask8, __m512i);

extern void    __cdecl _mm512_mask_compressstoreu_pd(void*, __mmask8, __m512d);
extern void    __cdecl _mm512_mask_compressstoreu_ps(void*, __mmask16, __m512);
extern void    __cdecl _mm512_mask_compressstoreu_epi32(void*, __mmask16, __m512i);
extern void    __cdecl _mm512_mask_compressstoreu_epi64(void*, __mmask8, __m512i);

extern __m512d __cdecl _mm512_mask_expand_pd(__m512d, __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_expand_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_expand_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_expand_ps(__mmask16, __m512);
extern __m512i __cdecl _mm512_mask_expand_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_expand_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_expand_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_expand_epi64(__mmask8, __m512i);
extern __m512d __cdecl _mm512_mask_expandloadu_pd(__m512d, __mmask8, void const*);
extern __m512d __cdecl _mm512_maskz_expandloadu_pd(__mmask8, void const*);
extern __m512  __cdecl _mm512_mask_expandloadu_ps(__m512, __mmask16, void const*);
extern __m512  __cdecl _mm512_maskz_expandloadu_ps(__mmask16, void const*);
extern __m512i __cdecl _mm512_mask_expandloadu_epi32(__m512i, __mmask16, void const*);
extern __m512i __cdecl _mm512_maskz_expandloadu_epi32(__mmask16, void const*);
extern __m512i __cdecl _mm512_mask_expandloadu_epi64(__m512i, __mmask8, void const*);
extern __m512i __cdecl _mm512_maskz_expandloadu_epi64(__mmask8, void const*);

extern __m512i __cdecl _mm512_mask_ternarylogic_epi32(__m512i, __mmask16, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_maskz_ternarylogic_epi32(__mmask16, __m512i, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_mask_ternarylogic_epi64(__m512i, __mmask8, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_maskz_ternarylogic_epi64(__mmask8, __m512i, __m512i, __m512i, int);

extern __m512i __cdecl _mm512_mask_conflict_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_conflict_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_conflict_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_conflict_epi64(__mmask8, __m512i);

extern __m512i __cdecl _mm512_mask_lzcnt_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_lzcnt_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_lzcnt_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_lzcnt_epi64(__mmask8, __m512i);

extern __m512i __cdecl _mm512_mask_avg_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_avg_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_avg_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_avg_epu16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_sad_epu8(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dbsad_epu8(__m512i, __mmask32, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_maskz_dbsad_epu8(__mmask32, __m512i, __m512i, int);

extern float   __cdecl _mm512_reduce_add_ps(__m512);
extern float   __cdecl _mm512_mask_reduce_add_ps(__mmask16, __m512);
extern double  __cdecl _mm512_reduce_add_pd(__m512d);
extern double  __cdecl _mm512_mask_reduce_add_pd(__mmask8, __m512d);
extern int     __cdecl _mm512_reduce_add_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_add_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_add_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_add_epi64(__mmask8, __m512i);

extern float   __cdecl _mm512_reduce_mul_ps(__m512);
extern float   __cdecl _mm512_mask_reduce_mul_ps(__mmask16, __m512);
extern double  __cdecl _mm512_reduce_mul_pd(__m512d);
extern double  __cdecl _mm512_mask_reduce_mul_pd(__mmask8, __m512d);
extern int     __cdecl _mm512_reduce_mul_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_mul_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_mul_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_mul_epi64(__mmask8, __m512i);

extern float   __cdecl _mm512_reduce_min_ps(__m512);
extern float   __cdecl _mm512_mask_reduce_min_ps(__mmask16, __m512);
extern double  __cdecl _mm512_reduce_min_pd(__m512d);
extern double  __cdecl _mm512_mask_reduce_min_pd(__mmask8, __m512d);
extern int     __cdecl _mm512_reduce_min_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_min_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_min_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_min_epi64(__mmask8, __m512i);
extern unsigned int     __cdecl _mm512_reduce_min_epu32(__m512i);
extern unsigned int     __cdecl _mm512_mask_reduce_min_epu32(__mmask16, __m512i);
extern unsigned __int64 __cdecl _mm512_reduce_min_epu64(__m512i);
extern unsigned __int64 __cdecl _mm512_mask_reduce_min_epu64(__mmask8, __m512i);

extern float   __cdecl _mm512_reduce_max_ps(__m512);
extern float   __cdecl _mm512_mask_reduce_max_ps(__mmask16, __m512);
extern double  __cdecl _mm512_reduce_max_pd(__m512d);
extern double  __cdecl _mm512_mask_reduce_max_pd(__mmask8, __m512d);
extern int     __cdecl _mm512_reduce_max_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_max_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_max_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_max_epi64(__mmask8, __m512i);
extern unsigned int     __cdecl _mm512_reduce_max_epu32(__m512i);
extern unsigned int     __cdecl _mm512_mask_reduce_max_epu32(__mmask16, __m512i);
extern unsigned __int64 __cdecl _mm512_reduce_max_epu64(__m512i);
extern unsigned __int64 __cdecl _mm512_mask_reduce_max_epu64(__mmask8, __m512i);

extern int     __cdecl _mm512_reduce_and_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_and_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_and_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_and_epi64(__mmask8, __m512i);

extern int     __cdecl _mm512_reduce_or_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_or_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_or_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_or_epi64(__mmask8, __m512i);

extern __m512d __cdecl _mm512_mask_reduce_round_pd(__m512d, __mmask8, __m512d, int, int);
extern __m512d __cdecl _mm512_maskz_reduce_round_pd(__mmask8, __m512d, int, int);
extern __m512  __cdecl _mm512_mask_reduce_round_ps(__m512, __mmask16, __m512, int, int);
extern __m512  __cdecl _mm512_maskz_reduce_round_ps(__mmask16, __m512, int, int);

extern __m512d __cdecl _mm512_mask_roundscale_round_pd(__m512d, __mmask8, __m512d, int, int);
extern __m512d __cdecl _mm512_maskz_roundscale_round_pd(__mmask8, __m512d, int, int);
extern __m512  __cdecl _mm512_mask_roundscale_round_ps(__m512, __mmask16, __m512, int, int);
extern __m512  __cdecl _mm512_maskz_roundscale_round_ps(__mmask16, __m512, int, int);

extern __m512d __cdecl _mm512_mask_scalef_round_pd(__m512d, __mmask8, __m512d, __m512d, int);
extern __m512d __cdecl _mm512_maskz_scalef_round_pd(__mmask8, __m512d, __m512d, int);
extern __m512  __cdecl _mm512_mask_scalef_round_ps(__m512, __mmask16, __m512, __m512, int);
extern __m512  __cdecl _mm512_maskz_scalef_round_ps(__mmask16, __m512, __m512, int);

extern __m512d __cdecl _mm512_mask_fixupimm_round_pd(__m512d, __mmask8, __m512d, __m512i, const int, const int);
extern __m512d __cdecl _mm512_maskz_fixupimm_round_pd(__mmask8, __m512d, __m512d, __m512i, const int, const int);
extern __m512  __cdecl _mm512_mask_fixupimm_round_ps(__m512, __mmask16, __m512, __m512i, const int, const int);
extern __m512  __cdecl _mm512_maskz_fixupimm_round_ps(__mmask16, __m512, __m512, __m512i, const int, const int);

extern void    __cdecl _mm512_stream_pd(void*, __m512d);
extern void    __cdecl _mm512_stream_ps(void*, __m512);
extern void    __cdecl _mm512_stream_si512(void*, __m512i);
extern __m512i __cdecl _mm512_stream_load_si512(void const*);

extern __m128d __cdecl _mm512_castpd512_pd128(__m512d);
extern __m128  __cdecl _mm512_castps512_ps128(__m512);
extern __m128i __cdecl _mm512_castsi512_si128(__m512i);
extern __m512i __cdecl _mm512_castsi128_si512(__m128i);

extern __m512  __cdecl _mm512_mask_exp2a23_round_ps(__m512, __mmask16, __m512, int);
extern __m512  __cdecl _mm512_maskz_exp2a23_round_ps(__mmask16, __m512, int);
extern __m512d __cdecl _mm512_mask_exp2a23_round_pd(__m512d, __mmask8, __m512d, int);
extern __m512d __cdecl _mm512_maskz_exp2a23_round_pd(__mmask8, __m512d, int);

extern __mmask16 __cdecl _mm512_mask_fpclass_ps_mask(__mmask16, __m512, int);
extern __mmask8  __cdecl _mm512_mask_fpclass_pd_mask(__mmask8, __m512d, int);

extern __m512d __cdecl _mm512_mask_range_round_pd(__m512d, __mmask8, __m512d, __m512d, int, int);
extern __m512d __cdecl _mm512_maskz_range_round_pd(__mmask8, __m512d, __m512d, int, int);
extern __m512  __cdecl _mm512_mask_range_round_ps(__m512, __mmask16, __m512, __m512, int, int);
extern __m512  __cdecl _mm512_maskz_range_round_ps(__mmask16, __m512, __m512, int, int);

extern __m512i __cdecl _mm512_mask_madd_epi16(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_madd_epi16(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_maddubs_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_maddubs_epi16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_packs_epi16(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_packs_epi16(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_packs_epi32(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_packs_epi32(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_packus_epi16(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_packus_epi16(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_packus_epi32(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_packus_epi32(__mmask32, __m512i, __m512i);

extern __mmask64 __cdecl _mm512_mask_cmp_epi8_mask(__mmask64, __m512i, __m512i, const int);
extern __mmask32 __cdecl _mm512_mask_cmp_epi16_mask(__mmask32, __m512i, __m512i, const int);
extern __mmask16 __cdecl _mm512_mask_cmp_epi32_mask(__mmask16, __m512i, __m512i, const int);
extern __mmask8  __cdecl _mm512_mask_cmp_epi64_mask(__mmask8, __m512i, __m512i, const int);
extern __mmask64 __cdecl _mm512_mask_cmp_epu8_mask(__mmask64, __m512i, __m512i, const int);
extern __mmask32 __cdecl _mm512_mask_cmp_epu16_mask(__mmask32, __m512i, __m512i, const int);
extern __mmask16 __cdecl _mm512_mask_cmp_epu32_mask(__mmask16, __m512i, __m512i, const int);
extern __mmask8  __cdecl _mm512_mask_cmp_epu64_mask(__mmask8, __m512i, __m512i, const int);

extern __mmask64 __cdecl _mm512_mask_test_epi8_mask(__mmask64, __m512i, __m512i);
extern __mmask32 __cdecl _mm512_mask_test_epi16_mask(__mmask32, __m512i, __m512i);
extern __mmask64 __cdecl _mm512_mask_testn_epi8_mask(__mmask64, __m512i, __m512i);
extern __mmask32 __cdecl _mm512_mask_testn_epi16_mask(__mmask32, __m512i, __m512i);
extern __mmask16 __cdecl _mm512_mask_test_epi32_mask(__mmask16, __m512i, __m512i);
extern __mmask8  __cdecl _mm512_mask_test_epi64_mask(__mmask8, __m512i, __m512i);
extern __mmask16 __cdecl _mm512_mask_testn_epi32_mask(__mmask16, __m512i, __m512i);
extern __mmask8  __cdecl _mm512_mask_testn_epi64_mask(__mmask8, __m512i, __m512i);

extern __mmask16 __cdecl _mm512_kunpackb(__mmask16, __mmask16);
extern __mmask32 __cdecl _mm512_kunpackw(__mmask32, __mmask32);
extern __mmask64 __cdecl _mm512_kunpackd(__mmask64, __mmask64);

extern unsigned char __cdecl _mm512_testz_and_mask8(__mmask8, __mmask8);
extern unsigned char __cdecl _mm512_testz_and_mask16(__mmask16, __mmask16);
extern unsigned char __cdecl _mm512_testz_and_mask32(__mmask32, __mmask32);
extern unsigned char __cdecl _mm512_testz_and_mask64(__mmask64, __mmask64);
extern unsigned char __cdecl _mm512_testz_andn_mask8(__mmask8, __mmask8);
extern unsigned char __cdecl _mm512_testz_andn_mask16(__mmask16, __mmask16);
extern unsigned char __cdecl _mm512_testz_andn_mask32(__mmask32, __mmask32);
extern unsigned char __cdecl _mm512_testz_andn_mask64(__mmask64, __mmask64);
extern unsigned char __cdecl _mm512_testz_or_mask8(__mmask8, __mmask8);
extern unsigned char __cdecl _mm512_testz_or_mask16(__mmask16, __mmask16);
extern unsigned char __cdecl _mm512_testz_or_mask32(__mmask32, __mmask32);
extern unsigned char __cdecl _mm512_testz_or_mask64(__mmask64, __mmask64);
extern unsigned char __cdecl _mm512_testz_nor_mask8(__mmask8, __mmask8);
extern unsigned char __cdecl _mm512_testz_nor_mask16(__mmask16, __mmask16);
extern unsigned char __cdecl _mm512_testz_nor_mask32(__mmask32, __mmask32);
extern unsigned char __cdecl _mm512_testz_nor_mask64(__mmask64, __mmask64);

extern __m512  __cdecl _mm512_i32gather_ps(__m512i, void const*, int);
extern __m512  __cdecl _mm512_mask_i32gather_ps(__m512, __mmask16, __m512i, void const*, int);
extern void    __cdecl _mm512_i32scatter_ps(void*, __m512i, __m512, int);
extern void    __cdecl _mm512_mask_i32scatter_ps(void*, __mmask16, __m512i, __m512, int);
extern __m512d __cdecl _mm512_i64gather_pd(__m512i, void const*, int);
extern __m512d __cdecl _mm512_mask_i64gather_pd(__m512d, __mmask8, __m512i, void const*, int);
extern void    __cdecl _mm512_i64scatter_pd(void*, __m512i, __m512d, int);
extern void    __cdecl _mm512_mask_i64scatter_pd(void*, __mmask8, __m512i, __m512d, int);
extern __m512d __cdecl _mm512_i32gather_pd(__m256i, void const*, int);
extern __m512d __cdecl _mm512_mask_i32gather_pd(__m512d, __mmask8, __m256i, void const*, int);
extern void    __cdecl _mm512_i32scatter_pd(void*, __m256i, __m512d, int);
extern void    __cdecl _mm512_mask_i32scatter_pd(void*, __mmask8, __m256i, __m512d, int);
extern __m512i __cdecl _mm512_i32gather_epi32(__m512i, void const*, int);
extern __m512i __cdecl _mm512_mask_i32gather_epi32(__m512i, __mmask16, __m512i, void const*, int);
extern void    __cdecl _mm512_i32scatter_epi32(void*, __m512i, __m512i, int);
extern void    __cdecl _mm512_mask_i32scatter_epi32(void*, __mmask16, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_i32gather_epi64(__m256i, void const*, int);
extern __m512i __cdecl _mm512_mask_i32gather_epi64(__m512i, __mmask8, __m256i, void const*, int);
extern __m512i __cdecl _mm512_i64gather_epi64(__m512i, void const*, int);
extern __m512i __cdecl _mm512_mask_i64gather_epi64(__m512i, __mmask8, __m512i, void const*, int);
extern void    __cdecl _mm512_i32scatter_epi64(void*, __m256i, __m512i, int);
extern void    __cdecl _mm512_mask_i32scatter_epi64(void*, __mmask8, __m256i, __m512i, int);
extern void    __cdecl _mm512_i64scatter_epi64(void*, __m512i, __m512i, int);
extern void    __cdecl _mm512_mask_i64scatter_epi64(void*, __mmask8, __m512i, __m512i, int);
extern __m256  __cdecl _mm512_i64gather_ps(__m512i, void const*, int);
extern __m256  __cdecl _mm512_mask_i64gather_ps(__m256, __mmask8, __m512i, void const*, int);
extern void    __cdecl _mm512_i64scatter_ps(void*, __m512i, __m256, int);
extern void    __cdecl _mm512_mask_i64scatter_ps(void*, __mmask8, __m512i, __m256, int);
extern __m256i __cdecl _mm512_i64gather_epi32(__m512i, void const*, int);
extern __m256i __cdecl _mm512_mask_i64gather_epi32(__m256i, __mmask8, __m512i, void const*, int);
extern void    __cdecl _mm512_i64scatter_epi32(void*, __m512i, __m256i, int);
extern void    __cdecl _mm512_mask_i64scatter_epi32(void*, __mmask8, __m512i, __m256i, int);

extern void __cdecl _mm512_prefetch_i32gather_pd(__m256i vindex, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i32gather_ps(__m512i index, void const* mv, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i32scatter_pd(void* base_addr, __m256i vindex, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i32scatter_ps(void* mv, __m512i index, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i64gather_pd(__m512i vindex, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i64gather_ps(__m512i vindex, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i64scatter_pd(void* base_addr, __m512i vindex, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i64scatter_ps(void* base_addr, __m512i vindex, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i32gather_pd(__m256i vindex, __mmask8 mask, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i32gather_ps(__m512i vindex, __mmask16 mask, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i32scatter_pd(void* base_addr, __mmask8 mask, __m256i vinde, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i32scatter_ps(void* mv, __mmask16 k, __m512i index, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i64gather_pd(__m512i vindex, __mmask8 mask, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i64gather_ps(__m512i vindex, __mmask8 mask, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i64scatter_pd(void* base_addr, __mmask8 mask, __m512i vindex, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i64scatter_ps(void* base_addr, __mmask8 mask, __m512i vindex, int scale, const int hint);

extern __m512d __cdecl _mm512_cvtpslo_pd(__m512);
extern __m512d __cdecl _mm512_mask_cvtpslo_pd(__m512d, __mmask8, __m512);
extern __m512d __cdecl _mm512_cvtepi32lo_pd(__m512i);
extern __m512d __cdecl _mm512_mask_cvtepi32lo_pd(__m512d, __mmask8, __m512i);
extern __m512d __cdecl _mm512_cvtepu32lo_pd(__m512i);
extern __m512d __cdecl _mm512_mask_cvtepu32lo_pd(__m512d, __mmask8, __m512i);
extern __m512d __cdecl _mm512_mask_cvtepi32_pd(__m512d, __mmask8, __m256i);
extern __m512d __cdecl _mm512_maskz_cvtepi32_pd(__mmask8, __m256i);
extern __m512d __cdecl _mm512_mask_cvtepu32_pd(__m512d, __mmask8, __m256i);
extern __m512d __cdecl _mm512_maskz_cvtepu32_pd(__mmask8, __m256i);

extern __m512  __cdecl _mm512_mask_cvt_roundepi32_ps(__m512, __mmask16, __m512i, int);
extern __m512  __cdecl _mm512_maskz_cvt_roundepi32_ps(__mmask16, __m512i, int);
extern __m512  __cdecl _mm512_mask_cvt_roundepu32_ps(__m512, __mmask16, __m512i, int);
extern __m512  __cdecl _mm512_maskz_cvt_roundepu32_ps(__mmask16, __m512i, int);
extern __m512  __cdecl _mm512_mask_cvt_roundph_ps(__m512, __mmask16, __m256i, int);
extern __m512  __cdecl _mm512_maskz_cvt_roundph_ps(__mmask16, __m256i, int);
extern __m256i __cdecl _mm512_mask_cvt_roundps_ph(__m256i, __mmask16, __m512, int);
extern __m256i __cdecl _mm512_maskz_cvt_roundps_ph(__mmask16, __m512, int);
extern __m256  __cdecl _mm512_mask_cvt_roundepi64_ps(__m256, __mmask8, __m512i, int);
extern __m256  __cdecl _mm512_maskz_cvt_roundepi64_ps(__mmask8, __m512i, int);
extern __m256  __cdecl _mm512_mask_cvt_roundepu64_ps(__m256, __mmask8, __m512i, int);
extern __m256  __cdecl _mm512_maskz_cvt_roundepu64_ps(__mmask8, __m512i, int);

extern __m512i __cdecl _mm512_mask_cvtepi8_epi32(__m512i, __mmask16, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepi8_epi32(__mmask16, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepi8_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepi8_epi64(__mmask8, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepi16_epi32(__m512i, __mmask16, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepi16_epi32(__mmask16, __m256i);
extern __m512i __cdecl _mm512_mask_cvtepi16_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepi16_epi64(__mmask8, __m128i);
extern __m128i __cdecl _mm512_mask_cvtepi32_epi8(__m128i, __mmask16, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtepi32_epi8(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtepi32_storeu_epi8(void*, __mmask16, __m512i);
extern __m128i __cdecl _mm512_mask_cvtsepi32_epi8(__m128i, __mmask16, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtsepi32_epi8(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi32_storeu_epi8(void*, __mmask16, __m512i);
extern __m128i __cdecl _mm512_mask_cvtusepi32_epi8(__m128i, __mmask16, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtusepi32_epi8(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi32_storeu_epi8(void*, __mmask16, __m512i);
extern __m256i __cdecl _mm512_mask_cvtepi32_epi16(__m256i, __mmask16, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtepi32_epi16(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtepi32_storeu_epi16(void*, __mmask16, __m512i);
extern __m256i __cdecl _mm512_mask_cvtsepi32_epi16(__m256i, __mmask16, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtsepi32_epi16(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi32_storeu_epi16(void*, __mmask16, __m512i);
extern __m256i __cdecl _mm512_mask_cvtusepi32_epi16(__m256i, __mmask16, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtusepi32_epi16(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi32_storeu_epi16(void*, __mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_cvtepi32_epi64(__m512i, __mmask8, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepi32_epi64(__mmask8, __m256i);
extern __m128i __cdecl _mm512_mask_cvtepi64_epi8(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtepi64_epi8(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtepi64_storeu_epi8(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtsepi64_epi8(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtsepi64_epi8(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi64_storeu_epi8(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtusepi64_epi8(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtusepi64_epi8(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi64_storeu_epi8(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtepi64_epi16(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtepi64_epi16(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtepi64_storeu_epi16(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtsepi64_epi16(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtsepi64_epi16(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi64_storeu_epi16(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtusepi64_epi16(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtusepi64_epi16(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi64_storeu_epi16(void*, __mmask8, __m512i);
extern __m256i __cdecl _mm512_mask_cvtepi64_epi32(__m256i, __mmask8, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtepi64_epi32(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtepi64_storeu_epi32(void*, __mmask8, __m512i);
extern __m256i __cdecl _mm512_mask_cvtsepi64_epi32(__m256i, __mmask8, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtsepi64_epi32(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi64_storeu_epi32(void*, __mmask8, __m512i);
extern __m256i __cdecl _mm512_mask_cvtusepi64_epi32(__m256i, __mmask8, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtusepi64_epi32(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi64_storeu_epi32(void*, __mmask8, __m512i);
extern __m512i __cdecl _mm512_mask_cvtepu8_epi32(__m512i, __mmask16, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepu8_epi32(__mmask16, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepu8_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepu8_epi64(__mmask8, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepu16_epi32(__m512i, __mmask16, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepu16_epi32(__mmask16, __m256i);
extern __m512i __cdecl _mm512_mask_cvtepu16_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepu16_epi64(__mmask8, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepu32_epi64(__m512i, __mmask8, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepu32_epi64(__mmask8, __m256i);

extern __m512i __cdecl _mm512_mask_cvt_roundps_epi32(__m512i, __mmask16, __m512, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundps_epi32(__mmask16, __m512, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundps_epi32(__m512i, __mmask16, __m512, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundps_epi32(__mmask16, __m512, int);
extern __m512i __cdecl _mm512_mask_cvt_roundps_epu32(__m512i, __mmask16, __m512, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundps_epu32(__mmask16, __m512, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundps_epu32(__m512i, __mmask16, __m512, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundps_epu32(__mmask16, __m512, int);
extern __m256i __cdecl _mm512_mask_cvt_roundpd_epi32(__m256i, __mmask8, __m512d, int);
extern __m256i __cdecl _mm512_maskz_cvt_roundpd_epi32(__mmask8, __m512d, int);
extern __m256i __cdecl _mm512_mask_cvtt_roundpd_epi32(__m256i, __mmask8, __m512d, int);
extern __m256i __cdecl _mm512_maskz_cvtt_roundpd_epi32(__mmask8, __m512d, int);
extern __m256i __cdecl _mm512_mask_cvt_roundpd_epu32(__m256i, __mmask8, __m512d, int);
extern __m256i __cdecl _mm512_maskz_cvt_roundpd_epu32(__mmask8, __m512d, int);
extern __m256i __cdecl _mm512_mask_cvtt_roundpd_epu32(__m256i, __mmask8, __m512d, int);
extern __m256i __cdecl _mm512_maskz_cvtt_roundpd_epu32(__mmask8, __m512d, int);

extern __m512i __cdecl _mm512_mask_cvtepi8_epi16(__m512i, __mmask32, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepi8_epi16(__mmask32, __m256i);
extern __m512i __cdecl _mm512_mask_cvtepu8_epi16(__m512i, __mmask32, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepu8_epi16(__mmask32, __m256i);
extern __m256i __cdecl _mm512_mask_cvtepi16_epi8(__m256i, __mmask32, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtepi16_epi8(__mmask32, __m512i);
extern void    __cdecl _mm512_mask_cvtepi16_storeu_epi8(void*, __mmask32, __m512i);
extern __m256i __cdecl _mm512_mask_cvtsepi16_epi8(__m256i, __mmask32, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtsepi16_epi8(__mmask32, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi16_storeu_epi8(void*, __mmask32, __m512i);
extern __m256i __cdecl _mm512_mask_cvtusepi16_epi8(__m256i, __mmask32, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtusepi16_epi8(__mmask32, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi16_storeu_epi8(void*, __mmask32, __m512i);

extern __m512d __cdecl _mm512_mask_cvt_roundepi64_pd(__m512d, __mmask8, __m512i, int);
extern __m512d __cdecl _mm512_maskz_cvt_roundepi64_pd(__mmask8, __m512i, int);
extern __m512d __cdecl _mm512_mask_cvt_roundepu64_pd(__m512d, __mmask8, __m512i, int);
extern __m512d __cdecl _mm512_maskz_cvt_roundepu64_pd(__mmask8, __m512i, int);
extern __m512i __cdecl _mm512_mask_cvt_roundpd_epi64(__m512i, __mmask8, __m512d, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundpd_epi64(__mmask8, __m512d, int);
extern __m512i __cdecl _mm512_mask_cvt_roundpd_epu64(__m512i, __mmask8, __m512d, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundpd_epu64(__mmask8, __m512d, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundpd_epi64(__m512i, __mmask8, __m512d, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundpd_epi64(__mmask8, __m512d, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundpd_epu64(__m512i, __mmask8, __m512d, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundpd_epu64(__mmask8, __m512d, int);
extern __m512i __cdecl _mm512_mask_cvt_roundps_epi64(__m512i, __mmask8, __m256, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundps_epi64(__mmask8, __m256, int);
extern __m512i __cdecl _mm512_mask_cvt_roundps_epu64(__m512i, __mmask8, __m256, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundps_epu64(__mmask8, __m256, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundps_epi64(__m512i, __mmask8, __m256, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundps_epi64(__mmask8, __m256, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundps_epu64(__m512i, __mmask8, __m256, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundps_epu64(__mmask8, __m256, int);






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern __m128i   __cdecl _mm_mask_abs_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_abs_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_abs_epi16(__m256i, __mmask16, __m256i);
extern __m256i   __cdecl _mm256_maskz_abs_epi16(__mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_abs_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_abs_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_abs_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_abs_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_abs_epi64(__m128i);
extern __m128i   __cdecl _mm_mask_abs_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_abs_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_abs_epi64(__m256i);
extern __m256i   __cdecl _mm256_mask_abs_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_abs_epi64(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_abs_epi8(__m128i, __mmask16, __m128i);
extern __m128i   __cdecl _mm_maskz_abs_epi8(__mmask16, __m128i);
extern __m256i   __cdecl _mm256_mask_abs_epi8(__m256i, __mmask32, __m256i);
extern __m256i   __cdecl _mm256_maskz_abs_epi8(__mmask32, __m256i);
extern __m128i   __cdecl _mm_mask_add_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_add_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_add_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_add_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_add_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_add_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_add_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_add_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_add_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_add_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_add_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_add_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_add_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_add_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_add_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_add_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_add_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_add_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_add_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_add_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_add_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_add_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_add_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_add_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_adds_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_adds_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_adds_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_adds_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_adds_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_adds_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_adds_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_adds_epi8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_adds_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_adds_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_adds_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_adds_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_adds_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_adds_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_adds_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_adds_epu8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_alignr_epi32(__m128i, __m128i, const int);
extern __m128i   __cdecl _mm_mask_alignr_epi32(__m128i, __mmask8, __m128i, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_alignr_epi32(__mmask8, __m128i, __m128i, const int);
extern __m256i   __cdecl _mm256_alignr_epi32(__m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_mask_alignr_epi32(__m256i, __mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_alignr_epi32(__mmask8, __m256i, __m256i, const int);
extern __m128i   __cdecl _mm_alignr_epi64(__m128i, __m128i, const int);
extern __m128i   __cdecl _mm_mask_alignr_epi64(__m128i, __mmask8, __m128i, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_alignr_epi64(__mmask8, __m128i, __m128i, const int);
extern __m256i   __cdecl _mm256_alignr_epi64(__m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_mask_alignr_epi64(__m256i, __mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_alignr_epi64(__mmask8, __m256i, __m256i, const int);
extern __m128i   __cdecl _mm_mask_alignr_epi8(__m128i, __mmask16, __m128i, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_alignr_epi8(__mmask16, __m128i, __m128i, const int);
extern __m256i   __cdecl _mm256_mask_alignr_epi8(__m256i, __mmask32, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_alignr_epi8(__mmask32, __m256i, __m256i, const int);
extern __m128i   __cdecl _mm_mask_and_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_and_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_and_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_and_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_and_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_and_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_and_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_and_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_and_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_and_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_and_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_and_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_and_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_and_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_and_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_and_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_andnot_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_andnot_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_andnot_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_andnot_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_andnot_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_andnot_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_andnot_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_andnot_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_andnot_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_andnot_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_andnot_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_andnot_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_andnot_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_andnot_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_andnot_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_andnot_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_avg_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_avg_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_avg_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_avg_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_avg_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_avg_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_avg_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_avg_epu8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_blend_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_blend_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_blend_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_blend_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_blend_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_blend_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_blend_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_blend_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_blend_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_blend_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_blend_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_blend_ps(__mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_broadcast_f32x2(__m128);
extern __m256    __cdecl _mm256_mask_broadcast_f32x2(__m256, __mmask8, __m128);
extern __m256    __cdecl _mm256_maskz_broadcast_f32x2(__mmask8, __m128);
extern __m256    __cdecl _mm256_broadcast_f32x4(__m128);
extern __m256    __cdecl _mm256_mask_broadcast_f32x4(__m256, __mmask8, __m128);
extern __m256    __cdecl _mm256_maskz_broadcast_f32x4(__mmask8, __m128);
extern __m256d   __cdecl _mm256_broadcast_f64x2(__m128d);
extern __m256d   __cdecl _mm256_mask_broadcast_f64x2(__m256d, __mmask8, __m128d);
extern __m256d   __cdecl _mm256_maskz_broadcast_f64x2(__mmask8, __m128d);
extern __m128i   __cdecl _mm_broadcast_i32x2(__m128i);
extern __m128i   __cdecl _mm_mask_broadcast_i32x2(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcast_i32x2(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_broadcast_i32x2(__m128i);
extern __m256i   __cdecl _mm256_mask_broadcast_i32x2(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcast_i32x2(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_broadcast_i32x4(__m128i);
extern __m256i   __cdecl _mm256_mask_broadcast_i32x4(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcast_i32x4(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_broadcast_i64x2(__m128i);
extern __m256i   __cdecl _mm256_mask_broadcast_i64x2(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcast_i64x2(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_broadcastb_epi8(__m128i, __mmask16, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcastb_epi8(__mmask16, __m128i);
extern __m256i   __cdecl _mm256_mask_broadcastb_epi8(__m256i, __mmask32, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcastb_epi8(__mmask32, __m128i);
extern __m128i   __cdecl _mm_mask_broadcastd_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcastd_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_broadcastd_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcastd_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_broadcastmb_epi64(__mmask8);
extern __m256i   __cdecl _mm256_broadcastmb_epi64(__mmask8);
extern __m128i   __cdecl _mm_broadcastmw_epi32(__mmask16);
extern __m256i   __cdecl _mm256_broadcastmw_epi32(__mmask16);
extern __m128i   __cdecl _mm_mask_broadcastq_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcastq_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_broadcastq_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcastq_epi64(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_broadcastsd_pd(__m256d, __mmask8, __m128d);
extern __m256d   __cdecl _mm256_maskz_broadcastsd_pd(__mmask8, __m128d);
extern __m128    __cdecl _mm_mask_broadcastss_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_broadcastss_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_broadcastss_ps(__m256, __mmask8, __m128);
extern __m256    __cdecl _mm256_maskz_broadcastss_ps(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_broadcastw_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcastw_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_broadcastw_epi16(__m256i, __mmask16, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcastw_epi16(__mmask16, __m128i);
extern __mmask8  __cdecl _mm_cmp_epi16_mask(__m128i, __m128i, const int);
extern __mmask8  __cdecl _mm_mask_cmp_epi16_mask(__mmask8, __m128i, __m128i, const int);
extern __mmask16 __cdecl _mm256_cmp_epi16_mask(__m256i, __m256i, const int);
extern __mmask16 __cdecl _mm256_mask_cmp_epi16_mask(__mmask16, __m256i, __m256i, const int);
extern __mmask8  __cdecl _mm_cmp_epi32_mask(__m128i, __m128i, int);
extern __mmask8  __cdecl _mm_mask_cmp_epi32_mask(__mmask8, __m128i, __m128i, int);
extern __mmask8  __cdecl _mm256_cmp_epi32_mask(__m256i, __m256i, int);
extern __mmask8  __cdecl _mm256_mask_cmp_epi32_mask(__mmask8, __m256i, __m256i, int);
extern __mmask8  __cdecl _mm_cmp_epi64_mask(__m128i, __m128i, int);
extern __mmask8  __cdecl _mm_mask_cmp_epi64_mask(__mmask8, __m128i, __m128i, int);
extern __mmask8  __cdecl _mm256_cmp_epi64_mask(__m256i, __m256i, int);
extern __mmask8  __cdecl _mm256_mask_cmp_epi64_mask(__mmask8, __m256i, __m256i, int);
extern __mmask16 __cdecl _mm_cmp_epi8_mask(__m128i, __m128i, const int);
extern __mmask16 __cdecl _mm_mask_cmp_epi8_mask(__mmask16, __m128i, __m128i, const int);
extern __mmask32 __cdecl _mm256_cmp_epi8_mask(__m256i, __m256i, const int);
extern __mmask32 __cdecl _mm256_mask_cmp_epi8_mask(__mmask32, __m256i, __m256i, const int);
extern __mmask8  __cdecl _mm_cmp_epu16_mask(__m128i, __m128i, const int);
extern __mmask8  __cdecl _mm_mask_cmp_epu16_mask(__mmask8, __m128i, __m128i, const int);
extern __mmask16 __cdecl _mm256_cmp_epu16_mask(__m256i, __m256i, const int);
extern __mmask16 __cdecl _mm256_mask_cmp_epu16_mask(__mmask16, __m256i, __m256i, const int);
extern __mmask8  __cdecl _mm_cmp_epu32_mask(__m128i, __m128i, int);
extern __mmask8  __cdecl _mm_mask_cmp_epu32_mask(__mmask8, __m128i, __m128i, int);
extern __mmask8  __cdecl _mm256_cmp_epu32_mask(__m256i, __m256i, int);
extern __mmask8  __cdecl _mm256_mask_cmp_epu32_mask(__mmask8, __m256i, __m256i, int);
extern __mmask8  __cdecl _mm_cmp_epu64_mask(__m128i, __m128i, int);
extern __mmask8  __cdecl _mm_mask_cmp_epu64_mask(__mmask8, __m128i, __m128i, int);
extern __mmask8  __cdecl _mm256_cmp_epu64_mask(__m256i, __m256i, int);
extern __mmask8  __cdecl _mm256_mask_cmp_epu64_mask(__mmask8, __m256i, __m256i, int);
extern __mmask16 __cdecl _mm_cmp_epu8_mask(__m128i, __m128i, const int);
extern __mmask16 __cdecl _mm_mask_cmp_epu8_mask(__mmask16, __m128i, __m128i, const int);
extern __mmask32 __cdecl _mm256_cmp_epu8_mask(__m256i, __m256i, const int);
extern __mmask32 __cdecl _mm256_mask_cmp_epu8_mask(__mmask32, __m256i, __m256i, const int);
extern __mmask8  __cdecl _mm_cmp_pd_mask(__m128d, __m128d, const int);
extern __mmask8  __cdecl _mm_mask_cmp_pd_mask(__mmask8, __m128d, __m128d, const int);
extern __mmask8  __cdecl _mm256_cmp_pd_mask(__m256d, __m256d, const int);
extern __mmask8  __cdecl _mm256_mask_cmp_pd_mask(__mmask8, __m256d, __m256d, const int);
extern __mmask8  __cdecl _mm_cmp_ps_mask(__m128, __m128, const int);
extern __mmask8  __cdecl _mm_mask_cmp_ps_mask(__mmask8, __m128, __m128, const int);
extern __mmask8  __cdecl _mm256_cmp_ps_mask(__m256, __m256, const int);
extern __mmask8  __cdecl _mm256_mask_cmp_ps_mask(__mmask8, __m256, __m256, const int);
extern __m128i   __cdecl _mm_mask_compress_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_compress_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_compress_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_compress_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_compress_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_compress_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_compress_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_compress_epi64(__mmask8, __m256i);
extern __m128d   __cdecl _mm_mask_compress_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_compress_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_compress_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_compress_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_compress_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_compress_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_compress_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_compress_ps(__mmask8, __m256);
extern void      __cdecl _mm_mask_compressstoreu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_compressstoreu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_compressstoreu_epi64(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_compressstoreu_epi64(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_compressstoreu_pd(void*, __mmask8, __m128d);
extern void      __cdecl _mm256_mask_compressstoreu_pd(void*, __mmask8, __m256d);
extern void      __cdecl _mm_mask_compressstoreu_ps(void*, __mmask8, __m128);
extern void      __cdecl _mm256_mask_compressstoreu_ps(void*, __mmask8, __m256);
extern __m128i   __cdecl _mm_conflict_epi32(__m128i);
extern __m128i   __cdecl _mm_mask_conflict_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_conflict_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_conflict_epi32(__m256i);
extern __m256i   __cdecl _mm256_mask_conflict_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_conflict_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_conflict_epi64(__m128i);
extern __m128i   __cdecl _mm_mask_conflict_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_conflict_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_conflict_epi64(__m256i);
extern __m256i   __cdecl _mm256_mask_conflict_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_conflict_epi64(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvt_roundps_ph(__m128i, __mmask8, __m128, int);
extern __m128i   __cdecl _mm_maskz_cvt_roundps_ph(__mmask8, __m128, int);
extern __m128i   __cdecl _mm256_mask_cvt_roundps_ph(__m128i, __mmask8, __m256, int);
extern __m128i   __cdecl _mm256_maskz_cvt_roundps_ph(__mmask8, __m256, int);
extern __m128i   __cdecl _mm_mask_cvtepi16_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi16_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi16_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi16_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi16_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi16_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi16_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi16_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi16_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi16_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi16_epi8(__m128i, __mmask16, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi16_epi8(__mmask16, __m256i);
extern void      __cdecl _mm_mask_cvtepi16_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi16_storeu_epi8(void*, __mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi32_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi32_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi32_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi32_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi32_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi32_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi32_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi32_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi32_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi32_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi32_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi32_epi8(__mmask8, __m256i);
extern __m128d   __cdecl _mm_mask_cvtepi32_pd(__m128d, __mmask8, __m128i);
extern __m128d   __cdecl _mm_maskz_cvtepi32_pd(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_cvtepi32_pd(__m256d, __mmask8, __m128i);
extern __m256d   __cdecl _mm256_maskz_cvtepi32_pd(__mmask8, __m128i);
extern __m128    __cdecl _mm_mask_cvtepi32_ps(__m128, __mmask8, __m128i);
extern __m128    __cdecl _mm_maskz_cvtepi32_ps(__mmask8, __m128i);
extern __m256    __cdecl _mm256_mask_cvtepi32_ps(__m256, __mmask8, __m256i);
extern __m256    __cdecl _mm256_maskz_cvtepi32_ps(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi32_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi32_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi32_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi32_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi64_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi64_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi64_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi64_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi64_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi64_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi64_epi32(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi64_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi64_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi64_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi64_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi64_epi8(__mmask8, __m256i);
extern __m128d   __cdecl _mm_mask_cvtepi64_pd(__m128d, __mmask8, __m128i);
extern __m128d   __cdecl _mm_maskz_cvtepi64_pd(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_cvtepi64_pd(__m256d, __mmask8, __m256i);
extern __m256d   __cdecl _mm256_maskz_cvtepi64_pd(__mmask8, __m256i);
extern __m128    __cdecl _mm_mask_cvtepi64_ps(__m128, __mmask8, __m128i);
extern __m128    __cdecl _mm_maskz_cvtepi64_ps(__mmask8, __m128i);
extern __m128    __cdecl _mm256_mask_cvtepi64_ps(__m128, __mmask8, __m256i);
extern __m128    __cdecl _mm256_maskz_cvtepi64_ps(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi64_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi64_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi64_storeu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi64_storeu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi64_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi64_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi8_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi8_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi8_epi16(__m256i, __mmask16, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi8_epi16(__mmask16, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi8_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi8_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi8_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi8_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi8_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi8_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi8_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi8_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu16_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu16_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu16_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu16_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu16_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu16_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu16_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu16_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu32_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu32_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu32_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu32_epi64(__mmask8, __m128i);
extern __m128d   __cdecl _mm_mask_cvtepu32_pd(__m128d, __mmask8, __m128i);
extern __m128d   __cdecl _mm_maskz_cvtepu32_pd(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_cvtepu32_pd(__m256d, __mmask8, __m128i);
extern __m256d   __cdecl _mm256_maskz_cvtepu32_pd(__mmask8, __m128i);
extern __m128d   __cdecl _mm_mask_cvtepu64_pd(__m128d, __mmask8, __m128i);
extern __m128d   __cdecl _mm_maskz_cvtepu64_pd(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_cvtepu64_pd(__m256d, __mmask8, __m256i);
extern __m256d   __cdecl _mm256_maskz_cvtepu64_pd(__mmask8, __m256i);
extern __m128    __cdecl _mm_mask_cvtepu64_ps(__m128, __mmask8, __m128i);
extern __m128    __cdecl _mm_maskz_cvtepu64_ps(__mmask8, __m128i);
extern __m128    __cdecl _mm256_mask_cvtepu64_ps(__m128, __mmask8, __m256i);
extern __m128    __cdecl _mm256_maskz_cvtepu64_ps(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepu8_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu8_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu8_epi16(__m256i, __mmask16, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu8_epi16(__mmask16, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu8_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu8_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu8_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu8_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu8_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu8_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu8_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu8_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtpd_epi32(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvtpd_epi32(__mmask8, __m128d);
extern __m128i   __cdecl _mm256_mask_cvtpd_epi32(__m128i, __mmask8, __m256d);
extern __m128i   __cdecl _mm256_maskz_cvtpd_epi32(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvtpd_epi64(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvtpd_epi64(__mmask8, __m128d);
extern __m256i   __cdecl _mm256_mask_cvtpd_epi64(__m256i, __mmask8, __m256d);
extern __m256i   __cdecl _mm256_maskz_cvtpd_epi64(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvtpd_epu32(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvtpd_epu32(__mmask8, __m128d);
extern __m128i   __cdecl _mm256_mask_cvtpd_epu32(__m128i, __mmask8, __m256d);
extern __m128i   __cdecl _mm256_maskz_cvtpd_epu32(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvtpd_epu64(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvtpd_epu64(__mmask8, __m128d);
extern __m256i   __cdecl _mm256_mask_cvtpd_epu64(__m256i, __mmask8, __m256d);
extern __m256i   __cdecl _mm256_maskz_cvtpd_epu64(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_cvtpd_ps(__m128, __mmask8, __m128d);
extern __m128    __cdecl _mm_maskz_cvtpd_ps(__mmask8, __m128d);
extern __m128    __cdecl _mm256_mask_cvtpd_ps(__m128, __mmask8, __m256d);
extern __m128    __cdecl _mm256_maskz_cvtpd_ps(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_cvtph_ps(__m128, __mmask8, __m128i);
extern __m128    __cdecl _mm_maskz_cvtph_ps(__mmask8, __m128i);
extern __m256    __cdecl _mm256_mask_cvtph_ps(__m256, __mmask8, __m128i);
extern __m256    __cdecl _mm256_maskz_cvtph_ps(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtps_epi32(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvtps_epi32(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvtps_epi32(__m256i, __mmask8, __m256);
extern __m256i   __cdecl _mm256_maskz_cvtps_epi32(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_cvtps_epi64(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvtps_epi64(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvtps_epi64(__m256i, __mmask8, __m128);
extern __m256i   __cdecl _mm256_maskz_cvtps_epi64(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_cvtps_epu32(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvtps_epu32(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvtps_epu32(__m256i, __mmask8, __m256);
extern __m256i   __cdecl _mm256_maskz_cvtps_epu32(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_cvtps_epu64(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvtps_epu64(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvtps_epu64(__m256i, __mmask8, __m128);
extern __m256i   __cdecl _mm256_maskz_cvtps_epu64(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_cvtsepi16_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi16_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi16_epi8(__m128i, __mmask16, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi16_epi8(__mmask16, __m256i);
extern void      __cdecl _mm_mask_cvtsepi16_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi16_storeu_epi8(void*, __mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi32_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi32_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi32_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi32_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi32_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi32_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi32_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi32_epi8(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi32_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi32_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi32_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi32_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi64_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi64_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi64_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi64_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi64_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi64_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi64_epi32(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi64_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi64_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi64_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi64_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi64_epi8(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi64_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi64_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi64_storeu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi64_storeu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi64_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi64_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvttpd_epi32(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvttpd_epi32(__mmask8, __m128d);
extern __m128i   __cdecl _mm256_mask_cvttpd_epi32(__m128i, __mmask8, __m256d);
extern __m128i   __cdecl _mm256_maskz_cvttpd_epi32(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvttpd_epi64(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvttpd_epi64(__mmask8, __m128d);
extern __m256i   __cdecl _mm256_mask_cvttpd_epi64(__m256i, __mmask8, __m256d);
extern __m256i   __cdecl _mm256_maskz_cvttpd_epi64(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvttpd_epu32(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvttpd_epu32(__mmask8, __m128d);
extern __m128i   __cdecl _mm256_mask_cvttpd_epu32(__m128i, __mmask8, __m256d);
extern __m128i   __cdecl _mm256_maskz_cvttpd_epu32(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvttpd_epu64(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvttpd_epu64(__mmask8, __m128d);
extern __m256i   __cdecl _mm256_mask_cvttpd_epu64(__m256i, __mmask8, __m256d);
extern __m256i   __cdecl _mm256_maskz_cvttpd_epu64(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvttps_epi32(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvttps_epi32(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvttps_epi32(__m256i, __mmask8, __m256);
extern __m256i   __cdecl _mm256_maskz_cvttps_epi32(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_cvttps_epi64(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvttps_epi64(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvttps_epi64(__m256i, __mmask8, __m128);
extern __m256i   __cdecl _mm256_maskz_cvttps_epi64(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_cvttps_epu32(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvttps_epu32(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvttps_epu32(__m256i, __mmask8, __m256);
extern __m256i   __cdecl _mm256_maskz_cvttps_epu32(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_cvttps_epu64(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvttps_epu64(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvttps_epu64(__m256i, __mmask8, __m128);
extern __m256i   __cdecl _mm256_maskz_cvttps_epu64(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_cvtusepi16_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi16_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi16_epi8(__m128i, __mmask16, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi16_epi8(__mmask16, __m256i);
extern void      __cdecl _mm_mask_cvtusepi16_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi16_storeu_epi8(void*, __mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi32_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi32_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi32_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi32_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi32_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi32_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi32_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi32_epi8(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi32_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi32_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi32_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi32_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi64_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi64_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi64_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi64_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi64_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi64_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi64_epi32(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi64_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi64_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi64_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi64_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi64_epi8(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi64_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi64_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi64_storeu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi64_storeu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi64_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi64_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_dbsad_epu8(__m128i, __m128i, int);
extern __m128i   __cdecl _mm_mask_dbsad_epu8(__m128i, __mmask8, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_maskz_dbsad_epu8(__mmask8, __m128i, __m128i, int);
extern __m256i   __cdecl _mm256_dbsad_epu8(__m256i, __m256i, int);
extern __m256i   __cdecl _mm256_mask_dbsad_epu8(__m256i, __mmask16, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_dbsad_epu8(__mmask16, __m256i, __m256i, int);
extern __m128d   __cdecl _mm_mask_div_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_div_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_div_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_div_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_div_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_div_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_div_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_div_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_expand_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_expand_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_expand_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_expand_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_expand_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_expand_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_expand_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_expand_epi64(__mmask8, __m256i);
extern __m128d   __cdecl _mm_mask_expand_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_expand_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_expand_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_expand_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_expand_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_expand_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_expand_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_expand_ps(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_expandloadu_epi32(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_expandloadu_epi32(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_expandloadu_epi32(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_expandloadu_epi32(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_expandloadu_epi64(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_expandloadu_epi64(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_expandloadu_epi64(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_expandloadu_epi64(__mmask8, void const*);
extern __m128d   __cdecl _mm_mask_expandloadu_pd(__m128d, __mmask8, void const*);
extern __m128d   __cdecl _mm_maskz_expandloadu_pd(__mmask8, void const*);
extern __m256d   __cdecl _mm256_mask_expandloadu_pd(__m256d, __mmask8, void const*);
extern __m256d   __cdecl _mm256_maskz_expandloadu_pd(__mmask8, void const*);
extern __m128    __cdecl _mm_mask_expandloadu_ps(__m128, __mmask8, void const*);
extern __m128    __cdecl _mm_maskz_expandloadu_ps(__mmask8, void const*);
extern __m256    __cdecl _mm256_mask_expandloadu_ps(__m256, __mmask8, void const*);
extern __m256    __cdecl _mm256_maskz_expandloadu_ps(__mmask8, void const*);
extern __m128    __cdecl _mm256_extractf32x4_ps(__m256, int);
extern __m128    __cdecl _mm256_mask_extractf32x4_ps(__m128, __mmask8, __m256, int);
extern __m128    __cdecl _mm256_maskz_extractf32x4_ps(__mmask8, __m256, int);
extern __m128d   __cdecl _mm256_extractf64x2_pd(__m256d, int);
extern __m128d   __cdecl _mm256_mask_extractf64x2_pd(__m128d, __mmask8, __m256d, int);
extern __m128d   __cdecl _mm256_maskz_extractf64x2_pd(__mmask8, __m256d, int);
extern __m128i   __cdecl _mm256_extracti32x4_epi32(__m256i, int);
extern __m128i   __cdecl _mm256_mask_extracti32x4_epi32(__m128i, __mmask8, __m256i, int);
extern __m128i   __cdecl _mm256_maskz_extracti32x4_epi32(__mmask8, __m256i, int);
extern __m128i   __cdecl _mm256_extracti64x2_epi64(__m256i, int);
extern __m128i   __cdecl _mm256_mask_extracti64x2_epi64(__m128i, __mmask8, __m256i, int);
extern __m128i   __cdecl _mm256_maskz_extracti64x2_epi64(__mmask8, __m256i, int);
extern __m128d   __cdecl _mm_fixupimm_pd(__m128d, __m128d, __m128i, const int);
extern __m128d   __cdecl _mm_mask_fixupimm_pd(__m128d, __mmask8, __m128d, __m128i, const int);
extern __m128d   __cdecl _mm_maskz_fixupimm_pd(__mmask8, __m128d, __m128d, __m128i, const int);
extern __m256d   __cdecl _mm256_fixupimm_pd(__m256d, __m256d, __m256i, const int);
extern __m256d   __cdecl _mm256_mask_fixupimm_pd(__m256d, __mmask8, __m256d, __m256i, const int);
extern __m256d   __cdecl _mm256_maskz_fixupimm_pd(__mmask8, __m256d, __m256d, __m256i, const int);
extern __m128    __cdecl _mm_fixupimm_ps(__m128, __m128, __m128i, const int);
extern __m128    __cdecl _mm_mask_fixupimm_ps(__m128, __mmask8, __m128, __m128i, const int);
extern __m128    __cdecl _mm_maskz_fixupimm_ps(__mmask8, __m128, __m128, __m128i, const int);
extern __m256    __cdecl _mm256_fixupimm_ps(__m256, __m256, __m256i, const int);
extern __m256    __cdecl _mm256_mask_fixupimm_ps(__m256, __mmask8, __m256, __m256i, const int);
extern __m256    __cdecl _mm256_maskz_fixupimm_ps(__mmask8, __m256, __m256, __m256i, const int);
extern __m128d   __cdecl _mm_mask_fmadd_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmadd_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmadd_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fmadd_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fmadd_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fmadd_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fmadd_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmadd_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmadd_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fmadd_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fmadd_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fmadd_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fmaddsub_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmaddsub_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmaddsub_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fmaddsub_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fmaddsub_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fmaddsub_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fmaddsub_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmaddsub_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmaddsub_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fmaddsub_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fmaddsub_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fmaddsub_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fmsub_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmsub_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmsub_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fmsub_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fmsub_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fmsub_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fmsub_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmsub_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmsub_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fmsub_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fmsub_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fmsub_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fmsubadd_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmsubadd_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmsubadd_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fmsubadd_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fmsubadd_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fmsubadd_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fmsubadd_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmsubadd_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmsubadd_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fmsubadd_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fmsubadd_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fmsubadd_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fnmadd_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fnmadd_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fnmadd_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fnmadd_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fnmadd_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fnmadd_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fnmadd_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fnmadd_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fnmadd_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fnmadd_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fnmadd_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fnmadd_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fnmsub_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fnmsub_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fnmsub_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fnmsub_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fnmsub_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fnmsub_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fnmsub_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fnmsub_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fnmsub_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fnmsub_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fnmsub_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fnmsub_ps(__mmask8, __m256, __m256, __m256);
extern __mmask8  __cdecl _mm_fpclass_pd_mask(__m128d, int);
extern __mmask8  __cdecl _mm_mask_fpclass_pd_mask(__mmask8, __m128d, int);
extern __mmask8  __cdecl _mm256_fpclass_pd_mask(__m256d, int);
extern __mmask8  __cdecl _mm256_mask_fpclass_pd_mask(__mmask8, __m256d, int);
extern __mmask8  __cdecl _mm_fpclass_ps_mask(__m128, int);
extern __mmask8  __cdecl _mm_mask_fpclass_ps_mask(__mmask8, __m128, int);
extern __mmask8  __cdecl _mm256_fpclass_ps_mask(__m256, int);
extern __mmask8  __cdecl _mm256_mask_fpclass_ps_mask(__mmask8, __m256, int);
extern __m128d   __cdecl _mm_getexp_pd(__m128d);
extern __m128d   __cdecl _mm_mask_getexp_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_getexp_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_getexp_pd(__m256d);
extern __m256d   __cdecl _mm256_mask_getexp_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_getexp_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_getexp_ps(__m128);
extern __m128    __cdecl _mm_mask_getexp_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_getexp_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_getexp_ps(__m256);
extern __m256    __cdecl _mm256_mask_getexp_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_getexp_ps(__mmask8, __m256);
extern __m128d   __cdecl _mm_getmant_pd(__m128d, int, int);
extern __m128d   __cdecl _mm_mask_getmant_pd(__m128d, __mmask8, __m128d, int, int);
extern __m128d   __cdecl _mm_maskz_getmant_pd(__mmask8, __m128d, int, int);
extern __m256d   __cdecl _mm256_getmant_pd(__m256d, int, int);
extern __m256d   __cdecl _mm256_mask_getmant_pd(__m256d, __mmask8, __m256d, int, int);
extern __m256d   __cdecl _mm256_maskz_getmant_pd(__mmask8, __m256d, int, int);
extern __m128    __cdecl _mm_getmant_ps(__m128, int, int);
extern __m128    __cdecl _mm_mask_getmant_ps(__m128, __mmask8, __m128, int, int);
extern __m128    __cdecl _mm_maskz_getmant_ps(__mmask8, __m128, int, int);
extern __m256    __cdecl _mm256_getmant_ps(__m256, int, int);
extern __m256    __cdecl _mm256_mask_getmant_ps(__m256, __mmask8, __m256, int, int);
extern __m256    __cdecl _mm256_maskz_getmant_ps(__mmask8, __m256, int, int);
extern __m128i   __cdecl _mm_mmask_i32gather_epi32(__m128i, __mmask8, __m128i, void const*, const int);
extern __m256i   __cdecl _mm256_mmask_i32gather_epi32(__m256i, __mmask8, __m256i, void const*, const int);
extern __m128i   __cdecl _mm_mmask_i32gather_epi64(__m128i, __mmask8, __m128i, void const*, const int);
extern __m256i   __cdecl _mm256_mmask_i32gather_epi64(__m256i, __mmask8, __m128i, void const*, const int);
extern __m128d   __cdecl _mm_mmask_i32gather_pd(__m128d, __mmask8, __m128i, void const*, const int);
extern __m256d   __cdecl _mm256_mmask_i32gather_pd(__m256d, __mmask8, __m128i, void const*, const int);
extern __m128    __cdecl _mm_mmask_i32gather_ps(__m128, __mmask8, __m128i, void const*, const int);
extern __m256    __cdecl _mm256_mmask_i32gather_ps(__m256, __mmask8, __m256i, void const*, const int);
extern void      __cdecl _mm_i32scatter_epi32(void*, __m128i, __m128i, const int);
extern void      __cdecl _mm_mask_i32scatter_epi32(void*, __mmask8, __m128i, __m128i, const int);
extern void      __cdecl _mm256_i32scatter_epi32(void*, __m256i, __m256i, const int);
extern void      __cdecl _mm256_mask_i32scatter_epi32(void*, __mmask8, __m256i, __m256i, const int);
extern void      __cdecl _mm_i32scatter_epi64(void*, __m128i, __m128i, const int);
extern void      __cdecl _mm_mask_i32scatter_epi64(void*, __mmask8, __m128i, __m128i, const int);
extern void      __cdecl _mm256_i32scatter_epi64(void*, __m128i, __m256i, const int);
extern void      __cdecl _mm256_mask_i32scatter_epi64(void*, __mmask8, __m128i, __m256i, const int);
extern void      __cdecl _mm_i32scatter_pd(void*, __m128i, __m128d, const int);
extern void      __cdecl _mm_mask_i32scatter_pd(void*, __mmask8, __m128i, __m128d, const int);
extern void      __cdecl _mm256_i32scatter_pd(void*, __m128i, __m256d, const int);
extern void      __cdecl _mm256_mask_i32scatter_pd(void*, __mmask8, __m128i, __m256d, const int);
extern void      __cdecl _mm_i32scatter_ps(void*, __m128i, __m128, const int);
extern void      __cdecl _mm_mask_i32scatter_ps(void*, __mmask8, __m128i, __m128, const int);
extern void      __cdecl _mm256_i32scatter_ps(void*, __m256i, __m256, const int);
extern void      __cdecl _mm256_mask_i32scatter_ps(void*, __mmask8, __m256i, __m256, const int);
extern __m128i   __cdecl _mm_mmask_i64gather_epi32(__m128i, __mmask8, __m128i, void const*, const int);
extern __m128i   __cdecl _mm256_mmask_i64gather_epi32(__m128i, __mmask8, __m256i, void const*, const int);
extern __m128i   __cdecl _mm_mmask_i64gather_epi64(__m128i, __mmask8, __m128i, void const*, const int);
extern __m256i   __cdecl _mm256_mmask_i64gather_epi64(__m256i, __mmask8, __m256i, void const*, const int);
extern __m128d   __cdecl _mm_mmask_i64gather_pd(__m128d, __mmask8, __m128i, void const*, const int);
extern __m256d   __cdecl _mm256_mmask_i64gather_pd(__m256d, __mmask8, __m256i, void const*, const int);
extern __m128    __cdecl _mm_mmask_i64gather_ps(__m128, __mmask8, __m128i, void const*, const int);
extern __m128    __cdecl _mm256_mmask_i64gather_ps(__m128, __mmask8, __m256i, void const*, const int);
extern void      __cdecl _mm_i64scatter_epi32(void*, __m128i, __m128i, const int);
extern void      __cdecl _mm_mask_i64scatter_epi32(void*, __mmask8, __m128i, __m128i, const int);
extern void      __cdecl _mm256_i64scatter_epi32(void*, __m256i, __m128i, const int);
extern void      __cdecl _mm256_mask_i64scatter_epi32(void*, __mmask8, __m256i, __m128i, const int);
extern void      __cdecl _mm_i64scatter_epi64(void*, __m128i, __m128i, const int);
extern void      __cdecl _mm_mask_i64scatter_epi64(void*, __mmask8, __m128i, __m128i, const int);
extern void      __cdecl _mm256_i64scatter_epi64(void*, __m256i, __m256i, const int);
extern void      __cdecl _mm256_mask_i64scatter_epi64(void*, __mmask8, __m256i, __m256i, const int);
extern void      __cdecl _mm_i64scatter_pd(void*, __m128i, __m128d, const int);
extern void      __cdecl _mm_mask_i64scatter_pd(void*, __mmask8, __m128i, __m128d, const int);
extern void      __cdecl _mm256_i64scatter_pd(void*, __m256i, __m256d, const int);
extern void      __cdecl _mm256_mask_i64scatter_pd(void*, __mmask8, __m256i, __m256d, const int);
extern void      __cdecl _mm_i64scatter_ps(void*, __m128i, __m128, const int);
extern void      __cdecl _mm_mask_i64scatter_ps(void*, __mmask8, __m128i, __m128, const int);
extern void      __cdecl _mm256_i64scatter_ps(void*, __m256i, __m128, const int);
extern void      __cdecl _mm256_mask_i64scatter_ps(void*, __mmask8, __m256i, __m128, const int);
extern __m256    __cdecl _mm256_insertf32x4(__m256, __m128, int);
extern __m256    __cdecl _mm256_mask_insertf32x4(__m256, __mmask8, __m256, __m128, int);
extern __m256    __cdecl _mm256_maskz_insertf32x4(__mmask8, __m256, __m128, int);
extern __m256d   __cdecl _mm256_insertf64x2(__m256d, __m128d, int);
extern __m256d   __cdecl _mm256_mask_insertf64x2(__m256d, __mmask8, __m256d, __m128d, int);
extern __m256d   __cdecl _mm256_maskz_insertf64x2(__mmask8, __m256d, __m128d, int);
extern __m256i   __cdecl _mm256_inserti32x4(__m256i, __m128i, int);
extern __m256i   __cdecl _mm256_mask_inserti32x4(__m256i, __mmask8, __m256i, __m128i, int);
extern __m256i   __cdecl _mm256_maskz_inserti32x4(__mmask8, __m256i, __m128i, int);
extern __m256i   __cdecl _mm256_inserti64x2(__m256i, __m128i, int);
extern __m256i   __cdecl _mm256_mask_inserti64x2(__m256i, __mmask8, __m256i, __m128i, int);
extern __m256i   __cdecl _mm256_maskz_inserti64x2(__mmask8, __m256i, __m128i, int);
extern __m128i   __cdecl _mm_mask_load_epi32(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_load_epi32(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_load_epi32(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_load_epi32(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_load_epi64(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_load_epi64(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_load_epi64(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_load_epi64(__mmask8, void const*);
extern __m128d   __cdecl _mm_mask_load_pd(__m128d, __mmask8, void const*);
extern __m128d   __cdecl _mm_maskz_load_pd(__mmask8, void const*);
extern __m256d   __cdecl _mm256_mask_load_pd(__m256d, __mmask8, void const*);
extern __m256d   __cdecl _mm256_maskz_load_pd(__mmask8, void const*);
extern __m128    __cdecl _mm_mask_load_ps(__m128, __mmask8, void const*);
extern __m128    __cdecl _mm_maskz_load_ps(__mmask8, void const*);
extern __m256    __cdecl _mm256_mask_load_ps(__m256, __mmask8, void const*);
extern __m256    __cdecl _mm256_maskz_load_ps(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_loadu_epi16(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_loadu_epi16(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_loadu_epi16(__m256i, __mmask16, void const*);
extern __m256i   __cdecl _mm256_maskz_loadu_epi16(__mmask16, void const*);
extern __m128i   __cdecl _mm_mask_loadu_epi32(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_loadu_epi32(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_loadu_epi32(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_loadu_epi32(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_loadu_epi64(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_loadu_epi64(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_loadu_epi64(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_loadu_epi64(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_loadu_epi8(__m128i, __mmask16, void const*);
extern __m128i   __cdecl _mm_maskz_loadu_epi8(__mmask16, void const*);
extern __m256i   __cdecl _mm256_mask_loadu_epi8(__m256i, __mmask32, void const*);
extern __m256i   __cdecl _mm256_maskz_loadu_epi8(__mmask32, void const*);
extern __m128d   __cdecl _mm_mask_loadu_pd(__m128d, __mmask8, void const*);
extern __m128d   __cdecl _mm_maskz_loadu_pd(__mmask8, void const*);
extern __m256d   __cdecl _mm256_mask_loadu_pd(__m256d, __mmask8, void const*);
extern __m256d   __cdecl _mm256_maskz_loadu_pd(__mmask8, void const*);
extern __m128    __cdecl _mm_mask_loadu_ps(__m128, __mmask8, void const*);
extern __m128    __cdecl _mm_maskz_loadu_ps(__mmask8, void const*);
extern __m256    __cdecl _mm256_mask_loadu_ps(__m256, __mmask8, void const*);
extern __m256    __cdecl _mm256_maskz_loadu_ps(__mmask8, void const*);
extern __m128i   __cdecl _mm_lzcnt_epi32(__m128i);
extern __m128i   __cdecl _mm_mask_lzcnt_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_lzcnt_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_lzcnt_epi32(__m256i);
extern __m256i   __cdecl _mm256_mask_lzcnt_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_lzcnt_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_lzcnt_epi64(__m128i);
extern __m128i   __cdecl _mm_mask_lzcnt_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_lzcnt_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_lzcnt_epi64(__m256i);
extern __m256i   __cdecl _mm256_mask_lzcnt_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_lzcnt_epi64(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_madd_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_madd_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_madd_epi16(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_madd_epi16(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_maddubs_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_maddubs_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_maddubs_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_maddubs_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_max_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_max_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epi8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epu32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epu32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epu32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epu32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epu64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epu64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_max_epu64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epu64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epu64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_max_epu64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epu8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_max_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_max_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_max_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_max_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_max_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_max_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_max_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_max_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_min_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_min_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_min_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epi8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epu32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epu32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epu32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epu32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epu64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epu64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_min_epu64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epu64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epu64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_min_epu64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epu8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_min_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_min_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_min_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_min_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_min_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_min_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_min_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_min_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_mov_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_mov_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_mov_epi16(__m256i, __mmask16, __m256i);
extern __m256i   __cdecl _mm256_maskz_mov_epi16(__mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_mov_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_mov_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_mov_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_mov_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_mov_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_mov_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_mov_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_mov_epi64(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_mov_epi8(__m128i, __mmask16, __m128i);
extern __m128i   __cdecl _mm_maskz_mov_epi8(__mmask16, __m128i);
extern __m256i   __cdecl _mm256_mask_mov_epi8(__m256i, __mmask32, __m256i);
extern __m256i   __cdecl _mm256_maskz_mov_epi8(__mmask32, __m256i);
extern __m128d   __cdecl _mm_mask_mov_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_mov_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_mov_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_mov_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_mov_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_mov_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_mov_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_mov_ps(__mmask8, __m256);
extern __m128d   __cdecl _mm_mask_movedup_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_movedup_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_movedup_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_movedup_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_movehdup_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_movehdup_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_movehdup_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_movehdup_ps(__mmask8, __m256);
extern __m128    __cdecl _mm_mask_moveldup_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_moveldup_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_moveldup_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_moveldup_ps(__mmask8, __m256);
extern __mmask8  __cdecl _mm_movepi16_mask(__m128i);
extern __mmask16 __cdecl _mm256_movepi16_mask(__m256i);
extern __mmask8  __cdecl _mm_movepi32_mask(__m128i);
extern __mmask8  __cdecl _mm256_movepi32_mask(__m256i);
extern __mmask8  __cdecl _mm_movepi64_mask(__m128i);
extern __mmask8  __cdecl _mm256_movepi64_mask(__m256i);
extern __mmask16 __cdecl _mm_movepi8_mask(__m128i);
extern __mmask32 __cdecl _mm256_movepi8_mask(__m256i);
extern __m128i   __cdecl _mm_movm_epi16(__mmask8);
extern __m256i   __cdecl _mm256_movm_epi16(__mmask16);
extern __m128i   __cdecl _mm_movm_epi32(__mmask8);
extern __m256i   __cdecl _mm256_movm_epi32(__mmask8);
extern __m128i   __cdecl _mm_movm_epi64(__mmask8);
extern __m256i   __cdecl _mm256_movm_epi64(__mmask8);
extern __m128i   __cdecl _mm_movm_epi8(__mmask16);
extern __m256i   __cdecl _mm256_movm_epi8(__mmask32);
extern __m128i   __cdecl _mm_mask_mul_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mul_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mul_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mul_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mul_epu32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mul_epu32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mul_epu32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mul_epu32(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_mul_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_mul_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_mul_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_mul_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_mul_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_mul_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_mul_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_mul_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_mulhi_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mulhi_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mulhi_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mulhi_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mulhi_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mulhi_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mulhi_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mulhi_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mulhrs_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mulhrs_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mulhrs_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mulhrs_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mullo_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mullo_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mullo_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mullo_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mullo_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mullo_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mullo_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mullo_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mullo_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mullo_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_mullo_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mullo_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mullo_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_mullo_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_or_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_or_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_or_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_or_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_or_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_or_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_or_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_or_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_or_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_or_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_or_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_or_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_or_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_or_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_or_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_or_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_packs_epi16(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_packs_epi16(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_packs_epi16(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_packs_epi16(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_packs_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_packs_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_packs_epi32(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_packs_epi32(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_packus_epi16(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_packus_epi16(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_packus_epi16(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_packus_epi16(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_packus_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_packus_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_packus_epi32(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_packus_epi32(__mmask16, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_permute_pd(__m128d, __mmask8, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_permute_pd(__mmask8, __m128d, const int);
extern __m256d   __cdecl _mm256_mask_permute_pd(__m256d, __mmask8, __m256d, const int);
extern __m256d   __cdecl _mm256_maskz_permute_pd(__mmask8, __m256d, const int);
extern __m128    __cdecl _mm_mask_permute_ps(__m128, __mmask8, __m128, const int);
extern __m128    __cdecl _mm_maskz_permute_ps(__mmask8, __m128, const int);
extern __m256    __cdecl _mm256_mask_permute_ps(__m256, __mmask8, __m256, const int);
extern __m256    __cdecl _mm256_maskz_permute_ps(__mmask8, __m256, const int);
extern __m128d   __cdecl _mm_mask_permutevar_pd(__m128d, __mmask8, __m128d, __m128i);
extern __m128d   __cdecl _mm_maskz_permutevar_pd(__mmask8, __m128d, __m128i);
extern __m256d   __cdecl _mm256_mask_permutevar_pd(__m256d, __mmask8, __m256d, __m256i);
extern __m256d   __cdecl _mm256_maskz_permutevar_pd(__mmask8, __m256d, __m256i);
extern __m128    __cdecl _mm_mask_permutevar_ps(__m128, __mmask8, __m128, __m128i);
extern __m128    __cdecl _mm_maskz_permutevar_ps(__mmask8, __m128, __m128i);
extern __m256    __cdecl _mm256_mask_permutevar_ps(__m256, __mmask8, __m256, __m256i);
extern __m256    __cdecl _mm256_maskz_permutevar_ps(__mmask8, __m256, __m256i);
extern __m256i   __cdecl _mm256_mask_permutex_epi64(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_permutex_epi64(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_permutex_epi64(__m256i, const int);
extern __m256d   __cdecl _mm256_mask_permutex_pd(__m256d, __mmask8, __m256d, const int);
extern __m256d   __cdecl _mm256_maskz_permutex_pd(__mmask8, __m256d, const int);
extern __m256d   __cdecl _mm256_permutex_pd(__m256d, const int);
extern __m128i   __cdecl _mm_mask_permutex2var_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_mask2_permutex2var_epi16(__m128i, __m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_permutex2var_epi16(__mmask8, __m128i, __m128i, __m128i);
extern __m128i   __cdecl _mm_permutex2var_epi16(__m128i, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_permutex2var_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_mask2_permutex2var_epi16(__m256i, __m256i, __mmask16, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutex2var_epi16(__mmask16, __m256i, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutex2var_epi16(__m256i, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_permutex2var_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_mask2_permutex2var_epi32(__m128i, __m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_permutex2var_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m128i   __cdecl _mm_permutex2var_epi32(__m128i, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_permutex2var_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_mask2_permutex2var_epi32(__m256i, __m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutex2var_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutex2var_epi32(__m256i, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_permutex2var_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_mask2_permutex2var_epi64(__m128i, __m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_permutex2var_epi64(__mmask8, __m128i, __m128i, __m128i);
extern __m128i   __cdecl _mm_permutex2var_epi64(__m128i, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_permutex2var_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_mask2_permutex2var_epi64(__m256i, __m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutex2var_epi64(__mmask8, __m256i, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutex2var_epi64(__m256i, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_permutex2var_pd(__m128d, __mmask8, __m128i, __m128d);
extern __m128d   __cdecl _mm_mask2_permutex2var_pd(__m128d, __m128i, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_permutex2var_pd(__mmask8, __m128d, __m128i, __m128d);
extern __m128d   __cdecl _mm_permutex2var_pd(__m128d, __m128i, __m128d);
extern __m256d   __cdecl _mm256_mask_permutex2var_pd(__m256d, __mmask8, __m256i, __m256d);
extern __m256d   __cdecl _mm256_mask2_permutex2var_pd(__m256d, __m256i, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_permutex2var_pd(__mmask8, __m256d, __m256i, __m256d);
extern __m256d   __cdecl _mm256_permutex2var_pd(__m256d, __m256i, __m256d);
extern __m128    __cdecl _mm_mask_permutex2var_ps(__m128, __mmask8, __m128i, __m128);
extern __m128    __cdecl _mm_mask2_permutex2var_ps(__m128, __m128i, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_permutex2var_ps(__mmask8, __m128, __m128i, __m128);
extern __m128    __cdecl _mm_permutex2var_ps(__m128, __m128i, __m128);
extern __m256    __cdecl _mm256_mask_permutex2var_ps(__m256, __mmask8, __m256i, __m256);
extern __m256    __cdecl _mm256_mask2_permutex2var_ps(__m256, __m256i, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_permutex2var_ps(__mmask8, __m256, __m256i, __m256);
extern __m256    __cdecl _mm256_permutex2var_ps(__m256, __m256i, __m256);
extern __m128i   __cdecl _mm_mask_permutexvar_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_permutexvar_epi16(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_permutexvar_epi16(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_permutexvar_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutexvar_epi16(__mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutexvar_epi16(__m256i, __m256i);
extern __m256i   __cdecl _mm256_mask_permutexvar_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutexvar_epi32(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutexvar_epi32(__m256i, __m256i);
extern __m256i   __cdecl _mm256_mask_permutexvar_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutexvar_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutexvar_epi64(__m256i, __m256i);
extern __m256d   __cdecl _mm256_mask_permutexvar_pd(__m256d, __mmask8, __m256i, __m256d);
extern __m256d   __cdecl _mm256_maskz_permutexvar_pd(__mmask8, __m256i, __m256d);
extern __m256d   __cdecl _mm256_permutexvar_pd(__m256i, __m256d);
extern __m256    __cdecl _mm256_mask_permutexvar_ps(__m256, __mmask8, __m256i, __m256);
extern __m256    __cdecl _mm256_maskz_permutexvar_ps(__mmask8, __m256i, __m256);
extern __m256    __cdecl _mm256_permutexvar_ps(__m256i, __m256);
extern __m128d   __cdecl _mm_mask_range_pd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_range_pd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_range_pd(__m128d, __m128d, int);
extern __m256d   __cdecl _mm256_mask_range_pd(__m256d, __mmask8, __m256d, __m256d, int);
extern __m256d   __cdecl _mm256_maskz_range_pd(__mmask8, __m256d, __m256d, int);
extern __m256d   __cdecl _mm256_range_pd(__m256d, __m256d, int);
extern __m128    __cdecl _mm_mask_range_ps(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_range_ps(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_range_ps(__m128, __m128, int);
extern __m256    __cdecl _mm256_mask_range_ps(__m256, __mmask8, __m256, __m256, int);
extern __m256    __cdecl _mm256_maskz_range_ps(__mmask8, __m256, __m256, int);
extern __m256    __cdecl _mm256_range_ps(__m256, __m256, int);
extern __m128d   __cdecl _mm_mask_rcp14_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_rcp14_pd(__mmask8, __m128d);
extern __m128d   __cdecl _mm_rcp14_pd(__m128d);
extern __m256d   __cdecl _mm256_mask_rcp14_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_rcp14_pd(__mmask8, __m256d);
extern __m256d   __cdecl _mm256_rcp14_pd(__m256d);
extern __m128    __cdecl _mm_mask_rcp14_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_rcp14_ps(__mmask8, __m128);
extern __m128    __cdecl _mm_rcp14_ps(__m128);
extern __m256    __cdecl _mm256_mask_rcp14_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_rcp14_ps(__mmask8, __m256);
extern __m256    __cdecl _mm256_rcp14_ps(__m256);
extern __m128d   __cdecl _mm_mask_reduce_pd(__m128d, __mmask8, __m128d, int);
extern __m128d   __cdecl _mm_maskz_reduce_pd(__mmask8, __m128d, int);
extern __m128d   __cdecl _mm_reduce_pd(__m128d, int);
extern __m256d   __cdecl _mm256_mask_reduce_pd(__m256d, __mmask8, __m256d, int);
extern __m256d   __cdecl _mm256_maskz_reduce_pd(__mmask8, __m256d, int);
extern __m256d   __cdecl _mm256_reduce_pd(__m256d, int);
extern __m128    __cdecl _mm_mask_reduce_ps(__m128, __mmask8, __m128, int);
extern __m128    __cdecl _mm_maskz_reduce_ps(__mmask8, __m128, int);
extern __m128    __cdecl _mm_reduce_ps(__m128, int);
extern __m256    __cdecl _mm256_mask_reduce_ps(__m256, __mmask8, __m256, int);
extern __m256    __cdecl _mm256_maskz_reduce_ps(__mmask8, __m256, int);
extern __m256    __cdecl _mm256_reduce_ps(__m256, int);
extern __m128i   __cdecl _mm_mask_rol_epi32(__m128i, __mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_rol_epi32(__mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_rol_epi32(__m128i, int);
extern __m256i   __cdecl _mm256_mask_rol_epi32(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_rol_epi32(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_rol_epi32(__m256i, const int);
extern __m128i   __cdecl _mm_mask_rol_epi64(__m128i, __mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_rol_epi64(__mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_rol_epi64(__m128i, const int);
extern __m256i   __cdecl _mm256_mask_rol_epi64(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_rol_epi64(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_rol_epi64(__m256i, const int);
extern __m128i   __cdecl _mm_mask_rolv_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_rolv_epi32(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_rolv_epi32(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_rolv_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_rolv_epi32(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_rolv_epi32(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_rolv_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_rolv_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_rolv_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_rolv_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_rolv_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_rolv_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_ror_epi32(__m128i, __mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_ror_epi32(__mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_ror_epi32(__m128i, const int);
extern __m256i   __cdecl _mm256_mask_ror_epi32(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_ror_epi32(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_ror_epi32(__m256i, const int);
extern __m128i   __cdecl _mm_mask_ror_epi64(__m128i, __mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_ror_epi64(__mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_ror_epi64(__m128i, const int);
extern __m256i   __cdecl _mm256_mask_ror_epi64(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_ror_epi64(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_ror_epi64(__m256i, const int);
extern __m128i   __cdecl _mm_mask_rorv_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_rorv_epi32(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_rorv_epi32(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_rorv_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_rorv_epi32(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_rorv_epi32(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_rorv_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_rorv_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_rorv_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_rorv_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_rorv_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_rorv_epi64(__m256i, __m256i);
extern __m128d   __cdecl _mm_mask_roundscale_pd(__m128d, __mmask8, __m128d, int);
extern __m128d   __cdecl _mm_maskz_roundscale_pd(__mmask8, __m128d, int);
extern __m128d   __cdecl _mm_roundscale_pd(__m128d, int);
extern __m256d   __cdecl _mm256_mask_roundscale_pd(__m256d, __mmask8, __m256d, int);
extern __m256d   __cdecl _mm256_maskz_roundscale_pd(__mmask8, __m256d, int);
extern __m256d   __cdecl _mm256_roundscale_pd(__m256d, int);
extern __m128    __cdecl _mm_mask_roundscale_ps(__m128, __mmask8, __m128, int);
extern __m128    __cdecl _mm_maskz_roundscale_ps(__mmask8, __m128, int);
extern __m128    __cdecl _mm_roundscale_ps(__m128, int);
extern __m256    __cdecl _mm256_mask_roundscale_ps(__m256, __mmask8, __m256, int);
extern __m256    __cdecl _mm256_maskz_roundscale_ps(__mmask8, __m256, int);
extern __m256    __cdecl _mm256_roundscale_ps(__m256, int);
extern __m128d   __cdecl _mm_mask_rsqrt14_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_rsqrt14_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_rsqrt14_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_rsqrt14_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_rsqrt14_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_rsqrt14_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_rsqrt14_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_rsqrt14_ps(__mmask8, __m256);
extern __m128d   __cdecl _mm_mask_scalef_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_scalef_pd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_scalef_pd(__m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_scalef_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_scalef_pd(__mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_scalef_pd(__m256d, __m256d);
extern __m128    __cdecl _mm_mask_scalef_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_scalef_ps(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_scalef_ps(__m128, __m128);
extern __m256    __cdecl _mm256_mask_scalef_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_scalef_ps(__mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_scalef_ps(__m256, __m256);
extern __m128i   __cdecl _mm_mask_set1_epi16(__m128i, __mmask8, short);
extern __m128i   __cdecl _mm_maskz_set1_epi16(__mmask8, short);
extern __m256i   __cdecl _mm256_mask_set1_epi16(__m256i, __mmask16, short);
extern __m256i   __cdecl _mm256_maskz_set1_epi16(__mmask16, short);
extern __m128i   __cdecl _mm_mask_set1_epi32(__m128i, __mmask8, int);
extern __m128i   __cdecl _mm_maskz_set1_epi32(__mmask8, int);
extern __m256i   __cdecl _mm256_mask_set1_epi32(__m256i, __mmask8, int);
extern __m256i   __cdecl _mm256_maskz_set1_epi32(__mmask8, int);
extern __m128i   __cdecl _mm_mask_set1_epi64(__m128i, __mmask8, __int64);
extern __m128i   __cdecl _mm_maskz_set1_epi64(__mmask8, __int64);
extern __m256i   __cdecl _mm256_mask_set1_epi64(__m256i, __mmask8, __int64);
extern __m256i   __cdecl _mm256_maskz_set1_epi64(__mmask8, __int64);
extern __m128i   __cdecl _mm_mask_set1_epi8(__m128i, __mmask16, char);
extern __m128i   __cdecl _mm_maskz_set1_epi8(__mmask16, char);
extern __m256i   __cdecl _mm256_mask_set1_epi8(__m256i, __mmask32, char);
extern __m256i   __cdecl _mm256_maskz_set1_epi8(__mmask32, char);
extern __m128i   __cdecl _mm_mask_shuffle_epi32(__m128i, __mmask8, __m128i, int);
extern __m128i   __cdecl _mm_maskz_shuffle_epi32(__mmask8, __m128i, int);
extern __m256i   __cdecl _mm256_mask_shuffle_epi32(__m256i, __mmask8, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_shuffle_epi32(__mmask8, __m256i, int);
extern __m128i   __cdecl _mm_mask_shuffle_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_shuffle_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_shuffle_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_shuffle_epi8(__mmask32, __m256i, __m256i);
extern __m256    __cdecl _mm256_mask_shuffle_f32x4(__m256, __mmask8, __m256, __m256, const int);
extern __m256    __cdecl _mm256_maskz_shuffle_f32x4(__mmask8, __m256, __m256, const int);
extern __m256    __cdecl _mm256_shuffle_f32x4(__m256, __m256, const int);
extern __m256d   __cdecl _mm256_mask_shuffle_f64x2(__m256d, __mmask8, __m256d, __m256d, const int);
extern __m256d   __cdecl _mm256_maskz_shuffle_f64x2(__mmask8, __m256d, __m256d, const int);
extern __m256d   __cdecl _mm256_shuffle_f64x2(__m256d, __m256d, const int);
extern __m256i   __cdecl _mm256_mask_shuffle_i32x4(__m256i, __mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_shuffle_i32x4(__mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_shuffle_i32x4(__m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_mask_shuffle_i64x2(__m256i, __mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_shuffle_i64x2(__mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_shuffle_i64x2(__m256i, __m256i, const int);
extern __m128d   __cdecl _mm_mask_shuffle_pd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_shuffle_pd(__mmask8, __m128d, __m128d, const int);
extern __m256d   __cdecl _mm256_mask_shuffle_pd(__m256d, __mmask8, __m256d, __m256d, const int);
extern __m256d   __cdecl _mm256_maskz_shuffle_pd(__mmask8, __m256d, __m256d, const int);
extern __m128    __cdecl _mm_mask_shuffle_ps(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_shuffle_ps(__mmask8, __m128, __m128, const int);
extern __m256    __cdecl _mm256_mask_shuffle_ps(__m256, __mmask8, __m256, __m256, const int);
extern __m256    __cdecl _mm256_maskz_shuffle_ps(__mmask8, __m256, __m256, const int);
extern __m128i   __cdecl _mm_mask_shufflehi_epi16(__m128i, __mmask8, __m128i, int);
extern __m128i   __cdecl _mm_maskz_shufflehi_epi16(__mmask8, __m128i, int);
extern __m256i   __cdecl _mm256_mask_shufflehi_epi16(__m256i, __mmask16, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_shufflehi_epi16(__mmask16, __m256i, int);
extern __m128i   __cdecl _mm_mask_shufflelo_epi16(__m128i, __mmask8, __m128i, int);
extern __m128i   __cdecl _mm_maskz_shufflelo_epi16(__mmask8, __m128i, int);
extern __m256i   __cdecl _mm256_mask_shufflelo_epi16(__m256i, __mmask16, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_shufflelo_epi16(__mmask16, __m256i, int);
extern __m128i   __cdecl _mm_mask_sll_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sll_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sll_epi16(__m256i, __mmask16, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sll_epi16(__mmask16, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_sll_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sll_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sll_epi32(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sll_epi32(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_sll_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sll_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sll_epi64(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sll_epi64(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_slli_epi16(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_slli_epi16(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_slli_epi16(__m256i, __mmask16, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_slli_epi16(__mmask16, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_slli_epi32(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_slli_epi32(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_slli_epi32(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_slli_epi32(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_slli_epi64(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_slli_epi64(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_slli_epi64(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_slli_epi64(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_sllv_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sllv_epi16(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_sllv_epi16(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sllv_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sllv_epi16(__mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_sllv_epi16(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sllv_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sllv_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sllv_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sllv_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sllv_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sllv_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sllv_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sllv_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_sqrt_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_sqrt_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_sqrt_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_sqrt_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_sqrt_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_sqrt_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_sqrt_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_sqrt_ps(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_sra_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sra_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sra_epi16(__m256i, __mmask16, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sra_epi16(__mmask16, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_sra_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sra_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sra_epi32(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sra_epi32(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_sra_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sra_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_sra_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sra_epi64(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sra_epi64(__mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_sra_epi64(__m256i, __m128i);
extern __m128i   __cdecl _mm_mask_srai_epi16(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srai_epi16(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srai_epi16(__m256i, __mmask16, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srai_epi16(__mmask16, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srai_epi32(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srai_epi32(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srai_epi32(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srai_epi32(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srai_epi64(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srai_epi64(__mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_srai_epi64(__m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srai_epi64(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srai_epi64(__mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_srai_epi64(__m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srav_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srav_epi16(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_srav_epi16(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srav_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srav_epi16(__mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_srav_epi16(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srav_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srav_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srav_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srav_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srav_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srav_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_srav_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srav_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srav_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_srav_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srl_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srl_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srl_epi16(__m256i, __mmask16, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_srl_epi16(__mmask16, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_srl_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srl_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srl_epi32(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_srl_epi32(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_srl_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srl_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srl_epi64(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_srl_epi64(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_srli_epi16(__m128i, __mmask8, __m128i, int);
extern __m128i   __cdecl _mm_maskz_srli_epi16(__mmask8, __m128i, int);
extern __m256i   __cdecl _mm256_mask_srli_epi16(__m256i, __mmask16, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_srli_epi16(__mmask16, __m256i, int);
extern __m128i   __cdecl _mm_mask_srli_epi32(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srli_epi32(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srli_epi32(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srli_epi32(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srli_epi64(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srli_epi64(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srli_epi64(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srli_epi64(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srlv_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srlv_epi16(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_srlv_epi16(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srlv_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srlv_epi16(__mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_srlv_epi16(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srlv_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srlv_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srlv_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srlv_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srlv_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srlv_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srlv_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srlv_epi64(__mmask8, __m256i, __m256i);
extern void      __cdecl _mm_mask_store_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_store_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_store_epi64(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_store_epi64(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_store_pd(void*, __mmask8, __m128d);
extern void      __cdecl _mm256_mask_store_pd(void*, __mmask8, __m256d);
extern void      __cdecl _mm_mask_store_ps(void*, __mmask8, __m128);
extern void      __cdecl _mm256_mask_store_ps(void*, __mmask8, __m256);
extern void      __cdecl _mm_mask_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_storeu_epi16(void*, __mmask16, __m256i);
extern void      __cdecl _mm_mask_storeu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_storeu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_storeu_epi64(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_storeu_epi64(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_storeu_epi8(void*, __mmask16, __m128i);
extern void      __cdecl _mm256_mask_storeu_epi8(void*, __mmask32, __m256i);
extern void      __cdecl _mm_mask_storeu_pd(void*, __mmask8, __m128d);
extern void      __cdecl _mm256_mask_storeu_pd(void*, __mmask8, __m256d);
extern void      __cdecl _mm_mask_storeu_ps(void*, __mmask8, __m128);
extern void      __cdecl _mm256_mask_storeu_ps(void*, __mmask8, __m256);
extern __m128i   __cdecl _mm_mask_sub_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sub_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sub_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sub_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sub_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sub_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sub_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sub_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sub_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sub_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sub_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sub_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sub_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sub_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sub_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sub_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_sub_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_sub_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_sub_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_sub_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_sub_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_sub_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_sub_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_sub_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_subs_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_subs_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_subs_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_subs_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_subs_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_subs_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_subs_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_subs_epi8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_subs_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_subs_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_subs_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_subs_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_subs_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_subs_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_subs_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_subs_epu8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_ternarylogic_epi32(__m128i, __mmask8, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_maskz_ternarylogic_epi32(__mmask8, __m128i, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_ternarylogic_epi32(__m128i, __m128i, __m128i, int);
extern __m256i   __cdecl _mm256_mask_ternarylogic_epi32(__m256i, __mmask8, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_ternarylogic_epi32(__mmask8, __m256i, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_ternarylogic_epi32(__m256i, __m256i, __m256i, int);
extern __m128i   __cdecl _mm_mask_ternarylogic_epi64(__m128i, __mmask8, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_maskz_ternarylogic_epi64(__mmask8, __m128i, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_ternarylogic_epi64(__m128i, __m128i, __m128i, int);
extern __m256i   __cdecl _mm256_mask_ternarylogic_epi64(__m256i, __mmask8, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_ternarylogic_epi64(__mmask8, __m256i, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_ternarylogic_epi64(__m256i, __m256i, __m256i, int);
extern __mmask8  __cdecl _mm_mask_test_epi16_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_test_epi16_mask(__m128i, __m128i);
extern __mmask16 __cdecl _mm256_mask_test_epi16_mask(__mmask16, __m256i, __m256i);
extern __mmask16 __cdecl _mm256_test_epi16_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_test_epi32_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_test_epi32_mask(__m128i, __m128i);
extern __mmask8  __cdecl _mm256_mask_test_epi32_mask(__mmask8, __m256i, __m256i);
extern __mmask8  __cdecl _mm256_test_epi32_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_test_epi64_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_test_epi64_mask(__m128i, __m128i);
extern __mmask8  __cdecl _mm256_mask_test_epi64_mask(__mmask8, __m256i, __m256i);
extern __mmask8  __cdecl _mm256_test_epi64_mask(__m256i, __m256i);
extern __mmask16 __cdecl _mm_mask_test_epi8_mask(__mmask16, __m128i, __m128i);
extern __mmask16 __cdecl _mm_test_epi8_mask(__m128i, __m128i);
extern __mmask32 __cdecl _mm256_mask_test_epi8_mask(__mmask32, __m256i, __m256i);
extern __mmask32 __cdecl _mm256_test_epi8_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_testn_epi16_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_testn_epi16_mask(__m128i, __m128i);
extern __mmask16 __cdecl _mm256_mask_testn_epi16_mask(__mmask16, __m256i, __m256i);
extern __mmask16 __cdecl _mm256_testn_epi16_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_testn_epi32_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_testn_epi32_mask(__m128i, __m128i);
extern __mmask8  __cdecl _mm256_mask_testn_epi32_mask(__mmask8, __m256i, __m256i);
extern __mmask8  __cdecl _mm256_testn_epi32_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_testn_epi64_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_testn_epi64_mask(__m128i, __m128i);
extern __mmask8  __cdecl _mm256_mask_testn_epi64_mask(__mmask8, __m256i, __m256i);
extern __mmask8  __cdecl _mm256_testn_epi64_mask(__m256i, __m256i);
extern __mmask16 __cdecl _mm_mask_testn_epi8_mask(__mmask16, __m128i, __m128i);
extern __mmask16 __cdecl _mm_testn_epi8_mask(__m128i, __m128i);
extern __mmask32 __cdecl _mm256_mask_testn_epi8_mask(__mmask32, __m256i, __m256i);
extern __mmask32 __cdecl _mm256_testn_epi8_mask(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpackhi_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpackhi_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpackhi_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpackhi_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpackhi_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpackhi_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpackhi_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpackhi_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpackhi_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpackhi_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpackhi_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpackhi_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpackhi_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpackhi_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpackhi_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpackhi_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_unpackhi_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_unpackhi_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_unpackhi_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_unpackhi_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_unpackhi_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_unpackhi_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_unpackhi_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_unpackhi_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_unpacklo_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpacklo_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpacklo_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpacklo_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpacklo_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpacklo_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpacklo_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpacklo_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpacklo_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpacklo_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpacklo_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpacklo_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpacklo_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpacklo_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpacklo_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpacklo_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_unpacklo_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_unpacklo_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_unpacklo_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_unpacklo_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_unpacklo_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_unpacklo_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_unpacklo_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_unpacklo_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_xor_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_xor_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_xor_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_xor_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_xor_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_xor_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_xor_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_xor_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_xor_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_xor_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_xor_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_xor_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_xor_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_xor_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_xor_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_xor_ps(__mmask8, __m256, __m256);





























































































































































































































































































































































































































































































































































extern __m128d   __cdecl _mm_add_round_sd(__m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_add_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_add_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128    __cdecl _mm_add_round_ss(__m128, __m128, int);
extern __m128    __cdecl _mm_mask_add_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_add_round_ss(__mmask8, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_add_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_add_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_add_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_add_ss(__mmask8, __m128, __m128);
extern __mmask8  __cdecl _mm_cmp_round_sd_mask(__m128d, __m128d, const int, const int);
extern __mmask8  __cdecl _mm_mask_cmp_round_sd_mask(__mmask8, __m128d, __m128d, const int, const int);
extern __mmask8  __cdecl _mm_cmp_round_ss_mask(__m128, __m128, const int, const int);
extern __mmask8  __cdecl _mm_mask_cmp_round_ss_mask(__mmask8, __m128, __m128, const int, const int);
extern __mmask8  __cdecl _mm_cmp_sd_mask(__m128d, __m128d, const int);
extern __mmask8  __cdecl _mm_mask_cmp_sd_mask(__mmask8, __m128d, __m128d, const int);
extern __mmask8  __cdecl _mm_cmp_ss_mask(__m128, __m128, const int);
extern __mmask8  __cdecl _mm_mask_cmp_ss_mask(__mmask8, __m128, __m128, const int);
extern int       __cdecl _mm_comi_round_sd(__m128d, __m128d, const int, const int);
extern int       __cdecl _mm_comi_round_ss(__m128, __m128, const int, const int);
extern __m128    __cdecl _mm_cvt_roundi32_ss(__m128, int, int);
extern int       __cdecl _mm_cvt_roundsd_i32(__m128d, int);
extern int       __cdecl _mm_cvt_roundsd_si32(__m128d, int);
extern __m128    __cdecl _mm_cvt_roundsd_ss(__m128, __m128d, int);
extern __m128    __cdecl _mm_mask_cvt_roundsd_ss(__m128, __mmask8, __m128, __m128d, int);
extern __m128    __cdecl _mm_maskz_cvt_roundsd_ss(__mmask8, __m128, __m128d, int);
extern unsigned int __cdecl _mm_cvt_roundsd_u32(__m128d, int);
extern __m128    __cdecl _mm_cvt_roundsi32_ss(__m128, int, int);
extern int       __cdecl _mm_cvt_roundss_i32(__m128, int);
extern __m128d   __cdecl _mm_cvt_roundss_sd(__m128d, __m128, int);
extern __m128d   __cdecl _mm_mask_cvt_roundss_sd(__m128d, __mmask8, __m128d, __m128, int);
extern __m128d   __cdecl _mm_maskz_cvt_roundss_sd(__mmask8, __m128d, __m128, int);
extern int       __cdecl _mm_cvt_roundss_si32(__m128, int);
extern unsigned int __cdecl _mm_cvt_roundss_u32(__m128, int);
extern __m128    __cdecl _mm_cvt_roundu32_ss(__m128, unsigned int, int);
extern __m128d   __cdecl _mm_cvti32_sd(__m128d, int);
extern __m128    __cdecl _mm_cvti32_ss(__m128, int);
extern int       __cdecl _mm_cvtsd_i32(__m128d);
extern __m128    __cdecl _mm_mask_cvtsd_ss(__m128, __mmask8, __m128, __m128d);
extern __m128    __cdecl _mm_maskz_cvtsd_ss(__mmask8, __m128, __m128d);
extern unsigned int __cdecl _mm_cvtsd_u32(__m128d);
extern int       __cdecl _mm_cvtss_i32(__m128);
extern __m128d   __cdecl _mm_mask_cvtss_sd(__m128d, __mmask8, __m128d, __m128);
extern __m128d   __cdecl _mm_maskz_cvtss_sd(__mmask8, __m128d, __m128);
extern unsigned int __cdecl _mm_cvtss_u32(__m128);
extern int       __cdecl _mm_cvtt_roundsd_i32(__m128d, int);
extern int       __cdecl _mm_cvtt_roundsd_si32(__m128d, int);
extern unsigned int __cdecl _mm_cvtt_roundsd_u32(__m128d, int);
extern int       __cdecl _mm_cvtt_roundss_i32(__m128, int);
extern int       __cdecl _mm_cvtt_roundss_si32(__m128, int);
extern unsigned int __cdecl _mm_cvtt_roundss_u32(__m128, int);
extern int       __cdecl _mm_cvttsd_i32(__m128d);
extern unsigned int __cdecl _mm_cvttsd_u32(__m128d);
extern int       __cdecl _mm_cvttss_i32(__m128);
extern unsigned int __cdecl _mm_cvttss_u32(__m128);
extern __m128d   __cdecl _mm_cvtu32_sd(__m128d, unsigned int);
extern __m128    __cdecl _mm_cvtu32_ss(__m128, unsigned int);
extern __m128d   __cdecl _mm_div_round_sd(__m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_div_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_div_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128    __cdecl _mm_div_round_ss(__m128, __m128, int);
extern __m128    __cdecl _mm_mask_div_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_div_round_ss(__mmask8, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_div_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_div_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_div_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_div_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_fixupimm_round_sd(__m128d, __m128d, __m128i, const int, int);
extern __m128d   __cdecl _mm_mask_fixupimm_round_sd(__m128d, __mmask8, __m128d, __m128i, const int, const int);
extern __m128d   __cdecl _mm_maskz_fixupimm_round_sd(__mmask8, __m128d, __m128d, __m128i, const int, const int);
extern __m128    __cdecl _mm_fixupimm_round_ss(__m128, __m128, __m128i, const int, const int);
extern __m128    __cdecl _mm_mask_fixupimm_round_ss(__m128, __mmask8, __m128, __m128i, const int, const int);
extern __m128    __cdecl _mm_maskz_fixupimm_round_ss(__mmask8, __m128, __m128, __m128i, const int, const int);
extern __m128d   __cdecl _mm_fixupimm_sd(__m128d, __m128d, __m128i, const int);
extern __m128d   __cdecl _mm_mask_fixupimm_sd(__m128d, __mmask8, __m128d, __m128i, const int);
extern __m128d   __cdecl _mm_maskz_fixupimm_sd(__mmask8, __m128d, __m128d, __m128i, const int);
extern __m128    __cdecl _mm_fixupimm_ss(__m128, __m128, __m128i, const int);
extern __m128    __cdecl _mm_mask_fixupimm_ss(__m128, __mmask8, __m128, __m128i, const int);
extern __m128    __cdecl _mm_maskz_fixupimm_ss(__mmask8, __m128, __m128, __m128i, const int);
extern __m128d   __cdecl _mm_fmadd_round_sd(__m128d, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_fmadd_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask3_fmadd_round_sd(__m128d, __m128d, __m128d, __mmask8, int);
extern __m128d   __cdecl _mm_maskz_fmadd_round_sd(__mmask8, __m128d, __m128d, __m128d, int);
extern __m128    __cdecl _mm_fmadd_round_ss(__m128, __m128, __m128, int);
extern __m128    __cdecl _mm_mask_fmadd_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mask3_fmadd_round_ss(__m128, __m128, __m128, __mmask8, int);
extern __m128    __cdecl _mm_maskz_fmadd_round_ss(__mmask8, __m128, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_fmadd_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmadd_sd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmadd_sd(__mmask8, __m128d, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_fmadd_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmadd_ss(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmadd_ss(__mmask8, __m128, __m128, __m128);
extern __m128d   __cdecl _mm_fmsub_round_sd(__m128d, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_fmsub_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask3_fmsub_round_sd(__m128d, __m128d, __m128d, __mmask8, int);
extern __m128d   __cdecl _mm_maskz_fmsub_round_sd(__mmask8, __m128d, __m128d, __m128d, int);
extern __m128    __cdecl _mm_fmsub_round_ss(__m128, __m128, __m128, int);
extern __m128    __cdecl _mm_mask_fmsub_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mask3_fmsub_round_ss(__m128, __m128, __m128, __mmask8, int);
extern __m128    __cdecl _mm_maskz_fmsub_round_ss(__mmask8, __m128, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_fmsub_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmsub_sd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmsub_sd(__mmask8, __m128d, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_fmsub_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmsub_ss(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmsub_ss(__mmask8, __m128, __m128, __m128);
extern __m128d   __cdecl _mm_fnmadd_round_sd(__m128d, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_fnmadd_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask3_fnmadd_round_sd(__m128d, __m128d, __m128d, __mmask8, int);
extern __m128d   __cdecl _mm_maskz_fnmadd_round_sd(__mmask8, __m128d, __m128d, __m128d, int);
extern __m128    __cdecl _mm_fnmadd_round_ss(__m128, __m128, __m128, int);
extern __m128    __cdecl _mm_mask_fnmadd_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mask3_fnmadd_round_ss(__m128, __m128, __m128, __mmask8, int);
extern __m128    __cdecl _mm_maskz_fnmadd_round_ss(__mmask8, __m128, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_fnmadd_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fnmadd_sd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fnmadd_sd(__mmask8, __m128d, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_fnmadd_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fnmadd_ss(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fnmadd_ss(__mmask8, __m128, __m128, __m128);
extern __m128d   __cdecl _mm_fnmsub_round_sd(__m128d, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_fnmsub_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask3_fnmsub_round_sd(__m128d, __m128d, __m128d, __mmask8, int);
extern __m128d   __cdecl _mm_maskz_fnmsub_round_sd(__mmask8, __m128d, __m128d, __m128d, int);
extern __m128    __cdecl _mm_fnmsub_round_ss(__m128, __m128, __m128, int);
extern __m128    __cdecl _mm_mask_fnmsub_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mask3_fnmsub_round_ss(__m128, __m128, __m128, __mmask8, int);
extern __m128    __cdecl _mm_maskz_fnmsub_round_ss(__mmask8, __m128, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_fnmsub_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fnmsub_sd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fnmsub_sd(__mmask8, __m128d, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_fnmsub_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fnmsub_ss(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fnmsub_ss(__mmask8, __m128, __m128, __m128);
extern __mmask8  __cdecl _mm_fpclass_sd_mask(__m128d, int);
extern __mmask8  __cdecl _mm_mask_fpclass_sd_mask(__mmask8, __m128d, int);
extern __mmask8  __cdecl _mm_fpclass_ss_mask(__m128, int);
extern __mmask8  __cdecl _mm_mask_fpclass_ss_mask(__mmask8, __m128, int);
extern __m128d   __cdecl _mm_getexp_round_sd(__m128d, __m128d, const int);
extern __m128d   __cdecl _mm_mask_getexp_round_sd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_getexp_round_sd(__mmask8, __m128d, __m128d, const int);
extern __m128    __cdecl _mm_getexp_round_ss(__m128, __m128, const int);
extern __m128    __cdecl _mm_mask_getexp_round_ss(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_getexp_round_ss(__mmask8, __m128, __m128, const int);
extern __m128d   __cdecl _mm_getexp_sd(__m128d, __m128d);
extern __m128d   __cdecl _mm_mask_getexp_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_getexp_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_getexp_ss(__m128, __m128);
extern __m128    __cdecl _mm_mask_getexp_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_getexp_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_getmant_round_sd(__m128d, __m128d, int, int, int);
extern __m128d   __cdecl _mm_mask_getmant_round_sd(__m128d, __mmask8, __m128d, __m128d, int, int, int);
extern __m128d   __cdecl _mm_maskz_getmant_round_sd(__mmask8, __m128d, __m128d, int, int, int);
extern __m128    __cdecl _mm_getmant_round_ss(__m128, __m128, int, int, int);
extern __m128    __cdecl _mm_mask_getmant_round_ss(__m128, __mmask8, __m128, __m128, int, int, int);
extern __m128    __cdecl _mm_maskz_getmant_round_ss(__mmask8, __m128, __m128, int, int, int);
extern __m128d   __cdecl _mm_getmant_sd(__m128d, __m128d, int, int);
extern __m128d   __cdecl _mm_mask_getmant_sd(__m128d, __mmask8, __m128d, __m128d, int, int);
extern __m128d   __cdecl _mm_maskz_getmant_sd(__mmask8, __m128d, __m128d, int, int);
extern __m128    __cdecl _mm_getmant_ss(__m128, __m128, int, int);
extern __m128    __cdecl _mm_mask_getmant_ss(__m128, __mmask8, __m128, __m128, int, int);
extern __m128    __cdecl _mm_maskz_getmant_ss(__mmask8, __m128, __m128, int, int);
extern __m128d   __cdecl _mm_mask_load_sd(__m128d, __mmask8, const double*);
extern __m128d   __cdecl _mm_maskz_load_sd(__mmask8, const double*);
extern __m128    __cdecl _mm_mask_load_ss(__m128, __mmask8, const float*);
extern __m128    __cdecl _mm_maskz_load_ss(__mmask8, const float*);
extern __m128d   __cdecl _mm_mask_max_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_max_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_max_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_max_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_max_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_max_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_max_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_max_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_max_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_max_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_mask_min_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_min_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_min_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_min_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_min_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_min_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_min_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_min_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_min_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_min_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_mask_move_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_move_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_move_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_move_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_mask_mul_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_mul_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mul_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_mul_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_mul_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mul_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_mul_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_mul_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_mul_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_mul_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_mask_range_round_sd(__m128d, __mmask8, __m128d, __m128d, const int, int);
extern __m128d   __cdecl _mm_maskz_range_round_sd(__mmask8, __m128d, __m128d, const int, int);
extern __m128d   __cdecl _mm_range_round_sd(__m128d, __m128d, const int, int);
extern __m128    __cdecl _mm_mask_range_round_ss(__m128, __mmask8, __m128, __m128, const int, int);
extern __m128    __cdecl _mm_maskz_range_round_ss(__mmask8, __m128, __m128, const int, int);
extern __m128    __cdecl _mm_range_round_ss(__m128, __m128, const int, int);
extern __m128d   __cdecl _mm_mask_range_sd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_range_sd(__mmask8, __m128d, __m128d, const int);
extern __m128    __cdecl _mm_mask_range_ss(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_range_ss(__mmask8, __m128, __m128, const int);
extern __m128d   __cdecl _mm_mask_rcp14_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_rcp14_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_rcp14_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_rcp14_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_rcp14_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_rcp14_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_rcp28_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_rcp28_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_rcp28_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_rcp28_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_rcp28_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_rcp28_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_rcp28_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_rcp28_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_rcp28_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_rcp28_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_rcp28_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_rcp28_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_reduce_round_sd(__m128d, __mmask8, __m128d, __m128d, const int, int);
extern __m128d   __cdecl _mm_maskz_reduce_round_sd(__mmask8, __m128d, __m128d, const int, int);
extern __m128d   __cdecl _mm_reduce_round_sd(__m128d, __m128d, const int, int);
extern __m128    __cdecl _mm_mask_reduce_round_ss(__m128, __mmask8, __m128, __m128, const int, int);
extern __m128    __cdecl _mm_maskz_reduce_round_ss(__mmask8, __m128, __m128, const int, int);
extern __m128    __cdecl _mm_reduce_round_ss(__m128, __m128, const int, int);
extern __m128d   __cdecl _mm_mask_reduce_sd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_reduce_sd(__mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_reduce_sd(__m128d, __m128d, const int);
extern __m128    __cdecl _mm_mask_reduce_ss(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_reduce_ss(__mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_reduce_ss(__m128, __m128, const int);
extern __m128d   __cdecl _mm_mask_roundscale_round_sd(__m128d, __mmask8, __m128d, __m128d, const int, const int);
extern __m128d   __cdecl _mm_maskz_roundscale_round_sd(__mmask8, __m128d, __m128d, const int, const int);
extern __m128d   __cdecl _mm_roundscale_round_sd(__m128d, __m128d, const int, const int);
extern __m128    __cdecl _mm_mask_roundscale_round_ss(__m128, __mmask8, __m128, __m128, const int, const int);
extern __m128    __cdecl _mm_maskz_roundscale_round_ss(__mmask8, __m128, __m128, const int, const int);
extern __m128    __cdecl _mm_roundscale_round_ss(__m128, __m128, const int, const int);
extern __m128d   __cdecl _mm_mask_roundscale_sd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_roundscale_sd(__mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_roundscale_sd(__m128d, __m128d, const int);
extern __m128    __cdecl _mm_mask_roundscale_ss(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_roundscale_ss(__mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_roundscale_ss(__m128, __m128, const int);
extern __m128d   __cdecl _mm_mask_rsqrt14_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_rsqrt14_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_rsqrt14_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_rsqrt14_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_rsqrt14_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_rsqrt14_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_rsqrt28_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_rsqrt28_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_rsqrt28_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_rsqrt28_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_rsqrt28_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_rsqrt28_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_rsqrt28_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_rsqrt28_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_rsqrt28_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_rsqrt28_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_rsqrt28_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_rsqrt28_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_scalef_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_scalef_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_scalef_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_scalef_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_scalef_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_scalef_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_scalef_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_scalef_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_scalef_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_scalef_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_scalef_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_scalef_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_sqrt_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_sqrt_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_sqrt_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_sqrt_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_sqrt_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_sqrt_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_sqrt_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_sqrt_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_sqrt_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_sqrt_ss(__mmask8, __m128, __m128);
extern void      __cdecl _mm_mask_store_sd(double*, __mmask8, __m128d);
extern void      __cdecl _mm_mask_store_ss(float*, __mmask8, __m128);
extern __m128d   __cdecl _mm_mask_sub_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_sub_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_sub_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_sub_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_sub_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_sub_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_sub_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_sub_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_sub_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_sub_ss(__mmask8, __m128, __m128);






































#line 5368 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\zmmintrin.h"


extern __m512d   __cdecl _mm512_zextpd128_pd512(__m128d);
extern __m512d   __cdecl _mm512_zextpd256_pd512(__m256d);
extern __m512    __cdecl _mm512_zextps128_ps512(__m128);
extern __m512    __cdecl _mm512_zextps256_ps512(__m256);
extern __m512i   __cdecl _mm512_zextsi128_si512(__m128i);
extern __m512i   __cdecl _mm512_zextsi256_si512(__m256i);



























#line 5404 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\zmmintrin.h"


extern __m128i __cdecl _mm_madd52hi_epu64(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_madd52hi_epu64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_madd52hi_epu64(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_madd52hi_epu64(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_madd52hi_epu64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_madd52hi_epu64(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_madd52hi_epu64(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_madd52hi_epu64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_madd52hi_epu64(__mmask8, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_madd52lo_epu64(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_madd52lo_epu64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_madd52lo_epu64(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_madd52lo_epu64(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_madd52lo_epu64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_madd52lo_epu64(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_madd52lo_epu64(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_madd52lo_epu64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_madd52lo_epu64(__mmask8, __m512i, __m512i, __m512i);


extern __m128i __cdecl _mm_permutexvar_epi8(__m128i, __m128i);
extern __m128i __cdecl _mm_mask_permutexvar_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_permutexvar_epi8(__mmask16, __m128i, __m128i);
extern __m256i __cdecl _mm256_permutexvar_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mask_permutexvar_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_permutexvar_epi8(__mmask32, __m256i, __m256i);
extern __m512i __cdecl _mm512_permutexvar_epi8(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutexvar_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_permutexvar_epi8(__mmask64, __m512i, __m512i);

extern __m128i __cdecl _mm_permutex2var_epi8(__m128i, __m128i , __m128i);
extern __m128i __cdecl _mm_mask_permutex2var_epi8(__m128i, __mmask16, __m128i , __m128i);
extern __m128i __cdecl _mm_mask2_permutex2var_epi8(__m128i, __m128i , __mmask16, __m128i);
extern __m128i __cdecl _mm_maskz_permutex2var_epi8(__mmask16, __m128i, __m128i , __m128i);
extern __m256i __cdecl _mm256_permutex2var_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_permutex2var_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask2_permutex2var_epi8(__m256i, __m256i, __mmask32, __m256i);
extern __m256i __cdecl _mm256_maskz_permutex2var_epi8(__mmask32, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_permutex2var_epi8(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutex2var_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask2_permutex2var_epi8(__m512i, __m512i, __mmask64, __m512i);
extern __m512i __cdecl _mm512_maskz_permutex2var_epi8(__mmask64, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_multishift_epi64_epi8(__m128i, __m128i);
extern __m128i __cdecl _mm_mask_multishift_epi64_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_multishift_epi64_epi8(__mmask16, __m128i, __m128i);
extern __m256i __cdecl _mm256_multishift_epi64_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mask_multishift_epi64_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_multishift_epi64_epi8(__mmask32, __m256i, __m256i);
extern __m512i __cdecl _mm512_multishift_epi64_epi8(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_multishift_epi64_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_multishift_epi64_epi8(__mmask64, __m512i, __m512i);


extern __m128i __cdecl _mm_dpbusd_epi32(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_dpbusd_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_dpbusd_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_dpbusd_epi32(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_dpbusd_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_dpbusd_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_dpbusd_epi32(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dpbusd_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_dpbusd_epi32(__mmask16, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_dpbusds_epi32(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_dpbusds_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_dpbusds_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_dpbusds_epi32(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_dpbusds_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_dpbusds_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_dpbusds_epi32(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dpbusds_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_dpbusds_epi32(__mmask16, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_dpwssd_epi32(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_dpwssd_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_dpwssd_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_dpwssd_epi32(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_dpwssd_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_dpwssd_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_dpwssd_epi32(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dpwssd_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_dpwssd_epi32(__mmask16, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_dpwssds_epi32(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_dpwssds_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_dpwssds_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_dpwssds_epi32(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_dpwssds_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_dpwssds_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_dpwssds_epi32(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dpwssds_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_dpwssds_epi32(__mmask16, __m512i, __m512i, __m512i);


extern __m256i __cdecl _mm256_aesenc_epi128(__m256i, __m256i);
extern __m512i __cdecl _mm512_aesenc_epi128(__m512i, __m512i);
extern __m256i __cdecl _mm256_aesenclast_epi128(__m256i, __m256i);
extern __m512i __cdecl _mm512_aesenclast_epi128(__m512i, __m512i);
extern __m256i __cdecl _mm256_aesdec_epi128(__m256i, __m256i);
extern __m512i __cdecl _mm512_aesdec_epi128(__m512i, __m512i);
extern __m256i __cdecl _mm256_aesdeclast_epi128(__m256i, __m256i);
extern __m512i __cdecl _mm512_aesdeclast_epi128(__m512i, __m512i);


extern __m256i __cdecl _mm256_clmulepi64_epi128(__m256i, __m256i, const int);
extern __m512i __cdecl _mm512_clmulepi64_epi128(__m512i, __m512i, const int);


}
#line 5518 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\zmmintrin.h"


#line 5521 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\zmmintrin.h"
#line 2127 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"

#line 2129 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"
#line 2130 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"
#line 2131 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\immintrin.h"
#line 30 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"
        #line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"












#pragma once



#line 18 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"







#line 26 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"



#line 30 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"


extern "C" { 
#line 34 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"





























































































__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);








__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);



#line 258 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"


unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);








#line 276 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"


unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);











#line 300 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"

void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);

void _mm_clzero(void const *);


}; 
#line 309 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"

#line 311 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"
#line 312 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"
#line 313 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\ammintrin.h"
#line 31 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"
    #line 32 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"

    
        #line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mm3dnow.h"















#pragma once



#line 21 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mm3dnow.h"







#line 29 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mm3dnow.h"






extern "C" { 
#line 37 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mm3dnow.h"



void _m_femms(void);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64, __m64);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);

__m64 _m_from_float(float);
float _m_to_float(__m64);



__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);


}; 
#line 77 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mm3dnow.h"
#line 78 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mm3dnow.h"
#line 79 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\mm3dnow.h"
#line 35 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"
    #line 36 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"

    


#line 41 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"

    


#line 46 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"
#line 47 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"


extern "C" {
#line 51 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"


void * _AddressOfReturnAddress(void);




















long _InterlockedAddLargeStatistic(__int64 volatile * _Addend, long _Value);














void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);





short _InterlockedDecrement16(short volatile * _Addend);










void * _InterlockedExchangePointer(void * volatile * _Target, void * _Value);



short _InterlockedIncrement16(short volatile * _Addend);


























void _ReadBarrier(void);






void * _ReturnAddress(void);

void _WriteBarrier(void);






void __addfsbyte(unsigned long, unsigned char);
void __addfsdword(unsigned long, unsigned long);
void __addfsword(unsigned long, unsigned short);








void __clts(void);
void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);

unsigned int __getcallerseflags(void);
void __halt(void);


unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);
void __incfsbyte(unsigned long);
void __incfsdword(unsigned long);
void __incfsword(unsigned long);








unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);
void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);

void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);

void __movsw(unsigned short *, unsigned short const *, size_t);

void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);





unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);

unsigned long __readcr0(void);

unsigned long __readcr2(void);

unsigned long __readcr3(void);

unsigned long __readcr4(void);

unsigned long __readcr8(void);

unsigned int __readdr(unsigned int);

unsigned int __readeflags(void);
unsigned char __readfsbyte(unsigned long);
unsigned long __readfsdword(unsigned long);
unsigned __int64 __readfsqword(unsigned long);
unsigned short __readfsword(unsigned long);




unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);




unsigned long __segmentlimit(unsigned long);


void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);

void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);





void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);

void __vmx_off(void);




void __vmx_vmptrst(unsigned __int64 *);



void __wbinvd(void);



void __writecr0(unsigned int);

void __writecr2(unsigned int);

void __writecr3(unsigned int);

void __writecr4(unsigned int);

void __writecr8(unsigned int);

void __writedr(unsigned int, unsigned int);

void __writeeflags(unsigned int);
void __writefsbyte(unsigned long, unsigned char);
void __writefsdword(unsigned long, unsigned long);
void __writefsqword(unsigned long, unsigned __int64);
void __writefsword(unsigned long, unsigned short);




void __writemsr(unsigned long, unsigned __int64);





unsigned char _bittestandcomplement(long *, long);

unsigned char _bittestandreset(long *, long);

unsigned char _bittestandset(long *, long);

  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64);
  unsigned long __cdecl _byteswap_ulong(  unsigned long);
  unsigned short __cdecl _byteswap_ushort(  unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);





















  unsigned long __cdecl _lrotl(  unsigned long,   int);
  unsigned long __cdecl _lrotr(  unsigned long,   int);
void _m_empty(void);
void _m_femms(void);
__m64 _m_from_float(float);
__m64 _m_from_int(int);
void _m_maskmovq(__m64, __m64, char *);
__m64 _m_packssdw(__m64, __m64);
__m64 _m_packsswb(__m64, __m64);
__m64 _m_packuswb(__m64, __m64);
__m64 _m_paddb(__m64, __m64);
__m64 _m_paddd(__m64, __m64);
__m64 _m_paddsb(__m64, __m64);
__m64 _m_paddsw(__m64, __m64);
__m64 _m_paddusb(__m64, __m64);
__m64 _m_paddusw(__m64, __m64);
__m64 _m_paddw(__m64, __m64);
__m64 _m_pand(__m64, __m64);
__m64 _m_pandn(__m64, __m64);
__m64 _m_pavgb(__m64, __m64);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pavgw(__m64, __m64);
__m64 _m_pcmpeqb(__m64, __m64);
__m64 _m_pcmpeqd(__m64, __m64);
__m64 _m_pcmpeqw(__m64, __m64);
__m64 _m_pcmpgtb(__m64, __m64);
__m64 _m_pcmpgtd(__m64, __m64);
__m64 _m_pcmpgtw(__m64, __m64);
int _m_pextrw(__m64, int);
__m64 _m_pf2id(__m64);
__m64 _m_pf2iw(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pinsrw(__m64, int, int);
__m64 _m_pmaddwd(__m64, __m64);
__m64 _m_pmaxsw(__m64, __m64);
__m64 _m_pmaxub(__m64, __m64);
__m64 _m_pminsw(__m64, __m64);
__m64 _m_pminub(__m64, __m64);
int _m_pmovmskb(__m64);
__m64 _m_pmulhrw(__m64, __m64);
__m64 _m_pmulhuw(__m64, __m64);
__m64 _m_pmulhw(__m64, __m64);
__m64 _m_pmullw(__m64, __m64);
__m64 _m_por(__m64, __m64);
void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);
__m64 _m_psadbw(__m64, __m64);
__m64 _m_pshufw(__m64, int);
__m64 _m_pslld(__m64, __m64);
__m64 _m_pslldi(__m64, int);
__m64 _m_psllq(__m64, __m64);
__m64 _m_psllqi(__m64, int);
__m64 _m_psllw(__m64, __m64);
__m64 _m_psllwi(__m64, int);
__m64 _m_psrad(__m64, __m64);
__m64 _m_psradi(__m64, int);
__m64 _m_psraw(__m64, __m64);
__m64 _m_psrawi(__m64, int);
__m64 _m_psrld(__m64, __m64);
__m64 _m_psrldi(__m64, int);
__m64 _m_psrlq(__m64, __m64);
__m64 _m_psrlqi(__m64, int);
__m64 _m_psrlw(__m64, __m64);
__m64 _m_psrlwi(__m64, int);
__m64 _m_psubb(__m64, __m64);
__m64 _m_psubd(__m64, __m64);
__m64 _m_psubsb(__m64, __m64);
__m64 _m_psubsw(__m64, __m64);
__m64 _m_psubusb(__m64, __m64);
__m64 _m_psubusw(__m64, __m64);
__m64 _m_psubw(__m64, __m64);
__m64 _m_pswapd(__m64);
__m64 _m_punpckhbw(__m64, __m64);
__m64 _m_punpckhdq(__m64, __m64);
__m64 _m_punpckhwd(__m64, __m64);
__m64 _m_punpcklbw(__m64, __m64);
__m64 _m_punpckldq(__m64, __m64);
__m64 _m_punpcklwd(__m64, __m64);
__m64 _m_pxor(__m64, __m64);
float _m_to_float(__m64);
int _m_to_int(__m64);
__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);
__m64 _mm_abs_pi16(__m64);
__m64 _mm_abs_pi32(__m64);
__m64 _mm_abs_pi8(__m64);
__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);
__m64 _mm_add_si64(__m64, __m64);
__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);
__m64 _mm_alignr_pi8(__m64, __m64, int);
__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
void _mm_clflushopt(void const *);
void _mm_clwb(void const *);
void _mm_clzero(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);

unsigned int _mm_crc32_u8(unsigned int, unsigned char);
__m128 _mm_cvt_pi2ps(__m128, __m64);
__m64 _mm_cvt_ps2pi(__m128);
__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);
__m64 _mm_cvtpd_pi32(__m128d);
__m128 _mm_cvtpd_ps(__m128d);
__m128d _mm_cvtpi32_pd(__m64);
__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);


__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);


__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);






__m128d _mm_cvtss_sd(__m128d, __m128);


__m64 _mm_cvtt_ps2pi(__m128);
int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);
__m64 _mm_cvttpd_pi32(__m128d);
__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);




__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);

int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);
__m64 _mm_hadd_pi16(__m64, __m64);
__m64 _mm_hadd_pi32(__m64, __m64);
__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);
__m64 _mm_hadds_pi16(__m64, __m64);
__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);
__m64 _mm_hsub_pi16(__m64, __m64);
__m64 _mm_hsub_pi32(__m64, __m64);
__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);
__m64 _mm_hsubs_pi16(__m64, __m64);
__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);

__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);
__m64 _mm_maddubs_pi16(__m64, __m64);
void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);
__m64 _mm_movepi64_pi64(__m128i);
__m128i _mm_movpi64_epi64(__m64);
__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);
__m64 _mm_mul_su32(__m64, __m64);
__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);
__m64 _mm_mulhrs_pi16(__m64, __m64);
__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);

void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);
__m128i _mm_set1_epi64(__m64);
__m128i _mm_set1_epi64x(__int64);
__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);
__m64 _mm_set1_pi16(short);
__m64 _mm_set1_pi32(int);
__m64 _mm_set1_pi8(char);
__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);
__m128i _mm_set_epi64(__m64, __m64);
__m128i _mm_set_epi64x(__int64, __int64);
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);
__m64 _mm_set_pi16(short, short, short, short);
__m64 _mm_set_pi32(int, int);
__m64 _mm_set_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);
__m128i _mm_setr_epi64(__m64, __m64);
__m128i _mm_setr_epi64x(__int64, __int64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);
__m64 _mm_setr_pi16(short, short, short, short);
__m64 _mm_setr_pi32(int, int);
__m64 _mm_setr_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);
__m64 _mm_setzero_si64(void);
void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);
__m64 _mm_shuffle_pi8(__m64, __m64);
__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);
__m64 _mm_sign_pi16(__m64, __m64);
__m64 _mm_sign_pi32(__m64, __m64);
__m64 _mm_sign_pi8(__m64, __m64);
__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);


#line 858 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"
__m128i _mm_stream_load_si128(const __m128i *);
#line 860 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"
void _mm_stream_pd(double *, __m128d);
void _mm_stream_pi(__m64 *, __m64);
void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);

void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);
__m64 _mm_sub_si64(__m64, __m64);
__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);

unsigned int __cdecl _rotl(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);

void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);


void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


}
#line 941 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"
#line 942 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"
#line 943 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\intrin.h"
#line 6 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_integer.inl"
#pragma intrinsic(_BitScanReverse)
#line 8 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_integer.inl"









#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_integer.inl"

namespace glm{
namespace detail
{
	template<typename T>
	 inline T mask(T Bits)
	{
		return Bits >= static_cast<T>(sizeof(T) * 8) ? ~static_cast<T>(0) : (static_cast<T>(1) << Bits) - static_cast<T>(1);
	}

	template<length_t L, typename T, qualifier Q, bool Aligned, bool EXEC>
	struct compute_bitfieldReverseStep
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& v, T, T)
		{
			return v;
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_bitfieldReverseStep<L, T, Q, Aligned, true>
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& v, T Mask, T Shift)
		{
			return (v & Mask) << Shift | (v & (~Mask)) >> Shift;
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned, bool EXEC>
	struct compute_bitfieldBitCountStep
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& v, T, T)
		{
			return v;
		}
	};

	template<length_t L, typename T, qualifier Q, bool Aligned>
	struct compute_bitfieldBitCountStep<L, T, Q, Aligned, true>
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& v, T Mask, T Shift)
		{
			return (v & Mask) + ((v >> Shift) & Mask);
		}
	};

	template<typename genIUType, size_t Bits>
	struct compute_findLSB
	{
		 inline static int call(genIUType Value)
		{
			if(Value == 0)
				return -1;

			return glm::bitCount(~Value & (Value - static_cast<genIUType>(1)));
		}
	};

























#line 101 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_integer.inl"

	template<length_t L, typename T, qualifier Q, bool EXEC = true>
	struct compute_findMSB_step_vec
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x, T Shift)
		{
			return x | (x >> Shift);
		}
	};

	template<length_t L, typename T, qualifier Q>
	struct compute_findMSB_step_vec<L, T, Q, false>
	{
		 inline static vec<L, T, Q> call(vec<L, T, Q> const& x, T)
		{
			return x;
		}
	};

	template<length_t L, typename T, qualifier Q, int>
	struct compute_findMSB_vec
	{
		 inline static vec<L, int, Q> call(vec<L, T, Q> const& v)
		{
			vec<L, T, Q> x(v);
			x = compute_findMSB_step_vec<L, T, Q, sizeof(T) * 8 >=  8>::call(x, static_cast<T>( 1));
			x = compute_findMSB_step_vec<L, T, Q, sizeof(T) * 8 >=  8>::call(x, static_cast<T>( 2));
			x = compute_findMSB_step_vec<L, T, Q, sizeof(T) * 8 >=  8>::call(x, static_cast<T>( 4));
			x = compute_findMSB_step_vec<L, T, Q, sizeof(T) * 8 >= 16>::call(x, static_cast<T>( 8));
			x = compute_findMSB_step_vec<L, T, Q, sizeof(T) * 8 >= 32>::call(x, static_cast<T>(16));
			x = compute_findMSB_step_vec<L, T, Q, sizeof(T) * 8 >= 64>::call(x, static_cast<T>(32));
			return vec<L, int, Q>(sizeof(T) * 8 - 1) - glm::bitCount(~x);
		}
	};





































#line 173 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_integer.inl"
}

	
	 inline uint uaddCarry(uint const& x, uint const& y, uint & Carry)
	{
		detail::uint64 const Value64(static_cast<detail::uint64>(x) + static_cast<detail::uint64>(y));
		detail::uint64 const Max32((static_cast<detail::uint64>(1) << static_cast<detail::uint64>(32)) - static_cast<detail::uint64>(1));
		Carry = Value64 > Max32 ? 1u : 0u;
		return static_cast<uint>(Value64 % (Max32 + static_cast<detail::uint64>(1)));
	}

	template<length_t L, qualifier Q>
	 inline vec<L, uint, Q> uaddCarry(vec<L, uint, Q> const& x, vec<L, uint, Q> const& y, vec<L, uint, Q>& Carry)
	{
		vec<L, detail::uint64, Q> Value64(vec<L, detail::uint64, Q>(x) + vec<L, detail::uint64, Q>(y));
		vec<L, detail::uint64, Q> Max32((static_cast<detail::uint64>(1) << static_cast<detail::uint64>(32)) - static_cast<detail::uint64>(1));
		Carry = mix(vec<L, uint, Q>(0), vec<L, uint, Q>(1), greaterThan(Value64, Max32));
		return vec<L, uint, Q>(Value64 % (Max32 + static_cast<detail::uint64>(1)));
	}

	
	 inline uint usubBorrow(uint const& x, uint const& y, uint & Borrow)
	{
		Borrow = x >= y ? static_cast<uint>(0) : static_cast<uint>(1);
		if(y >= x)
			return y - x;
		else
			return static_cast<uint>((static_cast<detail::int64>(1) << static_cast<detail::int64>(32)) + (static_cast<detail::int64>(y) - static_cast<detail::int64>(x)));
	}

	template<length_t L, qualifier Q>
	 inline vec<L, uint, Q> usubBorrow(vec<L, uint, Q> const& x, vec<L, uint, Q> const& y, vec<L, uint, Q>& Borrow)
	{
		Borrow = mix(vec<L, uint, Q>(1), vec<L, uint, Q>(0), greaterThanEqual(x, y));
		vec<L, uint, Q> const YgeX(y - x);
		vec<L, uint, Q> const XgeY(vec<L, uint, Q>((static_cast<detail::int64>(1) << static_cast<detail::int64>(32)) + (vec<L, detail::int64, Q>(y) - vec<L, detail::int64, Q>(x))));
		return mix(XgeY, YgeX, greaterThanEqual(y, x));
	}

	
	 inline void umulExtended(uint const& x, uint const& y, uint & msb, uint & lsb)
	{
		detail::uint64 Value64 = static_cast<detail::uint64>(x) * static_cast<detail::uint64>(y);
		msb = static_cast<uint>(Value64 >> static_cast<detail::uint64>(32));
		lsb = static_cast<uint>(Value64);
	}

	template<length_t L, qualifier Q>
	 inline void umulExtended(vec<L, uint, Q> const& x, vec<L, uint, Q> const& y, vec<L, uint, Q>& msb, vec<L, uint, Q>& lsb)
	{
		vec<L, detail::uint64, Q> Value64(vec<L, detail::uint64, Q>(x) * vec<L, detail::uint64, Q>(y));
		msb = vec<L, uint, Q>(Value64 >> static_cast<detail::uint64>(32));
		lsb = vec<L, uint, Q>(Value64);
	}

	
	 inline void imulExtended(int x, int y, int& msb, int& lsb)
	{
		detail::int64 Value64 = static_cast<detail::int64>(x) * static_cast<detail::int64>(y);
		msb = static_cast<int>(Value64 >> static_cast<detail::int64>(32));
		lsb = static_cast<int>(Value64);
	}

	template<length_t L, qualifier Q>
	 inline void imulExtended(vec<L, int, Q> const& x, vec<L, int, Q> const& y, vec<L, int, Q>& msb, vec<L, int, Q>& lsb)
	{
		vec<L, detail::int64, Q> Value64(vec<L, detail::int64, Q>(x) * vec<L, detail::int64, Q>(y));
		lsb = vec<L, int, Q>(Value64 & static_cast<detail::int64>(0xFFFFFFFF));
		msb = vec<L, int, Q>((Value64 >> static_cast<detail::int64>(32)) & static_cast<detail::int64>(0xFFFFFFFF));
	}

	
	template<typename genIUType>
	 inline genIUType bitfieldExtract(genIUType Value, int Offset, int Bits)
	{
		return bitfieldExtract(vec<1, genIUType>(Value), Offset, Bits).x;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> bitfieldExtract(vec<L, T, Q> const& Value, int Offset, int Bits)
	{
		static_assert(std::numeric_limits<T>::is_integer, "'bitfieldExtract' only accept integer inputs");

		return (Value >> static_cast<T>(Offset)) & static_cast<T>(detail::mask(Bits));
	}

	
	template<typename genIUType>
	 inline genIUType bitfieldInsert(genIUType const& Base, genIUType const& Insert, int Offset, int Bits)
	{
		static_assert(std::numeric_limits<genIUType>::is_integer, "'bitfieldInsert' only accept integer values");

		return bitfieldInsert(vec<1, genIUType>(Base), vec<1, genIUType>(Insert), Offset, Bits).x;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> bitfieldInsert(vec<L, T, Q> const& Base, vec<L, T, Q> const& Insert, int Offset, int Bits)
	{
		static_assert(std::numeric_limits<T>::is_integer, "'bitfieldInsert' only accept integer values");

		T const Mask = static_cast<T>(detail::mask(Bits) << Offset);
		return (Base & ~Mask) | ((Insert << static_cast<T>(Offset)) & Mask);
	}

	
	template<typename genIUType>
	 inline genIUType bitfieldReverse(genIUType x)
	{
		static_assert(std::numeric_limits<genIUType>::is_integer, "'bitfieldReverse' only accept integer values");

		return bitfieldReverse(glm::vec<1, genIUType, glm::defaultp>(x)).x;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, T, Q> bitfieldReverse(vec<L, T, Q> const& v)
	{
		static_assert(std::numeric_limits<T>::is_integer, "'bitfieldReverse' only accept integer values");

		vec<L, T, Q> x(v);
		x = detail::compute_bitfieldReverseStep<L, T, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>=  2>::call(x, static_cast<T>(0x5555555555555555ull), static_cast<T>( 1));
		x = detail::compute_bitfieldReverseStep<L, T, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>=  4>::call(x, static_cast<T>(0x3333333333333333ull), static_cast<T>( 2));
		x = detail::compute_bitfieldReverseStep<L, T, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>=  8>::call(x, static_cast<T>(0x0F0F0F0F0F0F0F0Full), static_cast<T>( 4));
		x = detail::compute_bitfieldReverseStep<L, T, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>= 16>::call(x, static_cast<T>(0x00FF00FF00FF00FFull), static_cast<T>( 8));
		x = detail::compute_bitfieldReverseStep<L, T, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>= 32>::call(x, static_cast<T>(0x0000FFFF0000FFFFull), static_cast<T>(16));
		x = detail::compute_bitfieldReverseStep<L, T, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>= 64>::call(x, static_cast<T>(0x00000000FFFFFFFFull), static_cast<T>(32));
		return x;
	}

	
	template<typename genIUType>
	 inline int bitCount(genIUType x)
	{
		static_assert(std::numeric_limits<genIUType>::is_integer, "'bitCount' only accept integer values");

		return bitCount(glm::vec<1, genIUType, glm::defaultp>(x)).x;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, int, Q> bitCount(vec<L, T, Q> const& v)
	{
		static_assert(std::numeric_limits<T>::is_integer, "'bitCount' only accept integer values");


#pragma warning(push)
#pragma warning(disable : 4310) 
#line 319 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_integer.inl"

		vec<L, typename detail::make_unsigned<T>::type, Q> x(*reinterpret_cast<vec<L, typename detail::make_unsigned<T>::type, Q> const *>(&v));
		x = detail::compute_bitfieldBitCountStep<L, typename detail::make_unsigned<T>::type, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>=  2>::call(x, typename detail::make_unsigned<T>::type(0x5555555555555555ull), typename detail::make_unsigned<T>::type( 1));
		x = detail::compute_bitfieldBitCountStep<L, typename detail::make_unsigned<T>::type, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>=  4>::call(x, typename detail::make_unsigned<T>::type(0x3333333333333333ull), typename detail::make_unsigned<T>::type( 2));
		x = detail::compute_bitfieldBitCountStep<L, typename detail::make_unsigned<T>::type, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>=  8>::call(x, typename detail::make_unsigned<T>::type(0x0F0F0F0F0F0F0F0Full), typename detail::make_unsigned<T>::type( 4));
		x = detail::compute_bitfieldBitCountStep<L, typename detail::make_unsigned<T>::type, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>= 16>::call(x, typename detail::make_unsigned<T>::type(0x00FF00FF00FF00FFull), typename detail::make_unsigned<T>::type( 8));
		x = detail::compute_bitfieldBitCountStep<L, typename detail::make_unsigned<T>::type, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>= 32>::call(x, typename detail::make_unsigned<T>::type(0x0000FFFF0000FFFFull), typename detail::make_unsigned<T>::type(16));
		x = detail::compute_bitfieldBitCountStep<L, typename detail::make_unsigned<T>::type, Q, detail::is_aligned<Q>::value, sizeof(T) * 8>= 64>::call(x, typename detail::make_unsigned<T>::type(0x00000000FFFFFFFFull), typename detail::make_unsigned<T>::type(32));
		return vec<L, int, Q>(x);


#pragma warning(pop)
#line 332 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_integer.inl"
	}

	
	template<typename genIUType>
	 inline int findLSB(genIUType Value)
	{
		static_assert(std::numeric_limits<genIUType>::is_integer, "'findLSB' only accept integer values");

		return detail::compute_findLSB<genIUType, sizeof(genIUType) * 8>::call(Value);
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, int, Q> findLSB(vec<L, T, Q> const& x)
	{
		static_assert(std::numeric_limits<T>::is_integer, "'findLSB' only accept integer values");

		return detail::functor1<vec, L, int, T, Q>::call(findLSB, x);
	}

	
	template<typename genIUType>
	 inline int findMSB(genIUType v)
	{
		static_assert(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");

		return findMSB(vec<1, genIUType>(v)).x;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, int, Q> findMSB(vec<L, T, Q> const& v)
	{
		static_assert(std::numeric_limits<T>::is_integer, "'findMSB' only accept integer values");

		return detail::compute_findMSB_vec<L, T, Q, sizeof(T) * 8>::call(v);
	}
}



#line 372 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\func_integer.inl"

#line 213 "d:\\vsprojects\\openglproject\\includes\\glm\\integer.hpp"
#line 137 "d:\\vsprojects\\openglproject\\includes\\glm\\glm.hpp"
#line 11 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\matrix_transform.hpp"




















#pragma once






#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_projection.hpp"



















#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\constants.hpp"












#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\scalar_constants.hpp"










#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 15 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\scalar_constants.hpp"



#line 19 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\scalar_constants.hpp"

namespace glm
{
	
	

	
	template<typename genType>
	 constexpr genType epsilon();

	
	template<typename genType>
	 constexpr genType pi();

	
} 

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\scalar_constants.inl"


namespace glm
{
	template<typename genType>
	 inline constexpr genType epsilon()
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'epsilon' only accepts floating-point inputs");
		return std::numeric_limits<genType>::epsilon();
	}

	template<typename genType>
	 inline constexpr genType pi()
	{
		static_assert(std::numeric_limits<genType>::is_iec559, "'pi' only accepts floating-point inputs");
		return static_cast<genType>(3.14159265358979323846264338327950288);
	}
} 
#line 37 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\scalar_constants.hpp"
#line 17 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\constants.hpp"



#line 21 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\constants.hpp"

namespace glm
{
	
	

	
	
	template<typename genType>
	 constexpr genType zero();

	
	
	template<typename genType>
	 constexpr genType one();

	
	
	template<typename genType>
	 constexpr genType two_pi();

	
	
	template<typename genType>
	 constexpr genType root_pi();

	
	
	template<typename genType>
	 constexpr genType half_pi();

	
	
	template<typename genType>
	 constexpr genType three_over_two_pi();

	
	
	template<typename genType>
	 constexpr genType quarter_pi();

	
	
	template<typename genType>
	 constexpr genType one_over_pi();

	
	
	template<typename genType>
	 constexpr genType one_over_two_pi();

	
	
	template<typename genType>
	 constexpr genType two_over_pi();

	
	
	template<typename genType>
	 constexpr genType four_over_pi();

	
	
	template<typename genType>
	 constexpr genType two_over_root_pi();

	
	
	template<typename genType>
	 constexpr genType one_over_root_two();

	
	
	template<typename genType>
	 constexpr genType root_half_pi();

	
	
	template<typename genType>
	 constexpr genType root_two_pi();

	
	
	template<typename genType>
	 constexpr genType root_ln_four();

	
	
	template<typename genType>
	 constexpr genType e();

	
	
	template<typename genType>
	 constexpr genType euler();

	
	
	template<typename genType>
	 constexpr genType root_two();

	
	
	template<typename genType>
	 constexpr genType root_three();

	
	
	template<typename genType>
	 constexpr genType root_five();

	
	
	template<typename genType>
	 constexpr genType ln_two();

	
	
	template<typename genType>
	 constexpr genType ln_ten();

	
	
	template<typename genType>
	 constexpr genType ln_ln_two();

	
	
	template<typename genType>
	 constexpr genType third();

	
	
	template<typename genType>
	 constexpr genType two_thirds();

	
	
	template<typename genType>
	 constexpr genType golden_ratio();

	
} 

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\constants.inl"


namespace glm
{
	template<typename genType>
	 inline constexpr genType zero()
	{
		return genType(0);
	}

	template<typename genType>
	 inline constexpr genType one()
	{
		return genType(1);
	}

	template<typename genType>
	 inline constexpr genType two_pi()
	{
		return genType(6.28318530717958647692528676655900576);
	}

	template<typename genType>
	 inline constexpr genType root_pi()
	{
		return genType(1.772453850905516027);
	}

	template<typename genType>
	 inline constexpr genType half_pi()
	{
		return genType(1.57079632679489661923132169163975144);
	}

	template<typename genType>
	 inline constexpr genType three_over_two_pi()
	{
		return genType(4.71238898038468985769396507491925432);
	}

	template<typename genType>
	 inline constexpr genType quarter_pi()
	{
		return genType(0.785398163397448309615660845819875721);
	}

	template<typename genType>
	 inline constexpr genType one_over_pi()
	{
		return genType(0.318309886183790671537767526745028724);
	}

	template<typename genType>
	 inline constexpr genType one_over_two_pi()
	{
		return genType(0.159154943091895335768883763372514362);
	}

	template<typename genType>
	 inline constexpr genType two_over_pi()
	{
		return genType(0.636619772367581343075535053490057448);
	}

	template<typename genType>
	 inline constexpr genType four_over_pi()
	{
		return genType(1.273239544735162686151070106980114898);
	}

	template<typename genType>
	 inline constexpr genType two_over_root_pi()
	{
		return genType(1.12837916709551257389615890312154517);
	}

	template<typename genType>
	 inline constexpr genType one_over_root_two()
	{
		return genType(0.707106781186547524400844362104849039);
	}

	template<typename genType>
	 inline constexpr genType root_half_pi()
	{
		return genType(1.253314137315500251);
	}

	template<typename genType>
	 inline constexpr genType root_two_pi()
	{
		return genType(2.506628274631000502);
	}

	template<typename genType>
	 inline constexpr genType root_ln_four()
	{
		return genType(1.17741002251547469);
	}

	template<typename genType>
	 inline constexpr genType e()
	{
		return genType(2.71828182845904523536);
	}

	template<typename genType>
	 inline constexpr genType euler()
	{
		return genType(0.577215664901532860606);
	}

	template<typename genType>
	 inline constexpr genType root_two()
	{
		return genType(1.41421356237309504880168872420969808);
	}

	template<typename genType>
	 inline constexpr genType root_three()
	{
		return genType(1.73205080756887729352744634150587236);
	}

	template<typename genType>
	 inline constexpr genType root_five()
	{
		return genType(2.23606797749978969640917366873127623);
	}

	template<typename genType>
	 inline constexpr genType ln_two()
	{
		return genType(0.693147180559945309417232121458176568);
	}

	template<typename genType>
	 inline constexpr genType ln_ten()
	{
		return genType(2.30258509299404568401799145468436421);
	}

	template<typename genType>
	 inline constexpr genType ln_ln_two()
	{
		return genType(-0.3665129205816643);
	}

	template<typename genType>
	 inline constexpr genType third()
	{
		return genType(0.3333333333333333333333333333333333333333);
	}

	template<typename genType>
	 inline constexpr genType two_thirds()
	{
		return genType(0.666666666666666666666666666666666666667);
	}

	template<typename genType>
	 inline constexpr genType golden_ratio()
	{
		return genType(1.61803398874989484820458683436563811);
	}
} 
#line 166 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\constants.hpp"
#line 24 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_projection.hpp"






#line 31 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_projection.hpp"

namespace glm
{
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	template<typename T, typename U, qualifier Q>
	 vec<3, T, Q> projectZO(
		vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport);

	
	
	
	
	
	
	
	
	
	
	
	
	template<typename T, typename U, qualifier Q>
	 vec<3, T, Q> projectNO(
		vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport);

	
	
	
	
	
	
	
	
	
	
	
	
	template<typename T, typename U, qualifier Q>
	 vec<3, T, Q> project(
		vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport);

	
	
	
	
	
	
	
	
	
	
	
	
	template<typename T, typename U, qualifier Q>
	 vec<3, T, Q> unProjectZO(
		vec<3, T, Q> const& win, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport);

	
	
	
	
	
	
	
	
	
	
	
	
	template<typename T, typename U, qualifier Q>
	 vec<3, T, Q> unProjectNO(
		vec<3, T, Q> const& win, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport);

	
	
	
	
	
	
	
	
	
	
	
	
	template<typename T, typename U, qualifier Q>
	 vec<3, T, Q> unProject(
		vec<3, T, Q> const& win, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport);

	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q, typename U>
	 mat<4, 4, T, Q> pickMatrix(
		vec<2, T, Q> const& center, vec<2, T, Q> const& delta, vec<4, U, Q> const& viewport);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_projection.inl"
namespace glm
{
	template<typename T, typename U, qualifier Q>
	 inline vec<3, T, Q> projectZO(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport)
	{
		vec<4, T, Q> tmp = vec<4, T, Q>(obj, static_cast<T>(1));
		tmp = model * tmp;
		tmp = proj * tmp;

		tmp /= tmp.w;
		tmp.x = tmp.x * static_cast<T>(0.5) + static_cast<T>(0.5);
		tmp.y = tmp.y * static_cast<T>(0.5) + static_cast<T>(0.5);

		tmp[0] = tmp[0] * T(viewport[2]) + T(viewport[0]);
		tmp[1] = tmp[1] * T(viewport[3]) + T(viewport[1]);

		return vec<3, T, Q>(tmp);
	}

	template<typename T, typename U, qualifier Q>
	 inline vec<3, T, Q> projectNO(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport)
	{
		vec<4, T, Q> tmp = vec<4, T, Q>(obj, static_cast<T>(1));
		tmp = model * tmp;
		tmp = proj * tmp;

		tmp /= tmp.w;
		tmp = tmp * static_cast<T>(0.5) + static_cast<T>(0.5);
		tmp[0] = tmp[0] * T(viewport[2]) + T(viewport[0]);
		tmp[1] = tmp[1] * T(viewport[3]) + T(viewport[1]);

		return vec<3, T, Q>(tmp);
	}

	template<typename T, typename U, qualifier Q>
	 inline vec<3, T, Q> project(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return projectZO(obj, model, proj, viewport);
		else
			return projectNO(obj, model, proj, viewport);
	}

	template<typename T, typename U, qualifier Q>
	 inline vec<3, T, Q> unProjectZO(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport)
	{
		mat<4, 4, T, Q> Inverse = inverse(proj * model);

		vec<4, T, Q> tmp = vec<4, T, Q>(win, T(1));
		tmp.x = (tmp.x - T(viewport[0])) / T(viewport[2]);
		tmp.y = (tmp.y - T(viewport[1])) / T(viewport[3]);
		tmp.x = tmp.x * static_cast<T>(2) - static_cast<T>(1);
		tmp.y = tmp.y * static_cast<T>(2) - static_cast<T>(1);

		vec<4, T, Q> obj = Inverse * tmp;
		obj /= obj.w;

		return vec<3, T, Q>(obj);
	}

	template<typename T, typename U, qualifier Q>
	 inline vec<3, T, Q> unProjectNO(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport)
	{
		mat<4, 4, T, Q> Inverse = inverse(proj * model);

		vec<4, T, Q> tmp = vec<4, T, Q>(win, T(1));
		tmp.x = (tmp.x - T(viewport[0])) / T(viewport[2]);
		tmp.y = (tmp.y - T(viewport[1])) / T(viewport[3]);
		tmp = tmp * static_cast<T>(2) - static_cast<T>(1);

		vec<4, T, Q> obj = Inverse * tmp;
		obj /= obj.w;

		return vec<3, T, Q>(obj);
	}

	template<typename T, typename U, qualifier Q>
	 inline vec<3, T, Q> unProject(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& model, mat<4, 4, T, Q> const& proj, vec<4, U, Q> const& viewport)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return unProjectZO(win, model, proj, viewport);
		else
			return unProjectNO(win, model, proj, viewport);
	}

	template<typename T, qualifier Q, typename U>
	 inline mat<4, 4, T, Q> pickMatrix(vec<2, T, Q> const& center, vec<2, T, Q> const& delta, vec<4, U, Q> const& viewport)
	{
		(void)( (!!(delta.x > static_cast<T>(0) && delta.y > static_cast<T>(0))) || (_wassert(L"delta.x > static_cast<T>(0) && delta.y > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_projection.inl", (unsigned)(89)), 0) );
		mat<4, 4, T, Q> Result(static_cast<T>(1));

		if(!(delta.x > static_cast<T>(0) && delta.y > static_cast<T>(0)))
			return Result; 

		vec<3, T, Q> Temp(
			(static_cast<T>(viewport[2]) - static_cast<T>(2) * (center.x - static_cast<T>(viewport[0]))) / delta.x,
			(static_cast<T>(viewport[3]) - static_cast<T>(2) * (center.y - static_cast<T>(viewport[1]))) / delta.y,
			static_cast<T>(0));

		
		Result = translate(Result, Temp);
		return scale(Result, vec<3, T, Q>(static_cast<T>(viewport[2]) / delta.x, static_cast<T>(viewport[3]) / delta.y, static_cast<T>(1)));
	}
}
#line 150 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_projection.hpp"
#line 29 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\matrix_transform.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.hpp"



















#pragma once








#line 30 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.hpp"

namespace glm
{
	
	

	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> ortho(
		T left, T right, T bottom, T top);

	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> orthoLH_ZO(
		T left, T right, T bottom, T top, T zNear, T zFar);

	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> orthoLH_NO(
		T left, T right, T bottom, T top, T zNear, T zFar);

	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> orthoRH_ZO(
		T left, T right, T bottom, T top, T zNear, T zFar);

	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> orthoRH_NO(
		T left, T right, T bottom, T top, T zNear, T zFar);

	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> orthoZO(
		T left, T right, T bottom, T top, T zNear, T zFar);

	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> orthoNO(
		T left, T right, T bottom, T top, T zNear, T zFar);

	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> orthoLH(
		T left, T right, T bottom, T top, T zNear, T zFar);

	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> orthoRH(
		T left, T right, T bottom, T top, T zNear, T zFar);

	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> ortho(
		T left, T right, T bottom, T top, T zNear, T zFar);

	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> frustumLH_ZO(
		T left, T right, T bottom, T top, T , T );

	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> frustumLH_NO(
		T left, T right, T bottom, T top, T , T );

	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> frustumRH_ZO(
		T left, T right, T bottom, T top, T , T );

	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> frustumRH_NO(
		T left, T right, T bottom, T top, T , T );

	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> frustumZO(
		T left, T right, T bottom, T top, T , T );

	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> frustumNO(
		T left, T right, T bottom, T top, T , T );

	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> frustumLH(
		T left, T right, T bottom, T top, T , T );

	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> frustumRH(
		T left, T right, T bottom, T top, T , T );

	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> frustum(
		T left, T right, T bottom, T top, T , T );


	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveRH_ZO(
		T fovy, T aspect, T , T );

	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveRH_NO(
		T fovy, T aspect, T , T );

	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveLH_ZO(
		T fovy, T aspect, T , T );

	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveLH_NO(
		T fovy, T aspect, T , T );

	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveZO(
		T fovy, T aspect, T , T );

	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveNO(
		T fovy, T aspect, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveRH(
		T fovy, T aspect, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveLH(
		T fovy, T aspect, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspective(
		T fovy, T aspect, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveFovRH_ZO(
		T fov, T width, T height, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveFovRH_NO(
		T fov, T width, T height, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveFovLH_ZO(
		T fov, T width, T height, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveFovLH_NO(
		T fov, T width, T height, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveFovZO(
		T fov, T width, T height, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveFovNO(
		T fov, T width, T height, T , T );

	
	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveFovRH(
		T fov, T width, T height, T , T );

	
	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveFovLH(
		T fov, T width, T height, T , T );

	
	
	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> perspectiveFov(
		T fov, T width, T height, T , T );

	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> infinitePerspectiveLH(
		T fovy, T aspect, T );

	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> infinitePerspectiveRH(
		T fovy, T aspect, T );

	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> infinitePerspective(
		T fovy, T aspect, T );

	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> tweakedInfinitePerspective(
		T fovy, T aspect, T );

	
	
	
	
	
	
	
	
	template<typename T>
	 mat<4, 4, T, defaultp> tweakedInfinitePerspective(
		T fovy, T aspect, T , T ep);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl"
namespace glm
{
	template<typename T>
	 inline mat<4, 4, T, defaultp> ortho(T left, T right, T bottom, T top)
	{
		mat<4, 4, T, defaultp> Result(static_cast<T>(1));
		Result[0][0] = static_cast<T>(2) / (right - left);
		Result[1][1] = static_cast<T>(2) / (top - bottom);
		Result[2][2] = - static_cast<T>(1);
		Result[3][0] = - (right + left) / (right - left);
		Result[3][1] = - (top + bottom) / (top - bottom);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> orthoLH_ZO(T left, T right, T bottom, T top, T zNear, T zFar)
	{
		mat<4, 4, T, defaultp> Result(1);
		Result[0][0] = static_cast<T>(2) / (right - left);
		Result[1][1] = static_cast<T>(2) / (top - bottom);
		Result[2][2] = static_cast<T>(1) / (zFar - zNear);
		Result[3][0] = - (right + left) / (right - left);
		Result[3][1] = - (top + bottom) / (top - bottom);
		Result[3][2] = - zNear / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> orthoLH_NO(T left, T right, T bottom, T top, T zNear, T zFar)
	{
		mat<4, 4, T, defaultp> Result(1);
		Result[0][0] = static_cast<T>(2) / (right - left);
		Result[1][1] = static_cast<T>(2) / (top - bottom);
		Result[2][2] = static_cast<T>(2) / (zFar - zNear);
		Result[3][0] = - (right + left) / (right - left);
		Result[3][1] = - (top + bottom) / (top - bottom);
		Result[3][2] = - (zFar + zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> orthoRH_ZO(T left, T right, T bottom, T top, T zNear, T zFar)
	{
		mat<4, 4, T, defaultp> Result(1);
		Result[0][0] = static_cast<T>(2) / (right - left);
		Result[1][1] = static_cast<T>(2) / (top - bottom);
		Result[2][2] = - static_cast<T>(1) / (zFar - zNear);
		Result[3][0] = - (right + left) / (right - left);
		Result[3][1] = - (top + bottom) / (top - bottom);
		Result[3][2] = - zNear / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> orthoRH_NO(T left, T right, T bottom, T top, T zNear, T zFar)
	{
		mat<4, 4, T, defaultp> Result(1);
		Result[0][0] = static_cast<T>(2) / (right - left);
		Result[1][1] = static_cast<T>(2) / (top - bottom);
		Result[2][2] = - static_cast<T>(2) / (zFar - zNear);
		Result[3][0] = - (right + left) / (right - left);
		Result[3][1] = - (top + bottom) / (top - bottom);
		Result[3][2] = - (zFar + zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> orthoZO(T left, T right, T bottom, T top, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return orthoLH_ZO(left, right, bottom, top, zNear, zFar);
		else
			return orthoRH_ZO(left, right, bottom, top, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> orthoNO(T left, T right, T bottom, T top, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return orthoLH_NO(left, right, bottom, top, zNear, zFar);
		else
			return orthoRH_NO(left, right, bottom, top, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> orthoLH(T left, T right, T bottom, T top, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return orthoLH_ZO(left, right, bottom, top, zNear, zFar);
		else
			return orthoLH_NO(left, right, bottom, top, zNear, zFar);

	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> orthoRH(T left, T right, T bottom, T top, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return orthoRH_ZO(left, right, bottom, top, zNear, zFar);
		else
			return orthoRH_NO(left, right, bottom, top, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> ortho(T left, T right, T bottom, T top, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) == ((1 << 2) | (1 << 0)))
			return orthoLH_ZO(left, right, bottom, top, zNear, zFar);
		else if(((1 << 2) | (1 << 1)) == ((1 << 2) | (1 << 1)))
			return orthoLH_NO(left, right, bottom, top, zNear, zFar);
		else if(((1 << 2) | (1 << 1)) == ((1 << 3) | (1 << 0)))
			return orthoRH_ZO(left, right, bottom, top, zNear, zFar);
		else if(((1 << 2) | (1 << 1)) == ((1 << 3) | (1 << 1)))
			return orthoRH_NO(left, right, bottom, top, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> frustumLH_ZO(T left, T right, T bottom, T top, T nearVal, T farVal)
	{
		mat<4, 4, T, defaultp> Result(0);
		Result[0][0] = (static_cast<T>(2) * nearVal) / (right - left);
		Result[1][1] = (static_cast<T>(2) * nearVal) / (top - bottom);
		Result[2][0] = (right + left) / (right - left);
		Result[2][1] = (top + bottom) / (top - bottom);
		Result[2][2] = farVal / (farVal - nearVal);
		Result[2][3] = static_cast<T>(1);
		Result[3][2] = -(farVal * nearVal) / (farVal - nearVal);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> frustumLH_NO(T left, T right, T bottom, T top, T nearVal, T farVal)
	{
		mat<4, 4, T, defaultp> Result(0);
		Result[0][0] = (static_cast<T>(2) * nearVal) / (right - left);
		Result[1][1] = (static_cast<T>(2) * nearVal) / (top - bottom);
		Result[2][0] = (right + left) / (right - left);
		Result[2][1] = (top + bottom) / (top - bottom);
		Result[2][2] = (farVal + nearVal) / (farVal - nearVal);
		Result[2][3] = static_cast<T>(1);
		Result[3][2] = - (static_cast<T>(2) * farVal * nearVal) / (farVal - nearVal);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> frustumRH_ZO(T left, T right, T bottom, T top, T nearVal, T farVal)
	{
		mat<4, 4, T, defaultp> Result(0);
		Result[0][0] = (static_cast<T>(2) * nearVal) / (right - left);
		Result[1][1] = (static_cast<T>(2) * nearVal) / (top - bottom);
		Result[2][0] = (right + left) / (right - left);
		Result[2][1] = (top + bottom) / (top - bottom);
		Result[2][2] = farVal / (nearVal - farVal);
		Result[2][3] = static_cast<T>(-1);
		Result[3][2] = -(farVal * nearVal) / (farVal - nearVal);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> frustumRH_NO(T left, T right, T bottom, T top, T nearVal, T farVal)
	{
		mat<4, 4, T, defaultp> Result(0);
		Result[0][0] = (static_cast<T>(2) * nearVal) / (right - left);
		Result[1][1] = (static_cast<T>(2) * nearVal) / (top - bottom);
		Result[2][0] = (right + left) / (right - left);
		Result[2][1] = (top + bottom) / (top - bottom);
		Result[2][2] = - (farVal + nearVal) / (farVal - nearVal);
		Result[2][3] = static_cast<T>(-1);
		Result[3][2] = - (static_cast<T>(2) * farVal * nearVal) / (farVal - nearVal);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> frustumZO(T left, T right, T bottom, T top, T nearVal, T farVal)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return frustumLH_ZO(left, right, bottom, top, nearVal, farVal);
		else
			return frustumRH_ZO(left, right, bottom, top, nearVal, farVal);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> frustumNO(T left, T right, T bottom, T top, T nearVal, T farVal)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return frustumLH_NO(left, right, bottom, top, nearVal, farVal);
		else
			return frustumRH_NO(left, right, bottom, top, nearVal, farVal);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> frustumLH(T left, T right, T bottom, T top, T nearVal, T farVal)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return frustumLH_ZO(left, right, bottom, top, nearVal, farVal);
		else
			return frustumLH_NO(left, right, bottom, top, nearVal, farVal);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> frustumRH(T left, T right, T bottom, T top, T nearVal, T farVal)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return frustumRH_ZO(left, right, bottom, top, nearVal, farVal);
		else
			return frustumRH_NO(left, right, bottom, top, nearVal, farVal);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> frustum(T left, T right, T bottom, T top, T nearVal, T farVal)
	{
		if(((1 << 2) | (1 << 1)) == ((1 << 2) | (1 << 0)))
			return frustumLH_ZO(left, right, bottom, top, nearVal, farVal);
		else if(((1 << 2) | (1 << 1)) == ((1 << 2) | (1 << 1)))
			return frustumLH_NO(left, right, bottom, top, nearVal, farVal);
		else if(((1 << 2) | (1 << 1)) == ((1 << 3) | (1 << 0)))
			return frustumRH_ZO(left, right, bottom, top, nearVal, farVal);
		else if(((1 << 2) | (1 << 1)) == ((1 << 3) | (1 << 1)))
			return frustumRH_NO(left, right, bottom, top, nearVal, farVal);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveRH_ZO(T fovy, T aspect, T zNear, T zFar)
	{
		(void)( (!!(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0))) || (_wassert(L"abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(225)), 0) );

		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);
		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);
		Result[2][2] = zFar / (zNear - zFar);
		Result[2][3] = - static_cast<T>(1);
		Result[3][2] = -(zFar * zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveRH_NO(T fovy, T aspect, T zNear, T zFar)
	{
		(void)( (!!(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0))) || (_wassert(L"abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(241)), 0) );

		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);
		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);
		Result[2][2] = - (zFar + zNear) / (zFar - zNear);
		Result[2][3] = - static_cast<T>(1);
		Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveLH_ZO(T fovy, T aspect, T zNear, T zFar)
	{
		(void)( (!!(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0))) || (_wassert(L"abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(257)), 0) );

		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);
		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);
		Result[2][2] = zFar / (zFar - zNear);
		Result[2][3] = static_cast<T>(1);
		Result[3][2] = -(zFar * zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveLH_NO(T fovy, T aspect, T zNear, T zFar)
	{
		(void)( (!!(abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0))) || (_wassert(L"abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(273)), 0) );

		T const tanHalfFovy = tan(fovy / static_cast<T>(2));

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);
		Result[1][1] = static_cast<T>(1) / (tanHalfFovy);
		Result[2][2] = (zFar + zNear) / (zFar - zNear);
		Result[2][3] = static_cast<T>(1);
		Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveZO(T fovy, T aspect, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return perspectiveLH_ZO(fovy, aspect, zNear, zFar);
		else
			return perspectiveRH_ZO(fovy, aspect, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveNO(T fovy, T aspect, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return perspectiveLH_NO(fovy, aspect, zNear, zFar);
		else
			return perspectiveRH_NO(fovy, aspect, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveLH(T fovy, T aspect, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return perspectiveLH_ZO(fovy, aspect, zNear, zFar);
		else
			return perspectiveLH_NO(fovy, aspect, zNear, zFar);

	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveRH(T fovy, T aspect, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return perspectiveRH_ZO(fovy, aspect, zNear, zFar);
		else
			return perspectiveRH_NO(fovy, aspect, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspective(T fovy, T aspect, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) == ((1 << 2) | (1 << 0)))
			return perspectiveLH_ZO(fovy, aspect, zNear, zFar);
		else if(((1 << 2) | (1 << 1)) == ((1 << 2) | (1 << 1)))
			return perspectiveLH_NO(fovy, aspect, zNear, zFar);
		else if(((1 << 2) | (1 << 1)) == ((1 << 3) | (1 << 0)))
			return perspectiveRH_ZO(fovy, aspect, zNear, zFar);
		else if(((1 << 2) | (1 << 1)) == ((1 << 3) | (1 << 1)))
			return perspectiveRH_NO(fovy, aspect, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveFovRH_ZO(T fov, T width, T height, T zNear, T zFar)
	{
		(void)( (!!(width > static_cast<T>(0))) || (_wassert(L"width > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(339)), 0) );
		(void)( (!!(height > static_cast<T>(0))) || (_wassert(L"height > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(340)), 0) );
		(void)( (!!(fov > static_cast<T>(0))) || (_wassert(L"fov > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(341)), 0) );

		T const rad = fov;
		T const h = glm::cos(static_cast<T>(0.5) * rad) / glm::sin(static_cast<T>(0.5) * rad);
		T const w = h * height / width; 

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = w;
		Result[1][1] = h;
		Result[2][2] = zFar / (zNear - zFar);
		Result[2][3] = - static_cast<T>(1);
		Result[3][2] = -(zFar * zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveFovRH_NO(T fov, T width, T height, T zNear, T zFar)
	{
		(void)( (!!(width > static_cast<T>(0))) || (_wassert(L"width > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(359)), 0) );
		(void)( (!!(height > static_cast<T>(0))) || (_wassert(L"height > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(360)), 0) );
		(void)( (!!(fov > static_cast<T>(0))) || (_wassert(L"fov > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(361)), 0) );

		T const rad = fov;
		T const h = glm::cos(static_cast<T>(0.5) * rad) / glm::sin(static_cast<T>(0.5) * rad);
		T const w = h * height / width; 

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = w;
		Result[1][1] = h;
		Result[2][2] = - (zFar + zNear) / (zFar - zNear);
		Result[2][3] = - static_cast<T>(1);
		Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveFovLH_ZO(T fov, T width, T height, T zNear, T zFar)
	{
		(void)( (!!(width > static_cast<T>(0))) || (_wassert(L"width > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(379)), 0) );
		(void)( (!!(height > static_cast<T>(0))) || (_wassert(L"height > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(380)), 0) );
		(void)( (!!(fov > static_cast<T>(0))) || (_wassert(L"fov > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(381)), 0) );

		T const rad = fov;
		T const h = glm::cos(static_cast<T>(0.5) * rad) / glm::sin(static_cast<T>(0.5) * rad);
		T const w = h * height / width; 

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = w;
		Result[1][1] = h;
		Result[2][2] = zFar / (zFar - zNear);
		Result[2][3] = static_cast<T>(1);
		Result[3][2] = -(zFar * zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveFovLH_NO(T fov, T width, T height, T zNear, T zFar)
	{
		(void)( (!!(width > static_cast<T>(0))) || (_wassert(L"width > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(399)), 0) );
		(void)( (!!(height > static_cast<T>(0))) || (_wassert(L"height > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(400)), 0) );
		(void)( (!!(fov > static_cast<T>(0))) || (_wassert(L"fov > static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.inl", (unsigned)(401)), 0) );

		T const rad = fov;
		T const h = glm::cos(static_cast<T>(0.5) * rad) / glm::sin(static_cast<T>(0.5) * rad);
		T const w = h * height / width; 

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = w;
		Result[1][1] = h;
		Result[2][2] = (zFar + zNear) / (zFar - zNear);
		Result[2][3] = static_cast<T>(1);
		Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveFovZO(T fov, T width, T height, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return perspectiveFovLH_ZO(fov, width, height, zNear, zFar);
		else
			return perspectiveFovRH_ZO(fov, width, height, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveFovNO(T fov, T width, T height, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return perspectiveFovLH_NO(fov, width, height, zNear, zFar);
		else
			return perspectiveFovRH_NO(fov, width, height, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveFovLH(T fov, T width, T height, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return perspectiveFovLH_ZO(fov, width, height, zNear, zFar);
		else
			return perspectiveFovLH_NO(fov, width, height, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveFovRH(T fov, T width, T height, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 0))
			return perspectiveFovRH_ZO(fov, width, height, zNear, zFar);
		else
			return perspectiveFovRH_NO(fov, width, height, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> perspectiveFov(T fov, T width, T height, T zNear, T zFar)
	{
		if(((1 << 2) | (1 << 1)) == ((1 << 2) | (1 << 0)))
			return perspectiveFovLH_ZO(fov, width, height, zNear, zFar);
		else if(((1 << 2) | (1 << 1)) == ((1 << 2) | (1 << 1)))
			return perspectiveFovLH_NO(fov, width, height, zNear, zFar);
		else if(((1 << 2) | (1 << 1)) == ((1 << 3) | (1 << 0)))
			return perspectiveFovRH_ZO(fov, width, height, zNear, zFar);
		else if(((1 << 2) | (1 << 1)) == ((1 << 3) | (1 << 1)))
			return perspectiveFovRH_NO(fov, width, height, zNear, zFar);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> infinitePerspectiveRH(T fovy, T aspect, T zNear)
	{
		T const range = tan(fovy / static_cast<T>(2)) * zNear;
		T const left = -range * aspect;
		T const right = range * aspect;
		T const bottom = -range;
		T const top = range;

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = (static_cast<T>(2) * zNear) / (right - left);
		Result[1][1] = (static_cast<T>(2) * zNear) / (top - bottom);
		Result[2][2] = - static_cast<T>(1);
		Result[2][3] = - static_cast<T>(1);
		Result[3][2] = - static_cast<T>(2) * zNear;
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> infinitePerspectiveLH(T fovy, T aspect, T zNear)
	{
		T const range = tan(fovy / static_cast<T>(2)) * zNear;
		T const left = -range * aspect;
		T const right = range * aspect;
		T const bottom = -range;
		T const top = range;

		mat<4, 4, T, defaultp> Result(T(0));
		Result[0][0] = (static_cast<T>(2) * zNear) / (right - left);
		Result[1][1] = (static_cast<T>(2) * zNear) / (top - bottom);
		Result[2][2] = static_cast<T>(1);
		Result[2][3] = static_cast<T>(1);
		Result[3][2] = - static_cast<T>(2) * zNear;
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> infinitePerspective(T fovy, T aspect, T zNear)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return infinitePerspectiveLH(fovy, aspect, zNear);
		else
			return infinitePerspectiveRH(fovy, aspect, zNear);
	}

	
	template<typename T>
	 inline mat<4, 4, T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear, T ep)
	{
		T const range = tan(fovy / static_cast<T>(2)) * zNear;
		T const left = -range * aspect;
		T const right = range * aspect;
		T const bottom = -range;
		T const top = range;

		mat<4, 4, T, defaultp> Result(static_cast<T>(0));
		Result[0][0] = (static_cast<T>(2) * zNear) / (right - left);
		Result[1][1] = (static_cast<T>(2) * zNear) / (top - bottom);
		Result[2][2] = ep - static_cast<T>(1);
		Result[2][3] = static_cast<T>(-1);
		Result[3][2] = (ep - static_cast<T>(2)) * zNear;
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear)
	{
		return tweakedInfinitePerspective(fovy, aspect, zNear, epsilon<T>());
	}
}
#line 523 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_clip_space.hpp"
#line 30 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\matrix_transform.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_transform.hpp"



















#pragma once









#line 31 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_transform.hpp"

namespace glm
{
	
	

	
	template<typename genType>
	 constexpr genType identity();

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> translate(
		mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v);

	
	
	
	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> rotate(
		mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> const& axis);

	
	
	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> scale(
		mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v);

	
	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> lookAtRH(
		vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up);

	
	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> lookAtLH(
		vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up);

	
	
	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> lookAt(
		vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_transform.inl"
namespace glm
{
	template<typename genType>
	 inline constexpr genType identity()
	{
		return detail::init_gentype<genType, detail::genTypeTrait<genType>::GENTYPE>::identity();
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> translate(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)
	{
		mat<4, 4, T, Q> Result(m);
		Result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> rotate(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> const& v)
	{
		T const a = angle;
		T const c = cos(a);
		T const s = sin(a);

		vec<3, T, Q> axis(normalize(v));
		vec<3, T, Q> temp((T(1) - c) * axis);

		mat<4, 4, T, Q> Rotate;
		Rotate[0][0] = c + temp[0] * axis[0];
		Rotate[0][1] = temp[0] * axis[1] + s * axis[2];
		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];

		Rotate[1][0] = temp[1] * axis[0] - s * axis[2];
		Rotate[1][1] = c + temp[1] * axis[1];
		Rotate[1][2] = temp[1] * axis[2] + s * axis[0];

		Rotate[2][0] = temp[2] * axis[0] + s * axis[1];
		Rotate[2][1] = temp[2] * axis[1] - s * axis[0];
		Rotate[2][2] = c + temp[2] * axis[2];

		mat<4, 4, T, Q> Result;
		Result[0] = m[0] * Rotate[0][0] + m[1] * Rotate[0][1] + m[2] * Rotate[0][2];
		Result[1] = m[0] * Rotate[1][0] + m[1] * Rotate[1][1] + m[2] * Rotate[1][2];
		Result[2] = m[0] * Rotate[2][0] + m[1] * Rotate[2][1] + m[2] * Rotate[2][2];
		Result[3] = m[3];
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> rotate_slow(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> const& v)
	{
		T const a = angle;
		T const c = cos(a);
		T const s = sin(a);
		mat<4, 4, T, Q> Result;

		vec<3, T, Q> axis = normalize(v);

		Result[0][0] = c + (static_cast<T>(1) - c)      * axis.x     * axis.x;
		Result[0][1] = (static_cast<T>(1) - c) * axis.x * axis.y + s * axis.z;
		Result[0][2] = (static_cast<T>(1) - c) * axis.x * axis.z - s * axis.y;
		Result[0][3] = static_cast<T>(0);

		Result[1][0] = (static_cast<T>(1) - c) * axis.y * axis.x - s * axis.z;
		Result[1][1] = c + (static_cast<T>(1) - c) * axis.y * axis.y;
		Result[1][2] = (static_cast<T>(1) - c) * axis.y * axis.z + s * axis.x;
		Result[1][3] = static_cast<T>(0);

		Result[2][0] = (static_cast<T>(1) - c) * axis.z * axis.x + s * axis.y;
		Result[2][1] = (static_cast<T>(1) - c) * axis.z * axis.y - s * axis.x;
		Result[2][2] = c + (static_cast<T>(1) - c) * axis.z * axis.z;
		Result[2][3] = static_cast<T>(0);

		Result[3] = vec<4, T, Q>(0, 0, 0, 1);
		return m * Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> scale(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)
	{
		mat<4, 4, T, Q> Result;
		Result[0] = m[0] * v[0];
		Result[1] = m[1] * v[1];
		Result[2] = m[2] * v[2];
		Result[3] = m[3];
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> scale_slow(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)
	{
		mat<4, 4, T, Q> Result(T(1));
		Result[0][0] = v.x;
		Result[1][1] = v.y;
		Result[2][2] = v.z;
		return m * Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> lookAtRH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up)
	{
		vec<3, T, Q> const f(normalize(center - eye));
		vec<3, T, Q> const s(normalize(cross(f, up)));
		vec<3, T, Q> const u(cross(s, f));

		mat<4, 4, T, Q> Result(1);
		Result[0][0] = s.x;
		Result[1][0] = s.y;
		Result[2][0] = s.z;
		Result[0][1] = u.x;
		Result[1][1] = u.y;
		Result[2][1] = u.z;
		Result[0][2] =-f.x;
		Result[1][2] =-f.y;
		Result[2][2] =-f.z;
		Result[3][0] =-dot(s, eye);
		Result[3][1] =-dot(u, eye);
		Result[3][2] = dot(f, eye);
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> lookAtLH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up)
	{
		vec<3, T, Q> const f(normalize(center - eye));
		vec<3, T, Q> const s(normalize(cross(up, f)));
		vec<3, T, Q> const u(cross(f, s));

		mat<4, 4, T, Q> Result(1);
		Result[0][0] = s.x;
		Result[1][0] = s.y;
		Result[2][0] = s.z;
		Result[0][1] = u.x;
		Result[1][1] = u.y;
		Result[2][1] = u.z;
		Result[0][2] = f.x;
		Result[1][2] = f.y;
		Result[2][2] = f.z;
		Result[3][0] = -dot(s, eye);
		Result[3][1] = -dot(u, eye);
		Result[3][2] = -dot(f, eye);
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> lookAt(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up)
	{
		if(((1 << 2) | (1 << 1)) & (1 << 2))
			return lookAtLH(eye, center, up);
		else
			return lookAtRH(eye, center, up);
	}
}
#line 145 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\matrix_transform.hpp"
#line 31 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\matrix_transform.hpp"



#line 35 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\matrix_transform.hpp"

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\matrix_transform.inl"



#line 37 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\matrix_transform.hpp"
#line 12 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\type_ptr.hpp"

































#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"













#pragma once




#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_relational.hpp"

















#pragma once






#line 26 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_relational.hpp"

namespace glm
{
	
	

	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T epsilon);

	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, T, Q> const& epsilon);

	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T epsilon);

	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, T, Q> const& epsilon);

	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y, int ULPs);

	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, int, Q> const& ULPs);

	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, int ULPs);

	
	
	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, int, Q> const& ULPs);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_relational.inl"



#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_float.hpp"
#pragma once

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 4 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_float.hpp"




#line 9 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_float.hpp"

namespace glm{
namespace detail
{
	template <typename T>
	union float_t
	{};

	
	template <>
	union float_t<float>
	{
		typedef int int_type;
		typedef float float_type;

		constexpr float_t(float_type Num = 0.0f) : f(Num) {}

		constexpr float_t& operator=(float_t const& x)
		{
			f = x.f;
			return *this;
		}

		
		constexpr bool negative() const { return i < 0; }
		constexpr int_type mantissa() const { return i & ((1 << 23) - 1); }
		constexpr int_type exponent() const { return (i >> 23) & ((1 << 8) - 1); }

		int_type i;
		float_type f;
	};

	template <>
	union float_t<double>
	{
		typedef detail::int64 int_type;
		typedef double float_type;

		constexpr float_t(float_type Num = static_cast<float_type>(0)) : f(Num) {}

		constexpr float_t& operator=(float_t const& x)
		{
			f = x.f;
			return *this;
		}

		
		constexpr bool negative() const { return i < 0; }
		constexpr int_type mantissa() const { return i & ((int_type(1) << 52) - 1); }
		constexpr int_type exponent() const { return (i >> 52) & ((int_type(1) << 11) - 1); }

		int_type i;
		float_type f;
	};
}
}



#line 69 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_float.hpp"
#line 5 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_relational.inl"

namespace glm
{
	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T Epsilon)
	{
		return equal(x, y, vec<L, T, Q>(Epsilon));
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, T, Q> const& Epsilon)
	{
		return lessThanEqual(abs(x - y), Epsilon);
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T Epsilon)
	{
		return notEqual(x, y, vec<L, T, Q>(Epsilon));
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, T, Q> const& Epsilon)
	{
		return greaterThan(abs(x - y), Epsilon);
	}


	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y, int MaxULPs)
	{
		return equal(x, y, vec<L, int, Q>(MaxULPs));
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, int, Q> const& MaxULPs)
	{
		vec<L, bool, Q> Result(false);
		for(length_t i = 0; i < L; ++i)
		{
			detail::float_t<T> const a(x[i]);
			detail::float_t<T> const b(y[i]);

			
			if(a.negative() != b.negative())
			{
				
				Result[i] = a.mantissa() == b.mantissa() && a.exponent() == b.exponent();
			}
			else
			{
				
				typename detail::float_t<T>::int_type const DiffULPs = abs(a.i - b.i);
				Result[i] = DiffULPs <= MaxULPs[i];
			}
		}
		return Result;
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, int MaxULPs)
	{
		return notEqual(x, y, vec<L, int, Q>(MaxULPs));
	}

	template<length_t L, typename T, qualifier Q>
	 inline constexpr vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, int, Q> const& MaxULPs)
	{
		return not_(equal(x, y, MaxULPs));
	}
}
#line 108 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_relational.hpp"
#line 20 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_common.hpp"




















#pragma once



#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_geometric.hpp"














#pragma once








#line 25 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_geometric.hpp"

namespace glm
{
	
	

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 T length(qua<T, Q> const& q);

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> normalize(qua<T, Q> const& q);

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 T dot(qua<T, Q> const& x, qua<T, Q> const& y);

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 inline qua<T, Q> cross(qua<T, Q> const& q1, qua<T, Q> const& q2);

	
} 

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_geometric.inl"
namespace glm
{
	template<typename T, qualifier Q>
	 inline T dot(qua<T, Q> const& x, qua<T, Q> const& y)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
		return detail::compute_dot<qua<T, Q>, T, detail::is_aligned<Q>::value>::call(x, y);
	}

	template<typename T, qualifier Q>
	 inline T length(qua<T, Q> const& q)
	{
		return glm::sqrt(dot(q, q));
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> normalize(qua<T, Q> const& q)
	{
		T len = length(q);
		if(len <= static_cast<T>(0)) 
			return qua<T, Q>(static_cast<T>(1), static_cast<T>(0), static_cast<T>(0), static_cast<T>(0));
		T oneOverLen = static_cast<T>(1) / len;
		return qua<T, Q>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> cross(qua<T, Q> const& q1, qua<T, Q> const& q2)
	{
		return qua<T, Q>(
			q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z,
			q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
			q1.w * q2.y + q1.y * q2.w + q1.z * q2.x - q1.x * q2.z,
			q1.w * q2.z + q1.z * q2.w + q1.x * q2.y - q1.y * q2.x);
	}
}

#line 71 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_geometric.hpp"
#line 26 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_common.hpp"







#line 34 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_common.hpp"

namespace glm
{
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> mix(qua<T, Q> const& x, qua<T, Q> const& y, T a);

	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> lerp(qua<T, Q> const& x, qua<T, Q> const& y, T a);

	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> slerp(qua<T, Q> const& x, qua<T, Q> const& y, T a);

	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> conjugate(qua<T, Q> const& q);

	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> inverse(qua<T, Q> const& q);

	
	
	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> isnan(qua<T, Q> const& x);

	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> isinf(qua<T, Q> const& x);

	
} 

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_common.inl"
namespace glm
{
	template<typename T, qualifier Q>
	 inline qua<T, Q> mix(qua<T, Q> const& x, qua<T, Q> const& y, T a)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'mix' only accept floating-point inputs");

		T const cosTheta = dot(x, y);

		
		if(cosTheta > static_cast<T>(1) - epsilon<T>())
		{
			
			return qua<T, Q>(
				mix(x.w, y.w, a),
				mix(x.x, y.x, a),
				mix(x.y, y.y, a),
				mix(x.z, y.z, a));
		}
		else
		{
			
			T angle = acos(cosTheta);
			return (sin((static_cast<T>(1) - a) * angle) * x + sin(a * angle) * y) / sin(angle);
		}
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> lerp(qua<T, Q> const& x, qua<T, Q> const& y, T a)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'lerp' only accept floating-point inputs");

		
		(void)( (!!(a >= static_cast<T>(0))) || (_wassert(L"a >= static_cast<T>(0)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_common.inl", (unsigned)(34)), 0) );
		(void)( (!!(a <= static_cast<T>(1))) || (_wassert(L"a <= static_cast<T>(1)", L"d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_common.inl", (unsigned)(35)), 0) );

		return x * (static_cast<T>(1) - a) + (y * a);
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> slerp(qua<T, Q> const& x, qua<T, Q> const& y, T a)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'slerp' only accept floating-point inputs");

		qua<T, Q> z = y;

		T cosTheta = dot(x, y);

		
		
		if(cosTheta < static_cast<T>(0))
		{
			z = -y;
			cosTheta = -cosTheta;
		}

		
		if(cosTheta > static_cast<T>(1) - epsilon<T>())
		{
			
			return qua<T, Q>(
				mix(x.w, z.w, a),
				mix(x.x, z.x, a),
				mix(x.y, z.y, a),
				mix(x.z, z.z, a));
		}
		else
		{
			
			T angle = acos(cosTheta);
			return (sin((static_cast<T>(1) - a) * angle) * x + sin(a * angle) * z) / sin(angle);
		}
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> conjugate(qua<T, Q> const& q)
	{
		return qua<T, Q>(q.w, -q.x, -q.y, -q.z);
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> inverse(qua<T, Q> const& q)
	{
		return conjugate(q) / dot(q, q);
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> isnan(qua<T, Q> const& q)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");

		return vec<4, bool, Q>(isnan(q.x), isnan(q.y), isnan(q.z), isnan(q.w));
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> isinf(qua<T, Q> const& q)
	{
		static_assert(std::numeric_limits<T>::is_iec559, "'isinf' only accept floating-point inputs");

		return vec<4, bool, Q>(isinf(q.x), isinf(q.y), isinf(q.z), isinf(q.w));
	}
}



#line 107 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_common.inl"

#line 121 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_common.hpp"
#line 21 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_float.hpp"



















#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.hpp"



#pragma once







#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_relational.hpp"
















#pragma once






#line 25 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_relational.hpp"

namespace glm
{
	
	

	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y);

	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon);

	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y);

	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon);

	
} 

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_relational.inl"
namespace glm
{
	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y)
	{
		vec<4, bool, Q> Result;
		for(length_t i = 0; i < x.length(); ++i)
			Result[i] = x[i] == y[i];
		return Result;
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)
	{
		vec<4, T, Q> v(x.x - y.x, x.y - y.y, x.z - y.z, x.w - y.w);
		return lessThan(abs(v), vec<4, T, Q>(epsilon));
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y)
	{
		vec<4, bool, Q> Result;
		for(length_t i = 0; i < x.length(); ++i)
			Result[i] = x[i] != y[i];
		return Result;
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)
	{
		vec<4, T, Q> v(x.x - y.x, x.y - y.y, x.z - y.z, x.w - y.w);
		return greaterThanEqual(abs(v), vec<4, T, Q>(epsilon));
	}
}

#line 63 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_relational.hpp"
#line 13 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.hpp"



namespace glm
{
	template<typename T, qualifier Q>
	struct qua
	{
		

		typedef qua<T, Q> type;
		typedef T value_type;

		













#line 41 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.hpp"


			union
			{
				struct { T x, y, z, w;};

				typename detail::storage<4, T, detail::is_aligned<Q>::value>::type data;
			};


#line 52 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.hpp"









#line 62 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.hpp"

		

		typedef length_t length_type;

		
		 static constexpr length_type length(){return 4;}

		 constexpr T & operator[](length_type i);
		 constexpr T const& operator[](length_type i) const;

		

		 constexpr qua() = default;
		 constexpr qua(qua<T, Q> const& q) = default;
		template<qualifier P>
		 constexpr qua(qua<T, P> const& q);

		

		 constexpr qua(T s, vec<3, T, Q> const& v);
		 constexpr qua(T w, T x, T y, T z);

		

		template<typename U, qualifier P>
		 constexpr  qua(qua<U, P> const& q);

		

			 explicit operator mat<3, 3, T, Q>() const;
			 explicit operator mat<4, 4, T, Q>() const;
#line 95 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.hpp"

		
		
		
		
		
		
		 qua(vec<3, T, Q> const& u, vec<3, T, Q> const& v);

		
		  qua(vec<3, T, Q> const& eulerAngles);
		  qua(mat<3, 3, T, Q> const& q);
		  qua(mat<4, 4, T, Q> const& q);

		

		 qua<T, Q>& operator=(qua<T, Q> const& q) = default;

		template<typename U>
		 qua<T, Q>& operator=(qua<U, Q> const& q);
		template<typename U>
		 qua<T, Q>& operator+=(qua<U, Q> const& q);
		template<typename U>
		 qua<T, Q>& operator-=(qua<U, Q> const& q);
		template<typename U>
		 qua<T, Q>& operator*=(qua<U, Q> const& q);
		template<typename U>
		 qua<T, Q>& operator*=(U s);
		template<typename U>
		 qua<T, Q>& operator/=(U s);
	};

	

	template<typename T, qualifier Q>
	 qua<T, Q> operator+(qua<T, Q> const& q);

	template<typename T, qualifier Q>
	 qua<T, Q> operator-(qua<T, Q> const& q);

	

	template<typename T, qualifier Q>
	 qua<T, Q> operator+(qua<T, Q> const& q, qua<T, Q> const& p);

	template<typename T, qualifier Q>
	 qua<T, Q> operator-(qua<T, Q> const& q, qua<T, Q> const& p);

	template<typename T, qualifier Q>
	 qua<T, Q> operator*(qua<T, Q> const& q, qua<T, Q> const& p);

	template<typename T, qualifier Q>
	 vec<3, T, Q> operator*(qua<T, Q> const& q, vec<3, T, Q> const& v);

	template<typename T, qualifier Q>
	 vec<3, T, Q> operator*(vec<3, T, Q> const& v, qua<T, Q> const& q);

	template<typename T, qualifier Q>
	 vec<4, T, Q> operator*(qua<T, Q> const& q, vec<4, T, Q> const& v);

	template<typename T, qualifier Q>
	 vec<4, T, Q> operator*(vec<4, T, Q> const& v, qua<T, Q> const& q);

	template<typename T, qualifier Q>
	 qua<T, Q> operator*(qua<T, Q> const& q, T const& s);

	template<typename T, qualifier Q>
	 qua<T, Q> operator*(T const& s, qua<T, Q> const& q);

	template<typename T, qualifier Q>
	 qua<T, Q> operator/(qua<T, Q> const& q, T const& s);

	

	template<typename T, qualifier Q>
	 constexpr bool operator==(qua<T, Q> const& q1, qua<T, Q> const& q2);

	template<typename T, qualifier Q>
	 constexpr bool operator!=(qua<T, Q> const& q1, qua<T, Q> const& q2);
} 


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.inl"





namespace glm{
namespace detail
{
	template <typename T>
	struct genTypeTrait<qua<T> >
	{
		static const genTypeEnum GENTYPE = GENTYPE_QUAT;
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_dot<qua<T, Q>, T, Aligned>
	{
		static  inline T call(qua<T, Q> const& a, qua<T, Q> const& b)
		{
			vec<4, T, Q> tmp(a.w * b.w, a.x * b.x, a.y * b.y, a.z * b.z);
			return (tmp.x + tmp.y) + (tmp.z + tmp.w);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_quat_add
	{
		static qua<T, Q> call(qua<T, Q> const& q, qua<T, Q> const& p)
		{
			return qua<T, Q>(q.w + p.w, q.x + p.x, q.y + p.y, q.z + p.z);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_quat_sub
	{
		static qua<T, Q> call(qua<T, Q> const& q, qua<T, Q> const& p)
		{
			return qua<T, Q>(q.w - p.w, q.x - p.x, q.y - p.y, q.z - p.z);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_quat_mul_scalar
	{
		static qua<T, Q> call(qua<T, Q> const& q, T s)
		{
			return qua<T, Q>(q.w * s, q.x * s, q.y * s, q.z * s);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_quat_div_scalar
	{
		static qua<T, Q> call(qua<T, Q> const& q, T s)
		{
			return qua<T, Q>(q.w / s, q.x / s, q.y / s, q.z / s);
		}
	};

	template<typename T, qualifier Q, bool Aligned>
	struct compute_quat_mul_vec4
	{
		static vec<4, T, Q> call(qua<T, Q> const& q, vec<4, T, Q> const& v)
		{
			return vec<4, T, Q>(q * vec<3, T, Q>(v), v.w);
		}
	};
}

	

	template<typename T, qualifier Q>
	 inline constexpr T & qua<T, Q>::operator[](typename qua<T, Q>::length_type i)
	{
		(void)( (!!(i >= 0 && i < this->length())) || (_wassert(L"i >= 0 && i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.inl", (unsigned)(76)), 0) );
		return (&x)[i];
	}

	template<typename T, qualifier Q>
	 inline constexpr T const& qua<T, Q>::operator[](typename qua<T, Q>::length_type i) const
	{
		(void)( (!!(i >= 0 && i < this->length())) || (_wassert(L"i >= 0 && i < this->length()", L"d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.inl", (unsigned)(83)), 0) );
		return (&x)[i];
	}

	













#line 102 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.inl"

	template<typename T, qualifier Q>
	template<qualifier P>
	 inline constexpr qua<T, Q>::qua(qua<T, P> const& q)
		: x(q.x), y(q.y), z(q.z), w(q.w)
	{}

	

	template<typename T, qualifier Q>
	 inline constexpr qua<T, Q>::qua(T s, vec<3, T, Q> const& v)
		: x(v.x), y(v.y), z(v.z), w(s)
	{}

	template <typename T, qualifier Q>
	 inline constexpr qua<T, Q>::qua(T _w, T _x, T _y, T _z)
		: x(_x), y(_y), z(_z), w(_w)
	{}

	

	template<typename T, qualifier Q>
	template<typename U, qualifier P>
	 inline constexpr qua<T, Q>::qua(qua<U, P> const& q)
		: x(static_cast<T>(q.x))
		, y(static_cast<T>(q.y))
		, z(static_cast<T>(q.z))
		, w(static_cast<T>(q.w))
	{}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	template<typename T, qualifier Q>
	 inline qua<T, Q>::qua(vec<3, T, Q> const& u, vec<3, T, Q> const& v)
	{
		T norm_u_norm_v = sqrt(dot(u, u) * dot(v, v));
		T real_part = norm_u_norm_v + dot(u, v);
		vec<3, T, Q> t;

		if(real_part < static_cast<T>(1.e-6f) * norm_u_norm_v)
		{
			
			
			
			real_part = static_cast<T>(0);
			t = abs(u.x) > abs(u.z) ? vec<3, T, Q>(-u.y, u.x, static_cast<T>(0)) : vec<3, T, Q>(static_cast<T>(0), -u.z, u.y);
		}
		else
		{
			
			t = cross(u, v);
		}

		*this = normalize(qua<T, Q>(real_part, t.x, t.y, t.z));
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q>::qua(vec<3, T, Q> const& eulerAngle)
	{
		vec<3, T, Q> c = glm::cos(eulerAngle * T(0.5));
		vec<3, T, Q> s = glm::sin(eulerAngle * T(0.5));

		this->w = c.x * c.y * c.z + s.x * s.y * s.z;
		this->x = s.x * c.y * c.z - c.x * s.y * s.z;
		this->y = c.x * s.y * c.z + s.x * c.y * s.z;
		this->z = c.x * c.y * s.z - s.x * s.y * c.z;
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q>::qua(mat<3, 3, T, Q> const& m)
	{
		*this = quat_cast(m);
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q>::qua(mat<4, 4, T, Q> const& m)
	{
		*this = quat_cast(m);
	}


	template<typename T, qualifier Q>
	 inline qua<T, Q>::operator mat<3, 3, T, Q>() const
	{
		return mat3_cast(*this);
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q>::operator mat<4, 4, T, Q>() const
	{
		return mat4_cast(*this);
	}
#line 211 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.inl"

	











#line 225 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.inl"

	template<typename T, qualifier Q>
	template<typename U>
	 inline qua<T, Q> & qua<T, Q>::operator=(qua<U, Q> const& q)
	{
		this->w = static_cast<T>(q.w);
		this->x = static_cast<T>(q.x);
		this->y = static_cast<T>(q.y);
		this->z = static_cast<T>(q.z);
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline qua<T, Q> & qua<T, Q>::operator+=(qua<U, Q> const& q)
	{
		return (*this = detail::compute_quat_add<T, Q, detail::is_aligned<Q>::value>::call(*this, qua<T, Q>(q)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline qua<T, Q> & qua<T, Q>::operator-=(qua<U, Q> const& q)
	{
		return (*this = detail::compute_quat_sub<T, Q, detail::is_aligned<Q>::value>::call(*this, qua<T, Q>(q)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline qua<T, Q> & qua<T, Q>::operator*=(qua<U, Q> const& r)
	{
		qua<T, Q> const p(*this);
		qua<T, Q> const q(r);

		this->w = p.w * q.w - p.x * q.x - p.y * q.y - p.z * q.z;
		this->x = p.w * q.x + p.x * q.w + p.y * q.z - p.z * q.y;
		this->y = p.w * q.y + p.y * q.w + p.z * q.x - p.x * q.z;
		this->z = p.w * q.z + p.z * q.w + p.x * q.y - p.y * q.x;
		return *this;
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline qua<T, Q> & qua<T, Q>::operator*=(U s)
	{
		return (*this = detail::compute_quat_mul_scalar<T, Q, detail::is_aligned<Q>::value>::call(*this, static_cast<U>(s)));
	}

	template<typename T, qualifier Q>
	template<typename U>
	 inline qua<T, Q> & qua<T, Q>::operator/=(U s)
	{
		return (*this = detail::compute_quat_div_scalar<T, Q, detail::is_aligned<Q>::value>::call(*this, static_cast<U>(s)));
	}

	

	template<typename T, qualifier Q>
	 inline qua<T, Q> operator+(qua<T, Q> const& q)
	{
		return q;
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> operator-(qua<T, Q> const& q)
	{
		return qua<T, Q>(-q.w, -q.x, -q.y, -q.z);
	}

	

	template<typename T, qualifier Q>
	 inline qua<T, Q> operator+(qua<T, Q> const& q, qua<T, Q> const& p)
	{
		return qua<T, Q>(q) += p;
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> operator-(qua<T, Q> const& q, qua<T, Q> const& p)
	{
		return qua<T, Q>(q) -= p;
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> operator*(qua<T, Q> const& q, qua<T, Q> const& p)
	{
		return qua<T, Q>(q) *= p;
	}

	template<typename T, qualifier Q>
	 inline vec<3, T, Q> operator*(qua<T, Q> const& q, vec<3, T, Q> const& v)
	{
		vec<3, T, Q> const QuatVector(q.x, q.y, q.z);
		vec<3, T, Q> const uv(glm::cross(QuatVector, v));
		vec<3, T, Q> const uuv(glm::cross(QuatVector, uv));

		return v + ((uv * q.w) + uuv) * static_cast<T>(2);
	}

	template<typename T, qualifier Q>
	 inline vec<3, T, Q> operator*(vec<3, T, Q> const& v, qua<T, Q> const& q)
	{
		return glm::inverse(q) * v;
	}

	template<typename T, qualifier Q>
	 inline vec<4, T, Q> operator*(qua<T, Q> const& q, vec<4, T, Q> const& v)
	{
		return detail::compute_quat_mul_vec4<T, Q, detail::is_aligned<Q>::value>::call(q, v);
	}

	template<typename T, qualifier Q>
	 inline vec<4, T, Q> operator*(vec<4, T, Q> const& v, qua<T, Q> const& q)
	{
		return glm::inverse(q) * v;
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> operator*(qua<T, Q> const& q, T const& s)
	{
		return qua<T, Q>(
			q.w * s, q.x * s, q.y * s, q.z * s);
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> operator*(T const& s, qua<T, Q> const& q)
	{
		return q * s;
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> operator/(qua<T, Q> const& q, T const& s)
	{
		return qua<T, Q>(
			q.w / s, q.x / s, q.y / s, q.z / s);
	}

	

	template<typename T, qualifier Q>
	 inline constexpr bool operator==(qua<T, Q> const& q1, qua<T, Q> const& q2)
	{
		return q1.x == q2.x && q1.y == q2.y && q1.z == q2.z && q1.w == q2.w;
	}

	template<typename T, qualifier Q>
	 inline constexpr bool operator!=(qua<T, Q> const& q1, qua<T, Q> const& q2)
	{
		return q1.x != q2.x || q1.y != q2.y || q1.z != q2.z || q1.w != q2.w;
	}
}



#line 379 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.inl"

#line 178 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.hpp"
#line 179 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\type_quat.hpp"
#line 24 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_float.hpp"



#line 28 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_float.hpp"

namespace glm
{
	
	

	
	typedef qua<float, defaultp>		quat;

	
} 

#line 22 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_float_precision.hpp"










#pragma once






#line 19 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_float_precision.hpp"

namespace glm
{
	
	

	
	typedef qua<float, lowp>		lowp_quat;

	
	typedef qua<float, mediump>		mediump_quat;

	
	typedef qua<float, highp>		highp_quat;

	
} 

#line 23 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_double.hpp"



















#pragma once






#line 28 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_double.hpp"

namespace glm
{
	
	

	
	typedef qua<double, defaultp>		dquat;

	
} 

#line 24 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_double_precision.hpp"










#pragma once






#line 19 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_double_precision.hpp"

namespace glm
{
	
	

	
	
	
	typedef qua<double, lowp>		lowp_dquat;

	
	
	
	typedef qua<double, mediump>	mediump_dquat;

	
	
	
	typedef qua<double, highp>		highp_dquat;

	
} 

#line 25 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_trigonometric.hpp"

















#pragma once










#line 30 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_trigonometric.hpp"

namespace glm
{
	
	

	
	
	
	
	template<typename T, qualifier Q>
	 T angle(qua<T, Q> const& x);

	
	
	
	
	template<typename T, qualifier Q>
	 vec<3, T, Q> axis(qua<T, Q> const& x);

	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> angleAxis(T const& angle, vec<3, T, Q> const& axis);

	
} 

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_trigonometric.inl"
namespace glm
{
	template<typename T, qualifier Q>
	 inline T angle(qua<T, Q> const& x)
	{
		return acos(x.w) * static_cast<T>(2);
	}

	template<typename T, qualifier Q>
	 inline vec<3, T, Q> axis(qua<T, Q> const& x)
	{
		T const tmp1 = static_cast<T>(1) - x.w * x.w;
		if(tmp1 <= static_cast<T>(0))
			return vec<3, T, Q>(0, 0, 1);
		T const tmp2 = static_cast<T>(1) / sqrt(tmp1);
		return vec<3, T, Q>(x.x * tmp2, x.y * tmp2, x.z * tmp2);
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> angleAxis(T const& angle, vec<3, T, Q> const& v)
	{
		T const a(angle);
		T const s = glm::sin(a * static_cast<T>(0.5));

		return qua<T, Q>(glm::cos(a * static_cast<T>(0.5)), v * s);
	}
}
#line 64 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_trigonometric.hpp"
#line 28 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_transform.hpp"

















#pragma once








#line 28 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_transform.hpp"

namespace glm
{
	
	

	
	
	
	
	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> rotate(qua<T, Q> const& q, T const& angle, vec<3, T, Q> const& axis);
	
} 

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_transform.inl"
namespace glm
{
	template<typename T, qualifier Q>
	 inline qua<T, Q> rotate(qua<T, Q> const& q, T const& angle, vec<3, T, Q> const& v)
	{
		vec<3, T, Q> Tmp = v;

		
		T len = glm::length(Tmp);
		if(abs(len - static_cast<T>(1)) > static_cast<T>(0.001))
		{
			T oneOverLen = static_cast<T>(1) / len;
			Tmp.x *= oneOverLen;
			Tmp.y *= oneOverLen;
			Tmp.z *= oneOverLen;
		}

		T const AngleRad(angle);
		T const Sin = sin(AngleRad * static_cast<T>(0.5));

		return q * qua<T, Q>(cos(AngleRad * static_cast<T>(0.5)), Tmp.x * Sin, Tmp.y * Sin, Tmp.z * Sin);
	}
}

#line 48 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\quaternion_transform.hpp"
#line 29 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"







#line 37 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"

namespace glm
{
	
	

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 vec<3, T, Q> eulerAngles(qua<T, Q> const& x);

	
	
	
	
	
	template<typename T, qualifier Q>
	 T roll(qua<T, Q> const& x);

	
	
	
	
	
	template<typename T, qualifier Q>
	 T pitch(qua<T, Q> const& x);

	
	
	
	
	
	template<typename T, qualifier Q>
	 T yaw(qua<T, Q> const& x);

	
	
	
	
	
	template<typename T, qualifier Q>
	 mat<3, 3, T, Q> mat3_cast(qua<T, Q> const& x);

	
	
	
	
	
	template<typename T, qualifier Q>
	 mat<4, 4, T, Q> mat4_cast(qua<T, Q> const& x);

	
	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> quat_cast(mat<3, 3, T, Q> const& x);

	
	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> quat_cast(mat<4, 4, T, Q> const& x);

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> lessThan(qua<T, Q> const& x, qua<T, Q> const& y);

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> lessThanEqual(qua<T, Q> const& x, qua<T, Q> const& y);

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> greaterThan(qua<T, Q> const& x, qua<T, Q> const& y);

	
	
	
	
	
	
	template<typename T, qualifier Q>
	 vec<4, bool, Q> greaterThanEqual(qua<T, Q> const& x, qua<T, Q> const& y);

	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> quatLookAt(
		vec<3, T, Q> const& direction,
		vec<3, T, Q> const& up);

	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> quatLookAtRH(
		vec<3, T, Q> const& direction,
		vec<3, T, Q> const& up);

	
	
	
	
	template<typename T, qualifier Q>
	 qua<T, Q> quatLookAtLH(
		vec<3, T, Q> const& direction,
		vec<3, T, Q> const& up);
	
} 

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.inl"



#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\epsilon.hpp"













#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 919 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"






















































































































































































































#line 1134 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"

#line 1136 "d:\\vsprojects\\openglproject\\includes\\glm\\detail\\setup.hpp"
#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\epsilon.hpp"




#line 23 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\epsilon.hpp"

namespace glm
{
	
	

	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, bool, Q> epsilonEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T const& epsilon);

	
	
	
	
	template<typename genType>
	 bool epsilonEqual(genType const& x, genType const& y, genType const& epsilon);

	
	
	
	
	template<length_t L, typename T, qualifier Q>
	 vec<L, bool, Q> epsilonNotEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T const& epsilon);

	
	
	
	
	template<typename genType>
	 bool epsilonNotEqual(genType const& x, genType const& y, genType const& epsilon);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\epsilon.inl"






namespace glm
{
	template<>
	 inline bool epsilonEqual
	(
		float const& x,
		float const& y,
		float const& epsilon
	)
	{
		return abs(x - y) < epsilon;
	}

	template<>
	 inline bool epsilonEqual
	(
		double const& x,
		double const& y,
		double const& epsilon
	)
	{
		return abs(x - y) < epsilon;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, bool, Q> epsilonEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T const& epsilon)
	{
		return lessThan(abs(x - y), vec<L, T, Q>(epsilon));
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, bool, Q> epsilonEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, T, Q> const& epsilon)
	{
		return lessThan(abs(x - y), vec<L, T, Q>(epsilon));
	}

	template<>
	 inline bool epsilonNotEqual(float const& x, float const& y, float const& epsilon)
	{
		return abs(x - y) >= epsilon;
	}

	template<>
	 inline bool epsilonNotEqual(double const& x, double const& y, double const& epsilon)
	{
		return abs(x - y) >= epsilon;
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, bool, Q> epsilonNotEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T const& epsilon)
	{
		return greaterThanEqual(abs(x - y), vec<L, T, Q>(epsilon));
	}

	template<length_t L, typename T, qualifier Q>
	 inline vec<L, bool, Q> epsilonNotEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec<L, T, Q> const& epsilon)
	{
		return greaterThanEqual(abs(x - y), vec<L, T, Q>(epsilon));
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> epsilonEqual(qua<T, Q> const& x, qua<T, Q> const& y, T const& epsilon)
	{
		vec<4, T, Q> v(x.x - y.x, x.y - y.y, x.z - y.z, x.w - y.w);
		return lessThan(abs(v), vec<4, T, Q>(epsilon));
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> epsilonNotEqual(qua<T, Q> const& x, qua<T, Q> const& y, T const& epsilon)
	{
		vec<4, T, Q> v(x.x - y.x, x.y - y.y, x.z - y.z, x.w - y.w);
		return greaterThanEqual(abs(v), vec<4, T, Q>(epsilon));
	}
}
#line 61 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\epsilon.hpp"
#line 5 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.inl"


namespace glm
{
	template<typename T, qualifier Q>
	 inline vec<3, T, Q> eulerAngles(qua<T, Q> const& x)
	{
		return vec<3, T, Q>(pitch(x), yaw(x), roll(x));
	}

	template<typename T, qualifier Q>
	 inline T roll(qua<T, Q> const& q)
	{
		return static_cast<T>(atan(static_cast<T>(2) * (q.x * q.y + q.w * q.z), q.w * q.w + q.x * q.x - q.y * q.y - q.z * q.z));
	}

	template<typename T, qualifier Q>
	 inline T pitch(qua<T, Q> const& q)
	{
		
		T const y = static_cast<T>(2) * (q.y * q.z + q.w * q.x);
		T const x = q.w * q.w - q.x * q.x - q.y * q.y + q.z * q.z;

		if(all(equal(vec<2, T, Q>(x, y), vec<2, T, Q>(0), epsilon<T>()))) 
			return static_cast<T>(static_cast<T>(2) * atan(q.x, q.w));

		return static_cast<T>(atan(y, x));
	}

	template<typename T, qualifier Q>
	 inline T yaw(qua<T, Q> const& q)
	{
		return asin(clamp(static_cast<T>(-2) * (q.x * q.z - q.w * q.y), static_cast<T>(-1), static_cast<T>(1)));
	}

	template<typename T, qualifier Q>
	 inline mat<3, 3, T, Q> mat3_cast(qua<T, Q> const& q)
	{
		mat<3, 3, T, Q> Result(T(1));
		T qxx(q.x * q.x);
		T qyy(q.y * q.y);
		T qzz(q.z * q.z);
		T qxz(q.x * q.z);
		T qxy(q.x * q.y);
		T qyz(q.y * q.z);
		T qwx(q.w * q.x);
		T qwy(q.w * q.y);
		T qwz(q.w * q.z);

		Result[0][0] = T(1) - T(2) * (qyy +  qzz);
		Result[0][1] = T(2) * (qxy + qwz);
		Result[0][2] = T(2) * (qxz - qwy);

		Result[1][0] = T(2) * (qxy - qwz);
		Result[1][1] = T(1) - T(2) * (qxx +  qzz);
		Result[1][2] = T(2) * (qyz + qwx);

		Result[2][0] = T(2) * (qxz + qwy);
		Result[2][1] = T(2) * (qyz - qwx);
		Result[2][2] = T(1) - T(2) * (qxx +  qyy);
		return Result;
	}

	template<typename T, qualifier Q>
	 inline mat<4, 4, T, Q> mat4_cast(qua<T, Q> const& q)
	{
		return mat<4, 4, T, Q>(mat3_cast(q));
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> quat_cast(mat<3, 3, T, Q> const& m)
	{
		T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];
		T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
		T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
		T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];

		int biggestIndex = 0;
		T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
		if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)
		{
			fourBiggestSquaredMinus1 = fourXSquaredMinus1;
			biggestIndex = 1;
		}
		if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)
		{
			fourBiggestSquaredMinus1 = fourYSquaredMinus1;
			biggestIndex = 2;
		}
		if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)
		{
			fourBiggestSquaredMinus1 = fourZSquaredMinus1;
			biggestIndex = 3;
		}

		T biggestVal = sqrt(fourBiggestSquaredMinus1 + static_cast<T>(1)) * static_cast<T>(0.5);
		T mult = static_cast<T>(0.25) / biggestVal;

		switch(biggestIndex)
		{
		case 0:
			return qua<T, Q>(biggestVal, (m[1][2] - m[2][1]) * mult, (m[2][0] - m[0][2]) * mult, (m[0][1] - m[1][0]) * mult);
		case 1:
			return qua<T, Q>((m[1][2] - m[2][1]) * mult, biggestVal, (m[0][1] + m[1][0]) * mult, (m[2][0] + m[0][2]) * mult);
		case 2:
			return qua<T, Q>((m[2][0] - m[0][2]) * mult, (m[0][1] + m[1][0]) * mult, biggestVal, (m[1][2] + m[2][1]) * mult);
		case 3:
			return qua<T, Q>((m[0][1] - m[1][0]) * mult, (m[2][0] + m[0][2]) * mult, (m[1][2] + m[2][1]) * mult, biggestVal);
		default: 
			(void)( (!!(false)) || (_wassert(L"false", L"d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.inl", (unsigned)(114)), 0) );
			return qua<T, Q>(1, 0, 0, 0);
		}
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> quat_cast(mat<4, 4, T, Q> const& m4)
	{
		return quat_cast(mat<3, 3, T, Q>(m4));
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> lessThan(qua<T, Q> const& x, qua<T, Q> const& y)
	{
		vec<4, bool, Q> Result;
		for(length_t i = 0; i < x.length(); ++i)
			Result[i] = x[i] < y[i];
		return Result;
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> lessThanEqual(qua<T, Q> const& x, qua<T, Q> const& y)
	{
		vec<4, bool, Q> Result;
		for(length_t i = 0; i < x.length(); ++i)
			Result[i] = x[i] <= y[i];
		return Result;
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> greaterThan(qua<T, Q> const& x, qua<T, Q> const& y)
	{
		vec<4, bool, Q> Result;
		for(length_t i = 0; i < x.length(); ++i)
			Result[i] = x[i] > y[i];
		return Result;
	}

	template<typename T, qualifier Q>
	 inline vec<4, bool, Q> greaterThanEqual(qua<T, Q> const& x, qua<T, Q> const& y)
	{
		vec<4, bool, Q> Result;
		for(length_t i = 0; i < x.length(); ++i)
			Result[i] = x[i] >= y[i];
		return Result;
	}


	template<typename T, qualifier Q>
	 inline qua<T, Q> quatLookAt(vec<3, T, Q> const& direction, vec<3, T, Q> const& up)
	{

			return quatLookAtLH(direction, up);


#line 170 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.inl"
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> quatLookAtRH(vec<3, T, Q> const& direction, vec<3, T, Q> const& up)
	{
		mat<3, 3, T, Q> Result;

		Result[2] = -direction;
		Result[0] = normalize(cross(up, Result[2]));
		Result[1] = cross(Result[2], Result[0]);

		return quat_cast(Result);
	}

	template<typename T, qualifier Q>
	 inline qua<T, Q> quatLookAtLH(vec<3, T, Q> const& direction, vec<3, T, Q> const& up)
	{
		mat<3, 3, T, Q> Result;

		Result[2] = direction;
		Result[0] = normalize(cross(up, Result[2]));
		Result[1] = cross(Result[2], Result[0]);

		return quat_cast(Result);
	}
}



#line 200 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.inl"

#line 174 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\quaternion.hpp"
#line 38 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\type_ptr.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"












#pragma once


#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool1.hpp"












#pragma once





#line 20 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool1.hpp"

namespace glm
{
	
	

	
	typedef vec<1, bool, defaultp>		bvec1;

	
}
#line 17 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool1_precision.hpp"










#pragma once





#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_bool1_precision.hpp"

namespace glm
{
	
	

	
	typedef vec<1, bool, highp>			highp_bvec1;

	
	typedef vec<1, bool, mediump>		mediump_bvec1;

	
	typedef vec<1, bool, lowp>			lowp_bvec1;

	
}
#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float1.hpp"













#pragma once





#line 21 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float1.hpp"

namespace glm
{
	
	

	
	typedef vec<1, float, defaultp>		vec1;

	
}
#line 19 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float1_precision.hpp"












#pragma once





#line 20 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_float1_precision.hpp"

namespace glm
{
	
	

	
	typedef vec<1, float, highp>		highp_vec1;

	
	typedef vec<1, float, mediump>		mediump_vec1;

	
	typedef vec<1, float, lowp>			lowp_vec1;

	
}
#line 20 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double1.hpp"













#pragma once





#line 21 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double1.hpp"

namespace glm
{
	
	

	
	typedef vec<1, double, defaultp>		dvec1;

	
}
#line 21 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double1_precision.hpp"












#pragma once





#line 20 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_double1_precision.hpp"

namespace glm
{
	
	

	
	typedef vec<1, double, highp>		highp_dvec1;

	
	typedef vec<1, double, mediump>		mediump_dvec1;

	
	typedef vec<1, double, lowp>		lowp_dvec1;

	
}
#line 22 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int1.hpp"













#pragma once





#line 21 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int1.hpp"

namespace glm
{
	
	

	
	typedef vec<1, int, defaultp>			ivec1;

	
}

#line 23 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int1_precision.hpp"










#pragma once





#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_int1_precision.hpp"

namespace glm
{
	
	

	
	typedef vec<1, int, highp>			highp_ivec1;

	
	typedef vec<1, int, mediump>		mediump_ivec1;

	
	typedef vec<1, int, lowp>			lowp_ivec1;

	
}
#line 24 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint1.hpp"













#pragma once





#line 21 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint1.hpp"

namespace glm
{
	
	

	
	typedef vec<1, unsigned int, defaultp>			uvec1;

	
}

#line 25 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"
#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint1_precision.hpp"










#pragma once





#line 18 "d:\\vsprojects\\openglproject\\includes\\glm\\ext\\vector_uint1_precision.hpp"

namespace glm
{
	
	

	
	
	
	typedef vec<1, unsigned int, highp>			highp_uvec1;

	
	
	
	typedef vec<1, unsigned int, mediump>		mediump_uvec1;

	
	
	
	typedef vec<1, unsigned int, lowp>			lowp_uvec1;

	
}
#line 26 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"



#line 30 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\vec1.hpp"

#line 39 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\type_ptr.hpp"
















#line 56 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\type_ptr.hpp"

namespace glm
{
	
	

	
	
	template<typename genType>
	 typename genType::value_type const * value_ptr(genType const& v);

	
	
	template <typename T, qualifier Q>
	 vec<1, T, Q> make_vec1(vec<1, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<1, T, Q> make_vec1(vec<2, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<1, T, Q> make_vec1(vec<3, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<1, T, Q> make_vec1(vec<4, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<2, T, Q> make_vec2(vec<1, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<2, T, Q> make_vec2(vec<2, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<2, T, Q> make_vec2(vec<3, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<2, T, Q> make_vec2(vec<4, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<3, T, Q> make_vec3(vec<1, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<3, T, Q> make_vec3(vec<2, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<3, T, Q> make_vec3(vec<3, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<3, T, Q> make_vec3(vec<4, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<4, T, Q> make_vec4(vec<1, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<4, T, Q> make_vec4(vec<2, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<4, T, Q> make_vec4(vec<3, T, Q> const& v);

	
	
	template <typename T, qualifier Q>
	 vec<4, T, Q> make_vec4(vec<4, T, Q> const& v);

	
	
	template<typename T>
	 vec<2, T, defaultp> make_vec2(T const * const ptr);

	
	
	template<typename T>
	 vec<3, T, defaultp> make_vec3(T const * const ptr);

	
	
	template<typename T>
	 vec<4, T, defaultp> make_vec4(T const * const ptr);

	
	
	template<typename T>
	 mat<2, 2, T, defaultp> make_mat2x2(T const * const ptr);

	
	
	template<typename T>
	 mat<2, 3, T, defaultp> make_mat2x3(T const * const ptr);

	
	
	template<typename T>
	 mat<2, 4, T, defaultp> make_mat2x4(T const * const ptr);

	
	
	template<typename T>
	 mat<3, 2, T, defaultp> make_mat3x2(T const * const ptr);

	
	
	template<typename T>
	 mat<3, 3, T, defaultp> make_mat3x3(T const * const ptr);

	
	
	template<typename T>
	 mat<3, 4, T, defaultp> make_mat3x4(T const * const ptr);

	
	
	template<typename T>
	 mat<4, 2, T, defaultp> make_mat4x2(T const * const ptr);

	
	
	template<typename T>
	 mat<4, 3, T, defaultp> make_mat4x3(T const * const ptr);

	
	
	template<typename T>
	 mat<4, 4, T, defaultp> make_mat4x4(T const * const ptr);

	
	
	template<typename T>
	 mat<2, 2, T, defaultp> make_mat2(T const * const ptr);

	
	
	template<typename T>
	 mat<3, 3, T, defaultp> make_mat3(T const * const ptr);

	
	
	template<typename T>
	 mat<4, 4, T, defaultp> make_mat4(T const * const ptr);

	
	
	template<typename T>
	 qua<T, defaultp> make_quat(T const * const ptr);

	
}

#line 1 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\type_ptr.inl"




namespace glm
{
	
	

	template<typename T, qualifier Q>
	 inline T const* value_ptr(vec<2, T, Q> const& v)
	{
		return &(v.x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(vec<2, T, Q>& v)
	{
		return &(v.x);
	}

	template<typename T, qualifier Q>
	 inline T const * value_ptr(vec<3, T, Q> const& v)
	{
		return &(v.x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(vec<3, T, Q>& v)
	{
		return &(v.x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(vec<4, T, Q> const& v)
	{
		return &(v.x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(vec<4, T, Q>& v)
	{
		return &(v.x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(mat<2, 2, T, Q> const& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(mat<2, 2, T, Q>& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(mat<3, 3, T, Q> const& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(mat<3, 3, T, Q>& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(mat<4, 4, T, Q> const& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(mat<4, 4, T, Q>& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(mat<2, 3, T, Q> const& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(mat<2, 3, T, Q>& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(mat<3, 2, T, Q> const& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(mat<3, 2, T, Q>& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(mat<2, 4, T, Q> const& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(mat<2, 4, T, Q>& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(mat<4, 2, T, Q> const& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(mat<4, 2, T, Q>& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(mat<3, 4, T, Q> const& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(mat<3, 4, T, Q>& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T const* value_ptr(mat<4, 3, T, Q> const& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T * value_ptr(mat<4, 3, T, Q>& m)
	{
		return &(m[0].x);
	}

	template<typename T, qualifier Q>
	 inline T const * value_ptr(qua<T, Q> const& q)
	{
		return &(q[0]);
	}

	template<typename T, qualifier Q>
	 inline T* value_ptr(qua<T, Q>& q)
	{
		return &(q[0]);
	}

	template <typename T, qualifier Q>
	inline vec<1, T, Q> make_vec1(vec<1, T, Q> const& v)
	{
		return v;
	}

	template <typename T, qualifier Q>
	inline vec<1, T, Q> make_vec1(vec<2, T, Q> const& v)
	{
		return vec<1, T, Q>(v);
	}

	template <typename T, qualifier Q>
	inline vec<1, T, Q> make_vec1(vec<3, T, Q> const& v)
	{
		return vec<1, T, Q>(v);
	}

	template <typename T, qualifier Q>
	inline vec<1, T, Q> make_vec1(vec<4, T, Q> const& v)
	{
		return vec<1, T, Q>(v);
	}

	template <typename T, qualifier Q>
	inline vec<2, T, Q> make_vec2(vec<1, T, Q> const& v)
	{
		return vec<2, T, Q>(v.x, static_cast<T>(0));
	}

	template <typename T, qualifier Q>
	inline vec<2, T, Q> make_vec2(vec<2, T, Q> const& v)
	{
		return v;
	}

	template <typename T, qualifier Q>
	inline vec<2, T, Q> make_vec2(vec<3, T, Q> const& v)
	{
		return vec<2, T, Q>(v);
	}

	template <typename T, qualifier Q>
	inline vec<2, T, Q> make_vec2(vec<4, T, Q> const& v)
	{
		return vec<2, T, Q>(v);
	}

	template <typename T, qualifier Q>
	inline vec<3, T, Q> make_vec3(vec<1, T, Q> const& v)
	{
		return vec<3, T, Q>(v.x, static_cast<T>(0), static_cast<T>(0));
	}

	template <typename T, qualifier Q>
	inline vec<3, T, Q> make_vec3(vec<2, T, Q> const& v)
	{
		return vec<3, T, Q>(v.x, v.y, static_cast<T>(0));
	}

	template <typename T, qualifier Q>
	inline vec<3, T, Q> make_vec3(vec<3, T, Q> const& v)
	{
		return v;
	}

	template <typename T, qualifier Q>
	inline vec<3, T, Q> make_vec3(vec<4, T, Q> const& v)
	{
		return vec<3, T, Q>(v);
	}

	template <typename T, qualifier Q>
	inline vec<4, T, Q> make_vec4(vec<1, T, Q> const& v)
	{
		return vec<4, T, Q>(v.x, static_cast<T>(0), static_cast<T>(0), static_cast<T>(1));
	}

	template <typename T, qualifier Q>
	inline vec<4, T, Q> make_vec4(vec<2, T, Q> const& v)
	{
		return vec<4, T, Q>(v.x, v.y, static_cast<T>(0), static_cast<T>(1));
	}

	template <typename T, qualifier Q>
	inline vec<4, T, Q> make_vec4(vec<3, T, Q> const& v)
	{
		return vec<4, T, Q>(v.x, v.y, v.z, static_cast<T>(1));
	}

	template <typename T, qualifier Q>
	inline vec<4, T, Q> make_vec4(vec<4, T, Q> const& v)
	{
		return v;
	}

	template<typename T>
	 inline vec<2, T, defaultp> make_vec2(T const *const ptr)
	{
		vec<2, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(vec<2, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline vec<3, T, defaultp> make_vec3(T const *const ptr)
	{
		vec<3, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(vec<3, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline vec<4, T, defaultp> make_vec4(T const *const ptr)
	{
		vec<4, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(vec<4, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<2, 2, T, defaultp> make_mat2x2(T const *const ptr)
	{
		mat<2, 2, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(mat<2, 2, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<2, 3, T, defaultp> make_mat2x3(T const *const ptr)
	{
		mat<2, 3, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(mat<2, 3, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<2, 4, T, defaultp> make_mat2x4(T const *const ptr)
	{
		mat<2, 4, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(mat<2, 4, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<3, 2, T, defaultp> make_mat3x2(T const *const ptr)
	{
		mat<3, 2, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(mat<3, 2, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<3, 3, T, defaultp> make_mat3x3(T const *const ptr)
	{
		mat<3, 3, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(mat<3, 3, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<3, 4, T, defaultp> make_mat3x4(T const *const ptr)
	{
		mat<3, 4, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(mat<3, 4, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<4, 2, T, defaultp> make_mat4x2(T const *const ptr)
	{
		mat<4, 2, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(mat<4, 2, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<4, 3, T, defaultp> make_mat4x3(T const *const ptr)
	{
		mat<4, 3, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(mat<4, 3, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> make_mat4x4(T const *const ptr)
	{
		mat<4, 4, T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(mat<4, 4, T, defaultp>));
		return Result;
	}

	template<typename T>
	 inline mat<2, 2, T, defaultp> make_mat2(T const *const ptr)
	{
		return make_mat2x2(ptr);
	}

	template<typename T>
	 inline mat<3, 3, T, defaultp> make_mat3(T const *const ptr)
	{
		return make_mat3x3(ptr);
	}

	template<typename T>
	 inline mat<4, 4, T, defaultp> make_mat4(T const *const ptr)
	{
		return make_mat4x4(ptr);
	}

	template<typename T>
	 inline qua<T, defaultp> make_quat(T const *const ptr)
	{
		qua<T, defaultp> Result;
		memcpy(value_ptr(Result), ptr, sizeof(qua<T, defaultp>));
		return Result;
	}

	
}

#line 231 "d:\\vsprojects\\openglproject\\includes\\glm\\gtc\\type_ptr.hpp"
#line 13 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"


#line 1 "d:\\vsprojects\\openglproject\\openglproject\\time.h"
#pragma once
class Time
{
protected:
	static float lastFrameTime;
	static float deltaTime;
	Time();
public:

	static  void Init();

	static void Update();

	static float GetDeltaTime() {
		return deltaTime;
	}



};

#line 16 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "d:\\vsprojects\\openglproject\\openglproject\\shader.h"
#pragma once



#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 







namespace std {





#line 28 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

namespace experimental
{
namespace filesystem
{
inline namespace v1
{
class path;
}}}	

extern  FILE *__cdecl _Fiopen(
	const char *,
	ios_base::openmode, int);
extern  FILE *__cdecl _Fiopen(
	const wchar_t *,
	ios_base::openmode, int);

 
extern  FILE *__cdecl _Fiopen(
	const unsigned short *,
	ios_base::openmode, int);
 #line 50 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

		
template<class _Elem> inline
	bool _Fgetc(_Elem& _Ch, FILE *_File)
	{	
	return (:: fread(&_Ch, sizeof(_Elem), 1, _File) == 1);
	}

template<> inline bool _Fgetc(char& _Byte, FILE *_File)
	{	
	int _Meta;
	if ((_Meta = :: fgetc(_File)) == (-1))
		return (false);
	else
		{	
		_Byte = (char)_Meta;
		return (true);
		}
	}

template<> inline bool _Fgetc(wchar_t& _Wchar, FILE *_File)
	{	
	wint_t _Meta;
	if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
		return (false);
	else
		{	
		_Wchar = (wchar_t)_Meta;
		return (true);
		}
	}

 
template<> inline bool _Fgetc(unsigned short& _Wchar, FILE *_File)
	{	
	wint_t _Meta;
	if ((_Meta = :: fgetwc(_File)) == ((wint_t)(0xFFFF)))
		return (false);
	else
		{	
		_Wchar = (unsigned short)_Meta;
		return (true);
		}
	}
 #line 95 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

		
template<class _Elem> inline
	bool _Fputc(_Elem _Ch, FILE *_File)
	{	
	return (:: fwrite(&_Ch, 1, sizeof (_Elem), _File) == sizeof (_Elem));
	}

template<> inline bool _Fputc(char _Byte, FILE *_File)
	{	
	return (:: fputc(_Byte, _File) != (-1));
	}

template<> inline bool _Fputc(wchar_t _Wchar, FILE *_File)
	{	
	return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}

 
template<> inline bool _Fputc(unsigned short _Wchar, FILE *_File)
	{	
	return (:: fputwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}
 #line 119 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

		
template<class _Elem> inline
	bool _Ungetc(const _Elem&, FILE *)
	{	
	return (false);
	}

template<> inline bool _Ungetc(const char& _Byte, FILE *_File)
	{	
	return (:: ungetc((unsigned char)_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const signed char& _Byte, FILE *_File)
	{	
	return (:: ungetc((unsigned char)_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const unsigned char& _Byte, FILE *_File)
	{	
	return (:: ungetc(_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const wchar_t& _Wchar, FILE *_File)
	{	
	return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}

 
template<> inline bool _Ungetc(const unsigned short& _Wchar, FILE *_File)
	{	
	return (:: ungetwc(_Wchar, _File) != ((wint_t)(0xFFFF)));
	}
 #line 153 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

		
template<class _Elem,
	class _Traits>
	class basic_filebuf
		: public basic_streambuf<_Elem, _Traits>
	{	
public:
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef typename _Traits::state_type _Myst;
	typedef codecvt<_Elem, char, typename _Traits::state_type> _Cvt;

	basic_filebuf(FILE *_File = nullptr)
		: _Mysb()
		{	
		_Init(_File, _Newfl);
		}

	virtual  ~basic_filebuf() noexcept
		{	
		if (_Myfile != nullptr)
			_Reset_back();	
		if (_Closef)
			close();
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	basic_filebuf(_Uninitialized)
		: _Mysb(_Noinit)
		{	
		}

	basic_filebuf(basic_filebuf&& _Right)
		{	
		_Init(_Right._Myfile, _Newfl);	
		_Init(static_cast<FILE *>(nullptr), _Closefl);	
		_Assign_rv(::std:: move(_Right));
		}

	basic_filebuf& operator=(basic_filebuf&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(basic_filebuf&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			close();
			this->swap(_Right);
			}
		}

	void swap(basic_filebuf& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			
			FILE *_Myfile_sav = _Myfile;
			const _Cvt *_Pcvt_sav = _Pcvt;
			typename _Traits::state_type _State_sav = _State;
			bool _Wrotesome_sav = _Wrotesome;
			bool _Closef_sav = _Closef;
			bool _Set_eback_sav = _Mysb::eback() == &_Mychar;
			bool _Set_eback_live = _Mysb::gptr() == &_Mychar;

			_Elem *_Pfirst0 = _Mysb::pbase();
			_Elem *_Pnext0 = _Mysb::pptr();
			_Elem *_Pend = _Mysb::epptr();
			_Elem *_Gfirst0 = _Mysb::eback();
			_Elem *_Gnext0 = _Mysb::gptr();
			_Elem *_Gend = _Mysb::egptr();

			
			_Init(_Right._Myfile, _Right._Myfile != nullptr ? _Openfl : _Newfl);
			_Mysb::setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			if (_Right.eback() != &_Right._Mychar)
				_Mysb::setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			else if (_Right.gptr() != &_Right._Mychar)
				_Mysb::setg(&_Mychar, &_Mychar + 1, &_Mychar + 1);
			else
				_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

			_Pcvt = _Right._Pcvt;
			_State = _Right._State;
			_Wrotesome = _Right._Wrotesome;
			_Closef = _Right._Closef;

			
			_Right._Init(_Myfile_sav, _Myfile_sav != nullptr ? _Openfl : _Newfl);
			_Right.setp(_Pfirst0, _Pnext0, _Pend);
			if (!_Set_eback_sav)
				_Right.setg(_Gfirst0, _Gnext0, _Gend);
			else if (!_Set_eback_live)
				_Right.setg(&_Right._Mychar, &_Right._Mychar + 1,
					&_Right._Mychar + 1);
			else
				_Right.setg(&_Right._Mychar, &_Right._Mychar,
					&_Right._Mychar + 1);

			_Right._Pcvt = _Pcvt_sav;
			_Right._State = _State_sav;
			_Right._Wrotesome = _Wrotesome_sav;
			_Right._Closef = _Closef_sav;

			
			::std:: swap(_Set_eback, _Right._Set_eback);
			::std:: swap(_Set_egptr, _Right._Set_egptr);

			::std:: swap(_Mychar, _Right._Mychar);
			::std:: swap(_Mysb::_Plocale, _Right._Plocale);
			}
		}

	basic_filebuf(const basic_filebuf&) = delete;
	basic_filebuf& operator=(const basic_filebuf&) = delete;

	enum _Initfl
		{	
		_Newfl, _Openfl, _Closefl};

	 bool is_open() const
		{	
		return (_Myfile != nullptr);
		}

	basic_filebuf *open(const char *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		FILE *_File;
		if (_Myfile != nullptr || (_File = _Fiopen(_Filename, _Mode, _Prot)) == nullptr)
			return (nullptr);	

		_Init(_File, _Openfl);
		_Initcvt(::std:: use_facet<_Cvt>(_Mysb::getloc()));
		return (this);	
		}

	basic_filebuf *open(const string& _Str,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		return (open(_Str.c_str(), _Mode, _Prot));
		}

 
	basic_filebuf *open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		return (open(_Filename, static_cast<ios_base::openmode>(_Mode)));
		}
 #line 309 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	basic_filebuf *open(const wchar_t *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		FILE *_File;
		if (_Myfile != nullptr || (_File = _Fiopen(_Filename, _Mode, _Prot)) == nullptr)
			return (nullptr);	

		_Init(_File, _Openfl);
		_Initcvt(::std:: use_facet<_Cvt>(_Mysb::getloc()));
		return (this);	
		}

	basic_filebuf *open(const wstring& _Str,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		return (open(_Str.c_str(), _Mode, _Prot));
		}

	template<class _Path_ish = experimental::filesystem::path>
		basic_filebuf *open(const _Identity_t<_Path_ish>& _Path,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		return (open(_Path.c_str(), _Mode, _Prot));
		}

 








#line 348 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	basic_filebuf *open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		return (open(_Filename, static_cast<ios_base::openmode>(_Mode)));
		}
 #line 355 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	basic_filebuf *open(const unsigned short *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		FILE *_File;
		if (_Myfile != nullptr || (_File = _Fiopen(_Filename, _Mode, _Prot)) == nullptr)
			return (nullptr);	

		_Init(_File, _Openfl);
		_Initcvt(::std:: use_facet<_Cvt>(_Mysb::getloc()));
		return (this);	
		}

 
	basic_filebuf *open(const unsigned short *_Filename, ios_base::open_mode _Mode)
		{	
		return (open(_Filename, static_cast<ios_base::openmode>(_Mode)));
		}
 #line 376 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"
 #line 377 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	basic_filebuf *close()
		{	
		basic_filebuf *_Ans = this;
		if (_Myfile == nullptr)
			_Ans = nullptr;
		else
			{	
			if (!_Endwrite())
				_Ans = nullptr;
			if (:: fclose(_Myfile) != 0)
				_Ans = nullptr;
			}
		_Init(nullptr, _Closefl);
		return (_Ans);
		}

	virtual void  _Lock()
		{	
		if (_Myfile)
			:: _lock_file(_Myfile);
		}

	virtual void  _Unlock()
		{	
		if (_Myfile)
			:: _unlock_file(_Myfile);
		}

protected:
	virtual int_type  overflow(int_type _Meta = _Traits::eof())
		{	
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			{
			return (_Traits::not_eof(_Meta));	
			}

		if (_Mysb::pptr() != nullptr && _Mysb::pptr() < _Mysb::epptr())
			{	
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}

		if (_Myfile == nullptr)
			{
			return (_Traits::eof());	
			}

		_Reset_back();	
		if (_Pcvt == nullptr)
			{	
			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile) ? _Meta : _Traits::eof());
			}

		
		constexpr size_t _Codecvt_temp_buf = 32;
		char _Str[_Codecvt_temp_buf];
		const _Elem _Ch = _Traits::to_char_type(_Meta);
		const _Elem * _Src;
		char * _Dest;
		switch (_Pcvt->out(_State, &_Ch, &_Ch + 1, _Src, _Str, _Str + _Codecvt_temp_buf, _Dest))
			{	
			case codecvt_base::partial:
			case codecvt_base::ok:
				{	
				const auto _Count = static_cast<size_t>(_Dest - _Str);
				if (0 < _Count && _Count != static_cast<size_t>(:: fwrite(_Str, 1, _Count, _Myfile)))
					{
					return (_Traits::eof());	
					}

				_Wrotesome = true;	
				if (_Src != &_Ch)
					{
					return (_Meta);	
					}

				return (_Traits::eof());	
				}

			case codecvt_base::noconv:
				
				return (_Fputc(_Ch, _Myfile) ? _Meta : _Traits::eof());

			default:
				return (_Traits::eof());	
			}
		}

	virtual int_type  pbackfail(int_type _Meta =
		_Traits::eof())
		{	
		if (_Mysb::gptr() != nullptr
			&& _Mysb::eback() < _Mysb::gptr()
			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
				_Meta)))
			{	
			_Mysb::_Gndec();
			return (_Traits::not_eof(_Meta));
			}
		else if (_Myfile == nullptr || _Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::eof());	
		else if (_Pcvt == nullptr && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))
			return (_Meta);	
		else if (_Mysb::gptr() != &_Mychar)
			{	
			_Mychar = _Traits::to_char_type(_Meta);
			_Set_back();	
			return (_Meta);
			}
		else
			return (_Traits::eof());	
	}

	virtual int_type  underflow()
		{	
		int_type _Meta;
		if (_Mysb::gptr() != nullptr
			&& _Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(*_Mysb::gptr()));	
		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
			return (_Meta);	
		else
			{	
			pbackfail(_Meta);
			return (_Meta);
			}
		}

	virtual int_type  uflow()
		{	
		if (_Mysb::gptr() != nullptr && _Mysb::gptr() < _Mysb::egptr())
			{
			return (_Traits::to_int_type(*_Mysb::_Gninc()));	
			}

		if (_Myfile == nullptr)
			{
			return (_Traits::eof());	
			}

		_Reset_back();	
		if (_Pcvt == nullptr)
			{	
			_Elem _Ch;
			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch) : _Traits::eof());
			}

		
		string _Str;

		for (;;)
			{	
			const char * _Src;
			int _Meta = :: fgetc(_Myfile);

			if (_Meta == (-1))
				{
				return (_Traits::eof());	
				}

			_Str.push_back(static_cast<char>(_Meta));	

			_Elem _Ch;
			_Elem * _Dest;
			switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1, _Dest))
				{	
				case codecvt_base::partial:
				case codecvt_base::ok:
					if (_Dest != &_Ch)
						{	
						auto _Nleft = _Str.data() + _Str.size() - _Src;
						while (0 < _Nleft)
							{
							:: ungetc(_Src[--_Nleft], _Myfile);
							}

						return (_Traits::to_int_type(_Ch));
						}

					_Str.erase(0, static_cast<size_t>(_Src - _Str.data()));	
					break;

				case codecvt_base::noconv:
					
					return (static_cast<int_type>(_Str.front()));

				default:
					return (_Traits::eof());	
				}
			}
		}

#pragma warning(push)
#pragma warning(disable: 4127) 
	virtual streamsize  xsgetn(_Elem * _Ptr, streamsize _Count) override
		{	
		if  (sizeof(_Elem) == 1)
			{
			if (_Pcvt)
				{	
				return (_Mysb::xsgetn(_Ptr, _Count));
				}

			const streamsize _Start_count = _Count;
			streamsize _Size = _Mysb::_Gnavail();
			if (0 < _Count && 0 < _Size)
				{	
				if (_Count < _Size)
					{
					_Size = _Count;
					}

				_Traits::copy(_Ptr, _Mysb::gptr(), static_cast<size_t>(_Size));
				_Ptr += _Size;
				_Count -= _Size;
				_Mysb::gbump(static_cast<int>(_Size));
				}

			if (0 < _Count && _Myfile)
				{	
				_Reset_back();	
				_Count -= :: fread(_Ptr, sizeof(_Elem), static_cast<size_t>(_Count), _Myfile);
				}

			return (_Start_count - _Count);
			}
		else
			{	
			return (_Mysb::xsgetn(_Ptr, _Count));
			}
		}

	virtual streamsize  xsputn(const _Elem *_Ptr, streamsize _Count) override
		{	
		if  (sizeof(_Elem) == 1)
			{
			if (_Pcvt)
				{	
				return (_Mysb::xsputn(_Ptr, _Count));
				}

			const streamsize _Start_count = _Count;
			streamsize _Size = _Mysb::_Pnavail();
			if (0 < _Count && 0 < _Size)
				{	
				if (_Count < _Size)
					{
					_Size = _Count;
					}

				_Traits::copy(_Mysb::pptr(), _Ptr, static_cast<size_t>(_Size));
				_Ptr += _Size;
				_Count -= _Size;
				_Mysb::pbump(static_cast<int>(_Size));
				}

			if (0 < _Count && _Myfile)
				{	
				_Count -= :: fwrite(_Ptr, sizeof(_Elem), static_cast<size_t>(_Count), _Myfile);
				}

			return (_Start_count - _Count);
			}
		else
			{	
			return (_Mysb::xsputn(_Ptr, _Count));
			}
		}
#pragma warning(pop)

	virtual pos_type  seekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		fpos_t _Fileposition;

		if (_Mysb::gptr() == &_Mychar	
			&& _Way == ios_base::cur	
			&& _Pcvt == nullptr)	
			{
			_Off -= static_cast<off_type>(sizeof(_Elem));	
			}

		if (_Myfile == nullptr || !_Endwrite()
			|| ((_Off != 0 || _Way != ios_base::cur)
				&& :: _fseeki64(_Myfile, _Off, _Way) != 0)
			|| :: fgetpos(_Myfile, &_Fileposition) != 0)
			{
			return (pos_type(-1));	
			}

		_Reset_back();	
		return (pos_type(_State, _Fileposition));	
		}

	virtual pos_type  seekpos(pos_type _Pos, ios_base::openmode = ios_base::in | ios_base::out)
		{	
		off_type _Off = static_cast<off_type>(_Pos);

		if (_Myfile == nullptr || !_Endwrite() || :: fsetpos(_Myfile, &_Off) != 0)
			{
			return (pos_type(-1));	
			}

		_State = _Pos.state();
		_Reset_back();	
		return (pos_type(_State, _Off));	
		}

	virtual _Mysb * setbuf(_Elem *_Buffer, streamsize _Count)
		{	
		if (_Myfile == nullptr || :: setvbuf(_Myfile, (char *)_Buffer,
			_Buffer == nullptr && _Count == 0 ? 0x0004 : 0x0000,
			(size_t)_Count * sizeof (_Elem)) != 0)
			return (nullptr);	
		else
			{	
			_Init(_Myfile, _Openfl);
			return (this);
			}
		}

	virtual int  sync()
		{	
		return (_Myfile == nullptr
			|| _Traits::eq_int_type(_Traits::eof(), overflow())
			|| 0 <= :: fflush(_Myfile) ? 0 : -1);
		}

	virtual void  imbue(const locale& _Loc)
		{	
		_Initcvt(::std:: use_facet<_Cvt>(_Loc));
		}

	void _Init(FILE *_File, _Initfl _Which)
		{	
		 static _Myst _Stinit;	

		_Closef = _Which == _Openfl;
		_Wrotesome = false;

		_Mysb::_Init();	

		if (_File != nullptr && sizeof (_Elem) == 1)
			{	
			_Elem **_Pb = nullptr;
			_Elem **_Pn = nullptr;
			int *_Nr = nullptr;

			::_get_stream_buffer_pointers(
				_File,
				reinterpret_cast<char***>(&_Pb),
				reinterpret_cast<char***>(&_Pn),
				&_Nr);
			int *_Nw = _Nr;

			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);
			}

		_Myfile = _File;
		_State = _Stinit;
		_Pcvt = nullptr;	
		}

	bool _Endwrite()
		{	
		if (_Pcvt == nullptr || !_Wrotesome)
			{
			return (true);
			}

		
		if (_Traits::eq_int_type(_Traits::eof(), overflow()))
			{
			return (false);
			}

		constexpr size_t _Codecvt_temp_buf = 32;
		char _Str[_Codecvt_temp_buf];
		char * _Dest;
		switch (_Pcvt->unshift(_State, _Str, _Str + _Codecvt_temp_buf, _Dest))
			{	
			case codecvt_base::ok:
				_Wrotesome = false;	

			case codecvt_base::partial:	
				{	
				const auto _Count = static_cast<size_t>(_Dest - _Str);
				if (0 < _Count && _Count != static_cast<size_t>(:: fwrite(_Str, 1, _Count, _Myfile)))
					{
					return (false);	
					}

				return (!_Wrotesome);
				}

			case codecvt_base::noconv:
				return (true);	

			default:
				return (false);	
			}
		}

	void _Initcvt(const _Cvt& _Newcvt)
		{	
		if (_Newcvt.always_noconv())
			_Pcvt = nullptr;	
		else
			{	
			_Pcvt = ::std:: addressof(_Newcvt);
			_Mysb::_Init();	
			}
		}

private:
	const _Cvt *_Pcvt;	
	_Elem _Mychar;	
	bool _Wrotesome;	
	typename _Traits::state_type _State;	
	bool _Closef;	
	FILE *_Myfile;	

	void _Reset_back()
		{	
		if (_Mysb::eback() == &_Mychar)
			_Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);
		}

	void _Set_back()
		{	
		if (_Mysb::eback() != &_Mychar)
			{	
			_Set_eback = _Mysb::eback();
			_Set_egptr = _Mysb::egptr();
			}
		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
		}

	_Elem *_Set_eback;	
	_Elem *_Set_egptr;	
	};

template<class _Elem,
	class _Traits> inline
	void swap(basic_filebuf<_Elem, _Traits>& _Left,
		basic_filebuf<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits>
	class basic_ifstream
		: public basic_istream<_Elem, _Traits>
	{	
public:
	typedef basic_istream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;

	basic_ifstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_ifstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ifstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: basic_ifstream(_Str.c_str(), _Mode, _Prot)
		{	
		}

	explicit basic_ifstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ifstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: basic_ifstream(_Str.c_str(), _Mode, _Prot)
		{	
		}

	template<class _Path_ish = experimental::filesystem::path>
		explicit basic_ifstream(const _Identity_t<_Path_ish>& _Path,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: basic_ifstream(_Path.c_str(), _Mode, _Prot)
		{	
		}

 








#line 896 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	explicit basic_ifstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 907 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	explicit basic_ifstream(FILE *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_ifstream(basic_ifstream&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: move(_Right));
		}

	basic_ifstream& operator=(basic_ifstream&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(basic_ifstream&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(basic_ifstream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	basic_ifstream(const basic_ifstream&) = delete;
	basic_ifstream& operator=(const basic_ifstream&) = delete;

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

	template<class _Path_ish = experimental::filesystem::path>
		void open(const _Identity_t<_Path_ish>& _Path,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Path.c_str(), _Mode, _Prot);
		}

 








#line 982 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, static_cast<ios_base::openmode>(_Mode));
		}
 #line 989 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, static_cast<ios_base::openmode>(_Mode));
		}
 #line 1008 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"
 #line 1009 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	virtual  ~basic_ifstream() noexcept
		{	
		}

	 _Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	 bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, static_cast<ios_base::openmode>(_Mode));
		}
 #line 1047 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	void close()
		{	
		if (_Filebuffer.close() == nullptr)
			_Myios::setstate(ios_base::failbit);
		}

private:
	_Myfb _Filebuffer;	
	};

template<class _Elem,
	class _Traits> inline
	void swap(basic_ifstream<_Elem, _Traits>& _Left,
		basic_ifstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits>
	class basic_ofstream
		: public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_ostream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;

	basic_ofstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_ofstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ofstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: basic_ofstream(_Str.c_str(), _Mode, _Prot)
		{	
		}

	explicit basic_ofstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_ofstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: basic_ofstream(_Str.c_str(), _Mode, _Prot)
		{	
		}

	template<class _Path_ish = experimental::filesystem::path>
		explicit basic_ofstream(const _Identity_t<_Path_ish>& _Path,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: basic_ofstream(_Path.c_str(), _Mode, _Prot)
		{	
		}

 








#line 1132 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	explicit basic_ofstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 1143 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	explicit basic_ofstream(FILE *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_ofstream(basic_ofstream&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: move(_Right));
		}

	basic_ofstream& operator=(basic_ofstream&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(basic_ofstream&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(basic_ofstream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	basic_ofstream(const basic_ofstream&) = delete;
	basic_ofstream& operator=(const basic_ofstream&) = delete;

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

	template<class _Path_ish = experimental::filesystem::path>
		void open(const _Identity_t<_Path_ish>& _Path,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Path.c_str(), _Mode, _Prot);
		}

 








#line 1218 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, static_cast<ios_base::openmode>(_Mode));
		}
 #line 1225 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, static_cast<ios_base::openmode>(_Mode));
		}
 #line 1244 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"
 #line 1245 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	virtual  ~basic_ofstream() noexcept
		{	
		}

	 _Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	 bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, static_cast<ios_base::openmode>(_Mode));
		}
 #line 1283 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	void close()
		{	
		if (_Filebuffer.close() == nullptr)
			_Myios::setstate(ios_base::failbit);
		}

private:
	_Myfb _Filebuffer;	
	};

template<class _Elem,
	class _Traits> inline
	void swap(basic_ofstream<_Elem, _Traits>& _Left,
		basic_ofstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits>
	class basic_fstream
		: public basic_iostream<_Elem, _Traits>
	{	
public:
	typedef basic_iostream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	basic_fstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_fstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_fstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: basic_fstream(_Str.c_str(), _Mode, _Prot)
		{	
		}

	explicit basic_fstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		}

	explicit basic_fstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: basic_fstream(_Str.c_str(), _Mode, _Prot)
		{	
		}

	template<class _Path_ish = experimental::filesystem::path>
		explicit basic_fstream(const _Identity_t<_Path_ish>& _Path,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: basic_fstream(_Path.c_str(), _Mode, _Prot)
		{	
		}

 








#line 1373 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	explicit basic_fstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 1384 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	explicit basic_fstream(FILE *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_fstream(basic_fstream&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: move(_Right));
		}

	basic_fstream& operator=(basic_fstream&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(basic_fstream&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(basic_fstream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	basic_fstream(const basic_fstream&) = delete;
	basic_fstream& operator=(const basic_fstream&) = delete;

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

	template<class _Path_ish = experimental::filesystem::path>
		void open(const _Identity_t<_Path_ish>& _Path,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Path.c_str(), _Mode, _Prot);
		}

 








#line 1459 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, static_cast<ios_base::openmode>(_Mode));
		}
 #line 1466 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, static_cast<ios_base::openmode>(_Mode));
		}
 #line 1485 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"
 #line 1486 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	virtual  ~basic_fstream() noexcept
		{	
		}

	 _Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	 bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == nullptr)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}

 
	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, static_cast<ios_base::openmode>(_Mode));
		}
 #line 1524 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"

	void close()
		{	
		if (_Filebuffer.close() == nullptr)
			_Myios::setstate(ios_base::failbit);
	}

private:
	_Myfb _Filebuffer;	
	};

template<class _Elem,
	class _Traits> inline
	void swap(basic_fstream<_Elem, _Traits>& _Left,
		basic_fstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1549 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"
#line 1550 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\fstream"





#line 6 "d:\\vsprojects\\openglproject\\openglproject\\shader.h"
#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sstream"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 
namespace std {

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringbuf
		: public basic_streambuf<_Elem, _Traits>
	{	
public:
	typedef _Alloc allocator_type;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysize_type;

	explicit basic_stringbuf(ios_base::openmode _Mode = ios_base::in | ios_base::out)
		: _Seekhigh(nullptr),
		_Mystate(_Getstate(_Mode)),
		_Al()
		{	
		}

	explicit basic_stringbuf(const _Mystr& _Str, ios_base::openmode _Mode = ios_base::in | ios_base::out)
		: _Al(_Str.get_allocator())
		{	
		_Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
		}

	basic_stringbuf(basic_stringbuf&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		}

	basic_stringbuf& operator=(basic_stringbuf&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(basic_stringbuf&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Tidy();
			this->swap(_Right);
			}
		}

	void swap(basic_stringbuf& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mysb::swap(_Right);
			::std:: swap(_Seekhigh, _Right._Seekhigh);
			::std:: swap(_Mystate, _Right._Mystate);
			_Swap_adl(_Al, _Right._Al);
			}
		}

	basic_stringbuf(const basic_stringbuf&) = delete;
	basic_stringbuf& operator=(const basic_stringbuf&) = delete;

	virtual ~basic_stringbuf() noexcept
		{	
		_Tidy();
		}

	enum
		{	
		_Allocated = 1,	
		_Constant = 2,	
		_Noread = 4,	
		_Append = 8,	
		_Atend = 16		
		};

	using int_type = typename _Traits::int_type;
	using pos_type = typename _Traits::pos_type;
	using off_type = typename _Traits::off_type;

	 _Mystr str() const
		{	
		_Mystr _Result(_Al);
		if (!(_Mystate & _Constant) && _Mysb::pptr() != nullptr)
			{	
			const auto _Base = _Mysb::pbase();
			_Result.assign(_Base, static_cast<_Mysize_type>(_Max_value(_Mysb::pptr(), _Seekhigh) - _Base));
			}
		else if (!(_Mystate & _Noread) && _Mysb::gptr() != nullptr)
			{	
			const auto _Base = _Mysb::eback();
			_Result.assign(_Base, static_cast<_Mysize_type>(_Mysb::egptr() - _Base));
			}

		return (_Result);
		}

	void str(const _Mystr& _Newstr)
		{	
		_Tidy();
		_Init(_Newstr.c_str(), _Newstr.size(), _Mystate);
		}

protected:
	virtual int_type overflow(int_type _Meta = _Traits::eof())
		{	
		if (_Mystate & _Constant)
			{
			return (_Traits::eof());	
			}

		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			{
			return (_Traits::not_eof(_Meta));	
			}

		const auto _Pptr = _Mysb::pptr();
		const auto _Epptr = _Mysb::epptr();
		if (_Pptr != nullptr && _Pptr < _Epptr)
			{	
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			_Seekhigh = _Pptr + 1;
			return (_Meta);
			}

		
		size_t _Oldsize = 0;
		const auto _Oldptr = _Mysb::eback();
		if (_Pptr != nullptr)
			{
			_Oldsize = static_cast<size_t>(_Epptr - _Oldptr);
			}

		size_t _Newsize;
		if (_Oldsize < _MINSIZE)
			{
			_Newsize = _MINSIZE;
			}
		else if (_Oldsize < 2147483647 / 2)
			{	
			_Newsize = _Oldsize << 1;
			}
		else if (_Oldsize < 2147483647)
			{
			_Newsize = 2147483647;
			}
		else
			{	
			return (_Traits::eof());
			}

		const auto _Newptr = _Unfancy(_Al.allocate(_Newsize));
		_Traits::copy(_Newptr, _Oldptr, _Oldsize);

		const auto _New_pnext = _Newptr + _Oldsize;
		_Seekhigh = _New_pnext + 1; 

		_Mysb::setp(_Newptr, _New_pnext, _Newptr + _Newsize);
		if (_Mystate & _Noread)
			{	
			_Mysb::setg(_Newptr, nullptr, _Newptr);
			}
		else
			{	
			_Mysb::setg(_Newptr,
				_Newptr + (_Mysb::gptr() - _Oldptr),
				_Seekhigh);
			}

		if (_Mystate & _Allocated)
			{
			_Al.deallocate(_Ptr_traits::pointer_to(*_Oldptr), _Oldsize);
			}

		_Mystate |= _Allocated;
		*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
		return (_Meta);
		}

	virtual int_type pbackfail(int_type _Meta = _Traits::eof())
		{	
		const auto _Gptr = _Mysb::gptr();
		if (_Gptr == nullptr
			|| _Gptr <= _Mysb::eback()
			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)
				&& !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])
				&& (_Mystate & _Constant)))
			{	
			return (_Traits::eof());
			}

		
		_Mysb::gbump(-1);
		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
			{
			*_Mysb::gptr() = _Traits::to_char_type(_Meta);
			}

		return (_Traits::not_eof(_Meta));
		}

	virtual int_type underflow()
		{	
		const auto _Gptr = _Mysb::gptr();
		if (_Gptr == nullptr)
			{	
			return (_Traits::eof());
			}

		if (_Gptr < _Mysb::egptr())
			{	
			return (_Traits::to_int_type(*_Gptr));
			}

		
		const auto _Pptr = _Mysb::pptr();
		if (!_Pptr || (_Mystate & _Noread))
			{	
			return (_Traits::eof());
			}

		const auto _Local_highwater = _Max_value(_Seekhigh, _Pptr);
		if (_Local_highwater <= _Gptr)
			{	
			return (_Traits::eof());
			}

		_Seekhigh = _Local_highwater;
		_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Local_highwater);
		return (_Traits::to_int_type(*_Mysb::gptr()));
		}

	virtual pos_type seekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		const auto _Gptr_old = _Mysb::gptr();
		const auto _Pptr_old = _Mysb::pptr();
		if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old)
			{	
			_Seekhigh = _Pptr_old;
			}

		const auto _Seeklow = _Mysb::eback();
		const auto _Seekdist = _Seekhigh - _Seeklow;
		off_type _Newoff;
		switch (_Way)
			{
			case ios_base::beg:
				_Newoff = 0;
				break;
			case ios_base::end:
				_Newoff = _Seekdist;
				break;
			case ios_base::cur:
				{
				constexpr auto _Both = ios_base::in | ios_base::out;
				if ((_Mode & _Both) != _Both)
					{	
					if (_Mode & ios_base::in)
						{
						if (_Gptr_old != nullptr || _Seeklow == nullptr)
							{
							_Newoff = _Gptr_old - _Seeklow;
							break;
							}
						}
					else if ((_Mode & ios_base::out) && (_Pptr_old != nullptr || _Seeklow == nullptr))
						{
						_Newoff = _Pptr_old - _Seeklow;
						break;
						}
					}
				}

				
			default:
				return (pos_type(off_type(-1)));
			}

		if (static_cast<unsigned long long>(_Off) + _Newoff > static_cast<unsigned long long>(_Seekdist))
			{
			return (pos_type(off_type(-1)));
			}

		_Off += _Newoff;
		if (_Off != 0
			&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)
				|| ((_Mode & ios_base::out) && _Pptr_old == nullptr)))
			{
			return (pos_type(off_type(-1)));
			}

		const auto _Newptr = _Seeklow + _Off;	
		if ((_Mode & ios_base::in) && _Gptr_old != nullptr)
			{
			_Mysb::setg(_Seeklow, _Newptr, _Seekhigh);
			}

		if ((_Mode & ios_base::out) && _Pptr_old != nullptr)
			{
			_Mysb::setp(_Seeklow, _Newptr, _Mysb::epptr());
			}

		return (pos_type(_Off));
		}

	virtual pos_type seekpos(pos_type _Pos,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		const auto _Off = static_cast<streamoff>(_Pos);
		const auto _Gptr_old = _Mysb::gptr();
		const auto _Pptr_old = _Mysb::pptr();
		if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old)
			{	
			_Seekhigh = _Pptr_old;
			}

		const auto _Seeklow = _Mysb::eback();
		const auto _Seekdist = _Seekhigh - _Seeklow;
		if (static_cast<unsigned long long>(_Off) > static_cast<unsigned long long>(_Seekdist))
			{
			return (pos_type(off_type(-1)));
			}

		if (_Off != 0
			&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)
				|| ((_Mode & ios_base::out) && _Pptr_old == nullptr)))
			{
			return (pos_type(off_type(-1)));
			}

		const auto _Newptr = _Seeklow + _Off;	
		if ((_Mode & ios_base::in) && _Gptr_old != nullptr)
			{
			_Mysb::setg(_Seeklow, _Newptr, _Seekhigh);
			}

		if ((_Mode & ios_base::out) && _Pptr_old != nullptr)
			{
			_Mysb::setp(_Seeklow, _Newptr, _Mysb::epptr());
			}

		return (pos_type(_Off));
		}

	void _Init(const _Elem * _Ptr, _Mysize_type _Count, int _State)
		{	
		if (_Count > 2147483647)
			{	
			_Xbad_alloc();
			}

		if (_Count != 0 && (_State & (_Noread | _Constant)) != (_Noread | _Constant))
			{	
			const auto _Pnew = _Unfancy(_Al.allocate(_Count));
			_Traits::copy(_Pnew, _Ptr, _Count);
			_Seekhigh = _Pnew + _Count;

			if (!(_State & _Noread))
				{
				_Mysb::setg(_Pnew, _Pnew, _Seekhigh);	
				}

			if (!(_State & _Constant))
				{	
				_Mysb::setp(_Pnew,
					(_State & (_Atend | _Append)) ? _Seekhigh : _Pnew,
					_Seekhigh);

				if (_State & _Noread)
					{	
					_Mysb::setg(_Pnew, nullptr, _Pnew);
					}
				}

			_State |= _Allocated;
			}
		else
			{
			_Seekhigh = nullptr;
			}

		_Mystate = _State;
		}

	void _Tidy()
		{	
		if (_Mystate & _Allocated)
			{
			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),
				static_cast<typename allocator_traits<allocator_type>::size_type>(
					(_Mysb::pptr() != nullptr ? _Mysb::epptr() : _Mysb::egptr()) - _Mysb::eback()));
			}

		_Mysb::setg(nullptr, nullptr, nullptr);
		_Mysb::setp(nullptr, nullptr);
		_Seekhigh = nullptr;
		_Mystate &= ~_Allocated;
		}

private:
	using _Ptr_traits = pointer_traits<typename allocator_traits<allocator_type>::pointer>;

	enum
		{	
		_MINSIZE = 32
		};

	static int _Getstate(ios_base::openmode _Mode)
		{	
		int _State = 0;
		if (!(_Mode & ios_base::in))
			{
			_State |= _Noread;
			}

		if (!(_Mode & ios_base::out))
			{
			_State |= _Constant;
			}

		if (_Mode & ios_base::app)
			{
			_State |= _Append;
			}

		if (_Mode & ios_base::ate)
			{
			_State |= _Atend;
			}

		return (_State);
		}

	_Elem * _Seekhigh;	
	int _Mystate;	
	allocator_type _Al;	
	};

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
		basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_istringstream
		: public basic_istream<_Elem, _Traits>
	{	
public:
	typedef basic_istream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::in)
		{	
		}

	explicit basic_istringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::in)
		{	
		}

	basic_istringstream(basic_istringstream&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: move(_Right));
		}

	basic_istringstream& operator=(basic_istringstream&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(basic_istringstream&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(basic_istringstream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	basic_istringstream(const basic_istringstream&) = delete;
	basic_istringstream& operator=(const basic_istringstream&) = delete;

	virtual ~basic_istringstream() noexcept
		{	
		}

	 _Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	 _Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_istringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_ostringstream
		: public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_ostream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_ostringstream(ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::out)
		{	
		}

	explicit basic_ostringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::out)
		{	
		}

	basic_ostringstream(basic_ostringstream&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: move(_Right));
		}

	basic_ostringstream& operator=(basic_ostringstream&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(basic_ostringstream&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(basic_ostringstream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	basic_ostringstream(const basic_ostringstream&) = delete;
	basic_ostringstream& operator=(const basic_ostringstream&) = delete;

	virtual ~basic_ostringstream() noexcept
		{	
		}

	 _Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	 _Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_ostringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringstream
		: public basic_iostream<_Elem, _Traits>
	{	
public:
	typedef basic_iostream<_Elem, _Traits> _Mybase;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef _Alloc allocator_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_stringstream(ios_base::openmode _Mode =
		ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode)
		{	
		}

	explicit basic_stringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode)
		{	
		}

	basic_stringstream(basic_stringstream&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: move(_Right));
		}

	basic_stringstream& operator=(basic_stringstream&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(basic_stringstream&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(basic_stringstream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	basic_stringstream(const basic_stringstream&) = delete;
	basic_stringstream& operator=(const basic_stringstream&) = delete;

	virtual ~basic_stringstream() noexcept
		{	
		}

	 _Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	 _Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_stringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 747 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sstream"
#line 748 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\sstream"





#line 7 "d:\\vsprojects\\openglproject\\openglproject\\shader.h"




using namespace std;

class Shader
{
public:
	inline GLuint getProgramID() const{
		return ID;
	}

	
	Shader(const GLchar* vertexPath, const GLchar* fragmentPath) {
		
		string vertexSource;
		string fragmentSource;
		ifstream vShaderFile;
		ifstream fShaderFile;
		
		vShaderFile.exceptions(ifstream::failbit | ifstream::badbit);
		fShaderFile.exceptions(ifstream::failbit | ifstream::badbit);
		try {
			
			vShaderFile.open(vertexPath);
			fShaderFile.open(fragmentPath);
			
			stringstream vShaderStream, fShaderStream;
			vShaderStream << vShaderFile.rdbuf();
			fShaderStream << fShaderFile.rdbuf();
			
			vShaderFile.close();
			fShaderFile.close();
			
			vertexSource = vShaderStream.str();
			fragmentSource = fShaderStream.str();
		}
		catch (ifstream::failure e) {
			std::cout << "ERROR::SHADER::FILE_NOT_SUCCESSFULLY_READ" << endl;
			cout << e.what() << endl;
		}
		
		GLuint vertex, fragment;
		
		const char* vSource = vertexSource.c_str();
		vertex = glad_glCreateShader(0x8B31);
		glad_glShaderSource(vertex, 1, &vSource, 0);
		glad_glCompileShader(vertex);
		checkShaderCompileErrors(vertex, "ERROR::SHADER::VERTEX::COMPILATION_FATILED");
		
		const char* fSource = fragmentSource.c_str();
		fragment = glad_glCreateShader(0x8B30);
		glad_glShaderSource(fragment, 1, &fSource, 0);
		glad_glCompileShader(fragment);
		checkShaderCompileErrors(fragment, "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED");

		
		ID = glad_glCreateProgram();
		glad_glAttachShader(ID, vertex);
		glad_glAttachShader(ID, fragment);
		glad_glLinkProgram(ID);
		GLint success;
		glad_glGetProgramiv(ID, 0x8B82, &success);
		if (!success) {
			char infoLog[infoLogSize];
			glad_glGetProgramInfoLog(ID, infoLogSize, 0, infoLog);
			cout << "ERROR::SHADER::LINKING_FAILED" << infoLog << endl;
		}

		
		glad_glDeleteShader(vertex);
		glad_glDeleteShader(fragment);
	}
	
	~Shader() {
		
		
		
	}

	
	void use() {
		glad_glUseProgram(ID);
	}

	
	void setBool(const string &name, bool value) {
		glad_glUniform1i(glad_glGetUniformLocation(ID, name.c_str()), (int)value);
	}
	void setInt(const string &name, int value) {
		glad_glUniform1i(glad_glGetUniformLocation(ID, name.c_str()), value);
	}
	void setFloat(const string &name, float value) {
		glad_glUniform1f(glad_glGetUniformLocation(ID, name.c_str()), value);
	}
	float getFloat(const string &name) {
		float out;
		glad_glGetUniformfv(ID, glad_glGetUniformLocation(ID, name.c_str()), &out);
		return out;
	}
	void setVec3(const string &name, float x, float y, float z) {
		glad_glUniform3f(glad_glGetUniformLocation(ID, name.c_str()), x, y, z);
	}
	void setVec3(const string &name, glm::vec3 vec) {
		glad_glUniform3f(glad_glGetUniformLocation(ID, name.c_str()), vec.x, vec.y, vec.z);
	}
	void setMat4(const string &name, const glm::mat4 &matrix) {
		glad_glUniformMatrix4fv(glad_glGetUniformLocation(ID, name.c_str()), 1, 0, glm::value_ptr(matrix));
	}
	void SetMat3(const string& name, const glm::mat3 &matrix) {
		glad_glUniformMatrix3fv(glad_glGetUniformLocation(ID, name.c_str()), 1, 0, glm::value_ptr(matrix));
	}

protected:
	
	GLuint ID;
private:
	static const size_t infoLogSize = 512;
	void checkShaderCompileErrors(GLuint shaderID, string firstLine = "ERROR::SHADER::COMPILATION_FAILED") {
		firstLine += '\n';
		GLint success;
		glad_glGetShaderiv(shaderID, 0x8B81, &success);
		if (!success) {
			char infoLog[infoLogSize];
			glad_glGetShaderInfoLog(shaderID, infoLogSize, 0, infoLog);
			cout << firstLine << infoLog << endl;
		}
	}
};

#line 17 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "d:\\vsprojects\\openglproject\\openglproject\\rotator.h"
#pragma once




class Rotator
{
protected:
	
	glm::fquat quat;

public: 
	Rotator();
	Rotator(const glm::vec3 eulerAngles);
	~Rotator();

	
	void SetEulerAngles(const glm::vec3 eulerAngles);

	glm::vec3 GetEulerAngles() const;

	glm::vec3 GetEulerRadians() const;

	glm::vec3 GetForwardVector() const;

	glm::vec3 GetUpVector() const;

	glm::vec3 GetRightVector() const;

	
	void RotateArounAxis(float angle, const glm::vec3 axis);

	glm::fquat GetQuaterion() const {
		return quat;
	}


};

#line 18 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"
#line 1 "d:\\vsprojects\\openglproject\\openglproject\\playercontroller.h"
#pragma once




#line 1 "d:\\vsprojects\\openglproject\\openglproject\\player.h"
#pragma once

#line 1 "d:\\vsprojects\\openglproject\\openglproject\\actor.h"
#pragma once

#line 1 "d:\\vsprojects\\openglproject\\openglproject\\transform.h"
#pragma once





class Transform
{
protected:
	
	glm::vec3 scale = glm::vec3(1.0f, 1.0f, 1.0f);

public:
	glm::vec3 position = glm::vec3(0.0f, 0.0f, 0.0f);
	Rotator rotation;

	Transform();
	~Transform();

	glm::vec3 GetScale() const {
		return scale;
	}

	void SetScale(glm::vec3 newScale) {
		scale.x = glm::max(newScale.x, 0.0f);
		scale.y = glm::max(newScale.y, 0.0f);
		scale.z = glm::max(newScale.z, 0.0f);
	}

	glm::mat4 GetTransformMatrix() const;

	glm::mat4 GetInverseTransformMatrix() const;

	glm::mat3 GetNormalMatrix() const;
};

#line 4 "d:\\vsprojects\\openglproject\\openglproject\\actor.h"
#line 1 "d:\\vsprojects\\openglproject\\openglproject\\physics.h"
#pragma once




#line 1 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

#pragma once








#line 12 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Myvec>
	class _Vector_const_iterator
		: public _Iterator_base
	{	
public:
	using iterator_category = random_access_iterator_tag;

	using value_type = typename _Myvec::value_type;
	using difference_type = typename _Myvec::difference_type;
	using pointer = typename _Myvec::const_pointer;
	using reference = const value_type&;
	using _Tptr = typename _Myvec::pointer;

	_Vector_const_iterator()
		: _Ptr()
		{	
		}

	_Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
		: _Ptr(_Parg)
		{	
		this->_Adopt(_Pvector);
		}

	 reference operator*() const
		{	
 
		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 50, 0, "%s", "can't dereference value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't dereference value-initialized vector iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 50, 0); } while (false); } ; } while (false);
		do { if (_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 52, 0, "%s", "can't dereference out of range vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't dereference out of range vector iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 52, 0); } while (false); } ; } while (false);
#line 53 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
 #line 54 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		return (*_Ptr);
		}

	 pointer operator->() const
		{	
 
		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 62, 0, "%s", "can't dereference value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't dereference value-initialized vector iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 62, 0); } while (false); } ; } while (false);
		do { if (_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 64, 0, "%s", "can't dereference out of range vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't dereference out of range vector iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 64, 0); } while (false); } ; } while (false);
#line 65 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
 #line 66 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		return (_Ptr);
		}

	_Vector_const_iterator& operator++()
		{	
 
		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 74, 0, "%s", "can't increment value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't increment value-initialized vector iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 74, 0); } while (false); } ; } while (false);
		do { if (_Ptr < _Mycont->_Mylast) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 75, 0, "%s", "can't increment vector iterator past end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't increment vector iterator past end\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 75, 0); } while (false); } ; } while (false);
 #line 77 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		++_Ptr;
		return (*this);
		}

	_Vector_const_iterator operator++(int)
		{	
		_Vector_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Vector_const_iterator& operator--()
		{	
 
		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
		do { if (_Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 93, 0, "%s", "can't decrement value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't decrement value-initialized vector iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 93, 0); } while (false); } ; } while (false);
		do { if (_Mycont->_Myfirst < _Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 94, 0, "%s", "can't decrement vector iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't decrement vector iterator before begin\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 94, 0); } while (false); } ; } while (false);
 #line 96 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		--_Ptr;
		return (*this);
		}

	_Vector_const_iterator operator--(int)
		{	
		_Vector_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	void _Verify_offset(const difference_type _Off) const
		{
 

#line 113 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
		do { if (_Off == 0 || _Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 114, 0, "%s", "cannot seek value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek value-initialized vector iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 114, 0); } while (false); } ; } while (false);
		if (_Off < 0)
			{
			do { if (_Off >= _Mycont->_Myfirst - _Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 117, 0, "%s", "cannot seek vector iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek vector iterator before begin\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 117, 0); } while (false); } ; } while (false);
			}

		if (_Off > 0)
			{
			do { if (_Off <= _Mycont->_Mylast - _Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 122, 0, "%s", "cannot seek vector iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek vector iterator after end\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 122, 0); } while (false); } ; } while (false);
			}
 #line 125 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		}

	_Vector_const_iterator& operator+=(const difference_type _Off)
		{	
		_Verify_offset(_Off);
		_Ptr += _Off;
		return (*this);
		}

	 _Vector_const_iterator operator+(const difference_type _Off) const
		{	
		_Vector_const_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Vector_const_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	 _Vector_const_iterator operator-(const difference_type _Off) const
		{	
		_Vector_const_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	 difference_type operator-(const _Vector_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr - _Right._Ptr);
		}

	 reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	 bool operator==(const _Vector_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr == _Right._Ptr);
		}

	 bool operator!=(const _Vector_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	 bool operator<(const _Vector_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr < _Right._Ptr);
		}

	 bool operator>(const _Vector_const_iterator& _Right) const
		{	
		return (_Right < *this);
		}

	 bool operator<=(const _Vector_const_iterator& _Right) const
		{	
		return (!(_Right < *this));
		}

	 bool operator>=(const _Vector_const_iterator& _Right) const
		{	
		return (!(*this < _Right));
		}

	void _Compat(const _Vector_const_iterator& _Right) const
		{	
 

#line 199 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		do { if (this->_Getcont() == _Right._Getcont()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 199, 0, "%s", "vector iterators incompatible")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector iterators incompatible\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 199, 0); } while (false); } ; } while (false);
 #line 201 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		}

 
	friend void _Verify_range(const _Vector_const_iterator& _First, const _Vector_const_iterator& _Last)
		{
		do { if (_First._Getcont() == _Last._Getcont()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 207, 0, "%s", "vector iterators in range are from different containers")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector iterators in range are from different containers\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 207, 0); } while (false); } ; } while (false);
#line 208 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		do { if (_First._Ptr <= _Last._Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 208, 0, "%s", "vector iterator range transposed")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector iterator range transposed\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 208, 0); } while (false); } ; } while (false);
		}
 #line 211 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

	 pointer _Unwrapped() const
		{
		return (_Ptr);
		}

	void _Seek_to(pointer _It)
		{
		_Ptr = _Const_cast(_It);
		}

	_Tptr _Ptr;	
	};

template<class _Myvec>
	 inline _Vector_const_iterator<_Myvec> operator+(
		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
		_Vector_const_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Myvec>
	class _Vector_iterator
		: public _Vector_const_iterator<_Myvec>
	{	
public:
	using _Mybase = _Vector_const_iterator<_Myvec>;
	using iterator_category = random_access_iterator_tag;

	using value_type = typename _Myvec::value_type;
	using difference_type = typename _Myvec::difference_type;
	using pointer = typename _Myvec::pointer;
	using reference = value_type&;

	_Vector_iterator()
		{	
		}

	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
		: _Mybase(_Parg, _Pvector)
		{	
		}

	 reference operator*() const
		{	
		return (const_cast<reference>(_Mybase::operator*()));
		}

	 pointer operator->() const
		{	
		return (_Const_cast(_Mybase::operator->()));
		}

	_Vector_iterator& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Vector_iterator operator++(int)
		{	
		_Vector_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Vector_iterator& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Vector_iterator operator--(int)
		{	
		_Vector_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Vector_iterator& operator+=(const difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	 _Vector_iterator operator+(const difference_type _Off) const
		{	
		_Vector_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Vector_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	 _Vector_iterator operator-(const difference_type _Off) const
		{	
		_Vector_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	 difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	 reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	 pointer _Unwrapped() const
		{
		return (this->_Ptr);
		}
	};

template<class _Myvec>
	 inline _Vector_iterator<_Myvec> operator+(
		typename _Vector_iterator<_Myvec>::difference_type _Off,
		_Vector_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference>
	struct _Vec_iter_types
	{	
	using value_type = _Value_type;
	using size_type = _Size_type;
	using difference_type = _Difference_type;
	using pointer = _Pointer;
	using const_pointer = _Const_pointer;
	};

template<class _Ty,
	class _Alloc>
	struct _Vec_base_types
	{	
	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
	using _Alty_traits = allocator_traits<_Alty>;

	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alty>,
		_Simple_types<_Ty>,
		_Vec_iter_types<_Ty,
			typename _Alty_traits::size_type,
			typename _Alty_traits::difference_type,
			typename _Alty_traits::pointer,
			typename _Alty_traits::const_pointer,
			_Ty&,
			const _Ty&>>;
	};

		
template<class _Val_types>
	class _Vector_val
		: public _Container_base
	{	
public:
	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	_Vector_val()
		: _Myfirst(),
		_Mylast(),
		_Myend()
		{	
		}

	pointer _Myfirst;	
	pointer _Mylast;	
	pointer _Myend;	
	};

		
template<class _Alloc_types>
	class _Vector_alloc
	{	
public:
	using _Alty = typename _Alloc_types::_Alty;
	using _Alty_traits = typename _Alloc_types::_Alty_traits;
	using _Alproxy = _Rebind_alloc_t<_Alty, _Container_proxy>;
	using _Alproxy_traits = allocator_traits<_Alproxy>;
	using _Val_types = typename _Alloc_types::_Val_types;

	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;

	using iterator = _Vector_iterator<_Vector_val<_Val_types>>;
	using const_iterator = _Vector_const_iterator<_Vector_val<_Val_types>>;

 























#line 444 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
	_Vector_alloc()
		: _Mypair(_Zero_then_variadic_args_t())
		{	
		_Alloc_proxy();
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Any_alloc>>, _Vector_alloc>>>
		_Vector_alloc(_Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		_Alloc_proxy();
		}

	~_Vector_alloc() noexcept
		{	
		_Free_proxy();
		}

	void _Copy_alloc(const _Alty& _Al)
		{	
		const bool _Reload = _Alty_traits::propagate_on_container_copy_assignment::value
			&& _Getal() != _Al;

		if (_Reload)
			{
			_Free_proxy();
			}

		_Pocca(_Getal(), _Al);

		if (_Reload)
			{
			_Alloc_proxy();
			}
		}

	void _Move_alloc(_Alty& _Al)
		{	
		const bool _Reload = _Alty_traits::propagate_on_container_move_assignment::value
			&& _Getal() != _Al;

		if (_Reload)
			{
			_Free_proxy();
			}

		_Pocma(_Getal(), _Al);

		if (_Reload)
			{
			_Alloc_proxy();
			}
		}

	void _Alloc_proxy()
		{	
		_Alproxy _Proxy_allocator(_Getal());
		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));
		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());
		_Myproxy()->_Mycont = ::std:: addressof(_Get_data());
		}

	void _Free_proxy()
		{	
		_Alproxy _Proxy_allocator(_Getal());
		_Orphan_all();
		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());
		_Deallocate_plain(_Proxy_allocator, _Myproxy());
		_Myproxy() = nullptr;
		}

	_Iterator_base12 **_Getpfirst() const
		{	
		return (_Get_data()._Getpfirst());
		}

	_Container_proxy * & _Myproxy() noexcept
		{	
		return (_Get_data()._Myproxy);
		}

	_Container_proxy * const & _Myproxy() const noexcept
		{	
		return (_Get_data()._Myproxy);
		}
 #line 532 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_Vector_alloc& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Alty& _Getal() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Alty& _Getal() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_Vector_val<_Val_types>& _Get_data() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const _Vector_val<_Val_types>& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second());
		}

	iterator _Make_iterator(const pointer _Ptr) noexcept
		{	
		return (iterator(_Ptr, ::std:: addressof(_Mypair._Get_second())));
		}

	iterator _Make_iterator_offset(const size_type _Offset) noexcept
		{	
		auto& _My_data = _Mypair._Get_second();
		return (iterator(_My_data._Myfirst + _Offset, ::std:: addressof(_My_data)));
		}

	pointer& _Myfirst() noexcept
		{	
		return (_Get_data()._Myfirst);
		}

	const pointer& _Myfirst() const noexcept
		{	
		return (_Get_data()._Myfirst);
		}

	pointer& _Mylast() noexcept
		{	
		return (_Get_data()._Mylast);
		}

	const pointer& _Mylast() const noexcept
		{	
		return (_Get_data()._Mylast);
		}

	pointer& _Myend() noexcept
		{	
		return (_Get_data()._Myend);
		}

	const pointer& _Myend() const noexcept
		{	
		return (_Get_data()._Myend);
		}

private:
	_Compressed_pair<_Alty, _Vector_val<_Val_types>> _Mypair;
	};

		
template<class _Ptrty> inline
	auto _Unfancy_maybe_null(_Ptrty _Ptr)
	{	
	return (_Ptr ? ::std:: addressof(*_Ptr) : nullptr);
	}

template<class _Ty> inline
	_Ty * _Unfancy_maybe_null(_Ty * _Ptr)
	{	
	return (_Ptr);
	}

		
template<class _Ty,
	class _Alloc = allocator<_Ty>>
	class vector
		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc>>
	{	
private:
	using _Mybase = _Vector_alloc<_Vec_base_types<_Ty, _Alloc>>;
	using _Alty = typename _Mybase::_Alty;
	using _Alty_traits = typename _Mybase::_Alty_traits;

public:
	static_assert(!0 || is_same_v<_Ty, typename _Alloc::value_type>,
		"vector<T, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	using value_type = _Ty;
	using allocator_type = _Alloc;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = _Ty&;
	using const_reference = const _Ty&;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using iterator = typename _Mybase::iterator;
	using const_iterator = typename _Mybase::const_iterator;
	using reverse_iterator = ::std:: reverse_iterator<iterator>;
	using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

	vector() noexcept(is_nothrow_default_constructible_v<_Alty>)
		: _Mybase()
		{	
		}

	explicit vector(const _Alloc& _Al) noexcept
		: _Mybase(_Al)
		{	
		}

	explicit vector(__declspec(guard(overflow)) const size_type _Count, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		if (_Buy(_Count))
			{	
			try {
			this->_Mylast() = _Udefault(this->_Myfirst(), _Count);
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	vector(__declspec(guard(overflow)) const size_type _Count, const _Ty& _Val, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		if (_Buy(_Count))
			{	
			try {
			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Val);
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

private:
	template<class _Iter>
		void _Range_construct_or_tidy(_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		try {
		for (; _First != _Last; ++_First)
			{
			emplace_back(*_First);	
			}
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	template<class _Iter>
		void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		if (_Buy(_Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)))))
			{	
			try {
			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

public:
	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Adl_verify_range(_First, _Last);
		_Range_construct_or_tidy(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
		}

	vector(initializer_list<_Ty> _Ilist, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
		}

	vector(const vector& _Right)
		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))
		{	
		if (_Buy(_Right.size()))
			{	
			try {
			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	vector(const vector& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		if (_Buy(_Right.size()))
			{	
			try {
			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

private:
	void _Move_from(vector&& _Right, true_type) noexcept
		{	
		this->_Swap_all(_Right);

		this->_Myfirst() = _Right._Myfirst();
		this->_Mylast() = _Right._Mylast();
		this->_Myend() = _Right._Myend();

		_Right._Myfirst() = pointer();
		_Right._Mylast() = pointer();
		_Right._Myend() = pointer();
		}

	void _Move_from(vector&& _Right, false_type)
		{	
		if (this->_Getal() == _Right._Getal())
			{
			_Move_from(::std:: move(_Right), true_type{});
			}
		else if (_Buy(_Right.size()))
			{	
			this->_Mylast() = _Umove(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
			}
		}

public:
	vector(vector&& _Right) noexcept
		: _Mybase(::std:: move(_Right._Getal()))
		{	
		_Move_from(::std:: move(_Right), true_type{});
		}

	vector(vector&& _Right, const _Alloc& _Al)
		noexcept(_Alty_traits::is_always_equal::value) 
		: _Mybase(_Al)
		{	
		if  (_Alty_traits::is_always_equal::value)
			{
			_Move_from(::std:: move(_Right), true_type{});
			}
		else
			{
#pragma warning(push) 
#pragma warning(disable: 4297) 
			try {
			_Move_from(::std:: move(_Right), false_type{});
			} catch (...) {
			_Tidy();
			throw;
			}
#pragma warning(pop)
			}
		}

private:
	void _Move_assign_from(vector&& _Right, true_type) noexcept
		{	
		_Move_from(::std:: move(_Right), true_type{});
		}

	void _Move_assign_from(vector&& _Right, false_type)
		{	
		if (this->_Getal() == _Right._Getal())
			{
			_Move_from(::std:: move(_Right), true_type{});
			return;
			}

		const pointer _First = _Right._Myfirst();
		const pointer _Last = _Right._Mylast();
		const size_type _Newsize = _Right.size();

		this->_Orphan_all();

		const size_type _Oldsize = size();
		const size_type _Oldcapacity = capacity();

		if (_Newsize > _Oldcapacity)
			{	
			if (_Newsize > max_size())
				{
				_Xlength();
				}

			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			if (this->_Myfirst() != pointer())
				{	
				_Destroy(this->_Myfirst(), this->_Mylast());
				this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);
				}

			_Buy(_Newcapacity);

			this->_Mylast() = _Umove(_First, _Last, this->_Myfirst());
			}
		else if (_Newsize > _Oldsize)
			{
			const pointer _Mid = _First + _Oldsize;
			_Move_unchecked(_First, _Mid, this->_Myfirst());
			this->_Mylast() = _Umove(_Mid, _Last, this->_Mylast());
			}
		else
			{
			const pointer _Newlast = this->_Myfirst() + _Newsize;
			_Move_unchecked(_First, _Last, this->_Myfirst());
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}
		}

public:
	vector& operator=(vector&& _Right)
		noexcept(_Always_equal_after_move<_Alty>)
		{	
		if (this != ::std:: addressof(_Right))
			{	
#pragma warning(push)
#pragma warning(disable: 4127)	
			if (_Always_equal_after_move<_Alty>
				|| this->_Getal() == _Right._Getal())
				{	
				_Tidy();
				}
#pragma warning(pop)
			this->_Move_alloc(_Right._Getal());
			_Move_assign_from(::std:: move(_Right), bool_constant<_Always_equal_after_move<_Alty>>{});
			}
		return (*this);
		}

	~vector() noexcept
		{	
		_Tidy();
		}

private:
	template<class... _Valty>
		decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val)
		{	
			
		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), ::std:: forward<_Valty>(_Val)...);
		_Orphan_range(this->_Mylast(), this->_Mylast());
		_Ty& _Result = *this->_Mylast();
		++this->_Mylast();


#line 909 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		(void)_Result;
#line 911 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		}

public:
	template<class... _Valty>
		decltype(auto) emplace_back(_Valty&&... _Val)
		{	
		if (_Has_unused_capacity())
			{
			return (_Emplace_back_with_unused_capacity(::std:: forward<_Valty>(_Val)...));
			}

		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), ::std:: forward<_Valty>(_Val)...);


#line 926 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		(void)_Result;
#line 928 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		}

	void push_back(const _Ty& _Val)
		{	
		emplace_back(_Val);
		}

	void push_back(_Ty&& _Val)
		{	
		emplace_back(::std:: move(_Val));
		}

	template<class... _Valty>
		pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val)
		{	
			
		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());
		_Alty& _Al = this->_Getal();
		const size_type _Oldsize = size();

		if (_Oldsize == max_size())
			{
			_Xlength();
			}

		const size_type _Newsize = _Oldsize + 1;
		const size_type _Newcapacity = _Calculate_growth(_Newsize);

		const pointer _Newvec = _Al.allocate(_Newcapacity);
		const pointer _Constructed_last = _Newvec + _Whereoff + 1;
		pointer _Constructed_first = _Constructed_last;

		try {
		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), ::std:: forward<_Valty>(_Val)...);
		_Constructed_first = _Newvec + _Whereoff;

		if (_Whereptr == this->_Mylast())
			{	
			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
			}
		else
			{	
			_Umove(this->_Myfirst(), _Whereptr, _Newvec);
			_Constructed_first = _Newvec;
			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);
			}
		} catch (...) {
		_Destroy(_Constructed_first, _Constructed_last);
		_Al.deallocate(_Newvec, _Newcapacity);
		throw;
		}

		_Change_array(_Newvec, _Newsize, _Newcapacity);
		return (this->_Myfirst() + _Whereoff);
		}

	template<class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&&... _Val)
		{	
		const pointer _Whereptr = _Where._Ptr;
		const pointer _Oldlast = this->_Mylast();
 
		do { if (_Where._Getcont() == ::std:: addressof(this->_Get_data()) && _Whereptr >= this->_Myfirst() && _Oldlast >= _Whereptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 992, 0, "%s", "vector emplace iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector emplace iterator outside range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 992, 0); } while (false); } ; } while (false);
#line 993 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
 #line 994 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		if (_Has_unused_capacity())
			{
			if (_Whereptr == _Oldlast)
				{	
				_Emplace_back_with_unused_capacity(::std:: forward<_Valty>(_Val)...);
				}
			else
				{
				_Ty _Obj(::std:: forward<_Valty>(_Val)...);	
				
				_Orphan_range(_Whereptr, _Oldlast);
				_Alty_traits::construct(this->_Getal(), _Unfancy(_Oldlast), ::std:: move(_Oldlast[-1]));
				++this->_Mylast();
				_Move_backward_unchecked(_Whereptr, _Oldlast - 1, _Oldlast);
				*_Whereptr = ::std:: move(_Obj);
				}

			return (this->_Make_iterator(_Whereptr));
			}

		return (this->_Make_iterator(_Emplace_reallocate(_Whereptr, ::std:: forward<_Valty>(_Val)...)));
		}

	iterator insert(const_iterator _Where, const _Ty& _Val)
		{	
		return (emplace(_Where, _Val));
		}

	iterator insert(const_iterator _Where, _Ty&& _Val)
		{	
		return (emplace(_Where, ::std:: move(_Val)));
		}

	iterator insert(const_iterator _Where, __declspec(guard(overflow)) const size_type _Count, const _Ty& _Val)
		{	
 
		do { if (_Where._Getcont() == ::std:: addressof(this->_Get_data()) && _Where._Ptr >= this->_Myfirst() && this->_Mylast() >= _Where._Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1033, 0, "%s", "vector insert iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector insert iterator outside range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1033, 0); } while (false); } ; } while (false);
#line 1034 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
 #line 1035 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		const size_type _Whereoff = static_cast<size_type>(_Where._Ptr - this->_Myfirst());
		const bool _One_at_back = _Count == 1 && _Where._Ptr == this->_Mylast();

		if (_Count == 0)
			{	
			}
		else if (_Count > _Unused_capacity())
			{	
			const size_type _Oldsize = size();

			if (_Count > max_size() - _Oldsize)
				{
				_Xlength();
				}

			const size_type _Newsize = _Oldsize + _Count;
			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
			const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
			pointer _Constructed_first = _Constructed_last;

			try {
			_Ufill(_Newvec + _Whereoff, _Count, _Val);
			_Constructed_first = _Newvec + _Whereoff;

			if (_One_at_back)
				{	
				_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
				}
			else
				{	
				_Umove(this->_Myfirst(), _Where._Ptr, _Newvec);
				_Constructed_first = _Newvec;
				_Umove(_Where._Ptr, this->_Mylast(), _Newvec + _Whereoff + _Count);
				}
			} catch (...) {
			_Destroy(_Constructed_first, _Constructed_last);
			this->_Getal().deallocate(_Newvec, _Newcapacity);
			throw;
			}

			_Change_array(_Newvec, _Newsize, _Newcapacity);
			}
		else if (_One_at_back)
			{	
			_Emplace_back_with_unused_capacity(_Val);
			}
		else
			{	
			const _Ty _Tmp = _Val;	
			const pointer _Oldlast = this->_Mylast();
			const size_type _Affected_elements = static_cast<size_type>(_Oldlast - _Where._Ptr);
			_Orphan_range(_Where._Ptr, _Oldlast);

			if (_Count > _Affected_elements)
				{	
				this->_Mylast() = _Ufill(_Oldlast, _Count - _Affected_elements, _Tmp);
				this->_Mylast() = _Umove(_Where._Ptr, _Oldlast, this->_Mylast());
				_Fill_unchecked(_Where._Ptr, _Oldlast, _Tmp);
				}
			else
				{	
				this->_Mylast() = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
				_Move_backward_unchecked(_Where._Ptr, _Oldlast - _Count, _Oldlast);
				_Fill_unchecked(_Where._Ptr, _Where._Ptr + _Count, _Tmp);
				}
			}

		return (this->_Make_iterator_offset(_Whereoff));
		}

private:
	template<class _Iter>
		void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag)
		{	
		if (_First == _Last)
			{
			return;	
			}

		const size_type _Whereoff = static_cast<size_type>(_Where._Ptr - this->_Myfirst());
		const size_type _Oldsize = size();

		
		
		

		for (; _First != _Last; ++_First)
			{
			emplace_back(*_First);
			}

		_Orphan_range(this->_Myfirst() + _Whereoff, this->_Myfirst() + _Oldsize);

		_Rotate_unchecked(this->_Myfirst() + _Whereoff, this->_Myfirst() + _Oldsize, this->_Mylast());
		}

	template<class _Iter>
		void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		const size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));
		const size_type _Whereoff = static_cast<size_type>(_Where._Ptr - this->_Myfirst());
		const bool _One_at_back = _Count == 1 && _Where._Ptr == this->_Mylast();

		if (_Count == 0)
			{	
			}
		else if (_Count > _Unused_capacity())
			{	
			const size_type _Oldsize = size();

			if (_Count > max_size() - _Oldsize)
				{
				_Xlength();
				}

			const size_type _Newsize = _Oldsize + _Count;
			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
			const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
			pointer _Constructed_first = _Constructed_last;

			try {
			_Ucopy(_First, _Last, _Newvec + _Whereoff);
			_Constructed_first = _Newvec + _Whereoff;

			if (_One_at_back)
				{	
				_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
				}
			else
				{	
				_Umove(this->_Myfirst(), _Where._Ptr, _Newvec);
				_Constructed_first = _Newvec;
				_Umove(_Where._Ptr, this->_Mylast(), _Newvec + _Whereoff + _Count);
				}
			} catch (...) {
			_Destroy(_Constructed_first, _Constructed_last);
			this->_Getal().deallocate(_Newvec, _Newcapacity);
			throw;
			}

			_Change_array(_Newvec, _Newsize, _Newcapacity);
			}
		else
			{	
				
				

			const pointer _Oldlast = this->_Mylast();
			const size_type _Affected_elements = static_cast<size_type>(_Oldlast - _Where._Ptr);

			if (_Count < _Affected_elements)
				{	
				this->_Mylast() = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
				_Move_backward_unchecked(_Where._Ptr, _Oldlast - _Count, _Oldlast);
				_Destroy(_Where._Ptr, _Where._Ptr + _Count);

				try {
				_Ucopy(_First, _Last, _Where._Ptr);
				} catch (...) {
				

					try {
					_Umove(_Where._Ptr + _Count, _Where._Ptr + 2 * _Count, _Where._Ptr);
					} catch (...) {
					
					_Orphan_range(_Where._Ptr, _Oldlast);
					_Destroy(_Where._Ptr + _Count, this->_Mylast());
					this->_Mylast() = _Where._Ptr;
					throw;
					}

					_Move_unchecked(_Where._Ptr + 2 * _Count, this->_Mylast(), _Where._Ptr + _Count);
					_Destroy(_Oldlast, this->_Mylast());
					this->_Mylast() = _Oldlast;
				throw;
				}
				}
			else
				{	
				const pointer _Relocated = _Where._Ptr + _Count;
				this->_Mylast() = _Umove(_Where._Ptr, _Oldlast, _Relocated);
				_Destroy(_Where._Ptr, _Oldlast);

				try {
				_Ucopy(_First, _Last, _Where._Ptr);
				} catch (...) {
				

					try {
					_Umove(_Relocated, this->_Mylast(), _Where._Ptr);
					} catch (...) {
					
					_Orphan_range(_Where._Ptr, _Oldlast);
					_Destroy(_Relocated, this->_Mylast());
					this->_Mylast() = _Where._Ptr;
					throw;
					}

					_Destroy(_Relocated, this->_Mylast());
					this->_Mylast() = _Oldlast;
				throw;
				}
				}

			_Orphan_range(_Where._Ptr, _Oldlast);
			}
		}

public:
	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
 
		do { if (_Where._Getcont() == ::std:: addressof(this->_Get_data()) && _Where._Ptr >= this->_Myfirst() && this->_Mylast() >= _Where._Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1256, 0, "%s", "vector insert iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector insert iterator outside range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1256, 0); } while (false); } ; } while (false);
#line 1257 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
 #line 1258 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		_Adl_verify_range(_First, _Last);
		const size_type _Whereoff = static_cast<size_type>(_Where._Ptr - this->_Myfirst());
		_Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
		return (this->_Make_iterator_offset(_Whereoff));
		}

	iterator insert(const_iterator _Where, initializer_list<_Ty> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	void assign(__declspec(guard(overflow)) const size_type _Newsize, const _Ty& _Val)
		{	
		this->_Orphan_all();

		const size_type _Oldsize = size();
		const size_type _Oldcapacity = capacity();

		if (_Newsize > _Oldcapacity)
			{	
			if (_Newsize > max_size())
				{
				_Xlength();
				}

			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			if (this->_Myfirst() != pointer())
				{	
				_Destroy(this->_Myfirst(), this->_Mylast());
				this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);
				}

			_Buy(_Newcapacity);

			this->_Mylast() = _Ufill(this->_Myfirst(), _Newsize, _Val);
			}
		else if (_Newsize > _Oldsize)
			{
			_Fill_unchecked(this->_Myfirst(), this->_Mylast(), _Val);
			this->_Mylast() = _Ufill(this->_Mylast(), _Newsize - _Oldsize, _Val);
			}
		else
			{
			const pointer _Newlast = this->_Myfirst() + _Newsize;
			_Fill_unchecked(this->_Myfirst(), _Newlast, _Val);
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}
		}

private:
	template<class _Iter>
		void _Assign_range(_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		this->_Orphan_all();

		pointer _Next = this->_Myfirst();

		for (; _First != _Last && _Next != this->_Mylast(); ++_First, (void)++_Next)
			{
			*_Next = *_First;
			}

		
		
		
		

		
		_Destroy(_Next, this->_Mylast());
		this->_Mylast() = _Next;

		
		for (; _First != _Last; ++_First)
			{
			emplace_back(*_First);	
			}
		}

	template<class _Iter>
		void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		const size_type _Newsize = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));

		this->_Orphan_all();

		const size_type _Oldsize = size();
		const size_type _Oldcapacity = capacity();

		if (_Newsize > _Oldcapacity)
			{	
			if (_Newsize > max_size())
				{
				_Xlength();
				}

			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			if (this->_Myfirst() != pointer())
				{	
				_Destroy(this->_Myfirst(), this->_Mylast());
				this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);
				}

			_Buy(_Newcapacity);

			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
			}
		else if (_Newsize > _Oldsize)
			{
			
			const _Iter _Mid = ::std:: next(_First, static_cast<difference_type>(_Oldsize));
			_Copy_unchecked(_First, _Mid, this->_Myfirst());
			this->_Mylast() = _Ucopy(_Mid, _Last, this->_Mylast());
			}
		else
			{
			const pointer _Newlast = this->_Myfirst() + _Newsize;
			_Copy_unchecked(_First, _Last, this->_Myfirst());
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}
		}

public:
	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		void assign(_Iter _First, _Iter _Last)
		{	
		_Adl_verify_range(_First, _Last);
		_Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
		}

	void assign(initializer_list<_Ty> _Ilist)
		{	
		_Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
		}

	vector& operator=(const vector& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
#pragma warning(push)
#pragma warning(disable: 4127)	
			if (_Alty_traits::propagate_on_container_copy_assignment::value
				&& this->_Getal() != _Right._Getal())
				{	
				_Tidy();
				}
#pragma warning(pop)

			this->_Copy_alloc(_Right._Getal());

			assign(_Right._Myfirst(), _Right._Mylast());
			}

		return (*this);
		}

	vector& operator=(initializer_list<_Ty> _Ilist)
		{	
		_Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
		return (*this);
		}

private:
	template<class _Lambda>
		void _Resize(const size_type _Newsize, _Lambda _Udefault_or_fill)
		{	
		const size_type _Oldsize = size();
		const size_type _Oldcapacity = capacity();

		if (_Newsize > _Oldcapacity)
			{	
			if (_Newsize > max_size())
				{
				_Xlength();
				}

			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
			const pointer _Appended_first = _Newvec + _Oldsize;
			pointer _Appended_last = _Appended_first;

			try {
			_Appended_last = _Udefault_or_fill(_Appended_first, _Newsize - _Oldsize);
			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
			} catch (...) {
			_Destroy(_Appended_first, _Appended_last);
			this->_Getal().deallocate(_Newvec, _Newcapacity);
			throw;
			}

			_Change_array(_Newvec, _Newsize, _Newcapacity);
			}
		else if (_Newsize > _Oldsize)
			{	
			const pointer _Oldlast = this->_Mylast();
			this->_Mylast() = _Udefault_or_fill(_Oldlast, _Newsize - _Oldsize);
			_Orphan_range(_Oldlast, _Oldlast);
			}
		else if (_Newsize == _Oldsize)
			{	
			}
		else
			{	
			const pointer _Newlast = this->_Myfirst() + _Newsize;
			_Orphan_range(_Newlast, this->_Mylast());
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}
		}

public:
	void resize(__declspec(guard(overflow)) const size_type _Newsize)
		{	
		const auto _Lambda_default = [this](pointer _Dest, const size_type _Count)
			{
			return (_Udefault(_Dest, _Count));
			};

		_Resize(_Newsize, _Lambda_default);
		}

	void resize(__declspec(guard(overflow)) const size_type _Newsize, const _Ty& _Val)
		{	
		auto _Lambda_fill = [this, &_Val](pointer _Dest, const size_type _Count)
			{
			return (_Ufill(_Dest, _Count, _Val));
			};

		_Resize(_Newsize, _Lambda_fill);
		}

private:
	void _Reallocate_exactly(const size_type _Newcapacity)
		{	
		const size_type _Size = size();

		const pointer _Newvec = this->_Getal().allocate(_Newcapacity);

		try {
		_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
		} catch (...) {
		this->_Getal().deallocate(_Newvec, _Newcapacity);
		throw;
		}

		_Change_array(_Newvec, _Size, _Newcapacity);
		}

public:
	void reserve(__declspec(guard(overflow)) const size_type _Newcapacity)
		{	
		if (_Newcapacity > capacity())
			{	
			if (_Newcapacity > max_size())
				{
				_Xlength();
				}

			_Reallocate_exactly(_Newcapacity);
			}
		}

	void shrink_to_fit()
		{	
		if (_Has_unused_capacity())
			{	
			if (empty())
				{
				_Tidy();
				}
			else
				{
				_Reallocate_exactly(size());
				}
			}
		}

	void pop_back()
		{	
 
		do { if (!empty()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1544, 0, "%s", "vector empty before pop")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector empty before pop\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1544, 0); } while (false); } ; } while (false);
		_Orphan_range(this->_Mylast() - 1, this->_Mylast());
 #line 1547 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		_Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));
		--this->_Mylast();
		}

	iterator erase(const_iterator _Where)
		{	
 
		do { if (_Where._Getcont() == ::std:: addressof(this->_Get_data()) && _Where._Ptr >= this->_Myfirst() && this->_Mylast() > _Where._Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1557, 0, "%s", "vector erase iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector erase iterator outside range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1557, 0); } while (false); } ; } while (false);
#line 1558 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		_Orphan_range(_Where._Ptr, this->_Mylast());
 #line 1560 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		_Move_unchecked(_Where._Ptr + 1, this->_Mylast(), _Where._Ptr);
		_Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));
		--this->_Mylast();
		return (iterator(_Where._Ptr, ::std:: addressof(this->_Get_data())));
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
 
		do { if (_First._Getcont() == ::std:: addressof(this->_Get_data()) && _Last._Getcont() == ::std:: addressof(this->_Get_data()) && _First._Ptr >= this->_Myfirst() && _Last._Ptr >= _First._Ptr && this->_Mylast() >= _Last._Ptr) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1574, 0, "%s", "vector erase iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector erase iterator outside range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1574, 0); } while (false); } ; } while (false);
#line 1575 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
 #line 1576 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		if (_First._Ptr != _Last._Ptr)
			{	
			_Orphan_range(_First._Ptr, this->_Mylast());
			const pointer _Newlast = _Move_unchecked(_Last._Ptr, this->_Mylast(), _First._Ptr);
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}

		return (iterator(_First._Ptr, ::std:: addressof(this->_Get_data())));
		}

	void clear() noexcept
		{	
		this->_Orphan_all();
		_Destroy(this->_Myfirst(), this->_Mylast());
		this->_Mylast() = this->_Myfirst();
		}

	void swap(vector& _Right) noexcept 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Pocs(this->_Getal(), _Right._Getal());
			this->_Swap_all(_Right);
			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
			_Swap_adl(this->_Mylast(), _Right._Mylast());
			_Swap_adl(this->_Myend(), _Right._Myend());
			}
		}

	 _Ty * data() noexcept
		{	
		return (_Unfancy_maybe_null(this->_Myfirst()));
		}

	 const _Ty * data() const noexcept
		{	
		return (_Unfancy_maybe_null(this->_Myfirst()));
		}

	 iterator begin() noexcept
		{	
		return (iterator(this->_Myfirst(), ::std:: addressof(this->_Get_data())));
		}

	 const_iterator begin() const noexcept
		{	
		return (const_iterator(this->_Myfirst(), ::std:: addressof(this->_Get_data())));
		}

	 iterator end() noexcept
		{	
		return (iterator(this->_Mylast(), ::std:: addressof(this->_Get_data())));
		}

	 const_iterator end() const noexcept
		{	
		return (const_iterator(this->_Mylast(), ::std:: addressof(this->_Get_data())));
		}

	 reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	 const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	 reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	 const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	 const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	 const_iterator cend() const noexcept
		{	
		return (end());
		}

	 const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	 const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	pointer _Unchecked_begin() noexcept
		{	
		return (this->_Myfirst());
		}

	const_pointer _Unchecked_begin() const noexcept
		{	
		return (this->_Myfirst());
		}

	pointer _Unchecked_end() noexcept
		{	
		return (this->_Mylast());
		}

	const_pointer _Unchecked_end() const noexcept
		{	
		return (this->_Mylast());
		}

	 bool empty() const noexcept
		{	
		return (this->_Myfirst() == this->_Mylast());
		}

	 size_type size() const noexcept
		{	
		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));
		}

	 size_type max_size() const noexcept
		{	
		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),
			_Alty_traits::max_size(this->_Getal())));
		}

	 size_type capacity() const noexcept
		{	
		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));
		}

private:
	size_type _Unused_capacity() const noexcept
		{	
		return (static_cast<size_type>(this->_Myend() - this->_Mylast()));
		}

	bool _Has_unused_capacity() const noexcept
		{	
		return (this->_Myend() != this->_Mylast());
		}

public:
	 _Ty& operator[](const size_type _Pos)
		{	
 
		do { if (_Pos < size()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1733, 0, "%s", "vector subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector subscript out of range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1733, 0); } while (false); } ; } while (false);
 #line 1735 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		return (this->_Myfirst()[_Pos]);
		}

	 const _Ty& operator[](const size_type _Pos) const
		{	
 
		do { if (_Pos < size()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1742, 0, "%s", "vector subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector subscript out of range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1742, 0); } while (false); } ; } while (false);
 #line 1744 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		return (this->_Myfirst()[_Pos]);
		}

	 _Ty& at(const size_type _Pos)
		{	
		if (size() <= _Pos)
			{
			_Xrange();
			}

		return (this->_Myfirst()[_Pos]);
		}

	 const _Ty& at(const size_type _Pos) const
		{	
		if (size() <= _Pos)
			{
			_Xrange();
			}

		return (this->_Myfirst()[_Pos]);
		}

	 _Ty& front()
		{	
 
		do { if (!empty()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1771, 0, "%s", "front() called on empty vector")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"front() called on empty vector\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1771, 0); } while (false); } ; } while (false);
 #line 1773 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		return (*this->_Myfirst());
		}

	 const _Ty& front() const
		{	
 
		do { if (!empty()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1780, 0, "%s", "front() called on empty vector")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"front() called on empty vector\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1780, 0); } while (false); } ; } while (false);
 #line 1782 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		return (*this->_Myfirst());
		}

	 _Ty& back()
		{	
 
		do { if (!empty()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1789, 0, "%s", "back() called on empty vector")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"back() called on empty vector\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1789, 0); } while (false); } ; } while (false);
 #line 1791 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		return (this->_Mylast()[-1]);
		}

	 const _Ty& back() const
		{	
 
		do { if (!empty()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1798, 0, "%s", "back() called on empty vector")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"back() called on empty vector\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 1798, 0); } while (false); } ; } while (false);
 #line 1800 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		return (this->_Mylast()[-1]);
		}

	 allocator_type get_allocator() const noexcept
		{	
		return (static_cast<allocator_type>(this->_Getal()));
		}

private:
	pointer _Udefault(pointer _Dest, const size_type _Count)
		{	
		return (_Uninitialized_value_construct_n(_Dest, _Count, this->_Getal()));
		}

	pointer _Ufill(pointer _Dest, const size_type _Count, const _Ty& _Val)
		{	
		return (_Uninitialized_fill_n(_Dest, _Count, _Val, this->_Getal()));
		}

	template<class _Iter>
		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest)
		{	
		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));
		}

	pointer _Umove(pointer _First, pointer _Last, pointer _Dest)
		{	
		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));
		}

	void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type)
		{	
		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());
		}

	void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, false_type)
		{	
		_Uninitialized_copy(_First, _Last, _Dest, this->_Getal());
		}

	void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest)
		{	
		_Umove_if_noexcept1(_First, _Last, _Dest,
			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
		}

	void _Destroy(pointer _First, pointer _Last)
		{	
		_Destroy_range(_First, _Last, this->_Getal());
		}

	size_type _Calculate_growth(const size_type _Newsize) const
		{	
		const size_type _Oldcapacity = capacity();

		if (_Oldcapacity > max_size() - _Oldcapacity / 2)
			{
			return (_Newsize);	
			}

		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

		if (_Geometric < _Newsize)
			{
			return (_Newsize);	
			}

		return (_Geometric);	
		}

	bool _Buy(const size_type _Newcapacity)
		{	
		this->_Myfirst() = pointer();
		this->_Mylast() = pointer();
		this->_Myend() = pointer();

		if (_Newcapacity == 0)
			{
			return (false);
			}

		if (_Newcapacity > max_size())
			{
			_Xlength();
			}

		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);
		this->_Mylast() = this->_Myfirst();
		this->_Myend() = this->_Myfirst() + _Newcapacity;

		return (true);
		}

	void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity)
		{	
		this->_Orphan_all();

		if (this->_Myfirst() != pointer())
			{	
			_Destroy(this->_Myfirst(), this->_Mylast());
			this->_Getal().deallocate(this->_Myfirst(), capacity());
			}

		this->_Myfirst() = _Newvec;
		this->_Mylast() = _Newvec + _Newsize;
		this->_Myend() = _Newvec + _Newcapacity;
		}

	void _Tidy()
		{	
		this->_Orphan_all();

		if (this->_Myfirst() != pointer())
			{	
			_Destroy(this->_Myfirst(), this->_Mylast());
			this->_Getal().deallocate(this->_Myfirst(), capacity());

			this->_Myfirst() = pointer();
			this->_Mylast() = pointer();
			this->_Myend() = pointer();
			}
		}

	[[noreturn]] static void _Xlength()
		{	
		_Xlength_error("vector<T> too long");
		}

	[[noreturn]] static void _Xrange()
		{	
		_Xout_of_range("invalid vector<T> subscript");
		}

 
	void _Orphan_range(pointer _First, pointer _Last) const
		{	
		_Lockit _Lock(3);

		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

		if (_Pnext)
			{
			while (*_Pnext)
				{
				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)
					{	
					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());
					}
				else
					{	
					(*_Pnext)->_Clrcont();
					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());
					}
				}
			}
		}
 



#line 1962 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
	};










#line 1974 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

template<class _Ty,
	class _Alloc> inline
	void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right) noexcept 
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Alloc>
	 inline bool operator==(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Ty,
	class _Alloc>
	 inline bool operator!=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Alloc>
	 inline bool operator<(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Ty,
	class _Alloc>
	 inline bool operator>(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Alloc>
	 inline bool operator<=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Alloc>
	 inline bool operator>=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
using _Vbase = unsigned int;	
constexpr int _VBITS = 8 * sizeof (_Vbase);	

template<class _Alloc0>
	struct _Wrap_alloc
	{	
	using _Alloc = _Alloc0;
	};

		
template<class _Alvbase_wrapped>
	class _Vb_iter_base
		: public _Iterator_base
	{	
public:
	using _Alvbase = typename _Alvbase_wrapped::_Alloc;
	using _Sizet = typename allocator_traits<_Alvbase>::size_type;
	using _Difft = typename allocator_traits<_Alvbase>::difference_type;
	using _Mycont = vector<bool, _Rebind_alloc_t<_Alvbase, bool>>;

	_Vb_iter_base()
		: _Myptr(nullptr), _Myoff(0)
		{	
		}

	_Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
		const _Container_base *_Mypvbool)
		: _Myptr(_Ptr), _Myoff(_Off)
		{	
		this->_Adopt(_Mypvbool);
		}

	void _Advance(_Sizet _Off)
		{	
		_Myoff += _Off;
		_Myptr += _Myoff / _VBITS;
		_Myoff %= _VBITS;
		}

	int _Valid(_Sizet _Inc) const
		{	
 
		const auto _Cont = static_cast<const _Mycont *>(this->_Getcont());
		_Sizet _Mysize = _Cont->_Mysize;

		_Inc += _Myoff;
		_Inc += static_cast<_Sizet>(_VBITS * (_Myptr - _Cont->_Myvec.data()));
		return (_Inc < _Mysize ? -1 : _Inc == _Mysize ? 0 : +1);

 


#line 2086 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		}

	const _Vbase *_Myptr;
	_Sizet _Myoff;
	};

		
template<class _Alvbase_wrapped>
	class _Vb_reference
		: public _Vb_iter_base<_Alvbase_wrapped>
	{	
	using _Mybase = _Vb_iter_base<_Alvbase_wrapped>;

	_Vb_reference() noexcept
		{	
		}

public:
	_Vb_reference(const _Mybase& _Right)
		: _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
		{	
		}

	_Vb_reference& operator=(const _Vb_reference& _Right) noexcept
		{	
		return (*this = bool(_Right));
		}

	_Vb_reference& operator=(bool _Val) noexcept
		{	
		if (_Val)
			*const_cast<_Vbase *>(_Getptr()) |= _Mask();
		else
			*const_cast<_Vbase *>(_Getptr()) &= ~_Mask();
		return (*this);
		}

	void flip() noexcept
		{	
		*const_cast<_Vbase *>(_Getptr()) ^= _Mask();
		}

	operator bool() const noexcept
		{	
		return ((*_Getptr() & _Mask()) != 0);
		}

	const _Vbase *_Getptr() const
		{	
 
		do { if (this->_Getcont() && this->_Myptr && this->_Valid(0) < 0) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2137, 0, "%s", "vector<bool> iterator not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> iterator not dereferencable\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2137, 0); } while (false); } ; } while (false);
#line 2138 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
 #line 2139 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		return (this->_Myptr);
		}

protected:
	_Vbase _Mask() const
		{	
		return (static_cast<_Vbase>(1) << this->_Myoff);
		}
	};

template<class _Alvbase_wrapped> inline
	void swap(_Vb_reference<_Alvbase_wrapped> _Left, _Vb_reference<_Alvbase_wrapped> _Right) noexcept
	{	
	bool _Val = _Left;	
	_Left = _Right;
	_Right = _Val;
	}

		
template<class _Alvbase_wrapped>
	class _Vb_const_iterator
		: public _Vb_iter_base<_Alvbase_wrapped>
	{	
private:
	using _Mybase = _Vb_iter_base<_Alvbase_wrapped>;
	using _Size_type = typename _Mybase::_Sizet;

public:
	using _Reft = _Vb_reference<_Alvbase_wrapped>;
	using const_reference = bool;

	using iterator_category = random_access_iterator_tag;
	using value_type = bool;
	using difference_type = typename _Mybase::_Difft;
	using pointer = const_reference *;
	using reference = const_reference;

	_Vb_const_iterator()
		{	
		}

	_Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
		: _Mybase(_Ptr, 0, _Mypvbool)
		{	
		}

	 const_reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Vb_const_iterator& operator++()
		{	
		_Inc();
		return (*this);
		}

	_Vb_const_iterator operator++(int)
		{	
		_Vb_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Vb_const_iterator& operator--()
		{	
		_Dec();
		return (*this);
		}

	_Vb_const_iterator operator--(int)
		{	
		_Vb_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Vb_const_iterator& operator+=(const difference_type _Off)
		{	
		if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off))
			{	
			this->_Myoff += _Off;
			this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;
			this->_Myoff %= _VBITS;
			}
		else
			{	
			this->_Myoff += _Off;
			this->_Myptr += this->_Myoff / _VBITS;
			this->_Myoff %= _VBITS;
			}
		return (*this);
		}

	 _Vb_const_iterator operator+(const difference_type _Off) const
		{	
		_Vb_const_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Vb_const_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	 _Vb_const_iterator operator-(const difference_type _Off) const
		{	
		_Vb_const_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	 difference_type operator-(const _Vb_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (static_cast<difference_type>(_VBITS * (this->_Myptr - _Right._Myptr))
			+ static_cast<difference_type>(this->_Myoff)
			- static_cast<difference_type>(_Right._Myoff));
		}

	 const_reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	 bool operator==(const _Vb_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr == _Right._Myptr
			&& this->_Myoff == _Right._Myoff);
		}

	 bool operator!=(const _Vb_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	 bool operator<(const _Vb_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr < _Right._Myptr
			|| (this->_Myptr == _Right._Myptr
				&& this->_Myoff < _Right._Myoff));
		}

	 bool operator>(const _Vb_const_iterator& _Right) const
		{	
		return (_Right < *this);
		}

	 bool operator<=(const _Vb_const_iterator& _Right) const
		{	
		return (!(_Right < *this));
		}

	 bool operator>=(const _Vb_const_iterator& _Right) const
		{	
		return (!(*this < _Right));
		}

	void _Compat(const _Vb_const_iterator& _Right) const
		{	
 

#line 2304 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		do { if (this->_Getcont() == _Right._Getcont()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2304, 0, "%s", "vector<bool> iterators incompatible")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> iterators incompatible\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2304, 0); } while (false); } ; } while (false);
 #line 2306 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		}

 
	friend void _Verify_range(const _Vb_const_iterator& _First, const _Vb_const_iterator& _Last)
		{
		
		do { if (_First <= _Last) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2312, 0, "%s", "vector<bool> iterator range transposed")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> iterator range transposed\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2312, 0); } while (false); } ; } while (false);
		}
 #line 2315 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

	void _Dec()
		{	
		if (this->_Myoff != 0)
			--this->_Myoff;
		else
			{	
 
			do { if (this->_Getcont()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2323, 0, "%s", "cannot decrement value-initialized vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement value-initialized vector<bool> iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2323, 0); } while (false); } ; } while (false);
			do { if (this->_Valid(static_cast<_Size_type>(-1)) <= 0) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2325, 0, "%s", "cannot decrement invalid vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement invalid vector<bool> iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2325, 0); } while (false); } ; } while (false);
#line 2326 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
 #line 2327 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

			this->_Myoff = _VBITS - 1;
			--this->_Myptr;
			}
		}

	void _Inc()
		{	
		if (this->_Myoff < _VBITS - 1)
			++this->_Myoff;
		else
			{	
 
			do { if (this->_Getcont()) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2340, 0, "%s", "cannot increment value-initialized vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment value-initialized vector<bool> iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2340, 0); } while (false); } ; } while (false);
			do { if (this->_Valid(1) <= 0) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2342, 0, "%s", "cannot increment invalid vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment invalid vector<bool> iterator\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 2342, 0); } while (false); } ; } while (false);
#line 2343 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
 #line 2344 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

			this->_Myoff = 0;
			++this->_Myptr;
			}
		}
	};

template<class _Alvbase_wrapped>
	 _Vb_const_iterator<_Alvbase_wrapped> operator+(
		typename _Vb_const_iterator<_Alvbase_wrapped>::difference_type _Off,
		_Vb_const_iterator<_Alvbase_wrapped> _Right)
		{	
		return (_Right += _Off);
		}

	
template<class _Alvbase_wrapped>
	class _Vb_iterator
		: public _Vb_const_iterator<_Alvbase_wrapped>
	{	
public:
	using _Mybase = _Vb_const_iterator<_Alvbase_wrapped>;

	using _Reft = _Vb_reference<_Alvbase_wrapped>;
	using const_reference = bool;

	using iterator_category = random_access_iterator_tag;
	using value_type = bool;
	using difference_type = typename _Mybase::difference_type;
	using pointer = _Reft *;
	using reference = _Reft;

	_Vb_iterator()
		{	
		}

	_Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
		: _Mybase(_Ptr, _Mypvbool)
		{	
		}

	 reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Vb_iterator& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Vb_iterator operator++(int)
		{	
		_Vb_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Vb_iterator& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Vb_iterator operator--(int)
		{	
		_Vb_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Vb_iterator& operator+=(const difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	 _Vb_iterator operator+(const difference_type _Off) const
		{	
		_Vb_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Vb_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	 _Vb_iterator operator-(const difference_type _Off) const
		{	
		_Vb_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	 difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	 reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Alvbase_wrapped>
	 inline _Vb_iterator<_Alvbase_wrapped> operator+(
		typename _Vb_iterator<_Alvbase_wrapped>::difference_type _Off,
		_Vb_iterator<_Alvbase_wrapped> _Right)
		{	
		return (_Right += _Off);
		}

		
template<class _Alloc>
	class _Vb_val
		: public _Container_base
	{	
public:
	using _Alproxy = _Rebind_alloc_t<_Alloc, _Container_proxy>;
	using _Alproxy_traits = allocator_traits<_Alproxy>;
	using _Alvbase = _Rebind_alloc_t<_Alloc, _Vbase>;
	using _Alvbase_traits = allocator_traits<_Alvbase>;
	using _Vectype = vector<_Vbase, _Alvbase>;
	using _Alvbase_wrapped = _Wrap_alloc<_Alvbase>;
	using size_type = typename _Alvbase_traits::size_type;

	_Vb_val() noexcept(is_nothrow_default_constructible_v<_Vectype>)
		: _Myvec()
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(const _Alloc& _Al) noexcept(is_nothrow_constructible_v<_Vectype, _Alvbase>)
		: _Myvec(static_cast<_Alvbase>(_Al))
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(size_type _Count, const bool& _Val)
		: _Myvec(_Nw(_Count), static_cast<_Vbase>(_Val ? -1 : 0))
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al)
		: _Myvec(_Nw(_Count), static_cast<_Vbase>(_Val ? -1 : 0), static_cast<_Alvbase>(_Al))
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(const _Vb_val& _Right)
		: _Myvec(_Right._Myvec),
			_Mysize(_Right._Mysize)
		{	
		_Alloc_proxy();
		}

	_Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
		: _Myvec(_Right._Myvec, static_cast<_Alvbase>(_Al)),
			_Mysize(_Right._Mysize)
		{	
		_Alloc_proxy();
		}

	_Vb_val(_Vb_val&& _Right) noexcept(is_nothrow_move_constructible_v<_Vectype>)
		: _Myvec(::std:: move(_Right._Myvec)),
			_Mysize(_Right._Mysize)
		{	
		_Right._Mysize = 0;
		_Alloc_proxy();
		}

	_Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
		noexcept(is_nothrow_constructible_v<_Vectype, _Vectype, _Alvbase>)
		: _Myvec(::std:: move(_Right._Myvec), static_cast<_Alvbase>(_Al)),
			_Mysize(_Right._Mysize)
		{	
		_Right._Mysize = 0;
		_Alloc_proxy();
		}

	~_Vb_val() noexcept
		{	
		_Free_proxy();
		}

 








#line 2546 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
	void _Alloc_proxy()
		{	
		_Alproxy _Proxy_allocator(_Myvec._Getal());
		this->_Myproxy = _Unfancy(_Proxy_allocator.allocate(1));
		_Alproxy_traits::construct(_Proxy_allocator, this->_Myproxy, _Container_proxy());
		this->_Myproxy->_Mycont = this;
		}

	void _Free_proxy()
		{	
		_Alproxy _Proxy_allocator(_Myvec._Getal());
		this->_Orphan_all();
		_Alproxy_traits::destroy(_Proxy_allocator, this->_Myproxy);
		_Deallocate_plain(_Proxy_allocator, this->_Myproxy);
		this->_Myproxy = nullptr;
		}
 #line 2563 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

	static size_type _Nw(size_type _Count)
		{	
		return ((_Count + _VBITS - 1) / _VBITS);
		}

	_Vectype _Myvec;	
	size_type _Mysize;	
	};

		
template<class _Alloc>
	class vector<bool, _Alloc>
		: public _Vb_val<_Alloc>
	{	
public:
	static_assert(!0 || is_same_v<bool, typename _Alloc::value_type>,
		"vector<bool, Allocator>" " requires that Allocator's value_type match " "bool" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	using _Mybase = _Vb_val<_Alloc>;
	using _Alvbase_wrapped = typename _Mybase::_Alvbase_wrapped;
	using _Alvbase = typename _Mybase::_Alvbase;
	using _Alvbase_traits = typename _Mybase::_Alvbase_traits;

	using size_type = typename _Alvbase_traits::size_type;
	using difference_type = typename _Alvbase_traits::difference_type;
	using allocator_type = _Alloc;

	using reference = _Vb_reference<_Alvbase_wrapped>;
	using const_reference = bool;
	using value_type = bool;

	using _Reft = reference;
	using iterator = _Vb_iterator<_Alvbase_wrapped>;
	using const_iterator = _Vb_const_iterator<_Alvbase_wrapped>;

	using pointer = iterator;
	using const_pointer = const_iterator;
	using reverse_iterator = ::std:: reverse_iterator<iterator>;
	using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

	static const int _VBITS = ::std:: _VBITS;
	enum {_EEN_VBITS = _VBITS};	

	vector() noexcept(is_nothrow_default_constructible_v<_Mybase>) 
		: _Mybase()
		{	
		}

	explicit vector(const _Alloc& _Al)
		noexcept(is_nothrow_constructible_v<_Mybase, const _Alloc&>) 
		: _Mybase(_Al)
		{	
		}

	explicit vector(__declspec(guard(overflow)) size_type _Count, const _Alloc& _Al = _Alloc())
		: _Mybase(_Count, false, _Al)
		{	
		_Trim(_Count);
		}

	vector(__declspec(guard(overflow)) size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
		: _Mybase(_Count, _Val, _Al)
		{	
		_Trim(_Count);
		}

	vector(const vector& _Right)
		: _Mybase(_Right)
		{	
		}

	vector(const vector& _Right, const _Alloc& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_BConstruct(_First, _Last);
		}

	template<class _Iter>
		void _BConstruct(_Iter _First, _Iter _Last)
		{	
		insert(begin(), _First, _Last);
		}

	vector(vector&& _Right)
		noexcept(is_nothrow_move_constructible_v<_Mybase>) 
		: _Mybase(::std:: move(_Right))
		{	
		this->_Swap_all(_Right);
		}

	vector(vector&& _Right, const _Alloc& _Al)
		noexcept(is_nothrow_constructible_v<_Mybase, _Mybase, const _Alloc&>)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		const bool _Swap_iterators = _Alvbase_traits::is_always_equal::value
			|| this->_Myvec._Getal() == _Right._Myvec._Getal();
		if (_Swap_iterators)
			{
			this->_Swap_all(_Right);
			}
		}

	vector& operator=(vector&& _Right)
		noexcept(is_nothrow_move_assignable_v<_Mybase>) 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			clear();

			const bool _Reload = _Alvbase_traits::propagate_on_container_move_assignment::value
				&& !_Alvbase_traits::is_always_equal::value
				&& this->_Myvec._Getal() != _Right._Myvec._Getal();

			if (_Reload)
				{
				this->_Free_proxy();
				}

			this->_Myvec = ::std:: move(_Right._Myvec);

			if (_Reload)
				{
				this->_Alloc_proxy();
				}

			this->_Mysize = _Right._Mysize;
			_Right._Mysize = 0;

			const bool _Swap_iterators = _Alvbase_traits::is_always_equal::value
				|| this->_Myvec._Getal() == _Right._Myvec._Getal();
			if (_Swap_iterators)
				{
				this->_Swap_all(_Right);
				}
			}
		return (*this);
		}

	template<class... _Valty>
		decltype(auto) emplace_back(_Valty&&... _Val)
		{	
		bool _Tmp(::std:: forward<_Valty>(_Val)...);
		push_back(_Tmp);



#line 2718 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
		}

	template<class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&&... _Val)
		{	
		bool _Tmp(::std:: forward<_Valty>(_Val)...);
		return (insert(_Where, _Tmp));
		}

	vector(initializer_list<bool> _Ilist,
			const _Alloc& _Al = allocator_type())
		: _Mybase(0, false, _Al)
		{	
		insert(begin(), _Ilist.begin(), _Ilist.end());
		}

	vector& operator=(initializer_list<bool> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

	void assign(initializer_list<bool> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		}

	iterator insert(const_iterator _Where,
			initializer_list<bool> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	~vector() noexcept
		{	
		}

	vector& operator=(const vector& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			this->_Orphan_all();

			const bool _Reload = _Alvbase_traits::propagate_on_container_copy_assignment::value
				&& this->_Myvec._Getal() != _Right._Myvec._Getal();

			if (_Reload)
				{
				this->_Free_proxy();
				}

			this->_Myvec = _Right._Myvec;

			if (_Reload)
				{
				this->_Alloc_proxy();
				}

			this->_Mysize = _Right._Mysize;
			}

		return (*this);
		}

	void reserve(__declspec(guard(overflow)) size_type _Count)
		{	
		this->_Myvec.reserve(this->_Nw(_Count));
		}

	 size_type capacity() const noexcept
		{	
		return (this->_Myvec.capacity() * _VBITS);
		}

	 iterator begin() noexcept
		{	
		return (iterator(this->_Myvec.data(), this));
		}

	 const_iterator begin() const noexcept
		{	
		return (const_iterator(this->_Myvec.data(), this));
		}

	 iterator end() noexcept
		{	
		return (begin() + static_cast<difference_type>(this->_Mysize));
		}

	 const_iterator end() const noexcept
		{	
		return (begin() + static_cast<difference_type>(this->_Mysize));
		}

	 const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	 const_iterator cend() const noexcept
		{	
		return (end());
		}

	 const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	 const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	void shrink_to_fit()
		{	
		if (this->_Myvec.capacity() != this->_Myvec.size())
			{	
			this->_Orphan_all();
			this->_Myvec.shrink_to_fit();
			}
		}

	iterator _Make_iter(const_iterator _Where)
		{	
		iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += _Where - begin();
		return (_Tmp);
		}

	 reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	 const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	 reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	 const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	void resize(__declspec(guard(overflow)) size_type _Newsize, bool _Val = false)
		{	
		if (size() < _Newsize)
			_Insert_n(end(), _Newsize - size(), _Val);
		else if (_Newsize < size())
			erase(begin() + static_cast<difference_type>(_Newsize), end());
		}

	 size_type size() const noexcept
		{	
		return (this->_Mysize);
		}

	 size_type max_size() const noexcept
		{	
		constexpr size_type _Diff_max = static_cast<size_type>((numeric_limits<difference_type>::max)());
		const size_type _Ints_max = this->_Myvec.max_size();
		if (_Ints_max > _Diff_max / _VBITS)
			{	
			return (_Diff_max);
			}

		
		return (_Ints_max * _VBITS);
		}

	 bool empty() const noexcept
		{	
		return (size() == 0);
		}

	 allocator_type get_allocator() const noexcept
		{	
		return (static_cast<allocator_type>(this->_Myvec.get_allocator()));
		}

	 const_reference at(size_type _Off) const
		{	
		if (size() <= _Off)
			_Xran();
		return ((*this)[_Off]);
		}

	 reference at(size_type _Off)
		{	
		if (size() <= _Off)
			_Xran();
		return ((*this)[_Off]);
		}

	 const_reference operator[](size_type _Off) const
		{	
		const_iterator _It = begin();
		_It._Advance(_Off);
		return (*_It);
		}

	 reference operator[](size_type _Off)
		{	
		iterator _It = begin();
		_It._Advance(_Off);
		return (*_It);
		}

	 reference front()
		{	
		return (*begin());
		}

	 const_reference front() const
		{	
		return (*begin());
		}

	 reference back()
		{	
		return (*(end() - 1));
		}

	 const_reference back() const
		{	
		return (*(end() - 1));
		}

	void push_back(const bool& _Val)
		{	
		insert(end(), _Val);
		}

	void pop_back()
		{	
		erase(end() - 1);
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		void assign(_Iter _First, _Iter _Last)
		{	
		erase(begin(), end());
		insert(begin(), _First, _Last);
		}

	void assign(__declspec(guard(overflow)) size_type _Count, const bool& _Val)
		{	
		erase(begin(), end());
		_Insert_n(begin(), _Count, _Val);
		}

	iterator insert(const_iterator _Where, const bool& _Val)
		{	
		return (_Insert_n(_Where, static_cast<size_type>(1), _Val));
		}

	iterator insert(const_iterator _Where, __declspec(guard(overflow)) size_type _Count,
		const bool& _Val)
		{	
		return (_Insert_n(_Where, _Count, _Val));
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		difference_type _Off = _Where - begin();
		_Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
		return (begin() + _Off);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
				input_iterator_tag)
		{	
		difference_type _Off = _Where - begin();

		for (; _First != _Last; ++_First, (void)++_Off)
			insert(begin() + _Off, *_First);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
			forward_iterator_tag)
		{	
		_Adl_verify_range(_First, _Last);
		size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));
		size_type _Off = _Insert_x(_Where, _Count);
		_Copy_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last),
			begin() + static_cast<difference_type>(_Off));
		}

	iterator erase(const_iterator _Where_arg)
		{	
		iterator _Where = _Make_iter(_Where_arg);
		difference_type _Off = _Where - begin();

 
		do { if (end() > _Where) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 3026, 0, "%s", "vector<bool> erase iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> erase iterator outside range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 3026, 0); } while (false); } ; } while (false);
		::std:: copy(_Where + 1, end(), _Where);
		_Orphan_range(static_cast<size_type>(_Off), this->_Mysize);

 

#line 3033 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		_Trim(this->_Mysize - 1);
		return (begin() + _Off);
		}

	iterator erase(const_iterator _First_arg,
		const_iterator _Last_arg)
		{	
		iterator _First = _Make_iter(_First_arg);
		iterator _Last = _Make_iter(_Last_arg);
		difference_type _Off = _First - begin();

		if (_First != _Last)
			{	
 
			do { if (_Last >= _First && end() >= _Last) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 3048, 0, "%s", "vector<bool> erase iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> erase iterator outside range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 3048, 0); } while (false); } ; } while (false);
			iterator _Next = ::std:: copy(_Last, end(), _First);
			const auto _Newsize = static_cast<size_type>(_Next - begin());
			_Orphan_range(_Newsize, this->_Mysize);
			_Trim(_Newsize);

 


#line 3058 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
			}
		return (begin() + _Off);
		}

	void clear() noexcept
		{	
		erase(begin(), end());
		}

	void flip() noexcept
		{	
		for (auto& _Elem : this->_Myvec)
			{
			_Elem = ~_Elem;
			}

		_Trim(this->_Mysize);
		}

	void swap(vector& _Right) noexcept 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			this->_Swap_all(_Right);
			this->_Myvec.swap(_Right._Myvec);
			::std:: swap(this->_Mysize, _Right._Mysize);
			}
		}

	static void swap(reference _Left, reference _Right) noexcept
		{	
		bool _Val = _Left;	
		_Left = _Right;
		_Right = _Val;
		}

	friend hash<vector<bool, _Alloc>>;

	iterator _Insert_n(const_iterator _Where,
		size_type _Count, const bool& _Val)
		{	
		size_type _Off = _Insert_x(_Where, _Count);
		const auto _Result = begin() + static_cast<difference_type>(_Off);
		::std:: fill(_Result, _Result + static_cast<difference_type>(_Count), _Val);
		return (_Result);
		}

	size_type _Insert_x(const_iterator _Where, size_type _Count)
		{	
		difference_type _Off = _Where - begin();

 
		do { if (end() >= _Where) { } else { do { (void) ((1 != _CrtDbgReport(2, "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 3110, 0, "%s", "vector<bool> insert iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> insert iterator outside range\"", __LPREFIX( __FUNCTION__), L"c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector", 3110, 0); } while (false); } ; } while (false);
		bool _Realloc = capacity() - size() < _Count;
 #line 3113 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

		if (_Count != 0)
			{
			if (max_size() - size() < _Count)
				{
				_Xlen();	
				}

			
			this->_Myvec.resize(this->_Nw(size() + _Count), 0);
			if (empty())
				{
				this->_Mysize += _Count;
				}
			else
				{	
				iterator _Oldend = end();
				this->_Mysize += _Count;
				::std:: copy_backward(begin() + _Off, _Oldend, end());
				}


			_Orphan_range(static_cast<size_type>(_Realloc ? 0 : _Off), this->_Mysize);
#line 3137 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
			}

		return (static_cast<size_type>(_Off));
		}

 
	void _Orphan_range(size_type _Offlo, size_type _Offhi) const
		{	
		_Lockit _Lock(3);
		auto _Base = const_cast<_Vbase *>(this->_Myvec.data());

		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
		if (_Pnext != nullptr)
			while (*_Pnext != nullptr)
				{	
				size_type _Off = static_cast<size_type>(_VBITS * ((*_Pnext)->_Myptr - _Base))
					+ (*_Pnext)->_Myoff;
				if (_Off < _Offlo || _Offhi < _Off)
					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
				else
					{	
					(*_Pnext)->_Clrcont();
					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
					}
				}
		}

 



#line 3169 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"

	void _Trim(size_type _Size)
		{	
		if (max_size() < _Size)
			_Xlen();	
		const size_type _Words = this->_Nw(_Size);

		if (_Words < this->_Myvec.size())
			this->_Myvec.erase(this->_Myvec.begin() + static_cast<difference_type>(_Words),
				this->_Myvec.end());
		this->_Mysize = _Size;
		_Size %= _VBITS;
		if (0 < _Size)
			this->_Myvec[_Words - 1] &= (static_cast<_Vbase>(1) << _Size) - 1;
		}

	[[noreturn]] void _Xlen() const
		{	
		_Xlength_error("vector<bool> too long");
		}

	[[noreturn]] void _Xran() const
		{	
		_Xout_of_range("invalid vector<bool> subscript");
		}
	};

template<class _Alloc>
	 inline bool operator==(const vector<bool, _Alloc>& _Left,
		const vector<bool, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& _Left._Myvec == _Right._Myvec);
	}

template<class _Alloc>
	 inline bool operator!=(const vector<bool, _Alloc>& _Left,
		const vector<bool, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

	
template<class _Alloc>
	struct hash<vector<bool, _Alloc>>
	{	
	 typedef vector<bool, _Alloc> argument_type;
	 typedef size_t result_type;

	 size_t operator()(const vector<bool, _Alloc>& _Keyval) const noexcept
		{	
		return (_Hash_array_representation(_Keyval._Myvec.data(), _Keyval._Myvec.size()));
		}
	};






#line 3230 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3237 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"
#line 3238 "c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\tools\\msvc\\14.16.27023\\include\\vector"





#line 7 "d:\\vsprojects\\openglproject\\openglproject\\physics.h"



class Collider;
struct Ray;
struct RayHit;


class Actor;

class Physics
{
public:
	Physics();
	~Physics();

	static Physics* Instance() {
		return instance;
	}

	void AddCollider(Collider* collider) {
		if (collider != nullptr) {
			colliders.push_back(collider);
		}
	}
	
	
	RayHit RayCast(const Ray& ray);
private:
	static Physics* instance;
	std::vector<Collider*> colliders;
};

struct Ray {
	glm::vec3 origin;
	glm::vec3 direction;
	float maxDistance;
};

struct RayHit {
	glm::vec3 hitNormal;
	glm::vec3 hitLocation;
	float hitDistance;
	bool hitSmth;
	Collider* collider;
};


class Collider {
public:
	virtual RayHit RayCast(const Ray& ray) = 0;

	Collider() {

	}

	Actor* GetOwner() {
		return owner;
	}

	virtual ~Collider() {}
protected:
	Actor* owner;
	friend class Actor;
};

class PlaneCollider : public Collider{
public:
	virtual RayHit RayCast(const Ray& ray) override;
	Transform transform;
	glm::vec2 dimensions;
	glm::vec3 origin;
};
#line 5 "d:\\vsprojects\\openglproject\\openglproject\\actor.h"
#line 1 "d:\\vsprojects\\openglproject\\openglproject\\mesh.h"
#pragma once





using namespace std;

struct Vertex {
	glm::vec3 position;
	glm::vec3 normal;
	glm::vec2 texCoords;
};

struct Texture {
	GLuint id;
	string type;
};

class Mesh
{
public:
	Mesh(vector<Vertex> vertices, vector<GLuint> indicies, vector<Texture> textures);
	
	void Draw(Shader shader);

	~Mesh();

private:
	GLuint VAO, VBO, EBO;
	vector<Vertex> vertices;
	vector<GLuint> indices;
	vector<Texture> textures;

	void SetupMesh();

	friend class MeshRenderer;
};


class MeshRenderer {
public:
	MeshRenderer(Mesh* mesh, Shader* shader) {
		this->mesh = mesh;
		this->shader = shader;
	}

	void Draw();

	Shader* GetShader() {
		return shader;
	}

private:
	Shader* shader;
	Mesh* mesh;
};
#line 6 "d:\\vsprojects\\openglproject\\openglproject\\actor.h"

class Actor
{
public:
	Actor();
	~Actor();

	void SetCollider(Collider* collider);

	Transform transform;
protected:
	Collider* collider;
	virtual void OnRayHit(RayHit hit) {}

	friend class Collider;
};

class Portal : public Actor
{
public:
	MeshRenderer meshRenderer;
	uint8_t stencilVal;
	
	vector<Portal*> cbsPoratals;

	size_t GetMaxRenderDepth() { return maxRenderDepth; }

	void GetMaxRenderDepth(size_t v) {
		if (v > 0)
		maxRenderDepth = v;
	}

private:
	size_t maxRenderDepth = 1;
};
#line 4 "d:\\vsprojects\\openglproject\\openglproject\\player.h"
#line 1 "d:\\vsprojects\\openglproject\\openglproject\\camera.h"
#pragma once



enum class RenderMode {
	PERSPECTIVE,
	ORTHOGRAPHIC
};

class Camera
{
protected:
	Transform transform;
	float fov = 45.0f;
	float aspectRatio = 16.0f/9.0f;
	float nearClippingPlane = 0.01f;
	float farClippingPlane = 100.0f;
	RenderMode renderMode = RenderMode::PERSPECTIVE;
public:
	Camera();
	~Camera();

	
	
	Transform GetTransform() const {
		return transform;
	}

	void SetTransform(Transform transform) {
		this->transform = transform;
	}

	glm::mat4 GetWorldToViewMatrix() const;

	glm::mat4 GetProjectionMatrix() const;

	void SetAspectRatio(float ratio) {
		if (ratio > 0.1)
			aspectRatio = ratio;
	}

};

#line 5 "d:\\vsprojects\\openglproject\\openglproject\\player.h"

class Player : public Actor
{
public:
	Player();
	~Player();

	Player(Camera* camera) {
		this->camera = camera;
	}

	Camera* camera;

	virtual void OnRayHit(RayHit hit) override;

	void ProcessInput(glm::vec2 movementInput, glm::vec2 camInput);

protected:
	
	float movementSpeed = 10.0f;
	
	float lookSpeed = 60.0f;
	float sensetivity = 0.1f;
	float maxPitch = 90.0f;
	float minPitch = -90.0f;

	glm::vec3 euler = glm::vec3(0.0f, 0.0f, 0.0f);
};

#line 7 "d:\\vsprojects\\openglproject\\openglproject\\playercontroller.h"

class PlayerController
{
protected:
	Player* player;
	
	float movementSpeed = 10.0f; 
	
	float lookSpeed = 60.0f;
	float sensetivity = 0.1f;
	float maxPitch = 90.0f;
	float minPitch = -90.0f;

	glm::vec3 euler = glm::vec3(0.0f, 0.0f, 0.0f);
public:
	PlayerController(Player* player);
	~PlayerController();

	void ProcessInput(GLFWwindow* window, float mouseXDelta, float mouseYDelta) {

		glm::vec2 movementInput(0.0f, 0.0f);

		
		glm::vec3 deltaPos(0.0f, 0.0f, 0.0f);
		if (glfwGetKey(window, 87) == 1)
			movementInput.y += 1.0f;
		if (glfwGetKey(window, 83) == 1)
			movementInput.y -= 1.0f;
		if (glfwGetKey(window, 65) == 1)
			movementInput.x -= 1.0f;
		if (glfwGetKey(window, 68) == 1)
			movementInput.x += 1.0f;

		player->ProcessInput(glm::normalize(movementInput), glm::vec2(mouseXDelta, mouseYDelta));

	}

	Player* GetPlayer() {
		return player;
	}
};

#line 19 "d:\\vsprojects\\openglproject\\openglproject\\main.cpp"



const int MAX_PORTAL_DEPTH = 8;

void DrawScene();



void PrepareDrawPortal(const Transform& p1, const uint8_t stencilVal);
void DrawPortal(const Transform& p1, const Transform& p2, const glm::mat4& worldToView, const uint8_t stencilVal);

Camera camera;
Player player(&camera);
PlayerController pc(&player);


Transform bulbTransform;
glm::vec3 lightColor(1.0f, 1.0f, 1.0f);
glm::vec3 objectColor(1.0f, 0.5f, 0.31f);

static int screenWidth = 800, screenHeight = 600;



void framebufferSizeCallback(GLFWwindow* window, int width, int height) {
	screenWidth = width;
	screenHeight = height;
	glad_glViewport(0, 0, width, height);
	camera.SetAspectRatio((float)width / (float)height);
}

static float oldMouseX;
static float oldMouseY;
void processInput(GLFWwindow* window, Shader* shader = 0) {
	if (glfwGetKey(window, 256) == 1)
		glfwSetWindowShouldClose(window, true);

	if (glfwGetKey(window, 80) == 1) {
		glm::vec3 p = camera.GetTransform().position;
		cout << "pos(x, y, z) = " << p.x << ", " << p.y << ", " << p.z << endl;
	}

	
	double mouseX, mouseY;
	glfwGetCursorPos(window, &mouseX, &mouseY);
	pc.ProcessInput(window,(float)mouseX - oldMouseX, (float)mouseY - oldMouseY);
	oldMouseX = (float)mouseX;
	oldMouseY = (float)mouseY;
	
	if (shader) {
		const float alphaDelta = 0.005f;
		float newAlpha = shader->getFloat("mixAlpha");
		if (glfwGetKey(window, 265) == 1)
			newAlpha += alphaDelta;
		if (glfwGetKey(window, 264) == 1)
			newAlpha -= alphaDelta;

		if (newAlpha < 0.0f)
			newAlpha = 0.0f;
		else if (newAlpha > 1.0f)
			newAlpha = 1.0f;

		shader->setFloat("mixAlpha", newAlpha);
	}
}



glm::vec3 cubePositions[] = {
	glm::vec3(0.0f,  3.0f,  0.0f),
	glm::vec3(2.0f,  5.0f, 15.0f),
	glm::vec3(-1.5f, -2.2f, 2.5f),
	glm::vec3(-3.8f, -2.0f, 12.3f),
	glm::vec3(2.4f, -0.4f, 3.5f),
	glm::vec3(-1.7f,  3.0f, 7.5f),
	glm::vec3(1.3f, -2.0f, 2.5f),
	glm::vec3(1.5f,  2.0f, 2.5f),
	glm::vec3(1.5f,  0.2f, 1.5f),
	glm::vec3(-1.3f,  1.0f, 1.5f)
};

glm::vec3 grassPositions[] = {
	glm::vec3(0.2f, 0.0f, 0.1f),
	glm::vec3(0.25f, 0.0f, 0.19f),
	glm::vec3(-0.25f, 0.0f, 0.19f),
	glm::vec3(-0.25f, 0.0f, -0.19f),
	glm::vec3(-0.5f, 0.0f, -0.34f),
	glm::vec3(-0.5f, 0.0f, 0.34f),
	glm::vec3(0.5f, 0.0f, 0.34f),
	glm::vec3(0.5f, 0.0f, 0.34f)
};
glm::vec3 windowPositions[] = {
	glm::vec3(0, 0, 2.0f),
	glm::vec3(0.5, 0, 1.0f),
	glm::vec3(0.25f, 0, -1.0f),
	glm::vec3(-0.25f, 0, 1.5f),
};


glm::mat4 worldToView;
glm::mat4 projection;


MeshRenderer* crateRenderer;
MeshRenderer* windowRenderer;
MeshRenderer* floorRenderer;
MeshRenderer* grassRenderer;
MeshRenderer* bulbRenderer;
MeshRenderer* portalRenderer;



int main() {
	
	glfwInit();
	glfwWindowHint(0x00022002, 3);
	glfwWindowHint(0x00022003, 3);
	glfwWindowHint(0x00022008, 0x00032001);

	
	GLFWwindow* window = glfwCreateWindow(800, 600, "LearnOpenGL", 0, 0);
	if (window == 0) {
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);

	
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
		std::cout << "Failed to initialie GLAD" << std::endl;
		return -1;
	}

	
	glfwSetFramebufferSizeCallback(window, framebufferSizeCallback);
	
	glad_glViewport(0, 0, screenWidth, screenHeight);

	camera.SetAspectRatio((float)screenWidth / (float)screenHeight);

	
	Texture diffTex;
	diffTex.type = "texture_diffuse";
	glad_glGenTextures(1, &diffTex.id);
	glad_glActiveTexture(0x84C0);
	glad_glBindTexture(0x0DE1, diffTex.id);
	
	glad_glTexParameteri(0x0DE1, 0x2802, 0x2901);
	glad_glTexParameteri(0x0DE1, 0x2803, 0x2901);
	glad_glTexParameteri(0x0DE1, 0x2801, 0x2601);
	glad_glTexParameteri(0x0DE1, 0x2800, 0x2601);
	
	int width, height, nrChannels;
	stbi_set_flip_vertically_on_load(true);
	unsigned char* data = stbi_load("C:\\Users\\123\\Desktop\\container2.jpg", &width, &height, &nrChannels, 0);
	if (data) {
		glad_glTexImage2D(0x0DE1, 0, 0x1907, width, height, 0, 0x1907, 0x1401, data);
		glad_glGenerateMipmap(diffTex.id);
	}
	else {
		std::cout << "Failed to load texture" << endl;
	}
	
	stbi_image_free(data);

	
	Texture specTex;
	specTex.type = "texture_specular";
	glad_glGenTextures(1, &specTex.id);
	glad_glBindTexture(0x0DE1, specTex.id);
	glad_glTexParameteri(0x0DE1, 0x2802, 0x2901);
	glad_glTexParameteri(0x0DE1, 0x2803, 0x2901);
	glad_glTexParameteri(0x0DE1, 0x2801, 0x2601);
	glad_glTexParameteri(0x0DE1, 0x2800, 0x2601);
	data = stbi_load("C:\\Users\\123\\Desktop\\container2spec.jpg", &width, &height, &nrChannels, 0);
	if (data) {
		glad_glTexImage2D(0x0DE1, 0, 0x1907, width, height, 0, 0x1907, 0x1401, data);
		glad_glGenerateMipmap(specTex.id);
	}
	else {
		std::cout << "Failed to load texture2" << endl;
	}
	
	stbi_image_free(data);

	
	Texture grassTex;
	grassTex.type = "texture_diffuse";
	glad_glGenTextures(1, &grassTex.id);
	glad_glBindTexture(0x0DE1, grassTex.id);
	glad_glTexParameteri(0x0DE1, 0x2802, 0x812F);
	glad_glTexParameteri(0x0DE1, 0x2803, 0x812F);
	glad_glTexParameteri(0x0DE1, 0x2801, 0x2601);
	glad_glTexParameteri(0x0DE1, 0x2800, 0x2601);
	data = stbi_load("D:\\MyFiles\\SomeStuff\\grass.png", &width, &height, &nrChannels, 0);
	if (data) {
		glad_glTexImage2D(0x0DE1, 0, 0x1908, width, height, 0, 0x1908, 0x1401, data);
		glad_glGenerateMipmap(grassTex.id);
	}
	else {
		std::cout << "Failed to load texture2" << endl;
	}
	
	stbi_image_free(data);

	
	Texture windowTex;
	grassTex.type = "texture_diffuse";
	glad_glGenTextures(1, &windowTex.id);
	glad_glBindTexture(0x0DE1, windowTex.id);
	glad_glTexParameteri(0x0DE1, 0x2802, 0x812F);
	glad_glTexParameteri(0x0DE1, 0x2803, 0x812F);
	glad_glTexParameteri(0x0DE1, 0x2801, 0x2601);
	glad_glTexParameteri(0x0DE1, 0x2800, 0x2601);
	data = stbi_load("D:\\MyFiles\\SomeStuff\\window.png", &width, &height, &nrChannels, 0);
	if (data) {
		glad_glTexImage2D(0x0DE1, 0, 0x1908, width, height, 0, 0x1908, 0x1401, data);
		glad_glGenerateMipmap(windowTex.id);
	}
	else {
		std::cout << "Failed to load texture2" << endl;
	}
	
	stbi_image_free(data);

	
	float vertices[] = {
	
	
	-0.5f, -0.5f, -0.5f, 0.0f, 0.0f, -1.0f,  0.0f, 0.0f, 
	0.5f,  0.5f, -0.5f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f, 
	0.5f, -0.5f, -0.5f, 0.0f, 0.0f, -1.0f, 1.0f, 0.0f, 
	0.5f,  0.5f, -0.5f, 0.0f, 0.0f, -1.0f, 1.0f, 1.0f, 
	-0.5f, -0.5f, -0.5f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 
	-0.5f,  0.5f, -0.5f, 0.0f, 0.0f, -1.0f, 0.0f, 1.0f, 
	
	-0.5f, -0.5f,  0.5f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
	0.5f, -0.5f,  0.5f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 
	0.5f,  0.5f,  0.5f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 
	0.5f,  0.5f,  0.5f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 
	-0.5f,  0.5f,  0.5f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 
	-0.5f, -0.5f,  0.5f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 
	
	-0.5f,  0.5f,  0.5f, -1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 
	-0.5f,  0.5f, -0.5f, -1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 
	-0.5f, -0.5f, -0.5f, -1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 
	-0.5f, -0.5f, -0.5f, -1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 
	-0.5f, -0.5f,  0.5f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 
	-0.5f,  0.5f,  0.5f, -1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 
	
	0.5f,  0.5f,  0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 
	0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 
	0.5f,  0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 
	0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 
	0.5f,  0.5f,  0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 
	0.5f, -0.5f,  0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 
	
	-0.5f, -0.5f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f, 1.0f, 
	0.5f, -0.5f, -0.5f, 0.0f, -1.0f, 0.0f, 1.0f, 1.0f, 
	0.5f, -0.5f,  0.5f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f, 
	0.5f, -0.5f,  0.5f, 0.0f, -1.0f, 0.0f, 1.0f, 0.0f, 
	-0.5f, -0.5f,  0.5f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 
	-0.5f, -0.5f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f, 1.0f, 
	
	-0.5f,  0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 
	0.5f,  0.5f,  0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 
	0.5f,  0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 
	0.5f,  0.5f,  0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 
	-0.5f,  0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 
	-0.5f,  0.5f,  0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f  
	};
	unsigned int indices[] = {
		0,	1,	2,
		3,	4,	5,
		6,	7,	8,
		9,	10, 11,
		12, 13, 14,
		15, 16, 17,
		18, 19, 20,
		21, 22, 23,
		24, 25, 26,
		27, 28, 29,
		30, 31, 32,
		33, 34, 35
	};

	Vertex* v = (Vertex*)vertices;
	vector<Vertex> verts(v, v+36);
	vector<GLuint> inds(indices, indices + 36);
	vector<Texture> texs;
	texs.push_back(diffTex);
	texs.push_back(specTex);
	Mesh container = Mesh(verts, inds, texs);

	
	verts.clear();
	verts.push_back({glm::vec3(1, 0, -1), glm::vec3(0,1,0), glm::vec2(1, 1)});
	verts.push_back({glm::vec3(1, 0, 1), glm::vec3(0,1,0), glm::vec2(1, 0)});
	verts.push_back({glm::vec3(-1, 0, 1), glm::vec3(0,1,0), glm::vec2(0, 0)});
	verts.push_back({glm::vec3(-1, 0, -1), glm::vec3(0,1,0), glm::vec2(0, 1)});
	inds.clear();
	inds.push_back(0);
	inds.push_back(1);
	inds.push_back(2);
	inds.push_back(2);
	inds.push_back(3);
	inds.push_back(0);
	Mesh floor = Mesh(verts, inds, texs);

	
	verts.clear();
	verts.push_back({ glm::vec3(0.5f, -0.5f, 0.0f), glm::vec3(0,0,-1), glm::vec2(1, 0) });
	verts.push_back({ glm::vec3(0.5f, 0.5f, 0.0f), glm::vec3(0,0,-1), glm::vec2(1, 1) });
	verts.push_back({ glm::vec3(-0.5f, 0.5f, 0.0f), glm::vec3(0,0,-1), glm::vec2(0, 1) });
	verts.push_back({ glm::vec3(-0.5f, -0.5f, 0.0f), glm::vec3(0,0,-1), glm::vec2(0, 0) });
	texs.clear();
	texs.push_back(grassTex);
	Mesh grass = Mesh(verts, inds, texs);

	
	texs.clear();
	texs.push_back(windowTex);
	Mesh windowMesh = Mesh(verts, inds, texs);


	
	Shader sp = Shader("D:\\VSProjects\\OpenGLProject\\OpenGLProject\\VertexShader.vs", "D:\\VSProjects\\OpenGLProject\\OpenGLProject\\FragmenShader.fsf");

	
	Shader bulbSP = Shader("D:\\VSProjects\\OpenGLProject\\OpenGLProject\\BulbVertexShader.vs", "D:\\VSProjects\\OpenGLProject\\OpenGLProject\\BulbFragmentShader.fsf");

	
	Shader grassShader = Shader("D:\\VSProjects\\OpenGLProject\\OpenGLProject\\VertexShader.vs", "D:\\VSProjects\\OpenGLProject\\OpenGLProject\\GrassFragmentShader.fsf");

	
	Shader windowShader = Shader("D:\\VSProjects\\OpenGLProject\\OpenGLProject\\VertexShader.vs", "D:\\VSProjects\\OpenGLProject\\OpenGLProject\\WindowFragmentShader.fsf");


	
	crateRenderer = new MeshRenderer(&container, &sp);
	floorRenderer = new MeshRenderer(&floor, &sp);
	grassRenderer = new MeshRenderer(&grass, &grassShader);
	bulbRenderer = new MeshRenderer(&container, &bulbSP);
	windowRenderer = new MeshRenderer(&windowMesh, &windowShader);
	portalRenderer = new MeshRenderer(&windowMesh, &bulbSP);
	

	
	glfwSetInputMode(window, 0x00033001, 0x00034003);
	double mouseX, mouseY;
	glfwGetCursorPos(window, &mouseX, &mouseY);
	oldMouseX = (float)mouseX;
	oldMouseY = (float)mouseY;

	
	bulbTransform.position = glm::vec3(2.0f, 2.0f, 5.0f);
	bulbTransform.rotation.SetEulerAngles(glm::vec3(0.0f, 0.0f, 45.0f));
	bulbTransform.SetScale(glm::vec3(0.25f, 0.25f, 0.25f));

	
	{
		Transform t = camera.GetTransform();
		t.position = glm::vec3(0.0f, 0.0f, -3.0f);
		camera.SetTransform(t);
	}

	Time::Init();
	
	while (!glfwWindowShouldClose(window)) {
		Time::Update();
		
		
		processInput(window, &sp);

		
		{
			
			glad_glEnable(0x0B71);
			glad_glEnable(0x0BE2);
			glad_glBlendFunc(0x0302, 0x0303);
			
			
			glad_glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
			glad_glClear(0x00004000 | 0x00000100 | 0x00000400);

			
			worldToView = camera.GetWorldToViewMatrix();
			projection = camera.GetProjectionMatrix();
			DrawScene();

			
			
			{
				
				Transform p1;
				p1.position = glm::vec3(0.0f, 0.0f, 3.0f);

				
				Transform p2;
				p2.position = { 2.33557, 0, -2.97554 };
				p2.rotation = Rotator({ 0.0f, 180.0f, 0.0f });

				glad_glClear(0x00000400);
				glad_glEnable(0x0B90);
				PrepareDrawPortal(p1, 1);
				PrepareDrawPortal(p2, 2);
				
				DrawPortal(p1, p2, camera.GetWorldToViewMatrix(), 1);
				
				DrawPortal(p2, p1, camera.GetWorldToViewMatrix(), 2);
				glad_glDisable(0x0B90);

			}
		}

		
		
		glfwSwapBuffers(window);
		glfwPollEvents();
	}


	
	glfwTerminate();
	return 0;
}

void PrepareDrawPortal(const Transform& p1, const uint8_t stencilVal) {
	glad_glStencilFunc(0x0207, stencilVal, 0xFF);
	glad_glStencilOp(0, 0, 0x1E01);
	MeshRenderer* r = portalRenderer;
	Shader* sp = r->GetShader();

	glm::mat4 objectToWorld = p1.GetTransformMatrix();
	sp->use();
	sp->setMat4("worldToView", worldToView);
	sp->setMat4("projection", projection);
	sp->setMat4("objectToWorld", objectToWorld);
	sp->setVec3("lightColor", { 0.1f, 0.1f, 0.1f });
	r->Draw();
}

void DrawPortal(const Transform& p1, const Transform& p2, const glm::mat4& worldToView, const uint8_t stencilVal) {

	
	Rotator rot({ 0.0f, 180.0f, 0.0f });
	glm::mat4 newWTV;
	newWTV = p2.GetInverseTransformMatrix();
	newWTV = glm::mat4_cast(rot.GetQuaterion()) * newWTV;
	newWTV = p1.GetTransformMatrix() * newWTV;
	newWTV = worldToView * newWTV;

	::worldToView = newWTV;

	
	{
		glad_glClear(0x00000100);
		glad_glStencilFunc(0x0202, stencilVal, 0xFF);
		glad_glStencilOp(0x1E00, 0x1E00, 0x1E00);
		DrawScene();
	}
}



void DrawScene() {
	Shader* sp = crateRenderer->GetShader();
	
	sp->use();
	sp->setMat4("worldToView", worldToView);
	sp->setMat4("projection", projection);
	
	
	
	
	sp->setVec3("dirLight.color", lightColor * 0.5f + 0.5f);
	sp->setFloat("dirLight.intensity", 1.0f);
	sp->setVec3("dirLight.direction", glm::mat3(worldToView) * glm::vec3(0.0f, -1.0f, 0.0f));
	sp->setFloat("dirLight.ambientStrength", 0.2f);
	sp->setVec3("pointLight.position", worldToView * glm::vec4(bulbTransform.position, 1.0f));
	sp->setFloat("material.shiness", 32.0f);
	for (int i = 0; i < 10; i++) {
		Transform transform;
		transform.rotation.SetEulerAngles(glm::vec3(i* 20.0f, i*45.0f, 0.0f));
		transform.position = cubePositions[i];
		

		glm::mat4 objectToWorld = transform.GetTransformMatrix();
		crateRenderer->GetShader()->setMat4("objectToWorld", objectToWorld);
		glm::mat3 normalMatrix = glm::transpose(glm::inverse(glm::mat3(worldToView * objectToWorld)));
		sp->SetMat3("normalMatrix", normalMatrix);
		crateRenderer->Draw();
	}

	
	sp = floorRenderer->GetShader();
	sp->use();
	Transform transform;
	transform.position = glm::vec3(0, -0.5f, 3);
	transform.SetScale(glm::vec3(10));
	glm::mat4 objectToWorld = transform.GetTransformMatrix();
	sp->setMat4("objectToWorld", objectToWorld);
	glm::mat3 normalMatrix = glm::transpose(glm::inverse(glm::mat3(worldToView * objectToWorld)));
	sp->SetMat3("normalMatrix", normalMatrix);
	floorRenderer->Draw();

	
	sp = grassRenderer->GetShader();
	sp->use();
	sp->setMat4("worldToView", worldToView);
	sp->setMat4("projection", projection);
	for (int i = 0; i < 8; i++) {
		Transform transform;
		transform.rotation.SetEulerAngles(glm::vec3(0.0f, i*17.5f, 0.0f));
		transform.position = grassPositions[i];

		glm::mat4 objectToWorld = transform.GetTransformMatrix();
		sp->setMat4("objectToWorld", objectToWorld);
		glm::mat3 normalMatrix = glm::transpose(glm::inverse(glm::mat3(worldToView * objectToWorld)));
		sp->SetMat3("normalMatrix", normalMatrix);
		grassRenderer->Draw();
	}

	
	sp = bulbRenderer->GetShader();
	sp->use();
	
	sp->setMat4("worldToView", worldToView);
	sp->setMat4("projection", projection);
	sp->setVec3("lightColor", lightColor);
	sp->setMat4("objectToWorld", bulbTransform.GetTransformMatrix());
	bulbRenderer->Draw();

	
	if (false)
	{
		sp = windowRenderer->GetShader();
		sp->use();
		sp->setMat4("worldToView", worldToView);
		sp->setMat4("projection", projection);
		
		sort(windowPositions, windowPositions + 4,
			[](const glm::vec3& x, const glm::vec3& y) {
			float xDist = glm::length(camera.GetTransform().position - x);
			float yDist = glm::length(camera.GetTransform().position - y);
			return xDist > yDist;
		}
		);
		for (int i = 0; i < 4; i++) {
			Transform transform;
			
			transform.position = windowPositions[i];

			glm::mat4 objectToWorld = transform.GetTransformMatrix();
			sp->setMat4("objectToWorld", objectToWorld);
			glm::mat3 normalMatrix = glm::transpose(glm::inverse(glm::mat3(worldToView * objectToWorld)));
			sp->SetMat3("normalMatrix", normalMatrix);
			windowRenderer->Draw();
		}
	}
}

